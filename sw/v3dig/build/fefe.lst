

HI-TECH Software PIC18 PRO Macro Assembler V9.80 build 11162 
                                                                                               Wed Apr 02 12:41:09 2025

HI-TECH Software Omniscient Code Generator (PRO mode) build 11162
     1                           	processor	18F2550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	eeprom_data,global,class=EEDATA,delta=1
     6                           	psect	idataCOMRAM,global,class=CODE,delta=1
     7                           	psect	idataBANK0,global,class=CODE,delta=1
     8                           	psect	idataBANK1,global,class=CODE,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1
    52                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    53                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    54                           	psect	text34,global,reloc=2,class=CODE,delta=1
    55                           	psect	text35,global,reloc=2,class=CODE,delta=1
    56                           	psect	text36,global,reloc=2,class=CODE,delta=1
    57                           	psect	text37,global,reloc=2,class=CODE,delta=1
    58                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    59                           	psect	text38,global,reloc=2,class=CODE,delta=1
    60                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    61                           	psect	pa_nodes,global,class=CODE,delta=1
    62  0000                     prodl	equ	0xFF3
    63                           intcon	equ	0xFF2
    64                           intcon2	equ	0xFF1
    65                           wreg	equ	0xFE8
    66                           indf1	equ	0xFE7
    67                           postinc1	equ	0xFE6
    68                           postdec1	equ	0xFE5
    69                           fsr1h	equ	0xFE2
    70                           fsr1l	equ	0xFE1
    71                           indf2	equ	0xFDF
    72                           postinc2	equ	0xFDE
    73                           postdec2	equ	0xFDD
    74                           plusw2	equ	0xFDB
    75                           fsr2h	equ	0xFDA
    76                           fsr2l	equ	0xFD9
    77                           status	equ	0xFD8
    78                           
    79                           	psect	eeprom_data
    80  F00000  00 00 00 00 00 00  	db	0,0,0,0,0,0,0,0	;# 
      +       00 00              
    81  F00008  00 00 00 00 00 00  	db	0,0,0,0,0,0,0,1	;# 
      +       00 01              
    82  F00010  00 00 00 00 00 00  	db	0,0,0,0,0,0,0,0	;# 
      +       00 00              
    83  0000                     prodl	equ	0xFF3
    84                           intcon	equ	0xFF2
    85                           intcon2	equ	0xFF1
    86                           wreg	equ	0xFE8
    87                           indf1	equ	0xFE7
    88                           postinc1	equ	0xFE6
    89                           postdec1	equ	0xFE5
    90                           fsr1h	equ	0xFE2
    91                           fsr1l	equ	0xFE1
    92                           indf2	equ	0xFDF
    93                           postinc2	equ	0xFDE
    94                           postdec2	equ	0xFDD
    95                           plusw2	equ	0xFDB
    96                           fsr2h	equ	0xFDA
    97                           fsr2l	equ	0xFD9
    98                           status	equ	0xFD8
    99                           
   100                           	psect	idataCOMRAM
   101  00278A                     __pidataCOMRAM:
   102                           	opt stack 0
   103                           
   104                           ;initializer for _setInc
   105  00278A  01                 	db	1
   106                           
   107                           ;initializer for _pulsPin
   108  00278B  0F82               	dw	3970	;volatile
   109  00278D  D8                 	db	216
   110  00278E  00                 	db	0
   111  00278F  0F82               	dw	3970	;volatile
   112  002791  D9                 	db	217
   113  002792  00                 	db	0
   114  002793  0F82               	dw	3970	;volatile
   115  002795  B8                 	db	184
   116  002796  00                 	db	0
   117  002797  0F82               	dw	3970	;volatile
   118  002799  B9                 	db	185
   119  00279A  00                 	db	0
   120                           prodl	equ	0xFF3
   121                           intcon	equ	0xFF2
   122                           intcon2	equ	0xFF1
   123                           wreg	equ	0xFE8
   124                           indf1	equ	0xFE7
   125                           postinc1	equ	0xFE6
   126                           postdec1	equ	0xFE5
   127                           fsr1h	equ	0xFE2
   128                           fsr1l	equ	0xFE1
   129                           indf2	equ	0xFDF
   130                           postinc2	equ	0xFDE
   131                           postdec2	equ	0xFDD
   132                           plusw2	equ	0xFDB
   133                           fsr2h	equ	0xFDA
   134                           fsr2l	equ	0xFD9
   135                           status	equ	0xFD8
   136                           
   137                           	psect	idataBANK0
   138  0027BA                     __pidataBANK0:
   139                           	opt stack 0
   140                           
   141                           ;initializer for _muxBuffer
   142  0027BA  20                 	db	32
   143  0027BB  20                 	db	32
   144  0027BC  20                 	db	32
   145  0027BD  20                 	db	32
   146  0027BE  00                 	db	0
   147                           prodl	equ	0xFF3
   148                           intcon	equ	0xFF2
   149                           intcon2	equ	0xFF1
   150                           wreg	equ	0xFE8
   151                           indf1	equ	0xFE7
   152                           postinc1	equ	0xFE6
   153                           postdec1	equ	0xFE5
   154                           fsr1h	equ	0xFE2
   155                           fsr1l	equ	0xFE1
   156                           indf2	equ	0xFDF
   157                           postinc2	equ	0xFDE
   158                           postdec2	equ	0xFDD
   159                           plusw2	equ	0xFDB
   160                           fsr2h	equ	0xFDA
   161                           fsr2l	equ	0xFD9
   162                           status	equ	0xFD8
   163                           
   164                           	psect	idataBANK1
   165  0024DA                     __pidataBANK1:
   166                           	opt stack 0
   167                           
   168                           ;initializer for _timerDelayConstant
   169  0024DA  0C                 	db	12
   170  0024DB  00                 	db	0
   171  0024DC  00                 	db	0
   172  0024DD  0C                 	db	12
   173  0024DE  00                 	db	0
   174  0024DF  00                 	db	0
   175  0024E0  96                 	db	150
   176  0024E1  00                 	db	0
   177  0024E2  00                 	db	0
   178  0024E3  12                 	db	18
   179  0024E4  00                 	db	0
   180  0024E5  00                 	db	0
   181  0024E6  FA                 	db	250
   182  0024E7  00                 	db	0
   183  0024E8  00                 	db	0
   184  0024E9  12                 	db	18
   185  0024EA  00                 	db	0
   186  0024EB  00                 	db	0
   187  0024EC  02                 	db	2
   188  0024ED  00                 	db	0
   189  0024EE  00                 	db	0
   190  0024EF  01                 	db	1
   191  0024F0  00                 	db	0
   192  0024F1  00                 	db	0
   193  0024F2  06                 	db	6
   194  0024F3  00                 	db	0
   195  0024F4  00                 	db	0
   196  0024F5  02                 	db	2
   197  0024F6  00                 	db	0
   198  0024F7  00                 	db	0
   199  0024F8  0C                 	db	12
   200  0024F9  00                 	db	0
   201  0024FA  00                 	db	0
   202  0024FB  08                 	db	8
   203  0024FC  00                 	db	0
   204  0024FD  00                 	db	0
   205  0024FE  0A                 	db	10
   206  0024FF  00                 	db	0
   207  002500  00                 	db	0
   208                           
   209                           ;initializer for iir@F4235
   210  002501  DA                 	db	218
   211  002502  77                 	db	119
   212  002503  3A                 	db	58
   213  002504  DA                 	db	218
   214  002505  F7                 	db	247
   215  002506  3A                 	db	58
   216  002507  DA                 	db	218
   217  002508  77                 	db	119
   218  002509  3A                 	db	58
   219                           
   220                           ;initializer for iir@F4237
   221  00250A  00                 	db	0
   222  00250B  80                 	db	128
   223  00250C  3F                 	db	63
   224  00250D  A2                 	db	162
   225  00250E  F4                 	db	244
   226  00250F  BF                 	db	191
   227  002510  3C                 	db	60
   228  002511  6A                 	db	106
   229  002512  3F                 	db	63
   230                           
   231                           ;initializer for _brilloToff
   232  002513  E7                 	db	231
   233  002514  EC                 	db	236
   234  002515  F1                 	db	241
   235  002516  F6                 	db	246
   236  002517  FB                 	db	251
   237                           
   238                           ;initializer for _brilloTon
   239  002518  FB                 	db	251
   240  002519  F6                 	db	246
   241  00251A  F1                 	db	241
   242  00251B  EC                 	db	236
   243  00251C  E7                 	db	231
   244                           
   245                           ;initializer for _muxFile
   246  00251D  03                 	db	3
   247  00251E  C9                 	db	low _muxBuffer
   248  00251F  C9                 	db	low _muxBuffer
   249  002520  C9                 	db	low _muxBuffer
   250  002521  05                 	db	5
   251  002522  05                 	db	5
   252  002523  05                 	db	5
   253  0000                     _ADRES	set	4035
   254  0000                     _TMR0	set	4054
   255  0000                     _TMR3	set	4018
   256  0000                     _ADCON0bits	set	4034
   257  0000                     _ADCON1bits	set	4033
   258  0000                     _ADCON2bits	set	4032
   259  0000                     _EEADR	set	4009
   260  0000                     _EECON1bits	set	4006
   261  0000                     _EECON2	set	4007
   262  0000                     _EEDATA	set	4008
   263  0000                     _INTCON2bits	set	4081
   264  0000                     _INTCONbits	set	4082
   265  0000                     _IPR1bits	set	3999
   266  0000                     _IPR2bits	set	4002
   267  0000                     _OSCCONbits	set	4051
   268  0000                     _PIE1bits	set	3997
   269  0000                     _PIE2bits	set	4000
   270  0000                     _PIR1bits	set	3998
   271  0000                     _PIR2bits	set	4001
   272  0000                     _PORTAbits	set	3968
   273  0000                     _PORTBbits	set	3969
   274  0000                     _PORTCbits	set	3970
   275  0000                     _RCONbits	set	4048
   276  0000                     _T0CONbits	set	4053
   277  0000                     _T3CONbits	set	4017
   278  0000                     _UCFGbits	set	3951
   279  0000                     _ADFM	set	32263
   280  0000                     _TRISA0	set	31888
   281  0000                     _TRISA1	set	31889
   282  0000                     _TRISA2	set	31890
   283  0000                     _TRISA3	set	31891
   284  0000                     _TRISA4	set	31892
   285  0000                     _TRISA5	set	31893
   286  0000                     _TRISB1	set	31897
   287  0000                     _TRISB2	set	31898
   288  0000                     _TRISB3	set	31899
   289  0000                     _TRISB4	set	31900
   290  0000                     _TRISB5	set	31901
   291  0000                     _TRISB6	set	31902
   292  0000                     _TRISB7	set	31903
   293  0000                     _TRISC6	set	31910
   294  0000                     _PORTC	set	3970
   295                           
   296                           ; #config settings
   297  0000                     prodl	equ	0xFF3
   298                           intcon	equ	0xFF2
   299                           intcon2	equ	0xFF1
   300                           wreg	equ	0xFE8
   301                           indf1	equ	0xFE7
   302                           postinc1	equ	0xFE6
   303                           postdec1	equ	0xFE5
   304                           fsr1h	equ	0xFE2
   305                           fsr1l	equ	0xFE1
   306                           indf2	equ	0xFDF
   307                           postinc2	equ	0xFDE
   308                           postdec2	equ	0xFDD
   309                           plusw2	equ	0xFDB
   310                           fsr2h	equ	0xFDA
   311                           fsr2l	equ	0xFD9
   312                           status	equ	0xFD8
   313                           
   314                           	psect	cinit
   315  002274                     __pcinit:
   316                           	opt stack 0
   317  002274                     start_initialization:
   318                           	opt stack 0
   319                           
   320                           ; Clear objects allocated to BANK1 (61 bytes)
   321  002274  EE01  F08B         	lfsr	0,__pbssBANK1
   322  002278  0E3D               	movlw	61
   323  00227A                     clear_0:
   324  00227A  6AEE               	clrf	postinc0,c
   325  00227C  06E8               	decf	wreg,f,c
   326  00227E  E1FD               	bnz	clear_0
   327                           
   328                           ; Clear objects allocated to BANK0 (28 bytes)
   329  002280  EE00  F0AD         	lfsr	0,__pbssBANK0
   330  002284  0E1C               	movlw	28
   331  002286                     clear_1:
   332  002286  6AEE               	clrf	postinc0,c
   333  002288  06E8               	decf	wreg,f,c
   334  00228A  E1FD               	bnz	clear_1
   335                           
   336                           ; Clear objects allocated to COMRAM (20 bytes)
   337  00228C  EE00  F028         	lfsr	0,__pbssCOMRAM
   338  002290  0E14               	movlw	20
   339  002292                     clear_2:
   340  002292  6AEE               	clrf	postinc0,c
   341  002294  06E8               	decf	wreg,f,c
   342  002296  E1FD               	bnz	clear_2
   343                           
   344                           ; Initialize objects allocated to BANK1 (74 bytes)
   345                           ; load TBLPTR registers with __pidataBANK1
   346  002298  0EDA               	movlw	low __pidataBANK1
   347  00229A  6EF6               	movwf	tblptrl,c
   348  00229C  0E24               	movlw	high __pidataBANK1
   349  00229E  6EF7               	movwf	tblptrh,c
   350  0022A0  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   351  0022A2  6EF8               	movwf	tblptru,c
   352  0022A4  EE01  F000         	lfsr	0,__pdataBANK1
   353  0022A8  EE10 F04A          	lfsr	1,74
   354  0022AC                     copy_data0:
   355  0022AC  0009               	tblrd		*+
   356  0022AE  CFF5 FFEE          	movff	tablat,postinc0
   357  0022B2  50E5               	movf	postdec1,w,c
   358  0022B4  50E1               	movf	fsr1l,w,c
   359  0022B6  E1FA               	bnz	copy_data0
   360                           
   361                           ; Initialize objects allocated to BANK0 (5 bytes)
   362                           ; load TBLPTR registers with __pidataBANK0
   363  0022B8  0EBA               	movlw	low __pidataBANK0
   364  0022BA  6EF6               	movwf	tblptrl,c
   365  0022BC  0E27               	movlw	high __pidataBANK0
   366  0022BE  6EF7               	movwf	tblptrh,c
   367  0022C0  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   368  0022C2  6EF8               	movwf	tblptru,c
   369  0022C4  EE00  F0C9         	lfsr	0,__pdataBANK0
   370  0022C8  EE10 F005          	lfsr	1,5
   371  0022CC                     copy_data1:
   372  0022CC  0009               	tblrd		*+
   373  0022CE  CFF5 FFEE          	movff	tablat,postinc0
   374  0022D2  50E5               	movf	postdec1,w,c
   375  0022D4  50E1               	movf	fsr1l,w,c
   376  0022D6  E1FA               	bnz	copy_data1
   377                           
   378                           ; Initialize objects allocated to COMRAM (17 bytes)
   379                           ; load TBLPTR registers with __pidataCOMRAM
   380  0022D8  0E8A               	movlw	low __pidataCOMRAM
   381  0022DA  6EF6               	movwf	tblptrl,c
   382  0022DC  0E27               	movlw	high __pidataCOMRAM
   383  0022DE  6EF7               	movwf	tblptrh,c
   384  0022E0  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   385  0022E2  6EF8               	movwf	tblptru,c
   386  0022E4  EE00  F03C         	lfsr	0,__pdataCOMRAM
   387  0022E8  EE10 F011          	lfsr	1,17
   388  0022EC                     copy_data2:
   389  0022EC  0009               	tblrd		*+
   390  0022EE  CFF5 FFEE          	movff	tablat,postinc0
   391  0022F2  50E5               	movf	postdec1,w,c
   392  0022F4  50E1               	movf	fsr1l,w,c
   393  0022F6  E1FA               	bnz	copy_data2
   394  0022F8                     end_of_initialization:
   395                           	opt stack 0
   396  0022F8  0100               	movlb	0
   397  0022FA  EF48  F000         	goto	_main	;jump to C main() function
   398                           tblptru	equ	0xFF8
   399                           tblptrh	equ	0xFF7
   400                           tblptrl	equ	0xFF6
   401                           tablat	equ	0xFF5
   402                           prodl	equ	0xFF3
   403                           intcon	equ	0xFF2
   404                           intcon2	equ	0xFF1
   405                           postinc0	equ	0xFEE
   406                           wreg	equ	0xFE8
   407                           indf1	equ	0xFE7
   408                           postinc1	equ	0xFE6
   409                           postdec1	equ	0xFE5
   410                           fsr1h	equ	0xFE2
   411                           fsr1l	equ	0xFE1
   412                           indf2	equ	0xFDF
   413                           postinc2	equ	0xFDE
   414                           postdec2	equ	0xFDD
   415                           plusw2	equ	0xFDB
   416                           fsr2h	equ	0xFDA
   417                           fsr2l	equ	0xFD9
   418                           status	equ	0xFD8
   419                           
   420                           	psect	bssCOMRAM
   421  000028                     __pbssCOMRAM:
   422                           	opt stack 0
   423  000028                     _eLoMem:
   424                           	opt stack 0
   425  000028                     	ds	2
   426  00002A                     _eUpMem:
   427                           	opt stack 0
   428  00002A                     	ds	2
   429  00002C                     _escDecMem:
   430                           	opt stack 0
   431  00002C                     	ds	2
   432  00002E                     _escEntMem:
   433                           	opt stack 0
   434  00002E                     	ds	2
   435  000030                     _vLoMem:
   436                           	opt stack 0
   437  000030                     	ds	2
   438  000032                     _vUpMem:
   439                           	opt stack 0
   440  000032                     	ds	2
   441  000034                     _xLoMem:
   442                           	opt stack 0
   443  000034                     	ds	2
   444  000036                     _xUpMem:
   445                           	opt stack 0
   446  000036                     	ds	2
   447  000038                     _advModeMem:
   448                           	opt stack 0
   449  000038                     	ds	1
   450  000039                     _brilloMem:
   451                           	opt stack 0
   452  000039                     	ds	1
   453  00003A                     _state:
   454                           	opt stack 0
   455  00003A                     	ds	1
   456  00003B                     _tOnFlag:
   457                           	opt stack 0
   458  00003B                     	ds	1
   459                           tblptru	equ	0xFF8
   460                           tblptrh	equ	0xFF7
   461                           tblptrl	equ	0xFF6
   462                           tablat	equ	0xFF5
   463                           prodl	equ	0xFF3
   464                           intcon	equ	0xFF2
   465                           intcon2	equ	0xFF1
   466                           postinc0	equ	0xFEE
   467                           wreg	equ	0xFE8
   468                           indf1	equ	0xFE7
   469                           postinc1	equ	0xFE6
   470                           postdec1	equ	0xFE5
   471                           fsr1h	equ	0xFE2
   472                           fsr1l	equ	0xFE1
   473                           indf2	equ	0xFDF
   474                           postinc2	equ	0xFDE
   475                           postdec2	equ	0xFDD
   476                           plusw2	equ	0xFDB
   477                           fsr2h	equ	0xFDA
   478                           fsr2l	equ	0xFD9
   479                           status	equ	0xFD8
   480                           
   481                           	psect	dataCOMRAM
   482  00003C                     __pdataCOMRAM:
   483                           	opt stack 0
   484  00003C                     _setInc:
   485                           	opt stack 0
   486  00003C                     	ds	1
   487  00003D                     _pulsPin:
   488                           	opt stack 0
   489  00003D                     	ds	16
   490                           tblptru	equ	0xFF8
   491                           tblptrh	equ	0xFF7
   492                           tblptrl	equ	0xFF6
   493                           tablat	equ	0xFF5
   494                           prodl	equ	0xFF3
   495                           intcon	equ	0xFF2
   496                           intcon2	equ	0xFF1
   497                           postinc0	equ	0xFEE
   498                           wreg	equ	0xFE8
   499                           indf1	equ	0xFE7
   500                           postinc1	equ	0xFE6
   501                           postdec1	equ	0xFE5
   502                           fsr1h	equ	0xFE2
   503                           fsr1l	equ	0xFE1
   504                           indf2	equ	0xFDF
   505                           postinc2	equ	0xFDE
   506                           postdec2	equ	0xFDD
   507                           plusw2	equ	0xFDB
   508                           fsr2h	equ	0xFDA
   509                           fsr2l	equ	0xFD9
   510                           status	equ	0xFD8
   511                           
   512                           	psect	bssBANK0
   513  0000AD                     __pbssBANK0:
   514                           	opt stack 0
   515  0000AD                     _adcStruct:
   516                           	opt stack 0
   517  0000AD                     	ds	5
   518  0000B2                     _escala:
   519                           	opt stack 0
   520  0000B2                     	ds	3
   521  0000B5                     _display:
   522                           	opt stack 0
   523  0000B5                     	ds	2
   524  0000B7                     _measurement:
   525                           	opt stack 0
   526  0000B7                     	ds	2
   527  0000B9                     _segments:
   528                           	opt stack 0
   529  0000B9                     	ds	2
   530  0000BB                     _ignoreNextFp:
   531                           	opt stack 0
   532  0000BB                     	ds	1
   533  0000BC                     _pulsPinBuffer:
   534                           	opt stack 0
   535  0000BC                     	ds	1
   536  0000BD                     _y:
   537                           	opt stack 0
   538  0000BD                     	ds	9
   539  0000C6                     _medicionFloat:
   540                           	opt stack 0
   541  0000C6                     	ds	3
   542                           tblptru	equ	0xFF8
   543                           tblptrh	equ	0xFF7
   544                           tblptrl	equ	0xFF6
   545                           tablat	equ	0xFF5
   546                           prodl	equ	0xFF3
   547                           intcon	equ	0xFF2
   548                           intcon2	equ	0xFF1
   549                           postinc0	equ	0xFEE
   550                           wreg	equ	0xFE8
   551                           indf1	equ	0xFE7
   552                           postinc1	equ	0xFE6
   553                           postdec1	equ	0xFE5
   554                           fsr1h	equ	0xFE2
   555                           fsr1l	equ	0xFE1
   556                           indf2	equ	0xFDF
   557                           postinc2	equ	0xFDE
   558                           postdec2	equ	0xFDD
   559                           plusw2	equ	0xFDB
   560                           fsr2h	equ	0xFDA
   561                           fsr2l	equ	0xFD9
   562                           status	equ	0xFD8
   563                           
   564                           	psect	dataBANK0
   565  0000C9                     __pdataBANK0:
   566                           	opt stack 0
   567  0000C9                     _muxBuffer:
   568                           	opt stack 0
   569  0000C9                     	ds	5
   570                           tblptru	equ	0xFF8
   571                           tblptrh	equ	0xFF7
   572                           tblptrl	equ	0xFF6
   573                           tablat	equ	0xFF5
   574                           prodl	equ	0xFF3
   575                           intcon	equ	0xFF2
   576                           intcon2	equ	0xFF1
   577                           postinc0	equ	0xFEE
   578                           wreg	equ	0xFE8
   579                           indf1	equ	0xFE7
   580                           postinc1	equ	0xFE6
   581                           postdec1	equ	0xFE5
   582                           fsr1h	equ	0xFE2
   583                           fsr1l	equ	0xFE1
   584                           indf2	equ	0xFDF
   585                           postinc2	equ	0xFDE
   586                           postdec2	equ	0xFDD
   587                           plusw2	equ	0xFDB
   588                           fsr2h	equ	0xFDA
   589                           fsr2l	equ	0xFD9
   590                           status	equ	0xFD8
   591                           
   592                           	psect	bssBANK1
   593  00018B                     __pbssBANK1:
   594                           	opt stack 0
   595  00018B                     _timerMem:
   596                           	opt stack 0
   597  00018B                     	ds	52
   598  0001BF                     _x:
   599                           	opt stack 0
   600  0001BF                     	ds	9
   601                           tblptru	equ	0xFF8
   602                           tblptrh	equ	0xFF7
   603                           tblptrl	equ	0xFF6
   604                           tablat	equ	0xFF5
   605                           prodl	equ	0xFF3
   606                           intcon	equ	0xFF2
   607                           intcon2	equ	0xFF1
   608                           postinc0	equ	0xFEE
   609                           wreg	equ	0xFE8
   610                           indf1	equ	0xFE7
   611                           postinc1	equ	0xFE6
   612                           postdec1	equ	0xFE5
   613                           fsr1h	equ	0xFE2
   614                           fsr1l	equ	0xFE1
   615                           indf2	equ	0xFDF
   616                           postinc2	equ	0xFDE
   617                           postdec2	equ	0xFDD
   618                           plusw2	equ	0xFDB
   619                           fsr2h	equ	0xFDA
   620                           fsr2l	equ	0xFD9
   621                           status	equ	0xFD8
   622                           
   623                           	psect	dataBANK1
   624  000100                     __pdataBANK1:
   625                           	opt stack 0
   626  000100                     _timerDelayConstant:
   627                           	opt stack 0
   628  000100                     	ds	39
   629  000127                     iir@F4235:
   630                           	opt stack 0
   631  000127                     	ds	9
   632  000130                     iir@F4237:
   633                           	opt stack 0
   634  000130                     	ds	9
   635  000139                     _brilloToff:
   636                           	opt stack 0
   637  000139                     	ds	5
   638  00013E                     _brilloTon:
   639                           	opt stack 0
   640  00013E                     	ds	5
   641  000143                     _muxFile:
   642                           	opt stack 0
   643  000143                     	ds	7
   644                           tblptru	equ	0xFF8
   645                           tblptrh	equ	0xFF7
   646                           tblptrl	equ	0xFF6
   647                           tablat	equ	0xFF5
   648                           prodl	equ	0xFF3
   649                           intcon	equ	0xFF2
   650                           intcon2	equ	0xFF1
   651                           postinc0	equ	0xFEE
   652                           wreg	equ	0xFE8
   653                           indf1	equ	0xFE7
   654                           postinc1	equ	0xFE6
   655                           postdec1	equ	0xFE5
   656                           fsr1h	equ	0xFE2
   657                           fsr1l	equ	0xFE1
   658                           indf2	equ	0xFDF
   659                           postinc2	equ	0xFDE
   660                           postdec2	equ	0xFDD
   661                           plusw2	equ	0xFDB
   662                           fsr2h	equ	0xFDA
   663                           fsr2l	equ	0xFD9
   664                           status	equ	0xFD8
   665                           
   666                           	psect	cstackBANK1
   667  00014A                     __pcstackBANK1:
   668                           	opt stack 0
   669  00014A                     _main$2642:
   670                           	opt stack 0
   671                           
   672                           ; 3 bytes @ 0x0
   673  00014A                     	ds	3
   674  00014D                     _main$441:
   675                           	opt stack 0
   676                           
   677                           ; 2 bytes @ 0x3
   678  00014D                     	ds	2
   679  00014F                     _main$442:
   680                           	opt stack 0
   681                           
   682                           ; 2 bytes @ 0x5
   683  00014F                     	ds	2
   684  000151                     _main$443:
   685                           	opt stack 0
   686                           
   687                           ; 2 bytes @ 0x7
   688  000151                     	ds	2
   689  000153                     _main$444:
   690                           	opt stack 0
   691                           
   692                           ; 2 bytes @ 0x9
   693  000153                     	ds	2
   694  000155                     _main$445:
   695                           	opt stack 0
   696                           
   697                           ; 2 bytes @ 0xB
   698  000155                     	ds	2
   699  000157                     _main$446:
   700                           	opt stack 0
   701                           
   702                           ; 2 bytes @ 0xD
   703  000157                     	ds	2
   704  000159                     _main$447:
   705                           	opt stack 0
   706                           
   707                           ; 2 bytes @ 0xF
   708  000159                     	ds	2
   709  00015B                     _main$448:
   710                           	opt stack 0
   711                           
   712                           ; 2 bytes @ 0x11
   713  00015B                     	ds	2
   714  00015D                     _main$449:
   715                           	opt stack 0
   716                           
   717                           ; 2 bytes @ 0x13
   718  00015D                     	ds	2
   719  00015F                     _main$450:
   720                           	opt stack 0
   721                           
   722                           ; 2 bytes @ 0x15
   723  00015F                     	ds	2
   724  000161                     _main$451:
   725                           	opt stack 0
   726                           
   727                           ; 2 bytes @ 0x17
   728  000161                     	ds	2
   729  000163                     _main$452:
   730                           	opt stack 0
   731                           
   732                           ; 2 bytes @ 0x19
   733  000163                     	ds	2
   734  000165                     _main$453:
   735                           	opt stack 0
   736                           
   737                           ; 2 bytes @ 0x1B
   738  000165                     	ds	2
   739  000167                     _main$454:
   740                           	opt stack 0
   741                           
   742                           ; 2 bytes @ 0x1D
   743  000167                     	ds	2
   744  000169                     _main$455:
   745                           	opt stack 0
   746                           
   747                           ; 2 bytes @ 0x1F
   748  000169                     	ds	2
   749  00016B                     _main$456:
   750                           	opt stack 0
   751                           
   752                           ; 2 bytes @ 0x21
   753  00016B                     	ds	2
   754  00016D                     _main$457:
   755                           	opt stack 0
   756                           
   757                           ; 2 bytes @ 0x23
   758  00016D                     	ds	2
   759  00016F                     _main$458:
   760                           	opt stack 0
   761                           
   762                           ; 2 bytes @ 0x25
   763  00016F                     	ds	2
   764  000171                     _main$459:
   765                           	opt stack 0
   766                           
   767                           ; 2 bytes @ 0x27
   768  000171                     	ds	2
   769  000173                     _main$460:
   770                           	opt stack 0
   771                           
   772                           ; 2 bytes @ 0x29
   773  000173                     	ds	2
   774  000175                     _main$461:
   775                           	opt stack 0
   776                           
   777                           ; 2 bytes @ 0x2B
   778  000175                     	ds	2
   779  000177                     _main$462:
   780                           	opt stack 0
   781                           
   782                           ; 2 bytes @ 0x2D
   783  000177                     	ds	2
   784  000179                     _main$463:
   785                           	opt stack 0
   786                           
   787                           ; 2 bytes @ 0x2F
   788  000179                     	ds	2
   789  00017B                     _main$464:
   790                           	opt stack 0
   791                           
   792                           ; 2 bytes @ 0x31
   793  00017B                     	ds	2
   794  00017D                     _main$465:
   795                           	opt stack 0
   796                           
   797                           ; 2 bytes @ 0x33
   798  00017D                     	ds	2
   799  00017F                     _main$466:
   800                           	opt stack 0
   801                           
   802                           ; 2 bytes @ 0x35
   803  00017F                     	ds	2
   804  000181                     _main$467:
   805                           	opt stack 0
   806                           
   807                           ; 2 bytes @ 0x37
   808  000181                     	ds	2
   809  000183                     _main$468:
   810                           	opt stack 0
   811                           
   812                           ; 2 bytes @ 0x39
   813  000183                     	ds	2
   814  000185                     _main$469:
   815                           	opt stack 0
   816                           
   817                           ; 2 bytes @ 0x3B
   818  000185                     	ds	2
   819  000187                     _main$470:
   820                           	opt stack 0
   821                           
   822                           ; 2 bytes @ 0x3D
   823  000187                     	ds	2
   824  000189                     _main$471:
   825                           	opt stack 0
   826                           
   827                           ; 2 bytes @ 0x3F
   828  000189                     	ds	2
   829                           tblptru	equ	0xFF8
   830                           tblptrh	equ	0xFF7
   831                           tblptrl	equ	0xFF6
   832                           tablat	equ	0xFF5
   833                           prodl	equ	0xFF3
   834                           intcon	equ	0xFF2
   835                           intcon2	equ	0xFF1
   836                           postinc0	equ	0xFEE
   837                           wreg	equ	0xFE8
   838                           indf1	equ	0xFE7
   839                           postinc1	equ	0xFE6
   840                           postdec1	equ	0xFE5
   841                           fsr1h	equ	0xFE2
   842                           fsr1l	equ	0xFE1
   843                           indf2	equ	0xFDF
   844                           postinc2	equ	0xFDE
   845                           postdec2	equ	0xFDD
   846                           plusw2	equ	0xFDB
   847                           fsr2h	equ	0xFDA
   848                           fsr2l	equ	0xFD9
   849                           status	equ	0xFD8
   850                           
   851                           	psect	cstackBANK0
   852  000060                     __pcstackBANK0:
   853                           	opt stack 0
   854  000060                     ??_pulsPinInit:
   855                           	opt stack 0
   856  000060                     ??_systemInit:
   857                           	opt stack 0
   858  000060                     ??_timerDriver:
   859                           	opt stack 0
   860  000060                     ??_adcDriver:
   861                           	opt stack 0
   862  000060                     ??_adcSetup:
   863                           	opt stack 0
   864  000060                     ?_ee_write_byte:
   865                           	opt stack 0
   866  000060                     ??_ee_read_byte:
   867                           	opt stack 0
   868  000060                     ??_enterMenu:
   869                           	opt stack 0
   870  000060                     ??_endTestDisplayActions:
   871                           	opt stack 0
   872  000060                     ??_actionsTimeoutShowSetting:
   873                           	opt stack 0
   874  000060                     ?_getConv:
   875                           	opt stack 0
   876  000060                     ?___lwdiv:
   877                           	opt stack 0
   878  000060                     ?___lwmod:
   879                           	opt stack 0
   880  000060                     ?___ftpack:
   881                           	opt stack 0
   882  000060                     ?___fttol:
   883                           	opt stack 0
   884  000060                     ee_write_byte@_data:
   885                           	opt stack 0
   886  000060                     ee_read_byte@address:
   887                           	opt stack 0
   888  000060                     _actionsTimeoutShowSetting$438:
   889                           	opt stack 0
   890  000060                     ___lwdiv@dividend:
   891                           	opt stack 0
   892  000060                     ___lwmod@dividend:
   893                           	opt stack 0
   894  000060                     ___ftpack@arg:
   895                           	opt stack 0
   896  000060                     ___fttol@f1:
   897                           	opt stack 0
   898                           
   899                           ; 3 bytes @ 0x0
   900  000060                     	ds	1
   901  000061                     ??_ee_write_byte:
   902                           	opt stack 0
   903  000061                     ee_write_byte@address:
   904                           	opt stack 0
   905                           
   906                           ; 1 bytes @ 0x1
   907  000061                     	ds	1
   908  000062                     ??_getConv:
   909                           	opt stack 0
   910  000062                     ___lwdiv@divisor:
   911                           	opt stack 0
   912  000062                     ___lwmod@divisor:
   913                           	opt stack 0
   914                           
   915                           ; 2 bytes @ 0x2
   916  000062                     	ds	1
   917  000063                     timerDriver@i:
   918                           	opt stack 0
   919  000063                     ___ftpack@exp:
   920                           	opt stack 0
   921                           
   922                           ; 1 bytes @ 0x3
   923  000063                     	ds	1
   924  000064                     ??___fttol:
   925                           	opt stack 0
   926  000064                     ??___lwdiv:
   927                           	opt stack 0
   928  000064                     ??___lwmod:
   929                           	opt stack 0
   930  000064                     ___ftpack@sign:
   931                           	opt stack 0
   932  000064                     ___lwdiv@counter:
   933                           	opt stack 0
   934  000064                     ___lwmod@counter:
   935                           	opt stack 0
   936                           
   937                           ; 1 bytes @ 0x4
   938  000064                     	ds	1
   939  000065                     ??___ftpack:
   940                           	opt stack 0
   941  000065                     ___lwdiv@quotient:
   942                           	opt stack 0
   943                           
   944                           ; 2 bytes @ 0x5
   945  000065                     	ds	1
   946  000066                     pulsPinInit@i:
   947                           	opt stack 0
   948                           
   949                           ; 1 bytes @ 0x6
   950  000066                     	ds	1
   951  000067                     ?_uintToStr:
   952                           	opt stack 0
   953  000067                     uintToStr@num:
   954                           	opt stack 0
   955                           
   956                           ; 2 bytes @ 0x7
   957  000067                     	ds	1
   958  000068                     ?___awtoft:
   959                           	opt stack 0
   960  000068                     ?___ftmul:
   961                           	opt stack 0
   962  000068                     adcDriver@ch2Cnv:
   963                           	opt stack 0
   964  000068                     ___awtoft@c:
   965                           	opt stack 0
   966  000068                     ___ftmul@f1:
   967                           	opt stack 0
   968                           
   969                           ; 3 bytes @ 0x8
   970  000068                     	ds	1
   971  000069                     uintToStr@str:
   972                           	opt stack 0
   973  000069                     ___fttol@sign1:
   974                           	opt stack 0
   975                           
   976                           ; 1 bytes @ 0x9
   977  000069                     	ds	1
   978  00006A                     uintToStr@strLen:
   979                           	opt stack 0
   980  00006A                     ___fttol@lval:
   981                           	opt stack 0
   982                           
   983                           ; 4 bytes @ 0xA
   984  00006A                     	ds	1
   985  00006B                     ??_uintToStr:
   986                           	opt stack 0
   987  00006B                     ??___awtoft:
   988                           	opt stack 0
   989  00006B                     uintToStr@i:
   990                           	opt stack 0
   991  00006B                     ___awtoft@sign:
   992                           	opt stack 0
   993  00006B                     ___ftmul@f2:
   994                           	opt stack 0
   995                           
   996                           ; 3 bytes @ 0xB
   997  00006B                     	ds	1
   998  00006C                     ?___ftdiv:
   999                           	opt stack 0
  1000  00006C                     ___ftdiv@f1:
  1001                           	opt stack 0
  1002                           
  1003                           ; 3 bytes @ 0xC
  1004  00006C                     	ds	2
  1005  00006E                     ??___ftmul:
  1006                           	opt stack 0
  1007  00006E                     ___fttol@exp1:
  1008                           	opt stack 0
  1009                           
  1010                           ; 1 bytes @ 0xE
  1011  00006E                     	ds	1
  1012  00006F                     ___ftdiv@f2:
  1013                           	opt stack 0
  1014                           
  1015                           ; 3 bytes @ 0xF
  1016  00006F                     	ds	3
  1017  000072                     ??___ftdiv:
  1018                           	opt stack 0
  1019                           
  1020                           ; 0 bytes @ 0x12
  1021  000072                     	ds	1
  1022  000073                     ___ftmul@exp:
  1023                           	opt stack 0
  1024                           
  1025                           ; 1 bytes @ 0x13
  1026  000073                     	ds	1
  1027  000074                     ___ftmul@f3_as_product:
  1028                           	opt stack 0
  1029                           
  1030                           ; 3 bytes @ 0x14
  1031  000074                     	ds	3
  1032  000077                     ___ftdiv@cntr:
  1033                           	opt stack 0
  1034  000077                     ___ftmul@cntr:
  1035                           	opt stack 0
  1036                           
  1037                           ; 1 bytes @ 0x17
  1038  000077                     	ds	1
  1039  000078                     ___ftmul@sign:
  1040                           	opt stack 0
  1041  000078                     ___ftdiv@f3:
  1042                           	opt stack 0
  1043                           
  1044                           ; 3 bytes @ 0x18
  1045  000078                     	ds	1
  1046  000079                     ?___asftmul:
  1047                           	opt stack 0
  1048  000079                     ___asftmul@f2:
  1049                           	opt stack 0
  1050                           
  1051                           ; 3 bytes @ 0x19
  1052  000079                     	ds	2
  1053  00007B                     ___ftdiv@exp:
  1054                           	opt stack 0
  1055                           
  1056                           ; 1 bytes @ 0x1B
  1057  00007B                     	ds	1
  1058  00007C                     ??___asftmul:
  1059                           	opt stack 0
  1060  00007C                     ___ftdiv@sign:
  1061                           	opt stack 0
  1062  00007C                     ___asftmul@f1p:
  1063                           	opt stack 0
  1064                           
  1065                           ; 1 bytes @ 0x1C
  1066  00007C                     	ds	1
  1067  00007D                     ?___ftadd:
  1068                           	opt stack 0
  1069  00007D                     ?___asftdiv:
  1070                           	opt stack 0
  1071  00007D                     ___ftadd@f1:
  1072                           	opt stack 0
  1073  00007D                     ___asftdiv@f2:
  1074                           	opt stack 0
  1075                           
  1076                           ; 3 bytes @ 0x1D
  1077  00007D                     	ds	3
  1078  000080                     ??___asftdiv:
  1079                           	opt stack 0
  1080  000080                     ___asftdiv@f1p:
  1081                           	opt stack 0
  1082  000080                     ___ftadd@f2:
  1083                           	opt stack 0
  1084                           
  1085                           ; 3 bytes @ 0x20
  1086  000080                     	ds	3
  1087  000083                     ??___ftadd:
  1088                           	opt stack 0
  1089                           
  1090                           ; 0 bytes @ 0x23
  1091  000083                     	ds	5
  1092  000088                     ___ftadd@sign:
  1093                           	opt stack 0
  1094                           
  1095                           ; 1 bytes @ 0x28
  1096  000088                     	ds	1
  1097  000089                     ___ftadd@exp2:
  1098                           	opt stack 0
  1099                           
  1100                           ; 1 bytes @ 0x29
  1101  000089                     	ds	1
  1102  00008A                     ___ftadd@exp1:
  1103                           	opt stack 0
  1104                           
  1105                           ; 1 bytes @ 0x2A
  1106  00008A                     	ds	1
  1107  00008B                     ??_incVar:
  1108                           	opt stack 0
  1109  00008B                     ??_decVar:
  1110                           	opt stack 0
  1111  00008B                     ?___ftsub:
  1112                           	opt stack 0
  1113  00008B                     ___ftsub@f1:
  1114                           	opt stack 0
  1115                           
  1116                           ; 3 bytes @ 0x2B
  1117  00008B                     	ds	3
  1118  00008E                     ___ftsub@f2:
  1119                           	opt stack 0
  1120                           
  1121                           ; 3 bytes @ 0x2E
  1122  00008E                     	ds	3
  1123  000091                     ??___ftsub:
  1124                           	opt stack 0
  1125  000091                     ?___asftadd:
  1126                           	opt stack 0
  1127  000091                     ___asftadd@f2:
  1128                           	opt stack 0
  1129                           
  1130                           ; 3 bytes @ 0x31
  1131  000091                     	ds	3
  1132  000094                     ??___asftadd:
  1133                           	opt stack 0
  1134  000094                     ___asftadd@f1p:
  1135                           	opt stack 0
  1136                           
  1137                           ; 1 bytes @ 0x34
  1138  000094                     	ds	1
  1139  000095                     ?_iir:
  1140                           	opt stack 0
  1141  000095                     iir@NewSample:
  1142                           	opt stack 0
  1143                           
  1144                           ; 3 bytes @ 0x35
  1145  000095                     	ds	3
  1146  000098                     ??_iir:
  1147                           	opt stack 0
  1148  000098                     iir@ACoef:
  1149                           	opt stack 0
  1150                           
  1151                           ; 9 bytes @ 0x38
  1152  000098                     	ds	9
  1153  0000A1                     iir@BCoef:
  1154                           	opt stack 0
  1155                           
  1156                           ; 9 bytes @ 0x41
  1157  0000A1                     	ds	9
  1158  0000AA                     iir@n:
  1159                           	opt stack 0
  1160                           
  1161                           ; 1 bytes @ 0x4A
  1162  0000AA                     	ds	1
  1163  0000AB                     ??_main:
  1164                           	opt stack 0
  1165                           
  1166                           ; 0 bytes @ 0x4B
  1167  0000AB                     	ds	2
  1168                           tblptru	equ	0xFF8
  1169                           tblptrh	equ	0xFF7
  1170                           tblptrl	equ	0xFF6
  1171                           tablat	equ	0xFF5
  1172                           prodl	equ	0xFF3
  1173                           intcon	equ	0xFF2
  1174                           intcon2	equ	0xFF1
  1175                           postinc0	equ	0xFEE
  1176                           wreg	equ	0xFE8
  1177                           indf1	equ	0xFE7
  1178                           postinc1	equ	0xFE6
  1179                           postdec1	equ	0xFE5
  1180                           fsr1h	equ	0xFE2
  1181                           fsr1l	equ	0xFE1
  1182                           indf2	equ	0xFDF
  1183                           postinc2	equ	0xFDE
  1184                           postdec2	equ	0xFDD
  1185                           plusw2	equ	0xFDB
  1186                           fsr2h	equ	0xFDA
  1187                           fsr2l	equ	0xFD9
  1188                           status	equ	0xFD8
  1189                           
  1190                           	psect	cstackCOMRAM
  1191  000001                     __pcstackCOMRAM:
  1192                           	opt stack 0
  1193  000001                     ?_pulsPinInit:
  1194                           	opt stack 0
  1195  000001                     ?_systemInit:
  1196                           	opt stack 0
  1197  000001                     ?_timerDriver:
  1198                           	opt stack 0
  1199  000001                     ?_adcDriver:
  1200                           	opt stack 0
  1201  000001                     ?_adcSetup:
  1202                           	opt stack 0
  1203  000001                     ?_isr_timer0:
  1204                           	opt stack 0
  1205  000001                     ?_isr_timer3:
  1206                           	opt stack 0
  1207  000001                     ?_isr_adc:
  1208                           	opt stack 0
  1209  000001                     ??_isr_adc:
  1210                           	opt stack 0
  1211  000001                     ?_char2pins:
  1212                           	opt stack 0
  1213  000001                     ?_pulsPinDriver:
  1214                           	opt stack 0
  1215  000001                     ??_pulsPinDriver:
  1216                           	opt stack 0
  1217  000001                     ?_enterMenu:
  1218                           	opt stack 0
  1219  000001                     ?_incVar:
  1220                           	opt stack 0
  1221  000001                     ?_decVar:
  1222                           	opt stack 0
  1223  000001                     ?_endTestDisplayActions:
  1224                           	opt stack 0
  1225  000001                     ?_actionsTimeoutShowSetting:
  1226                           	opt stack 0
  1227  000001                     ?_main:
  1228                           	opt stack 0
  1229  000001                     ?_isr:
  1230                           	opt stack 0
  1231  000001                     ?_isr2:
  1232                           	opt stack 0
  1233  000001                     ?i1_timerDriver:
  1234                           	opt stack 0
  1235  000001                     ??i1_timerDriver:
  1236                           	opt stack 0
  1237  000001                     ?_ee_read_byte:
  1238                           	opt stack 0
  1239                           
  1240                           ; 1 bytes @ 0x0
  1241  000001                     	ds	3
  1242  000004                     i1timerDriver@i:
  1243                           	opt stack 0
  1244                           
  1245                           ; 1 bytes @ 0x3
  1246  000004                     	ds	3
  1247  000007                     pulsPinDriver@i:
  1248                           	opt stack 0
  1249                           
  1250                           ; 1 bytes @ 0x6
  1251  000007                     	ds	1
  1252  000008                     ??_isr_timer3:
  1253                           	opt stack 0
  1254  000008                     _isr_timer3$1607:
  1255                           	opt stack 0
  1256                           
  1257                           ; 2 bytes @ 0x7
  1258  000008                     	ds	2
  1259  00000A                     ??_isr2:
  1260                           	opt stack 0
  1261                           
  1262                           ; 0 bytes @ 0x9
  1263  00000A                     	ds	9
  1264  000013                     ?_fseek:
  1265                           	opt stack 0
  1266  000013                     ??_char2pins:
  1267                           	opt stack 0
  1268  000013                     ?_fgetc:
  1269                           	opt stack 0
  1270  000013                     char2pins@c:
  1271                           	opt stack 0
  1272  000013                     fgetc@stream:
  1273                           	opt stack 0
  1274  000013                     fseek@fp:
  1275                           	opt stack 0
  1276                           
  1277                           ; 2 bytes @ 0x12
  1278  000013                     	ds	2
  1279  000015                     ??_fgetc:
  1280                           	opt stack 0
  1281  000015                     fseek@offset:
  1282                           	opt stack 0
  1283                           
  1284                           ; 2 bytes @ 0x14
  1285  000015                     	ds	2
  1286  000017                     fseek@mode:
  1287                           	opt stack 0
  1288                           
  1289                           ; 2 bytes @ 0x16
  1290  000017                     	ds	2
  1291  000019                     ??_fseek:
  1292                           	opt stack 0
  1293                           
  1294                           ; 0 bytes @ 0x18
  1295  000019                     	ds	1
  1296  00001A                     ??_isr_timer0:
  1297                           	opt stack 0
  1298  00001A                     ??_isr:
  1299                           	opt stack 0
  1300                           
  1301                           ; 0 bytes @ 0x19
  1302  00001A                     	ds	14
  1303                           tblptru	equ	0xFF8
  1304                           tblptrh	equ	0xFF7
  1305                           tblptrl	equ	0xFF6
  1306                           tablat	equ	0xFF5
  1307                           prodl	equ	0xFF3
  1308                           intcon	equ	0xFF2
  1309                           intcon2	equ	0xFF1
  1310                           postinc0	equ	0xFEE
  1311                           wreg	equ	0xFE8
  1312                           indf1	equ	0xFE7
  1313                           postinc1	equ	0xFE6
  1314                           postdec1	equ	0xFE5
  1315                           fsr1h	equ	0xFE2
  1316                           fsr1l	equ	0xFE1
  1317                           indf2	equ	0xFDF
  1318                           postinc2	equ	0xFDE
  1319                           postdec2	equ	0xFDD
  1320                           plusw2	equ	0xFDB
  1321                           fsr2h	equ	0xFDA
  1322                           fsr2l	equ	0xFD9
  1323                           status	equ	0xFD8
  1324                           
  1325 ;;
  1326 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1327 ;;
  1328 ;; *************** function _main *****************
  1329 ;; Defined at:
  1330 ;;		line 387 in file "C:\fgr\16gb\0000 interior\deVolt\sw\v3dig\main.c"
  1331 ;; Parameters:    Size  Location     Type
  1332 ;;		None
  1333 ;; Auto vars:     Size  Location     Type
  1334 ;;		None
  1335 ;; Return value:  Size  Location     Type
  1336 ;;		None               void
  1337 ;; Registers used:
  1338 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1339 ;; Tracked objects:
  1340 ;;		On entry : 0/0
  1341 ;;		On exit  : F/1
  1342 ;;		Unchanged: 0/0
  1343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1344 ;;      Params:         0       0       0       0       0       0       0       0       0
  1345 ;;      Locals:         0       0      65       0       0       0       0       0       0
  1346 ;;      Temps:          0       2       0       0       0       0       0       0       0
  1347 ;;      Totals:         0       2      65       0       0       0       0       0       0
  1348 ;;Total ram usage:       67 bytes
  1349 ;; Hardware stack levels required when called:   10
  1350 ;; This function calls:
  1351 ;;		_pulsPinInit
  1352 ;;		_systemInit
  1353 ;;		_ee_read_byte
  1354 ;;		___awtoft
  1355 ;;		___ftdiv
  1356 ;;		___ftadd
  1357 ;;		_timerDriver
  1358 ;;		_actionsTimeoutShowSetting
  1359 ;;		_enterMenu
  1360 ;;		_endTestDisplayActions
  1361 ;;		_adcDriver
  1362 ;;		_getConv
  1363 ;;		_iir
  1364 ;;		___asftmul
  1365 ;;		___fttol
  1366 ;;		_uintToStr
  1367 ;;		_incVar
  1368 ;;		_decVar
  1369 ;; This function is called by:
  1370 ;;		Startup code after reset
  1371 ;; This function uses a non-reentrant model
  1372 ;;
  1373                           
  1374                           	psect	text0
  1375  000090                     __ptext0:
  1376                           	opt stack 0
  1377  000090                     _main:
  1378                           	opt stack 21
  1379                           
  1380                           ;main.c: 388: pulsPinInit();
  1381                           
  1382                           ; BSR set to: 1
  1383  000090  ECF4  F010         	call	_pulsPinInit	;wreg free
  1384                           
  1385                           ; BSR set to: 0
  1386                           ;main.c: 389: systemInit();
  1387  000094  ECBD  F011         	call	_systemInit	;wreg free
  1388                           
  1389                           ; BSR set to: 0
  1390                           ;main.c: 390: segments.portState=0x01;
  1391  000098  0E01               	movlw	1
  1392  00009A  6FBA               	movwf	(_segments+1)& (0+255),b
  1393                           
  1394                           ; BSR set to: 0
  1395                           ;main.c: 392: { brilloMem=ee_read_byte(0); };
  1396  00009C  0E00               	movlw	0
  1397  00009E  ECBC  F013         	call	_ee_read_byte
  1398  0000A2  6E39               	movwf	_brilloMem,c
  1399                           
  1400                           ; BSR set to: 0
  1401                           ;main.c: 393: { advModeMem=ee_read_byte(1); };
  1402  0000A4  0E01               	movlw	1
  1403  0000A6  ECBC  F013         	call	_ee_read_byte
  1404  0000AA  6E38               	movwf	_advModeMem,c
  1405                           
  1406                           ; BSR set to: 0
  1407                           ;main.c: 395: { escEntMem=0x00; escEntMem|=ee_read_byte(14)<<8; escEntMem|=ee_read_byte(
      +                          14+1)<<0; };
  1408  0000AC  6A2E               	clrf	_escEntMem,c
  1409  0000AE  6A2F               	clrf	_escEntMem+1,c
  1410                           
  1411                           ; BSR set to: 0
  1412  0000B0  0E0E               	movlw	14
  1413  0000B2  ECBC  F013         	call	_ee_read_byte
  1414  0000B6  6FAC               	movwf	(??_main+1)& (0+255),b
  1415  0000B8  6BAB               	clrf	??_main& (0+255),b
  1416  0000BA  51AB               	movf	??_main& (0+255),w,b
  1417  0000BC  122E               	iorwf	_escEntMem,f,c
  1418  0000BE  51AC               	movf	(??_main+1)& (0+255),w,b
  1419  0000C0  122F               	iorwf	_escEntMem+1,f,c
  1420                           
  1421                           ; BSR set to: 0
  1422  0000C2  0E0F               	movlw	15
  1423  0000C4  ECBC  F013         	call	_ee_read_byte
  1424  0000C8  122E               	iorwf	_escEntMem,f,c
  1425                           
  1426                           ; BSR set to: 0
  1427                           ;main.c: 396: { escDecMem=0x00; escDecMem|=ee_read_byte(16)<<8; escDecMem|=ee_read_byte(
      +                          16+1)<<0; };
  1428  0000CA  6A2C               	clrf	_escDecMem,c
  1429  0000CC  6A2D               	clrf	_escDecMem+1,c
  1430                           
  1431                           ; BSR set to: 0
  1432  0000CE  0E10               	movlw	16
  1433  0000D0  ECBC  F013         	call	_ee_read_byte
  1434  0000D4  6FAC               	movwf	(??_main+1)& (0+255),b
  1435  0000D6  6BAB               	clrf	??_main& (0+255),b
  1436  0000D8  51AB               	movf	??_main& (0+255),w,b
  1437  0000DA  122C               	iorwf	_escDecMem,f,c
  1438  0000DC  51AC               	movf	(??_main+1)& (0+255),w,b
  1439  0000DE  122D               	iorwf	_escDecMem+1,f,c
  1440                           
  1441                           ; BSR set to: 0
  1442  0000E0  0E11               	movlw	17
  1443  0000E2  ECBC  F013         	call	_ee_read_byte
  1444  0000E6  122C               	iorwf	_escDecMem,f,c
  1445                           
  1446                           ; BSR set to: 0
  1447                           ;main.c: 397: escala=(float)escEntMem+(float)escDecMem/1000.0;
  1448  0000E8  C02E  F068         	movff	_escEntMem,?___awtoft
  1449  0000EC  C02F  F069         	movff	_escEntMem+1,?___awtoft+1
  1450  0000F0  EC51  F013         	call	___awtoft	;wreg free
  1451  0000F4  ECD2  F009         	call	PL3	;call to abstracted procedure
  1452  0000F8  EC51  F013         	call	___awtoft	;wreg free
  1453  0000FC  C068  F06C         	movff	?___awtoft,?___ftdiv
  1454  000100  C069  F06D         	movff	?___awtoft+1,?___ftdiv+1
  1455  000104  C06A  F06E         	movff	?___awtoft+2,?___ftdiv+2
  1456  000108  EC35  F00E         	call	___ftdiv	;wreg free
  1457  00010C  C06C  F080         	movff	?___ftdiv,?___ftadd+3
  1458  000110  C06D  F081         	movff	?___ftdiv+1,?___ftadd+4
  1459  000114  C06E  F082         	movff	?___ftdiv+2,?___ftadd+5
  1460  000118  ECB3  F00B         	call	___ftadd	;wreg free
  1461  00011C  C07D  F0B2         	movff	?___ftadd,_escala
  1462  000120  C07E  F0B3         	movff	?___ftadd+1,_escala+1
  1463  000124  C07F  F0B4         	movff	?___ftadd+2,_escala+2
  1464                           
  1465                           ; BSR set to: 0
  1466                           ;main.c: 399: { xLoMem=0x00; xLoMem|=ee_read_byte(2)<<8; xLoMem|=ee_read_byte(2+1)<<0; };
  1467  000128  6A34               	clrf	_xLoMem,c
  1468  00012A  6A35               	clrf	_xLoMem+1,c
  1469                           
  1470                           ; BSR set to: 0
  1471  00012C  0E02               	movlw	2
  1472  00012E  ECBC  F013         	call	_ee_read_byte
  1473  000132  6FAC               	movwf	(??_main+1)& (0+255),b
  1474  000134  6BAB               	clrf	??_main& (0+255),b
  1475  000136  51AB               	movf	??_main& (0+255),w,b
  1476  000138  1234               	iorwf	_xLoMem,f,c
  1477  00013A  51AC               	movf	(??_main+1)& (0+255),w,b
  1478  00013C  1235               	iorwf	_xLoMem+1,f,c
  1479                           
  1480                           ; BSR set to: 0
  1481  00013E  0E03               	movlw	3
  1482  000140  ECBC  F013         	call	_ee_read_byte
  1483  000144  1234               	iorwf	_xLoMem,f,c
  1484                           
  1485                           ; BSR set to: 0
  1486                           ;main.c: 400: { xUpMem=0x00; xUpMem|=ee_read_byte(4)<<8; xUpMem|=ee_read_byte(4+1)<<0; };
  1487  000146  6A36               	clrf	_xUpMem,c
  1488  000148  6A37               	clrf	_xUpMem+1,c
  1489                           
  1490                           ; BSR set to: 0
  1491  00014A  0E04               	movlw	4
  1492  00014C  ECBC  F013         	call	_ee_read_byte
  1493  000150  6FAC               	movwf	(??_main+1)& (0+255),b
  1494  000152  6BAB               	clrf	??_main& (0+255),b
  1495  000154  51AB               	movf	??_main& (0+255),w,b
  1496  000156  1236               	iorwf	_xUpMem,f,c
  1497  000158  51AC               	movf	(??_main+1)& (0+255),w,b
  1498  00015A  1237               	iorwf	_xUpMem+1,f,c
  1499                           
  1500                           ; BSR set to: 0
  1501  00015C  0E05               	movlw	5
  1502  00015E  ECBC  F013         	call	_ee_read_byte
  1503  000162  1236               	iorwf	_xUpMem,f,c
  1504                           
  1505                           ; BSR set to: 0
  1506                           ;main.c: 401: { eLoMem=0x00; eLoMem|=ee_read_byte(6)<<8; eLoMem|=ee_read_byte(6+1)<<0; };
  1507  000164  6A28               	clrf	_eLoMem,c
  1508  000166  6A29               	clrf	_eLoMem+1,c
  1509                           
  1510                           ; BSR set to: 0
  1511  000168  0E06               	movlw	6
  1512  00016A  ECBC  F013         	call	_ee_read_byte
  1513  00016E  6FAC               	movwf	(??_main+1)& (0+255),b
  1514  000170  6BAB               	clrf	??_main& (0+255),b
  1515  000172  51AB               	movf	??_main& (0+255),w,b
  1516  000174  1228               	iorwf	_eLoMem,f,c
  1517  000176  51AC               	movf	(??_main+1)& (0+255),w,b
  1518  000178  1229               	iorwf	_eLoMem+1,f,c
  1519                           
  1520                           ; BSR set to: 0
  1521  00017A  0E07               	movlw	7
  1522  00017C  ECBC  F013         	call	_ee_read_byte
  1523  000180  1228               	iorwf	_eLoMem,f,c
  1524                           
  1525                           ; BSR set to: 0
  1526                           ;main.c: 402: { eUpMem=0x00; eUpMem|=ee_read_byte(8)<<8; eUpMem|=ee_read_byte(8+1)<<0; };
  1527  000182  6A2A               	clrf	_eUpMem,c
  1528  000184  6A2B               	clrf	_eUpMem+1,c
  1529                           
  1530                           ; BSR set to: 0
  1531  000186  0E08               	movlw	8
  1532  000188  ECBC  F013         	call	_ee_read_byte
  1533  00018C  6FAC               	movwf	(??_main+1)& (0+255),b
  1534  00018E  6BAB               	clrf	??_main& (0+255),b
  1535  000190  51AB               	movf	??_main& (0+255),w,b
  1536  000192  122A               	iorwf	_eUpMem,f,c
  1537  000194  51AC               	movf	(??_main+1)& (0+255),w,b
  1538  000196  122B               	iorwf	_eUpMem+1,f,c
  1539                           
  1540                           ; BSR set to: 0
  1541  000198  0E09               	movlw	9
  1542  00019A  ECBC  F013         	call	_ee_read_byte
  1543  00019E  122A               	iorwf	_eUpMem,f,c
  1544                           
  1545                           ; BSR set to: 0
  1546                           ;main.c: 403: { vLoMem=0x00; vLoMem|=ee_read_byte(10)<<8; vLoMem|=ee_read_byte(10+1)<<0;
      +                           };
  1547  0001A0  6A30               	clrf	_vLoMem,c
  1548  0001A2  6A31               	clrf	_vLoMem+1,c
  1549                           
  1550                           ; BSR set to: 0
  1551  0001A4  0E0A               	movlw	10
  1552  0001A6  ECBC  F013         	call	_ee_read_byte
  1553  0001AA  6FAC               	movwf	(??_main+1)& (0+255),b
  1554  0001AC  6BAB               	clrf	??_main& (0+255),b
  1555  0001AE  51AB               	movf	??_main& (0+255),w,b
  1556  0001B0  1230               	iorwf	_vLoMem,f,c
  1557  0001B2  51AC               	movf	(??_main+1)& (0+255),w,b
  1558  0001B4  1231               	iorwf	_vLoMem+1,f,c
  1559                           
  1560                           ; BSR set to: 0
  1561  0001B6  0E0B               	movlw	11
  1562  0001B8  ECBC  F013         	call	_ee_read_byte
  1563  0001BC  1230               	iorwf	_vLoMem,f,c
  1564                           
  1565                           ; BSR set to: 0
  1566                           ;main.c: 404: { vUpMem=0x00; vUpMem|=ee_read_byte(12)<<8; vUpMem|=ee_read_byte(12+1)<<0;
      +                           };
  1567  0001BE  6A32               	clrf	_vUpMem,c
  1568  0001C0  6A33               	clrf	_vUpMem+1,c
  1569                           
  1570                           ; BSR set to: 0
  1571  0001C2  0E0C               	movlw	12
  1572  0001C4  ECBC  F013         	call	_ee_read_byte
  1573  0001C8  6FAC               	movwf	(??_main+1)& (0+255),b
  1574  0001CA  6BAB               	clrf	??_main& (0+255),b
  1575  0001CC  51AB               	movf	??_main& (0+255),w,b
  1576  0001CE  1232               	iorwf	_vUpMem,f,c
  1577  0001D0  51AC               	movf	(??_main+1)& (0+255),w,b
  1578  0001D2  1233               	iorwf	_vUpMem+1,f,c
  1579                           
  1580                           ; BSR set to: 0
  1581  0001D4  0E0D               	movlw	13
  1582  0001D6  ECBC  F013         	call	_ee_read_byte
  1583  0001DA  1232               	iorwf	_vUpMem,f,c
  1584                           
  1585                           ; BSR set to: 0
  1586                           ;main.c: 406: PORTCbits.RC6=1;
  1587  0001DC  8C82               	bsf	3970,6,c	;volatile
  1588                           
  1589                           ; BSR set to: 0
  1590                           ;main.c: 407: muxBuffer[0]='8';
  1591  0001DE  0E38               	movlw	56
  1592  0001E0  6FC9               	movwf	_muxBuffer& (0+255),b
  1593                           
  1594                           ; BSR set to: 0
  1595                           ;main.c: 408: muxBuffer[1]='8';
  1596  0001E2  6FCA               	movwf	(_muxBuffer+1)& (0+255),b
  1597                           
  1598                           ; BSR set to: 0
  1599                           ;main.c: 409: muxBuffer[2]='8';
  1600  0001E4  6FCB               	movwf	(_muxBuffer+2)& (0+255),b
  1601                           
  1602                           ; BSR set to: 0
  1603                           ;main.c: 410: muxBuffer[ADV]='x';
  1604  0001E6  0E78               	movlw	120
  1605  0001E8  6FCC               	movwf	(_muxBuffer+3)& (0+255),b
  1606                           
  1607                           ; BSR set to: 0
  1608                           ;main.c: 412: { timerMem[TMR_250MS].flag=0; timerMem[TMR_250MS].prescaler=timerDelayCons
      +                          tant[TMR_250MS]; timerMem[TMR_250MS].pause=0; timerMem[TMR_250MS].loop=1; };
  1609  0001EA  0101               	movlb	1	; () banked
  1610  0001EC  939E               	bcf	(_timerMem+19)& (0+255),1,b
  1611                           
  1612                           ; BSR set to: 1
  1613  0001EE  C10C  F19B         	movff	_timerDelayConstant+12,_timerMem+16
  1614  0001F2  C10D  F19C         	movff	_timerDelayConstant+13,_timerMem+17
  1615  0001F6  C10E  F19D         	movff	_timerDelayConstant+14,_timerMem+18
  1616                           
  1617                           ; BSR set to: 1
  1618  0001FA  959E               	bcf	(_timerMem+19)& (0+255),2,b
  1619                           
  1620                           ; BSR set to: 1
  1621  0001FC  819E               	bsf	(_timerMem+19)& (0+255),0,b
  1622                           
  1623                           ; BSR set to: 1
  1624                           ;main.c: 415: { timerMem[TMR_TEST_DISPLAYS].flag=0; timerMem[TMR_TEST_DISPLAYS].prescale
      +                          r=timerDelayConstant[TMR_TEST_DISPLAYS]; timerMem[TMR_TEST_DISPLAYS].pause=0; };
  1625  0001FE  93AE               	bcf	(_timerMem+35)& (0+255),1,b
  1626                           
  1627                           ; BSR set to: 1
  1628  000200  C118  F1AB         	movff	_timerDelayConstant+24,_timerMem+32
  1629  000204  C119  F1AC         	movff	_timerDelayConstant+25,_timerMem+33
  1630  000208  C11A  F1AD         	movff	_timerDelayConstant+26,_timerMem+34
  1631                           
  1632                           ; BSR set to: 1
  1633  00020C  95AE               	bcf	(_timerMem+35)& (0+255),2,b
  1634                           
  1635                           ; BSR set to: 1
  1636                           ;main.c: 416: { timerMem[TMR_TEST_ADVERTENCIA].flag=0; timerMem[TMR_TEST_ADVERTENCIA].pr
      +                          escaler=timerDelayConstant[TMR_TEST_ADVERTENCIA]; timerMem[TMR_TEST_ADVERTENCIA].pause=0
      +                          ; };
  1637  00020E  93B2               	bcf	(_timerMem+39)& (0+255),1,b
  1638                           
  1639                           ; BSR set to: 1
  1640  000210  C11B  F1AF         	movff	_timerDelayConstant+27,_timerMem+36
  1641  000214  C11C  F1B0         	movff	_timerDelayConstant+28,_timerMem+37
  1642  000218  C11D  F1B1         	movff	_timerDelayConstant+29,_timerMem+38
  1643                           
  1644                           ; BSR set to: 1
  1645  00021C  95B2               	bcf	(_timerMem+39)& (0+255),2,b
  1646  00021E                     l6709:
  1647                           
  1648                           ; BSR set to: 1
  1649                           ;main.c: 419: {
  1650                           ;main.c: 420: if((timerMem[TMR_250MS].flag?!(timerMem[TMR_250MS].flag=0):0))
  1651  00021E  B39E               	btfsc	(_timerMem+19)& (0+255),1,b
  1652  000220  D002               	goto	l6713
  1653                           
  1654                           ; BSR set to: 1
  1655  000222  6B4D               	clrf	_main$441& (0+255),b
  1656  000224  D00A               	goto	L1
  1657  000226                     l6713:
  1658                           
  1659                           ; BSR set to: 1
  1660  000226  519E               	movf	(_timerMem+19)& (0+255),w,b
  1661  000228  0BFD               	andlw	-3
  1662  00022A  6F9E               	movwf	(_timerMem+19)& (0+255),b
  1663  00022C  0101               	movlb	1	; () banked
  1664  00022E  319E               	rrcf	(_timerMem+19)& (0+255),w,b
  1665  000230  0B01               	andlw	1
  1666  000232  0E00               	movlw	0
  1667  000234  B4D8               	btfsc	status,2,c
  1668  000236  0E01               	movlw	1
  1669  000238  6F4D               	movwf	_main$441& (0+255),b
  1670  00023A                     L1:
  1671  00023A  6B4E               	clrf	(_main$441+1)& (0+255),b
  1672                           
  1673                           ; BSR set to: 1
  1674  00023C  514E               	movf	(_main$441+1)& (0+255),w,b
  1675  00023E  114D               	iorwf	_main$441& (0+255),w,b
  1676  000240  E01E               	bz	l6717
  1677                           
  1678                           ; BSR set to: 1
  1679                           ;main.c: 421: {
  1680                           ;main.c: 422: timerDriver(TMR_LONG_PULS_UP);
  1681  000242  0E00               	movlw	0
  1682  000244  EC0F  F00F         	call	_timerDriver
  1683                           
  1684                           ;main.c: 423: timerDriver(TMR_LONG_PULS_DWN);
  1685  000248  0E01               	movlw	1
  1686  00024A  EC0F  F00F         	call	_timerDriver
  1687                           
  1688                           ;main.c: 424: timerDriver(TMR_TEST_DISPLAYS);
  1689  00024E  0E08               	movlw	8
  1690  000250  EC0F  F00F         	call	_timerDriver
  1691                           
  1692                           ;main.c: 425: timerDriver(TMR_TEST_ADVERTENCIA);
  1693  000254  0E09               	movlw	9
  1694  000256  EC0F  F00F         	call	_timerDriver
  1695                           
  1696                           ;main.c: 426: timerDriver(TMR_SHOW_MENU);
  1697  00025A  0E03               	movlw	3
  1698  00025C  EC0F  F00F         	call	_timerDriver
  1699                           
  1700                           ;main.c: 427: timerDriver(TMR_SHOW_SETTING);
  1701  000260  0E05               	movlw	5
  1702  000262  EC0F  F00F         	call	_timerDriver
  1703                           
  1704                           ;main.c: 428: timerDriver(TMR_SHOW_SETTING_OFF);
  1705  000266  0E07               	movlw	7
  1706  000268  EC0F  F00F         	call	_timerDriver
  1707                           
  1708                           ;main.c: 429: timerDriver(TMR_SHOW_SETTING_ON);
  1709  00026C  0E06               	movlw	6
  1710  00026E  EC0F  F00F         	call	_timerDriver
  1711                           
  1712                           ;main.c: 430: timerDriver(TMR_SHOW_DESCRIPTION);
  1713  000272  0E0A               	movlw	10
  1714  000274  EC0F  F00F         	call	_timerDriver
  1715                           
  1716                           ;main.c: 431: timerDriver(TMR_SPACE);
  1717  000278  0E0B               	movlw	11
  1718  00027A  EC0F  F00F         	call	_timerDriver
  1719  00027E                     l6717:
  1720                           
  1721                           ;main.c: 432: }
  1722                           ;main.c: 434: if((timerMem[TMR_SHOW_MENU].flag?!(timerMem[TMR_SHOW_MENU].flag=0):0)) sta
      +                          te=E_IDLE;
  1723  00027E  0101               	movlb	1	; () banked
  1724  000280  B39A               	btfsc	(_timerMem+15)& (0+255),1,b
  1725  000282  D002               	goto	l6721
  1726                           
  1727                           ; BSR set to: 1
  1728  000284  6B4F               	clrf	_main$442& (0+255),b
  1729  000286  D00A               	goto	L2
  1730  000288                     l6721:
  1731                           
  1732                           ; BSR set to: 1
  1733  000288  519A               	movf	(_timerMem+15)& (0+255),w,b
  1734  00028A  0BFD               	andlw	-3
  1735  00028C  6F9A               	movwf	(_timerMem+15)& (0+255),b
  1736  00028E  0101               	movlb	1	; () banked
  1737  000290  319A               	rrcf	(_timerMem+15)& (0+255),w,b
  1738  000292  0B01               	andlw	1
  1739  000294  0E00               	movlw	0
  1740  000296  B4D8               	btfsc	status,2,c
  1741  000298  0E01               	movlw	1
  1742  00029A  6F4F               	movwf	_main$442& (0+255),b
  1743  00029C                     L2:
  1744  00029C  6B50               	clrf	(_main$442+1)& (0+255),b
  1745                           
  1746                           ; BSR set to: 1
  1747  00029E  5150               	movf	(_main$442+1)& (0+255),w,b
  1748  0002A0  114F               	iorwf	_main$442& (0+255),w,b
  1749  0002A2  E002               	bz	l6725
  1750                           
  1751                           ; BSR set to: 1
  1752  0002A4  0E01               	movlw	1
  1753  0002A6  6E3A               	movwf	_state,c
  1754  0002A8                     l6725:
  1755                           
  1756                           ; BSR set to: 1
  1757                           ;main.c: 437: actionsTimeoutShowSetting();
  1758  0002A8  ECAD  F010         	call	_actionsTimeoutShowSetting	;wreg free
  1759                           
  1760                           ;main.c: 439: if((timerMem[TMR_LONG_PULS_UP].flag?!(timerMem[TMR_LONG_PULS_UP].flag=0):0
      +                          ))
  1761  0002AC  0101               	movlb	1	; () banked
  1762  0002AE  B38E               	btfsc	(_timerMem+3)& (0+255),1,b
  1763  0002B0  D002               	goto	l6731
  1764                           
  1765                           ; BSR set to: 1
  1766  0002B2  6B51               	clrf	_main$443& (0+255),b
  1767  0002B4  D00A               	goto	L3
  1768  0002B6                     l6731:
  1769                           
  1770                           ; BSR set to: 1
  1771  0002B6  518E               	movf	(_timerMem+3)& (0+255),w,b
  1772  0002B8  0BFD               	andlw	-3
  1773  0002BA  6F8E               	movwf	(_timerMem+3)& (0+255),b
  1774  0002BC  0101               	movlb	1	; () banked
  1775  0002BE  318E               	rrcf	(_timerMem+3)& (0+255),w,b
  1776  0002C0  0B01               	andlw	1
  1777  0002C2  0E00               	movlw	0
  1778  0002C4  B4D8               	btfsc	status,2,c
  1779  0002C6  0E01               	movlw	1
  1780  0002C8  6F51               	movwf	_main$443& (0+255),b
  1781  0002CA                     L3:
  1782  0002CA  6B52               	clrf	(_main$443+1)& (0+255),b
  1783                           
  1784                           ; BSR set to: 1
  1785  0002CC  5152               	movf	(_main$443+1)& (0+255),w,b
  1786  0002CE  1151               	iorwf	_main$443& (0+255),w,b
  1787  0002D0  E030               	bz	l188
  1788                           
  1789                           ; BSR set to: 1
  1790                           ;main.c: 440: {
  1791                           ;main.c: 441: { timerMem[TMR_SHOW_MENU].prescaler=0; timerMem[TMR_SHOW_MENU].pause=1; };
  1792                           
  1793                           ;main.c: 442: PORTCbits.RC6=1;
  1794                           
  1795                           ;main.c: 443: { timerMem[TMR_BEEP].flag=0; timerMem[TMR_BEEP].prescaler=timerDelayConsta
      +                          nt[TMR_BEEP]; timerMem[TMR_BEEP].pause=0; };
  1796                           
  1797                           ;main.c: 444: { timerMem[TMR_SHOW_SETTING].flag=0; timerMem[TMR_SHOW_SETTING].prescaler=
      +                          timerDelayConstant[TMR_SHOW_SETTING]; timerMem[TMR_SHOW_SETTING].pause=0; };
  1798  0002D2  EC22  F007         	call	PL9	;call to abstracted procedure
  1799                           
  1800                           ;main.c: 445: { timerMem[TMR_SHOW_SETTING_ON].flag=0; timerMem[TMR_SHOW_SETTING_ON].pres
      +                          caler=timerDelayConstant[TMR_SHOW_SETTING_ON]; timerMem[TMR_SHOW_SETTING_ON].pause=0; };
  1801  0002D6  EC02  F007         	call	PL2	;call to abstracted procedure
  1802                           
  1803                           ; BSR set to: 1
  1804                           ;main.c: 446: enterMenu();
  1805  0002DA  ECF8  F011         	call	_enterMenu	;wreg free
  1806                           
  1807                           ; BSR set to: 1
  1808                           ;main.c: 447: ignoreNextFp=1;
  1809  0002DE  0E01               	movlw	1
  1810  0002E0  0100               	movlb	0	; () banked
  1811  0002E2  6FBB               	movwf	_ignoreNextFp& (0+255),b
  1812                           
  1813                           ; BSR set to: 0
  1814                           ;main.c: 448: if( state==E_SET_ADV_XLO || state==E_SET_ADV_XUP
  1815                           ;main.c: 449: || state==E_SET_ADV_ELO || state==E_SET_ADV_EUP
  1816                           ;main.c: 450: || state==E_SET_ADV_VLO || state==E_SET_ADV_VUP
  1817                           ;main.c: 451: || state==E_SET_ESCALA_ENT || state==E_SET_ESCALA_DEC)
  1818  0002E4  503A               	movf	_state,w,c
  1819  0002E6  0A0F               	xorlw	15
  1820  0002E8  E01D               	bz	l6763
  1821                           
  1822                           ; BSR set to: 0
  1823  0002EA  503A               	movf	_state,w,c
  1824  0002EC  0A11               	xorlw	17
  1825  0002EE  E01A               	bz	l6763
  1826                           
  1827                           ; BSR set to: 0
  1828  0002F0  503A               	movf	_state,w,c
  1829  0002F2  0A13               	xorlw	19
  1830  0002F4  E017               	bz	l6763
  1831                           
  1832                           ; BSR set to: 0
  1833  0002F6  503A               	movf	_state,w,c
  1834  0002F8  0A15               	xorlw	21
  1835  0002FA  E014               	bz	l6763
  1836                           
  1837                           ; BSR set to: 0
  1838  0002FC  503A               	movf	_state,w,c
  1839  0002FE  0A17               	xorlw	23
  1840  000300  E011               	bz	l6763
  1841                           
  1842                           ; BSR set to: 0
  1843  000302  503A               	movf	_state,w,c
  1844  000304  0A19               	xorlw	25
  1845  000306  E00E               	bz	l6763
  1846                           
  1847                           ; BSR set to: 0
  1848  000308  503A               	movf	_state,w,c
  1849  00030A  0A0A               	xorlw	10
  1850  00030C  E00B               	bz	l6763
  1851                           
  1852                           ; BSR set to: 0
  1853  00030E  503A               	movf	_state,w,c
  1854  000310  0A0C               	xorlw	12
  1855  000312  E008               	bz	l6763
  1856  000314  D00E               	goto	l188
  1857  000316                     l6755:
  1858                           
  1859                           ; BSR set to: 0
  1860  000316  0E0A               	movlw	10
  1861  000318  D003               	goto	L5
  1862  00031A                     l6757:
  1863                           
  1864                           ; BSR set to: 0
  1865  00031A  0E64               	movlw	100
  1866  00031C  D001               	goto	L5
  1867  00031E                     l6759:
  1868                           
  1869                           ; BSR set to: 0
  1870  00031E  0E01               	movlw	1
  1871  000320                     L5:
  1872  000320  6E3C               	movwf	_setInc,c
  1873  000322  D007               	goto	l188
  1874  000324                     l6763:
  1875                           
  1876                           ; BSR set to: 0
  1877  000324  503C               	movf	_setInc,w,c
  1878                           
  1879                           ; Switch size 1, requested type "space"
  1880                           ; Number of cases is 3, Range of values is 1 to 100
  1881                           ; switch strategies available:
  1882                           ; Name         Instructions Cycles
  1883                           ; simple_byte           10     6 (average)
  1884                           ;	Chosen strategy is simple_byte
  1885  000326  0A01               	xorlw	1	; case 1
  1886  000328  E0F6               	bz	l6755
  1887  00032A  0A0B               	xorlw	11	; case 10
  1888  00032C  E0F6               	bz	l6757
  1889  00032E  0A6E               	xorlw	110	; case 100
  1890  000330  E0F6               	bz	l6759
  1891  000332                     l188:
  1892                           
  1893                           ;main.c: 458: }
  1894                           ;main.c: 460: if((timerMem[TMR_LONG_PULS_DWN].flag?!(timerMem[TMR_LONG_PULS_DWN].flag=0)
      +                          :0))
  1895  000332  0101               	movlb	1	; () banked
  1896  000334  B392               	btfsc	(_timerMem+7)& (0+255),1,b
  1897  000336  D002               	goto	l6767
  1898                           
  1899                           ; BSR set to: 1
  1900  000338  6B53               	clrf	_main$444& (0+255),b
  1901  00033A  D00A               	goto	L6
  1902  00033C                     l6767:
  1903                           
  1904                           ; BSR set to: 1
  1905  00033C  5192               	movf	(_timerMem+7)& (0+255),w,b
  1906  00033E  0BFD               	andlw	-3
  1907  000340  6F92               	movwf	(_timerMem+7)& (0+255),b
  1908  000342  0101               	movlb	1	; () banked
  1909  000344  3192               	rrcf	(_timerMem+7)& (0+255),w,b
  1910  000346  0B01               	andlw	1
  1911  000348  0E00               	movlw	0
  1912  00034A  B4D8               	btfsc	status,2,c
  1913  00034C  0E01               	movlw	1
  1914  00034E  6F53               	movwf	_main$444& (0+255),b
  1915  000350                     L6:
  1916  000350  6B54               	clrf	(_main$444+1)& (0+255),b
  1917                           
  1918                           ; BSR set to: 1
  1919  000352  5154               	movf	(_main$444+1)& (0+255),w,b
  1920  000354  1153               	iorwf	_main$444& (0+255),w,b
  1921  000356  E030               	bz	l201
  1922                           
  1923                           ; BSR set to: 1
  1924                           ;main.c: 461: {
  1925                           ;main.c: 462: { timerMem[TMR_SHOW_MENU].prescaler=0; timerMem[TMR_SHOW_MENU].pause=1; };
  1926                           
  1927                           ;main.c: 463: PORTCbits.RC6=1;
  1928                           
  1929                           ;main.c: 464: { timerMem[TMR_BEEP].flag=0; timerMem[TMR_BEEP].prescaler=timerDelayConsta
      +                          nt[TMR_BEEP]; timerMem[TMR_BEEP].pause=0; };
  1930                           
  1931                           ;main.c: 465: { timerMem[TMR_SHOW_SETTING].flag=0; timerMem[TMR_SHOW_SETTING].prescaler=
      +                          timerDelayConstant[TMR_SHOW_SETTING]; timerMem[TMR_SHOW_SETTING].pause=0; };
  1932  000358  EC22  F007         	call	PL9	;call to abstracted procedure
  1933                           
  1934                           ;main.c: 466: { timerMem[TMR_SHOW_SETTING_ON].flag=0; timerMem[TMR_SHOW_SETTING_ON].pres
      +                          caler=timerDelayConstant[TMR_SHOW_SETTING_ON]; timerMem[TMR_SHOW_SETTING_ON].pause=0; };
  1935  00035C  EC02  F007         	call	PL2	;call to abstracted procedure
  1936                           
  1937                           ; BSR set to: 1
  1938                           ;main.c: 467: enterMenu();
  1939  000360  ECF8  F011         	call	_enterMenu	;wreg free
  1940                           
  1941                           ; BSR set to: 1
  1942                           ;main.c: 468: ignoreNextFp=1;
  1943  000364  0E01               	movlw	1
  1944  000366  0100               	movlb	0	; () banked
  1945  000368  6FBB               	movwf	_ignoreNextFp& (0+255),b
  1946                           
  1947                           ; BSR set to: 0
  1948                           ;main.c: 469: if( state==E_SET_ADV_XLO || state==E_SET_ADV_XUP
  1949                           ;main.c: 470: || state==E_SET_ADV_ELO || state==E_SET_ADV_EUP
  1950                           ;main.c: 471: || state==E_SET_ADV_VLO || state==E_SET_ADV_VUP
  1951                           ;main.c: 472: || state==E_SET_ESCALA_ENT || state==E_SET_ESCALA_DEC)
  1952  00036A  503A               	movf	_state,w,c
  1953  00036C  0A0F               	xorlw	15
  1954  00036E  E01D               	bz	l6799
  1955                           
  1956                           ; BSR set to: 0
  1957  000370  503A               	movf	_state,w,c
  1958  000372  0A11               	xorlw	17
  1959  000374  E01A               	bz	l6799
  1960                           
  1961                           ; BSR set to: 0
  1962  000376  503A               	movf	_state,w,c
  1963  000378  0A13               	xorlw	19
  1964  00037A  E017               	bz	l6799
  1965                           
  1966                           ; BSR set to: 0
  1967  00037C  503A               	movf	_state,w,c
  1968  00037E  0A15               	xorlw	21
  1969  000380  E014               	bz	l6799
  1970                           
  1971                           ; BSR set to: 0
  1972  000382  503A               	movf	_state,w,c
  1973  000384  0A17               	xorlw	23
  1974  000386  E011               	bz	l6799
  1975                           
  1976                           ; BSR set to: 0
  1977  000388  503A               	movf	_state,w,c
  1978  00038A  0A19               	xorlw	25
  1979  00038C  E00E               	bz	l6799
  1980                           
  1981                           ; BSR set to: 0
  1982  00038E  503A               	movf	_state,w,c
  1983  000390  0A0A               	xorlw	10
  1984  000392  E00B               	bz	l6799
  1985                           
  1986                           ; BSR set to: 0
  1987  000394  503A               	movf	_state,w,c
  1988  000396  0A0C               	xorlw	12
  1989  000398  E008               	bz	l6799
  1990  00039A  D00E               	goto	l201
  1991  00039C                     l6791:
  1992                           
  1993                           ; BSR set to: 0
  1994  00039C  0E64               	movlw	100
  1995  00039E  D003               	goto	L8
  1996  0003A0                     l6793:
  1997                           
  1998                           ; BSR set to: 0
  1999  0003A0  0E01               	movlw	1
  2000  0003A2  D001               	goto	L8
  2001  0003A4                     l6795:
  2002                           
  2003                           ; BSR set to: 0
  2004  0003A4  0E0A               	movlw	10
  2005  0003A6                     L8:
  2006  0003A6  6E3C               	movwf	_setInc,c
  2007  0003A8  D007               	goto	l201
  2008  0003AA                     l6799:
  2009                           
  2010                           ; BSR set to: 0
  2011  0003AA  503C               	movf	_setInc,w,c
  2012                           
  2013                           ; Switch size 1, requested type "space"
  2014                           ; Number of cases is 3, Range of values is 1 to 100
  2015                           ; switch strategies available:
  2016                           ; Name         Instructions Cycles
  2017                           ; simple_byte           10     6 (average)
  2018                           ;	Chosen strategy is simple_byte
  2019  0003AC  0A01               	xorlw	1	; case 1
  2020  0003AE  E0F6               	bz	l6791
  2021  0003B0  0A0B               	xorlw	11	; case 10
  2022  0003B2  E0F6               	bz	l6793
  2023  0003B4  0A6E               	xorlw	110	; case 100
  2024  0003B6  E0F6               	bz	l6795
  2025  0003B8                     l201:
  2026                           
  2027                           ;main.c: 479: }
  2028                           ;main.c: 483: if(state==E_TEST_DISPLAYS)
  2029  0003B8  663A               	tstfsz	_state,c
  2030  0003BA  D03E               	goto	l6825
  2031                           
  2032                           ;main.c: 484: {
  2033                           ;main.c: 485: if((timerMem[TMR_TEST_ADVERTENCIA].flag?!(timerMem[TMR_TEST_ADVERTENCIA].f
      +                          lag=0):0))
  2034  0003BC  0101               	movlb	1	; () banked
  2035  0003BE  B3B2               	btfsc	(_timerMem+39)& (0+255),1,b
  2036  0003C0  D002               	goto	l6805
  2037                           
  2038                           ; BSR set to: 1
  2039  0003C2  6B55               	clrf	_main$445& (0+255),b
  2040  0003C4  D00A               	goto	L9
  2041  0003C6                     l6805:
  2042                           
  2043                           ; BSR set to: 1
  2044  0003C6  51B2               	movf	(_timerMem+39)& (0+255),w,b
  2045  0003C8  0BFD               	andlw	-3
  2046  0003CA  6FB2               	movwf	(_timerMem+39)& (0+255),b
  2047  0003CC  0101               	movlb	1	; () banked
  2048  0003CE  31B2               	rrcf	(_timerMem+39)& (0+255),w,b
  2049  0003D0  0B01               	andlw	1
  2050  0003D2  0E00               	movlw	0
  2051  0003D4  B4D8               	btfsc	status,2,c
  2052  0003D6  0E01               	movlw	1
  2053  0003D8  6F55               	movwf	_main$445& (0+255),b
  2054  0003DA                     L9:
  2055  0003DA  6B56               	clrf	(_main$445+1)& (0+255),b
  2056                           
  2057                           ; BSR set to: 1
  2058  0003DC  5156               	movf	(_main$445+1)& (0+255),w,b
  2059  0003DE  1155               	iorwf	_main$445& (0+255),w,b
  2060  0003E0  E013               	bz	l6817
  2061                           
  2062                           ; BSR set to: 1
  2063                           ;main.c: 486: {
  2064                           ;main.c: 487: { timerMem[TMR_TEST_ADVERTENCIA].flag=0; timerMem[TMR_TEST_ADVERTENCIA].pr
      +                          escaler=timerDelayConstant[TMR_TEST_ADVERTENCIA]; timerMem[TMR_TEST_ADVERTENCIA].pause=0
      +                          ; };
  2065  0003E2  93B2               	bcf	(_timerMem+39)& (0+255),1,b
  2066  0003E4  C11B  F1AF         	movff	_timerDelayConstant+27,_timerMem+36
  2067  0003E8  C11C  F1B0         	movff	_timerDelayConstant+28,_timerMem+37
  2068  0003EC  C11D  F1B1         	movff	_timerDelayConstant+29,_timerMem+38
  2069  0003F0  95B2               	bcf	(_timerMem+39)& (0+255),2,b
  2070                           
  2071                           ; BSR set to: 1
  2072                           ;main.c: 488: if(muxBuffer[ADV]=='x') muxBuffer[ADV]='!';
  2073  0003F2  0100               	movlb	0	; () banked
  2074  0003F4  51CC               	movf	(_muxBuffer+3)& (0+255),w,b
  2075  0003F6  0A78               	xorlw	120
  2076  0003F8  E102               	bnz	l6813
  2077                           
  2078                           ; BSR set to: 0
  2079  0003FA  0E21               	movlw	33
  2080  0003FC  D004               	goto	L10
  2081  0003FE                     l6813:
  2082                           
  2083                           ; BSR set to: 0
  2084                           ;main.c: 489: else if(muxBuffer[ADV]=='!') muxBuffer[ADV]='v';
  2085  0003FE  51CC               	movf	(_muxBuffer+3)& (0+255),w,b
  2086  000400  0A21               	xorlw	33
  2087  000402  E102               	bnz	l6817
  2088                           
  2089                           ; BSR set to: 0
  2090  000404  0E76               	movlw	118
  2091  000406                     L10:
  2092  000406  6FCC               	movwf	(_muxBuffer+3)& (0+255),b
  2093  000408                     l6817:
  2094                           
  2095                           ;main.c: 490: }
  2096                           ;main.c: 491: if((timerMem[TMR_TEST_DISPLAYS].flag?!(timerMem[TMR_TEST_DISPLAYS].flag=0)
      +                          :0)) endTestDisplayActions();
  2097  000408  0101               	movlb	1	; () banked
  2098  00040A  B3AE               	btfsc	(_timerMem+35)& (0+255),1,b
  2099  00040C  D002               	goto	l6821
  2100                           
  2101                           ; BSR set to: 1
  2102  00040E  6B57               	clrf	_main$446& (0+255),b
  2103  000410  D00A               	goto	L11
  2104  000412                     l6821:
  2105                           
  2106                           ; BSR set to: 1
  2107  000412  51AE               	movf	(_timerMem+35)& (0+255),w,b
  2108  000414  0BFD               	andlw	-3
  2109  000416  6FAE               	movwf	(_timerMem+35)& (0+255),b
  2110  000418  0101               	movlb	1	; () banked
  2111  00041A  31AE               	rrcf	(_timerMem+35)& (0+255),w,b
  2112  00041C  0B01               	andlw	1
  2113  00041E  0E00               	movlw	0
  2114  000420  B4D8               	btfsc	status,2,c
  2115  000422  0E01               	movlw	1
  2116  000424  6F57               	movwf	_main$446& (0+255),b
  2117  000426                     L11:
  2118  000426  6B58               	clrf	(_main$446+1)& (0+255),b
  2119                           
  2120                           ; BSR set to: 1
  2121  000428  5158               	movf	(_main$446+1)& (0+255),w,b
  2122  00042A  1157               	iorwf	_main$446& (0+255),w,b
  2123  00042C  E102 EF1A  F006    	bz	l7307
  2124                           
  2125                           ; BSR set to: 1
  2126  000432  EC9A  F013         	call	_endTestDisplayActions	;wreg free
  2127                           
  2128                           ;main.c: 492: }
  2129  000436  D3FE               	goto	l7307
  2130  000438                     l6825:
  2131                           
  2132                           ;main.c: 493: else if(state==E_IDLE)
  2133  000438  043A               	decf	_state,w,c
  2134  00043A  E001 D1B9          	bnz	l7007
  2135                           
  2136                           ;main.c: 494: {
  2137                           ;main.c: 495: adcDriver();
  2138  00043E  EC19  F010         	call	_adcDriver	;wreg free
  2139                           
  2140                           ; BSR set to: 0
  2141                           ;main.c: 496: if((timerMem[TMR_ADCSAMPLE].flag?!(timerMem[TMR_ADCSAMPLE].flag=0):0)) ((a
      +                          dcStruct.flgs2convert) |= 1UL << (12));
  2142  000442  0101               	movlb	1	; () banked
  2143  000444  B3BE               	btfsc	(_timerMem+51)& (0+255),1,b
  2144  000446  D002               	goto	l6833
  2145                           
  2146                           ; BSR set to: 1
  2147  000448  6B59               	clrf	_main$447& (0+255),b
  2148  00044A  D00A               	goto	L12
  2149  00044C                     l6833:
  2150                           
  2151                           ; BSR set to: 1
  2152  00044C  51BE               	movf	(_timerMem+51)& (0+255),w,b
  2153  00044E  0BFD               	andlw	-3
  2154  000450  6FBE               	movwf	(_timerMem+51)& (0+255),b
  2155  000452  0101               	movlb	1	; () banked
  2156  000454  31BE               	rrcf	(_timerMem+51)& (0+255),w,b
  2157  000456  0B01               	andlw	1
  2158  000458  0E00               	movlw	0
  2159  00045A  B4D8               	btfsc	status,2,c
  2160  00045C  0E01               	movlw	1
  2161  00045E  6F59               	movwf	_main$447& (0+255),b
  2162  000460                     L12:
  2163  000460  6B5A               	clrf	(_main$447+1)& (0+255),b
  2164                           
  2165                           ; BSR set to: 1
  2166  000462  515A               	movf	(_main$447+1)& (0+255),w,b
  2167  000464  1159               	iorwf	_main$447& (0+255),w,b
  2168  000466  E002               	bz	l6837
  2169                           
  2170                           ; BSR set to: 1
  2171  000468  0100               	movlb	0	; () banked
  2172  00046A  89B0               	bsf	(_adcStruct+3)& (0+255),4,b
  2173  00046C                     l6837:
  2174                           
  2175                           ;main.c: 497: if((adcStruct.completeFlg && adcStruct.chComp==12))
  2176  00046C  0100               	movlb	0	; () banked
  2177  00046E  A1AD               	btfss	_adcStruct& (0+255),0,b
  2178  000470  D3E1               	goto	l7307
  2179                           
  2180                           ; BSR set to: 0
  2181  000472  51AE               	movf	(_adcStruct+1)& (0+255),w,b
  2182  000474  0A0C               	xorlw	12
  2183  000476  E001 D3DD          	bnz	l7307
  2184                           
  2185                           ; BSR set to: 0
  2186                           ;main.c: 498: {
  2187                           ;main.c: 501: medicionFloat=iir((getConv()-21.8)/2.327);
  2188  00047A  0E66               	movlw	102
  2189  00047C  6F80               	movwf	(?___ftadd+3)& (0+255),b
  2190  00047E  0EAE               	movlw	174
  2191  000480  6F81               	movwf	(?___ftadd+4)& (0+255),b
  2192  000482  0EC1               	movlw	193
  2193  000484  6F82               	movwf	(?___ftadd+5)& (0+255),b
  2194  000486  ECD6  F013         	call	_getConv	;wreg free
  2195  00048A  C060  F068         	movff	?_getConv,?___awtoft
  2196  00048E  C061  F069         	movff	?_getConv+1,?___awtoft+1
  2197  000492  EC51  F013         	call	___awtoft	;wreg free
  2198  000496  C068  F07D         	movff	?___awtoft,?___ftadd
  2199  00049A  C069  F07E         	movff	?___awtoft+1,?___ftadd+1
  2200  00049E  C06A  F07F         	movff	?___awtoft+2,?___ftadd+2
  2201  0004A2  ECB3  F00B         	call	___ftadd	;wreg free
  2202  0004A6  C07D  F06C         	movff	?___ftadd,?___ftdiv
  2203  0004AA  C07E  F06D         	movff	?___ftadd+1,?___ftdiv+1
  2204  0004AE  C07F  F06E         	movff	?___ftadd+2,?___ftdiv+2
  2205  0004B2  0EEE               	movlw	238
  2206  0004B4  6F6F               	movwf	(?___ftdiv+3)& (0+255),b
  2207  0004B6  0E14               	movlw	20
  2208  0004B8  6F70               	movwf	(?___ftdiv+4)& (0+255),b
  2209  0004BA  0E40               	movlw	64
  2210  0004BC  6F71               	movwf	(?___ftdiv+5)& (0+255),b
  2211  0004BE  EC35  F00E         	call	___ftdiv	;wreg free
  2212  0004C2  C06C  F14A         	movff	?___ftdiv,_main$2642
  2213  0004C6  C06D  F14B         	movff	?___ftdiv+1,_main$2642+1
  2214  0004CA  C06E  F14C         	movff	?___ftdiv+2,_main$2642+2
  2215                           
  2216                           ; BSR set to: 0
  2217                           ;main.c: 498: {
  2218                           ;main.c: 501: medicionFloat=iir((getConv()-21.8)/2.327);
  2219  0004CE  C14A  F095         	movff	_main$2642,?_iir
  2220  0004D2  C14B  F096         	movff	_main$2642+1,?_iir+1
  2221  0004D6  C14C  F097         	movff	_main$2642+2,?_iir+2
  2222  0004DA  EC6D  F00C         	call	_iir	;wreg free
  2223  0004DE  C095  F0C6         	movff	?_iir,_medicionFloat
  2224  0004E2  C096  F0C7         	movff	?_iir+1,_medicionFloat+1
  2225  0004E6  C097  F0C8         	movff	?_iir+2,_medicionFloat+2
  2226                           
  2227                           ; BSR set to: 0
  2228                           ;main.c: 502: medicionFloat=medicionFloat*escala;
  2229  0004EA  C0B2  F079         	movff	_escala,?___asftmul
  2230  0004EE  C0B3  F07A         	movff	_escala+1,?___asftmul+1
  2231  0004F2  C0B4  F07B         	movff	_escala+2,?___asftmul+2
  2232  0004F6  0EC6               	movlw	_medicionFloat& (0+255)
  2233  0004F8  EC33  F013         	call	___asftmul
  2234                           
  2235                           ; BSR set to: 0
  2236                           ;main.c: 504: measurement=medicionFloat;
  2237  0004FC  C0C6  F060         	movff	_medicionFloat,?___fttol
  2238  000500  C0C7  F061         	movff	_medicionFloat+1,?___fttol+1
  2239  000504  C0C8  F062         	movff	_medicionFloat+2,?___fttol+2
  2240  000508  EC70  F00F         	call	___fttol	;wreg free
  2241  00050C  C060  F0B7         	movff	?___fttol,_measurement
  2242  000510  C061  F0B8         	movff	?___fttol+1,_measurement+1
  2243                           
  2244                           ; BSR set to: 0
  2245                           ;main.c: 508: if(measurement>999) measurement=999;
  2246  000514  0EE8               	movlw	232
  2247  000516  5DB7               	subwf	_measurement& (0+255),w,b
  2248  000518  0E03               	movlw	3
  2249  00051A  59B8               	subwfb	(_measurement+1)& (0+255),w,b
  2250  00051C  E304               	bnc	l6853
  2251                           
  2252                           ; BSR set to: 0
  2253  00051E  0E03               	movlw	3
  2254  000520  6FB8               	movwf	(_measurement+1)& (0+255),b
  2255  000522  0EE7               	movlw	231
  2256  000524  6FB7               	movwf	_measurement& (0+255),b
  2257  000526                     l6853:
  2258                           
  2259                           ; BSR set to: 0
  2260                           ;main.c: 509: uintToStr(measurement,&muxBuffer[0],3);
  2261  000526  C0B7  F067         	movff	_measurement,?_uintToStr
  2262  00052A  C0B8  F068         	movff	_measurement+1,?_uintToStr+1
  2263  00052E  0EC9               	movlw	low _muxBuffer
  2264  000530  6F69               	movwf	(?_uintToStr+2)& (0+255),b
  2265  000532  0E03               	movlw	3
  2266  000534  6F6A               	movwf	(?_uintToStr+3)& (0+255),b
  2267  000536  EC21  F012         	call	_uintToStr	;wreg free
  2268                           
  2269                           ;main.c: 511: switch(advModeMem)
  2270  00053A  D123               	goto	l7005
  2271  00053C                     l6855:
  2272                           
  2273                           ; BSR set to: 0
  2274  00053C  0E20               	movlw	32
  2275  00053E  D142               	goto	L17
  2276  000540                     l6857:
  2277                           
  2278                           ; BSR set to: 0
  2279                           ;main.c: 515: if(measurement<=xLoMem || measurement>=xUpMem) muxBuffer[3]='-';
  2280  000540  51B7               	movf	_measurement& (0+255),w,b
  2281  000542  5C34               	subwf	_xLoMem,w,c
  2282  000544  51B8               	movf	(_measurement+1)& (0+255),w,b
  2283  000546  5835               	subwfb	_xLoMem+1,w,c
  2284  000548  E205               	bc	l6861
  2285                           
  2286                           ; BSR set to: 0
  2287  00054A  5036               	movf	_xUpMem,w,c
  2288  00054C  5DB7               	subwf	_measurement& (0+255),w,b
  2289  00054E  5037               	movf	_xUpMem+1,w,c
  2290  000550  59B8               	subwfb	(_measurement+1)& (0+255),w,b
  2291  000552  E302               	bnc	l6863
  2292  000554                     l6861:
  2293                           
  2294                           ; BSR set to: 0
  2295  000554  0E2D               	movlw	45
  2296  000556  D136               	goto	L17
  2297  000558                     l6863:
  2298                           
  2299                           ; BSR set to: 0
  2300                           ;main.c: 516: else if(measurement>xLoMem && measurement < eLoMem
  2301                           ;main.c: 517: || measurement>eUpMem && measurement<xUpMem) muxBuffer[3]='x';
  2302  000558  51B7               	movf	_measurement& (0+255),w,b
  2303  00055A  5C34               	subwf	_xLoMem,w,c
  2304  00055C  51B8               	movf	(_measurement+1)& (0+255),w,b
  2305  00055E  5835               	subwfb	_xLoMem+1,w,c
  2306  000560  E205               	bc	l6867
  2307                           
  2308                           ; BSR set to: 0
  2309  000562  5028               	movf	_eLoMem,w,c
  2310  000564  5DB7               	subwf	_measurement& (0+255),w,b
  2311  000566  5029               	movf	_eLoMem+1,w,c
  2312  000568  59B8               	subwfb	(_measurement+1)& (0+255),w,b
  2313  00056A  E30A               	bnc	l6871
  2314  00056C                     l6867:
  2315                           
  2316                           ; BSR set to: 0
  2317  00056C  51B7               	movf	_measurement& (0+255),w,b
  2318  00056E  5C2A               	subwf	_eUpMem,w,c
  2319  000570  51B8               	movf	(_measurement+1)& (0+255),w,b
  2320  000572  582B               	subwfb	_eUpMem+1,w,c
  2321  000574  E207               	bc	l6873
  2322                           
  2323                           ; BSR set to: 0
  2324  000576  5036               	movf	_xUpMem,w,c
  2325  000578  5DB7               	subwf	_measurement& (0+255),w,b
  2326  00057A  5037               	movf	_xUpMem+1,w,c
  2327  00057C  59B8               	subwfb	(_measurement+1)& (0+255),w,b
  2328  00057E  E202               	bc	l6873
  2329  000580                     l6871:
  2330                           
  2331                           ; BSR set to: 0
  2332  000580  0E78               	movlw	120
  2333  000582  D120               	goto	L17
  2334  000584                     l6873:
  2335                           
  2336                           ; BSR set to: 0
  2337                           ;main.c: 518: else if(measurement>eLoMem && measurement < vLoMem
  2338                           ;main.c: 519: || measurement>vUpMem && measurement<eUpMem) muxBuffer[3]='!';
  2339  000584  51B7               	movf	_measurement& (0+255),w,b
  2340  000586  5C28               	subwf	_eLoMem,w,c
  2341  000588  51B8               	movf	(_measurement+1)& (0+255),w,b
  2342  00058A  5829               	subwfb	_eLoMem+1,w,c
  2343  00058C  E205               	bc	l6877
  2344                           
  2345                           ; BSR set to: 0
  2346  00058E  5030               	movf	_vLoMem,w,c
  2347  000590  5DB7               	subwf	_measurement& (0+255),w,b
  2348  000592  5031               	movf	_vLoMem+1,w,c
  2349  000594  59B8               	subwfb	(_measurement+1)& (0+255),w,b
  2350  000596  E30A               	bnc	l6881
  2351  000598                     l6877:
  2352                           
  2353                           ; BSR set to: 0
  2354  000598  51B7               	movf	_measurement& (0+255),w,b
  2355  00059A  5C32               	subwf	_vUpMem,w,c
  2356  00059C  51B8               	movf	(_measurement+1)& (0+255),w,b
  2357  00059E  5833               	subwfb	_vUpMem+1,w,c
  2358  0005A0  E207               	bc	l6883
  2359                           
  2360                           ; BSR set to: 0
  2361  0005A2  502A               	movf	_eUpMem,w,c
  2362  0005A4  5DB7               	subwf	_measurement& (0+255),w,b
  2363  0005A6  502B               	movf	_eUpMem+1,w,c
  2364  0005A8  59B8               	subwfb	(_measurement+1)& (0+255),w,b
  2365  0005AA  E202               	bc	l6883
  2366  0005AC                     l6881:
  2367                           
  2368                           ; BSR set to: 0
  2369  0005AC  0E21               	movlw	33
  2370  0005AE  D10A               	goto	L17
  2371  0005B0                     l6883:
  2372                           
  2373                           ; BSR set to: 0
  2374                           ;main.c: 520: else if(measurement>=vLoMem && measurement<=vUpMem) muxBuffer[3]='v';
  2375  0005B0  5030               	movf	_vLoMem,w,c
  2376  0005B2  5DB7               	subwf	_measurement& (0+255),w,b
  2377  0005B4  5031               	movf	_vLoMem+1,w,c
  2378  0005B6  59B8               	subwfb	(_measurement+1)& (0+255),w,b
  2379  0005B8  E201 D33C          	bnc	l7307
  2380                           
  2381                           ; BSR set to: 0
  2382  0005BC  51B7               	movf	_measurement& (0+255),w,b
  2383  0005BE  5C32               	subwf	_vUpMem,w,c
  2384  0005C0  51B8               	movf	(_measurement+1)& (0+255),w,b
  2385  0005C2  5833               	subwfb	_vUpMem+1,w,c
  2386  0005C4  E201 D336          	bnc	l7307
  2387  0005C8  D225               	goto	L46
  2388  0005CA                     l6889:
  2389                           
  2390                           ; BSR set to: 0
  2391                           ;main.c: 523: if(measurement<=xLoMem || measurement>=xUpMem) muxBuffer[3]='x';
  2392  0005CA  51B7               	movf	_measurement& (0+255),w,b
  2393  0005CC  5C34               	subwf	_xLoMem,w,c
  2394  0005CE  51B8               	movf	(_measurement+1)& (0+255),w,b
  2395  0005D0  5835               	subwfb	_xLoMem+1,w,c
  2396  0005D2  E2D6               	bc	l6871
  2397                           
  2398                           ; BSR set to: 0
  2399  0005D4  5036               	movf	_xUpMem,w,c
  2400  0005D6  5DB7               	subwf	_measurement& (0+255),w,b
  2401  0005D8  5037               	movf	_xUpMem+1,w,c
  2402  0005DA  59B8               	subwfb	(_measurement+1)& (0+255),w,b
  2403  0005DC  E2D1               	bc	l6871
  2404                           
  2405                           ; BSR set to: 0
  2406                           ;main.c: 524: else if(measurement>xLoMem && measurement < vLoMem
  2407                           ;main.c: 525: || measurement>vUpMem && measurement<xUpMem) muxBuffer[3]='!';
  2408  0005DE  51B7               	movf	_measurement& (0+255),w,b
  2409  0005E0  5C34               	subwf	_xLoMem,w,c
  2410  0005E2  51B8               	movf	(_measurement+1)& (0+255),w,b
  2411  0005E4  5835               	subwfb	_xLoMem+1,w,c
  2412  0005E6  E205               	bc	l6899
  2413                           
  2414                           ; BSR set to: 0
  2415  0005E8  5030               	movf	_vLoMem,w,c
  2416  0005EA  5DB7               	subwf	_measurement& (0+255),w,b
  2417  0005EC  5031               	movf	_vLoMem+1,w,c
  2418  0005EE  59B8               	subwfb	(_measurement+1)& (0+255),w,b
  2419  0005F0  E3DD               	bnc	l6881
  2420  0005F2                     l6899:
  2421                           
  2422                           ; BSR set to: 0
  2423  0005F2  51B7               	movf	_measurement& (0+255),w,b
  2424  0005F4  5C32               	subwf	_vUpMem,w,c
  2425  0005F6  51B8               	movf	(_measurement+1)& (0+255),w,b
  2426  0005F8  5833               	subwfb	_vUpMem+1,w,c
  2427  0005FA  E205               	bc	l6905
  2428                           
  2429                           ; BSR set to: 0
  2430  0005FC  5036               	movf	_xUpMem,w,c
  2431  0005FE  5DB7               	subwf	_measurement& (0+255),w,b
  2432  000600  5037               	movf	_xUpMem+1,w,c
  2433  000602  59B8               	subwfb	(_measurement+1)& (0+255),w,b
  2434  000604  E3D3               	bnc	l6881
  2435  000606                     l6905:
  2436                           
  2437                           ; BSR set to: 0
  2438                           ;main.c: 526: else if(measurement>=vLoMem && measurement<=vUpMem) muxBuffer[3]='v';
  2439  000606  5030               	movf	_vLoMem,w,c
  2440  000608  5DB7               	subwf	_measurement& (0+255),w,b
  2441  00060A  5031               	movf	_vLoMem+1,w,c
  2442  00060C  59B8               	subwfb	(_measurement+1)& (0+255),w,b
  2443  00060E  E201 D311          	bnc	l7307
  2444                           
  2445                           ; BSR set to: 0
  2446  000612  51B7               	movf	_measurement& (0+255),w,b
  2447  000614  5C32               	subwf	_vUpMem,w,c
  2448  000616  51B8               	movf	(_measurement+1)& (0+255),w,b
  2449  000618  5833               	subwfb	_vUpMem+1,w,c
  2450  00061A                     L18:
  2451  00061A  E301 D1FB          	bc	L46
  2452  00061E  D30A               	goto	l7307
  2453  000620                     l6911:
  2454                           
  2455                           ; BSR set to: 0
  2456                           ;main.c: 529: if(measurement<=xLoMem || measurement>=xUpMem) muxBuffer[3]='v';
  2457  000620  51B7               	movf	_measurement& (0+255),w,b
  2458  000622  5C34               	subwf	_xLoMem,w,c
  2459  000624  51B8               	movf	(_measurement+1)& (0+255),w,b
  2460  000626  5835               	subwfb	_xLoMem+1,w,c
  2461  000628  E301 D1F4          	bc	L46
  2462                           
  2463                           ; BSR set to: 0
  2464  00062C  5036               	movf	_xUpMem,w,c
  2465  00062E  5DB7               	subwf	_measurement& (0+255),w,b
  2466  000630  5037               	movf	_xUpMem+1,w,c
  2467  000632  59B8               	subwfb	(_measurement+1)& (0+255),w,b
  2468  000634  E301 D1EE          	bc	L46
  2469                           
  2470                           ; BSR set to: 0
  2471                           ;main.c: 530: else if(measurement>xLoMem && measurement < vLoMem
  2472                           ;main.c: 531: || measurement>vUpMem && measurement<xUpMem) muxBuffer[3]='!';
  2473  000638  51B7               	movf	_measurement& (0+255),w,b
  2474  00063A  5C34               	subwf	_xLoMem,w,c
  2475  00063C  51B8               	movf	(_measurement+1)& (0+255),w,b
  2476  00063E  5835               	subwfb	_xLoMem+1,w,c
  2477  000640  E205               	bc	l6921
  2478                           
  2479                           ; BSR set to: 0
  2480  000642  5030               	movf	_vLoMem,w,c
  2481  000644  5DB7               	subwf	_measurement& (0+255),w,b
  2482  000646  5031               	movf	_vLoMem+1,w,c
  2483  000648  59B8               	subwfb	(_measurement+1)& (0+255),w,b
  2484  00064A  E3B0               	bnc	l6881
  2485  00064C                     l6921:
  2486                           
  2487                           ; BSR set to: 0
  2488  00064C  51B7               	movf	_measurement& (0+255),w,b
  2489  00064E  5C32               	subwf	_vUpMem,w,c
  2490  000650  51B8               	movf	(_measurement+1)& (0+255),w,b
  2491  000652  5833               	subwfb	_vUpMem+1,w,c
  2492  000654  E205               	bc	l6927
  2493                           
  2494                           ; BSR set to: 0
  2495  000656  5036               	movf	_xUpMem,w,c
  2496  000658  5DB7               	subwf	_measurement& (0+255),w,b
  2497  00065A  5037               	movf	_xUpMem+1,w,c
  2498  00065C  59B8               	subwfb	(_measurement+1)& (0+255),w,b
  2499  00065E  E3A6               	bnc	l6881
  2500  000660                     l6927:
  2501                           
  2502                           ; BSR set to: 0
  2503                           ;main.c: 532: else if(measurement>=vLoMem && measurement<=vUpMem) muxBuffer[3]='x';
  2504  000660  5030               	movf	_vLoMem,w,c
  2505  000662  5DB7               	subwf	_measurement& (0+255),w,b
  2506  000664  5031               	movf	_vLoMem+1,w,c
  2507  000666  59B8               	subwfb	(_measurement+1)& (0+255),w,b
  2508  000668  E201 D2E4          	bnc	l7307
  2509                           
  2510                           ; BSR set to: 0
  2511  00066C  51B7               	movf	_measurement& (0+255),w,b
  2512  00066E  5C32               	subwf	_vUpMem,w,c
  2513  000670  51B8               	movf	(_measurement+1)& (0+255),w,b
  2514  000672  5833               	subwfb	_vUpMem+1,w,c
  2515  000674                     L19:
  2516  000674  E285               	bc	l6871
  2517  000676  D2DE               	goto	l7307
  2518  000678                     l6933:
  2519                           
  2520                           ; BSR set to: 0
  2521                           ;main.c: 535: if(measurement<=xUpMem) muxBuffer[3]='x';
  2522  000678  51B7               	movf	_measurement& (0+255),w,b
  2523  00067A  5C36               	subwf	_xUpMem,w,c
  2524  00067C  51B8               	movf	(_measurement+1)& (0+255),w,b
  2525  00067E  5837               	subwfb	_xUpMem+1,w,c
  2526  000680  E301 D77E          	bc	l6871
  2527                           
  2528                           ; BSR set to: 0
  2529                           ;main.c: 536: else if(measurement>xUpMem && measurement < vLoMem) muxBuffer[3]='!';
  2530  000684  51B7               	movf	_measurement& (0+255),w,b
  2531  000686  5C36               	subwf	_xUpMem,w,c
  2532  000688  51B8               	movf	(_measurement+1)& (0+255),w,b
  2533  00068A  5837               	subwfb	_xUpMem+1,w,c
  2534  00068C  E205               	bc	l6943
  2535                           
  2536                           ; BSR set to: 0
  2537  00068E  5030               	movf	_vLoMem,w,c
  2538  000690  5DB7               	subwf	_measurement& (0+255),w,b
  2539  000692  5031               	movf	_vLoMem+1,w,c
  2540  000694  59B8               	subwfb	(_measurement+1)& (0+255),w,b
  2541  000696  E38A               	bnc	l6881
  2542  000698                     l6943:
  2543                           
  2544                           ; BSR set to: 0
  2545                           ;main.c: 537: else if(measurement>=vLoMem) muxBuffer[3]='v';
  2546  000698  5030               	movf	_vLoMem,w,c
  2547  00069A  5DB7               	subwf	_measurement& (0+255),w,b
  2548  00069C  5031               	movf	_vLoMem+1,w,c
  2549  00069E  59B8               	subwfb	(_measurement+1)& (0+255),w,b
  2550  0006A0  D7BC               	goto	L18
  2551  0006A2                     l6947:
  2552                           
  2553                           ; BSR set to: 0
  2554                           ;main.c: 540: if(measurement<=vUpMem) muxBuffer[3]='v';
  2555  0006A2  51B7               	movf	_measurement& (0+255),w,b
  2556  0006A4  5C32               	subwf	_vUpMem,w,c
  2557  0006A6  51B8               	movf	(_measurement+1)& (0+255),w,b
  2558  0006A8  5833               	subwfb	_vUpMem+1,w,c
  2559  0006AA  E301 D1B3          	bc	L46
  2560                           
  2561                           ; BSR set to: 0
  2562                           ;main.c: 541: else if(measurement>vUpMem && measurement < vLoMem) muxBuffer[3]='!';
  2563  0006AE  51B7               	movf	_measurement& (0+255),w,b
  2564  0006B0  5C32               	subwf	_vUpMem,w,c
  2565  0006B2  51B8               	movf	(_measurement+1)& (0+255),w,b
  2566  0006B4  5833               	subwfb	_vUpMem+1,w,c
  2567  0006B6  E206               	bc	l6957
  2568                           
  2569                           ; BSR set to: 0
  2570  0006B8  5030               	movf	_vLoMem,w,c
  2571  0006BA  5DB7               	subwf	_measurement& (0+255),w,b
  2572  0006BC  5031               	movf	_vLoMem+1,w,c
  2573  0006BE  59B8               	subwfb	(_measurement+1)& (0+255),w,b
  2574  0006C0  E201 D774          	bnc	l6881
  2575  0006C4                     l6957:
  2576                           
  2577                           ; BSR set to: 0
  2578                           ;main.c: 542: else if(measurement>=vLoMem) muxBuffer[3]='x';
  2579  0006C4  5030               	movf	_vLoMem,w,c
  2580  0006C6  5DB7               	subwf	_measurement& (0+255),w,b
  2581  0006C8  5031               	movf	_vLoMem+1,w,c
  2582  0006CA  59B8               	subwfb	(_measurement+1)& (0+255),w,b
  2583  0006CC  D7D3               	goto	L19
  2584  0006CE                     l6961:
  2585                           
  2586                           ; BSR set to: 0
  2587                           ;main.c: 545: if(measurement<=xUpMem && measurement>=eLoMem) muxBuffer[3]='x';
  2588  0006CE  51B7               	movf	_measurement& (0+255),w,b
  2589  0006D0  5C36               	subwf	_xUpMem,w,c
  2590  0006D2  51B8               	movf	(_measurement+1)& (0+255),w,b
  2591  0006D4  5837               	subwfb	_xUpMem+1,w,c
  2592  0006D6  E306               	bnc	l6967
  2593                           
  2594                           ; BSR set to: 0
  2595  0006D8  5028               	movf	_eLoMem,w,c
  2596  0006DA  5DB7               	subwf	_measurement& (0+255),w,b
  2597  0006DC  5029               	movf	_eLoMem+1,w,c
  2598  0006DE  59B8               	subwfb	(_measurement+1)& (0+255),w,b
  2599  0006E0  E301 D74E          	bc	l6871
  2600  0006E4                     l6967:
  2601                           
  2602                           ; BSR set to: 0
  2603                           ;main.c: 546: else if(measurement>xUpMem && measurement < vLoMem
  2604                           ;main.c: 547: || measurement<eLoMem
  2605                           ;main.c: 548: || measurement>eUpMem) muxBuffer[3]='!';
  2606  0006E4  51B7               	movf	_measurement& (0+255),w,b
  2607  0006E6  5C36               	subwf	_xUpMem,w,c
  2608  0006E8  51B8               	movf	(_measurement+1)& (0+255),w,b
  2609  0006EA  5837               	subwfb	_xUpMem+1,w,c
  2610  0006EC  E206               	bc	l6971
  2611                           
  2612                           ; BSR set to: 0
  2613  0006EE  5030               	movf	_vLoMem,w,c
  2614  0006F0  5DB7               	subwf	_measurement& (0+255),w,b
  2615  0006F2  5031               	movf	_vLoMem+1,w,c
  2616  0006F4  59B8               	subwfb	(_measurement+1)& (0+255),w,b
  2617  0006F6  E201 D759          	bnc	l6881
  2618  0006FA                     l6971:
  2619                           
  2620                           ; BSR set to: 0
  2621  0006FA  5028               	movf	_eLoMem,w,c
  2622  0006FC  5DB7               	subwf	_measurement& (0+255),w,b
  2623  0006FE  5029               	movf	_eLoMem+1,w,c
  2624  000700  59B8               	subwfb	(_measurement+1)& (0+255),w,b
  2625  000702  E201 D753          	bnc	l6881
  2626                           
  2627                           ; BSR set to: 0
  2628  000706  51B7               	movf	_measurement& (0+255),w,b
  2629  000708  5C2A               	subwf	_eUpMem,w,c
  2630  00070A  51B8               	movf	(_measurement+1)& (0+255),w,b
  2631  00070C  582B               	subwfb	_eUpMem+1,w,c
  2632  00070E  E201 D74D          	bnc	l6881
  2633                           
  2634                           ; BSR set to: 0
  2635                           ;main.c: 549: else if(measurement>=vLoMem && measurement<=eUpMem) muxBuffer[3]='v';
  2636  000712  5030               	movf	_vLoMem,w,c
  2637  000714  5DB7               	subwf	_measurement& (0+255),w,b
  2638  000716  5031               	movf	_vLoMem+1,w,c
  2639  000718  59B8               	subwfb	(_measurement+1)& (0+255),w,b
  2640  00071A  E201 D28B          	bnc	l7307
  2641                           
  2642                           ; BSR set to: 0
  2643  00071E  51B7               	movf	_measurement& (0+255),w,b
  2644  000720  5C2A               	subwf	_eUpMem,w,c
  2645  000722  51B8               	movf	(_measurement+1)& (0+255),w,b
  2646  000724  582B               	subwfb	_eUpMem+1,w,c
  2647  000726  D779               	goto	L18
  2648  000728                     l6983:
  2649                           
  2650                           ; BSR set to: 0
  2651                           ;main.c: 552: if(measurement<=vUpMem && measurement>=eLoMem) muxBuffer[3]='v';
  2652  000728  51B7               	movf	_measurement& (0+255),w,b
  2653  00072A  5C32               	subwf	_vUpMem,w,c
  2654  00072C  51B8               	movf	(_measurement+1)& (0+255),w,b
  2655  00072E  5833               	subwfb	_vUpMem+1,w,c
  2656  000730  E306               	bnc	l6989
  2657                           
  2658                           ; BSR set to: 0
  2659  000732  5028               	movf	_eLoMem,w,c
  2660  000734  5DB7               	subwf	_measurement& (0+255),w,b
  2661  000736  5029               	movf	_eLoMem+1,w,c
  2662  000738  59B8               	subwfb	(_measurement+1)& (0+255),w,b
  2663  00073A  E301 D16B          	bc	L46
  2664  00073E                     l6989:
  2665                           
  2666                           ; BSR set to: 0
  2667                           ;main.c: 553: else if(measurement>vUpMem && measurement < xLoMem
  2668                           ;main.c: 554: || measurement<eLoMem
  2669                           ;main.c: 555: || measurement>eUpMem) muxBuffer[3]='!';
  2670  00073E  51B7               	movf	_measurement& (0+255),w,b
  2671  000740  5C32               	subwf	_vUpMem,w,c
  2672  000742  51B8               	movf	(_measurement+1)& (0+255),w,b
  2673  000744  5833               	subwfb	_vUpMem+1,w,c
  2674  000746  E206               	bc	l6993
  2675                           
  2676                           ; BSR set to: 0
  2677  000748  5034               	movf	_xLoMem,w,c
  2678  00074A  5DB7               	subwf	_measurement& (0+255),w,b
  2679  00074C  5035               	movf	_xLoMem+1,w,c
  2680  00074E  59B8               	subwfb	(_measurement+1)& (0+255),w,b
  2681  000750  E201 D72C          	bnc	l6881
  2682  000754                     l6993:
  2683                           
  2684                           ; BSR set to: 0
  2685  000754  5028               	movf	_eLoMem,w,c
  2686  000756  5DB7               	subwf	_measurement& (0+255),w,b
  2687  000758  5029               	movf	_eLoMem+1,w,c
  2688  00075A  59B8               	subwfb	(_measurement+1)& (0+255),w,b
  2689  00075C  E201 D726          	bnc	l6881
  2690                           
  2691                           ; BSR set to: 0
  2692  000760  51B7               	movf	_measurement& (0+255),w,b
  2693  000762  5C2A               	subwf	_eUpMem,w,c
  2694  000764  51B8               	movf	(_measurement+1)& (0+255),w,b
  2695  000766  582B               	subwfb	_eUpMem+1,w,c
  2696  000768  E201 D720          	bnc	l6881
  2697                           
  2698                           ; BSR set to: 0
  2699                           ;main.c: 556: else if(measurement>=xLoMem && measurement<=eUpMem) muxBuffer[3]='x';
  2700  00076C  5034               	movf	_xLoMem,w,c
  2701  00076E  5DB7               	subwf	_measurement& (0+255),w,b
  2702  000770  5035               	movf	_xLoMem+1,w,c
  2703  000772  59B8               	subwfb	(_measurement+1)& (0+255),w,b
  2704  000774  E201 D25E          	bnc	l7307
  2705                           
  2706                           ; BSR set to: 0
  2707  000778  51B7               	movf	_measurement& (0+255),w,b
  2708  00077A  5C2A               	subwf	_eUpMem,w,c
  2709  00077C  51B8               	movf	(_measurement+1)& (0+255),w,b
  2710  00077E  582B               	subwfb	_eUpMem+1,w,c
  2711  000780  D779               	goto	L19
  2712  000782                     l7005:
  2713                           
  2714                           ; BSR set to: 0
  2715  000782  5038               	movf	_advModeMem,w,c
  2716                           
  2717                           ; Switch size 1, requested type "space"
  2718                           ; Number of cases is 8, Range of values is 0 to 7
  2719                           ; switch strategies available:
  2720                           ; Name         Instructions Cycles
  2721                           ; simple_byte           25    13 (average)
  2722                           ;	Chosen strategy is simple_byte
  2723  000784  E101 D6DA          	bz	l6855
  2724  000788  0A01               	xorlw	1	; case 1
  2725  00078A  E101 D6D9          	bz	l6857
  2726  00078E  0A03               	xorlw	3	; case 2
  2727  000790  E101 D71B          	bz	l6889
  2728  000794  0A01               	xorlw	1	; case 3
  2729  000796  E101 D743          	bz	l6911
  2730  00079A  0A07               	xorlw	7	; case 4
  2731  00079C  E101 D76C          	bz	l6933
  2732  0007A0  0A01               	xorlw	1	; case 5
  2733  0007A2  E101 D77E          	bz	l6947
  2734  0007A6  0A03               	xorlw	3	; case 6
  2735  0007A8  E092               	bz	l6961
  2736  0007AA  0A01               	xorlw	1	; case 7
  2737  0007AC  E0BD               	bz	l6983
  2738  0007AE  D242               	goto	l7307
  2739  0007B0                     l7007:
  2740                           
  2741                           ;main.c: 560: else if(state==E_MENU_BRILLO)
  2742  0007B0  503A               	movf	_state,w,c
  2743  0007B2  0A02               	xorlw	2
  2744  0007B4  E109               	bnz	l7011
  2745                           
  2746                           ;main.c: 561: {
  2747                           ;main.c: 562: muxBuffer[0]='b';
  2748  0007B6  0E62               	movlw	98
  2749  0007B8  0100               	movlb	0	; () banked
  2750  0007BA  6FC9               	movwf	_muxBuffer& (0+255),b
  2751                           
  2752                           ;main.c: 563: muxBuffer[1]='r';
  2753  0007BC  0E72               	movlw	114
  2754  0007BE  6FCA               	movwf	(_muxBuffer+1)& (0+255),b
  2755                           
  2756                           ;main.c: 564: muxBuffer[2]='i';
  2757  0007C0  0E69               	movlw	105
  2758  0007C2  D023               	goto	L49
  2759  0007C4                     L17:
  2760  0007C4  6FCC               	movwf	(_muxBuffer+3)& (0+255),b
  2761                           
  2762                           ;main.c: 566: }
  2763  0007C6  D236               	goto	l7307
  2764  0007C8                     l7011:
  2765                           
  2766                           ;main.c: 567: else if(state==E_MENU_ADV_MODE)
  2767  0007C8  503A               	movf	_state,w,c
  2768  0007CA  0A03               	xorlw	3
  2769  0007CC  E107               	bnz	l7015
  2770                           
  2771                           ;main.c: 568: {
  2772                           ;main.c: 569: muxBuffer[0]='n';
  2773  0007CE  0E6E               	movlw	110
  2774  0007D0  0100               	movlb	0	; () banked
  2775  0007D2  6FC9               	movwf	_muxBuffer& (0+255),b
  2776                           
  2777                           ;main.c: 570: muxBuffer[1]='o';
  2778  0007D4  0E6F               	movlw	111
  2779  0007D6  6FCA               	movwf	(_muxBuffer+1)& (0+255),b
  2780                           
  2781                           ;main.c: 571: muxBuffer[2]='d';
  2782  0007D8  0E64               	movlw	100
  2783  0007DA  D017               	goto	L49
  2784  0007DC                     l7015:
  2785                           
  2786                           ;main.c: 574: else if(state==E_MENU_LIMITS)
  2787  0007DC  503A               	movf	_state,w,c
  2788  0007DE  0A04               	xorlw	4
  2789  0007E0  E107               	bnz	l7019
  2790                           
  2791                           ;main.c: 575: {
  2792                           ;main.c: 576: muxBuffer[0]='L';
  2793  0007E2  0E4C               	movlw	76
  2794  0007E4  0100               	movlb	0	; () banked
  2795  0007E6  6FC9               	movwf	_muxBuffer& (0+255),b
  2796                           
  2797                           ;main.c: 577: muxBuffer[1]='i';
  2798  0007E8  0E69               	movlw	105
  2799  0007EA  6FCA               	movwf	(_muxBuffer+1)& (0+255),b
  2800                           
  2801                           ;main.c: 578: muxBuffer[2]='n';
  2802  0007EC  0E6E               	movlw	110
  2803  0007EE  D00D               	goto	L49
  2804  0007F0                     l7019:
  2805                           
  2806                           ;main.c: 581: else if(state==E_MENU_ESCALA)
  2807  0007F0  503A               	movf	_state,w,c
  2808  0007F2  0A05               	xorlw	5
  2809  0007F4  E105               	bnz	l7023
  2810                           
  2811                           ;main.c: 582: {
  2812                           ;main.c: 583: muxBuffer[0]='E';
  2813  0007F6  0E45               	movlw	69
  2814  0007F8  0100               	movlb	0	; () banked
  2815  0007FA  6FC9               	movwf	_muxBuffer& (0+255),b
  2816                           
  2817                           ;main.c: 584: muxBuffer[1]='S';
  2818  0007FC  0E53               	movlw	83
  2819  0007FE  D0C0               	goto	L53
  2820  000800                     l7023:
  2821                           
  2822                           ;main.c: 588: else if(state==E_MENU_USER_CAL)
  2823  000800  503A               	movf	_state,w,c
  2824  000802  0A06               	xorlw	6
  2825  000804  E104               	bnz	l7027
  2826                           
  2827                           ;main.c: 589: {
  2828                           ;main.c: 590: muxBuffer[0]='u';
  2829  000806  0E75               	movlw	117
  2830  000808  D006               	goto	L50
  2831  00080A                     L49:
  2832  00080A  6FCB               	movwf	(_muxBuffer+2)& (0+255),b
  2833  00080C  D697               	goto	l6855
  2834  00080E                     l7027:
  2835                           
  2836                           ;main.c: 595: else if(state==E_MENU_FACTORY_CAL)
  2837  00080E  503A               	movf	_state,w,c
  2838  000810  0A07               	xorlw	7
  2839  000812  E107               	bnz	l7031
  2840                           
  2841                           ;main.c: 596: {
  2842                           ;main.c: 597: muxBuffer[0]='F';
  2843  000814  0E46               	movlw	70
  2844  000816                     L50:
  2845  000816  0100               	movlb	0	; () banked
  2846  000818  6FC9               	movwf	_muxBuffer& (0+255),b
  2847                           
  2848                           ;main.c: 598: muxBuffer[1]='C';
  2849  00081A  0E43               	movlw	67
  2850  00081C  6FCA               	movwf	(_muxBuffer+1)& (0+255),b
  2851                           
  2852                           ;main.c: 599: muxBuffer[2]='A';
  2853  00081E  0E41               	movlw	65
  2854  000820  D7F4               	goto	L49
  2855  000822                     l7031:
  2856                           
  2857                           ;main.c: 602: else if(state==E_SET_BRILLO)
  2858  000822  503A               	movf	_state,w,c
  2859  000824  0A08               	xorlw	8
  2860  000826  E139               	bnz	l7057
  2861                           
  2862                           ;main.c: 603: {
  2863                           ;main.c: 604: if((timerMem[TMR_SHOW_SETTING_OFF].flag?!(timerMem[TMR_SHOW_SETTING_OFF].f
      +                          lag=0):0)) {{ timerMem[TMR_SHOW_SETTING_ON].flag=0; timerMem[TMR_SHOW_SETTING_ON].presca
      +                          ler=timerDelayConstant[TMR_SHOW_SETTING_ON]; timerMem[TMR_SHOW_SETTING_ON].pause=0; };}
  2864  000828  0101               	movlb	1	; () banked
  2865  00082A  B3AA               	btfsc	(_timerMem+31)& (0+255),1,b
  2866  00082C  D002               	goto	l7037
  2867                           
  2868                           ; BSR set to: 1
  2869  00082E  6B5B               	clrf	_main$448& (0+255),b
  2870  000830  D004               	goto	L21
  2871  000832                     l7037:
  2872                           
  2873                           ; BSR set to: 1
  2874  000832  DAFA               	call	PL5	;call to abstracted procedure
  2875  000834  B4D8               	btfsc	status,2,c
  2876  000836  0E01               	movlw	1
  2877  000838  6F5B               	movwf	_main$448& (0+255),b
  2878  00083A                     L21:
  2879  00083A  6B5C               	clrf	(_main$448+1)& (0+255),b
  2880                           
  2881                           ; BSR set to: 1
  2882  00083C  515C               	movf	(_main$448+1)& (0+255),w,b
  2883  00083E  115B               	iorwf	_main$448& (0+255),w,b
  2884  000840  E001               	bz	l328
  2885                           
  2886                           ; BSR set to: 1
  2887  000842  DAE0               	call	PL2	;call to abstracted procedure
  2888  000844                     l328:
  2889                           
  2890                           ; BSR set to: 1
  2891                           ;main.c: 605: if((timerMem[TMR_SHOW_SETTING_ON].flag?!(timerMem[TMR_SHOW_SETTING_ON].fla
      +                          g=0):0)) {{ timerMem[TMR_SHOW_SETTING_OFF].flag=0; timerMem[TMR_SHOW_SETTING_OFF].presca
      +                          ler=timerDelayConstant[TMR_SHOW_SETTING_OFF]; timerMem[TMR_SHOW_SETTING_OFF].pause=0; };
  2892  000844  B3A6               	btfsc	(_timerMem+27)& (0+255),1,b
  2893  000846  D002               	goto	l7043
  2894                           
  2895                           ; BSR set to: 1
  2896  000848  6B5D               	clrf	_main$449& (0+255),b
  2897  00084A  D004               	goto	L22
  2898  00084C                     l7043:
  2899                           
  2900                           ; BSR set to: 1
  2901  00084C  DAF4               	call	PL6	;call to abstracted procedure
  2902  00084E  B4D8               	btfsc	status,2,c
  2903  000850  0E01               	movlw	1
  2904  000852  6F5D               	movwf	_main$449& (0+255),b
  2905  000854                     L22:
  2906  000854  6B5E               	clrf	(_main$449+1)& (0+255),b
  2907                           
  2908                           ; BSR set to: 1
  2909  000856  515E               	movf	(_main$449+1)& (0+255),w,b
  2910  000858  115D               	iorwf	_main$449& (0+255),w,b
  2911  00085A  E001               	bz	l333
  2912                           
  2913                           ; BSR set to: 1
  2914  00085C  DADC               	call	PL4	;call to abstracted procedure
  2915  00085E                     l333:
  2916                           
  2917                           ; BSR set to: 1
  2918                           ;main.c: 607: if((!timerMem[TMR_SHOW_SETTING_ON].pause && timerMem[TMR_SHOW_SETTING_ON].
      +                          prescaler!=0))
  2919  00085E  B5A6               	btfsc	(_timerMem+27)& (0+255),2,b
  2920  000860  D017               	goto	l7055
  2921                           
  2922                           ; BSR set to: 1
  2923  000862  EE21  F0A3         	lfsr	2,_timerMem+24
  2924  000866  50DE               	movf	postinc2,w,c
  2925  000868  10DE               	iorwf	postinc2,w,c
  2926  00086A  10DD               	iorwf	postdec2,w,c
  2927  00086C  E011               	bz	l7055
  2928                           
  2929                           ; BSR set to: 1
  2930                           ;main.c: 608: {
  2931                           ;main.c: 609: muxBuffer[ADV]=' ';
  2932  00086E  0E20               	movlw	32
  2933  000870  0100               	movlb	0	; () banked
  2934  000872  6FCC               	movwf	(_muxBuffer+3)& (0+255),b
  2935                           
  2936                           ; BSR set to: 0
  2937                           ;main.c: 610: display=brilloMem;
  2938  000874  C039  F0B5         	movff	_brilloMem,_display
  2939  000878  6BB6               	clrf	(_display+1)& (0+255),b
  2940                           
  2941                           ; BSR set to: 0
  2942                           ;main.c: 611: uintToStr(display,&muxBuffer[2],1);
  2943  00087A  C0B5  F067         	movff	_display,?_uintToStr
  2944  00087E  C0B6  F068         	movff	_display+1,?_uintToStr+1
  2945  000882  0ECB               	movlw	low (_muxBuffer+2)
  2946  000884  6F69               	movwf	(?_uintToStr+2)& (0+255),b
  2947  000886  0E01               	movlw	1
  2948  000888  6F6A               	movwf	(?_uintToStr+3)& (0+255),b
  2949  00088A  EC21  F012         	call	_uintToStr	;wreg free
  2950                           
  2951                           ;main.c: 612: }
  2952  00088E  D1D2               	goto	l7307
  2953  000890                     l7055:
  2954                           
  2955                           ; BSR set to: 1
  2956                           ;main.c: 613: else
  2957                           ;main.c: 614: { muxBuffer[0]=' '; muxBuffer[1]=' '; muxBuffer[2]=' '; muxBuffer[3]=' '; 
      +                          };
  2958  000890  0E20               	movlw	32
  2959  000892  0100               	movlb	0	; () banked
  2960  000894  6FC9               	movwf	_muxBuffer& (0+255),b
  2961  000896  6FCA               	movwf	(_muxBuffer+1)& (0+255),b
  2962  000898  D7B8               	goto	L49
  2963  00089A                     l7057:
  2964                           
  2965                           ;main.c: 616: else if(state==E_SET_ADV_MODE)
  2966  00089A  503A               	movf	_state,w,c
  2967  00089C  0A0D               	xorlw	13
  2968  00089E  E129               	bnz	l7083
  2969                           
  2970                           ;main.c: 617: {
  2971                           ;main.c: 618: if((timerMem[TMR_SHOW_SETTING_OFF].flag?!(timerMem[TMR_SHOW_SETTING_OFF].f
      +                          lag=0):0)) {{ timerMem[TMR_SHOW_SETTING_ON].flag=0; timerMem[TMR_SHOW_SETTING_ON].presca
      +                          ler=timerDelayConstant[TMR_SHOW_SETTING_ON]; timerMem[TMR_SHOW_SETTING_ON].pause=0; };}
  2972  0008A0  0101               	movlb	1	; () banked
  2973  0008A2  B3AA               	btfsc	(_timerMem+31)& (0+255),1,b
  2974  0008A4  D002               	goto	l7063
  2975                           
  2976                           ; BSR set to: 1
  2977  0008A6  6B5F               	clrf	_main$450& (0+255),b
  2978  0008A8  D004               	goto	L23
  2979  0008AA                     l7063:
  2980                           
  2981                           ; BSR set to: 1
  2982  0008AA  DABE               	call	PL5	;call to abstracted procedure
  2983  0008AC  B4D8               	btfsc	status,2,c
  2984  0008AE  0E01               	movlw	1
  2985  0008B0  6F5F               	movwf	_main$450& (0+255),b
  2986  0008B2                     L23:
  2987  0008B2  6B60               	clrf	(_main$450+1)& (0+255),b
  2988                           
  2989                           ; BSR set to: 1
  2990  0008B4  5160               	movf	(_main$450+1)& (0+255),w,b
  2991  0008B6  115F               	iorwf	_main$450& (0+255),w,b
  2992  0008B8  E001               	bz	l342
  2993                           
  2994                           ; BSR set to: 1
  2995  0008BA  DAA4               	call	PL2	;call to abstracted procedure
  2996  0008BC                     l342:
  2997                           
  2998                           ; BSR set to: 1
  2999                           ;main.c: 619: if((timerMem[TMR_SHOW_SETTING_ON].flag?!(timerMem[TMR_SHOW_SETTING_ON].fla
      +                          g=0):0)) {{ timerMem[TMR_SHOW_SETTING_OFF].flag=0; timerMem[TMR_SHOW_SETTING_OFF].presca
      +                          ler=timerDelayConstant[TMR_SHOW_SETTING_OFF]; timerMem[TMR_SHOW_SETTING_OFF].pause=0; };
  3000  0008BC  B3A6               	btfsc	(_timerMem+27)& (0+255),1,b
  3001  0008BE  D002               	goto	l7069
  3002                           
  3003                           ; BSR set to: 1
  3004  0008C0  6B61               	clrf	_main$451& (0+255),b
  3005  0008C2  D004               	goto	L24
  3006  0008C4                     l7069:
  3007                           
  3008                           ; BSR set to: 1
  3009  0008C4  DAB8               	call	PL6	;call to abstracted procedure
  3010  0008C6  B4D8               	btfsc	status,2,c
  3011  0008C8  0E01               	movlw	1
  3012  0008CA  6F61               	movwf	_main$451& (0+255),b
  3013  0008CC                     L24:
  3014  0008CC  6B62               	clrf	(_main$451+1)& (0+255),b
  3015                           
  3016                           ; BSR set to: 1
  3017  0008CE  5162               	movf	(_main$451+1)& (0+255),w,b
  3018  0008D0  1161               	iorwf	_main$451& (0+255),w,b
  3019  0008D2  E001               	bz	l347
  3020                           
  3021                           ; BSR set to: 1
  3022  0008D4  DAA0               	call	PL4	;call to abstracted procedure
  3023  0008D6                     l347:
  3024                           
  3025                           ; BSR set to: 1
  3026                           ;main.c: 621: if((!timerMem[TMR_SHOW_SETTING_ON].pause && timerMem[TMR_SHOW_SETTING_ON].
      +                          prescaler!=0))
  3027  0008D6  B5A6               	btfsc	(_timerMem+27)& (0+255),2,b
  3028  0008D8  D7DB               	goto	l7055
  3029                           
  3030                           ; BSR set to: 1
  3031  0008DA  EE21  F0A3         	lfsr	2,_timerMem+24
  3032  0008DE  50DE               	movf	postinc2,w,c
  3033  0008E0  10DE               	iorwf	postinc2,w,c
  3034  0008E2  10DD               	iorwf	postdec2,w,c
  3035  0008E4  E0D5               	bz	l7055
  3036                           
  3037                           ; BSR set to: 1
  3038                           ;main.c: 622: {
  3039                           ;main.c: 623: muxBuffer[ADV]=' ';
  3040  0008E6  0E20               	movlw	32
  3041  0008E8  0100               	movlb	0	; () banked
  3042  0008EA  6FCC               	movwf	(_muxBuffer+3)& (0+255),b
  3043                           
  3044                           ; BSR set to: 0
  3045                           ;main.c: 624: display=advModeMem;
  3046  0008EC  C038  F0B5         	movff	_advModeMem,_display
  3047  0008F0  D7C3               	goto	L25
  3048  0008F2                     l7083:
  3049                           
  3050                           ;main.c: 630: else if(state==E_SET_ESCALA_ENT_DESCRIPTION)
  3051  0008F2  503A               	movf	_state,w,c
  3052  0008F4  0A09               	xorlw	9
  3053  0008F6  E107               	bnz	l7087
  3054                           
  3055                           ;main.c: 631: {
  3056                           ;main.c: 632: muxBuffer[0]='E';
  3057  0008F8  0E45               	movlw	69
  3058  0008FA  0100               	movlb	0	; () banked
  3059  0008FC  6FC9               	movwf	_muxBuffer& (0+255),b
  3060                           
  3061                           ;main.c: 633: muxBuffer[1]='n';
  3062  0008FE  0E6E               	movlw	110
  3063  000900  6FCA               	movwf	(_muxBuffer+1)& (0+255),b
  3064                           
  3065                           ;main.c: 634: muxBuffer[2]='t';
  3066  000902  0E74               	movlw	116
  3067  000904  D782               	goto	L49
  3068  000906                     l7087:
  3069                           
  3070                           ;main.c: 637: else if(state==E_SET_ESCALA_ENT)
  3071  000906  503A               	movf	_state,w,c
  3072  000908  0A0A               	xorlw	10
  3073  00090A  E133               	bnz	l7111
  3074                           
  3075                           ;main.c: 638: {
  3076                           ;main.c: 639: if((timerMem[TMR_SHOW_SETTING_OFF].flag?!(timerMem[TMR_SHOW_SETTING_OFF].f
      +                          lag=0):0)) {{ timerMem[TMR_SHOW_SETTING_ON].flag=0; timerMem[TMR_SHOW_SETTING_ON].presca
      +                          ler=timerDelayConstant[TMR_SHOW_SETTING_ON]; timerMem[TMR_SHOW_SETTING_ON].pause=0; };}
  3077  00090C  0101               	movlb	1	; () banked
  3078  00090E  B3AA               	btfsc	(_timerMem+31)& (0+255),1,b
  3079  000910  D002               	goto	l7093
  3080                           
  3081                           ; BSR set to: 1
  3082  000912  6B63               	clrf	_main$452& (0+255),b
  3083  000914  D004               	goto	L26
  3084  000916                     l7093:
  3085                           
  3086                           ; BSR set to: 1
  3087  000916  DA88               	call	PL5	;call to abstracted procedure
  3088  000918  B4D8               	btfsc	status,2,c
  3089  00091A  0E01               	movlw	1
  3090  00091C  6F63               	movwf	_main$452& (0+255),b
  3091  00091E                     L26:
  3092  00091E  6B64               	clrf	(_main$452+1)& (0+255),b
  3093                           
  3094                           ; BSR set to: 1
  3095  000920  5164               	movf	(_main$452+1)& (0+255),w,b
  3096  000922  1163               	iorwf	_main$452& (0+255),w,b
  3097  000924  E001               	bz	l358
  3098                           
  3099                           ; BSR set to: 1
  3100  000926  DA6E               	call	PL2	;call to abstracted procedure
  3101  000928                     l358:
  3102                           
  3103                           ; BSR set to: 1
  3104                           ;main.c: 640: if((timerMem[TMR_SHOW_SETTING_ON].flag?!(timerMem[TMR_SHOW_SETTING_ON].fla
      +                          g=0):0)) {{ timerMem[TMR_SHOW_SETTING_OFF].flag=0; timerMem[TMR_SHOW_SETTING_OFF].presca
      +                          ler=timerDelayConstant[TMR_SHOW_SETTING_OFF]; timerMem[TMR_SHOW_SETTING_OFF].pause=0; };
  3105  000928  B3A6               	btfsc	(_timerMem+27)& (0+255),1,b
  3106  00092A  D002               	goto	l7099
  3107                           
  3108                           ; BSR set to: 1
  3109  00092C  6B65               	clrf	_main$453& (0+255),b
  3110  00092E  D004               	goto	L27
  3111  000930                     l7099:
  3112                           
  3113                           ; BSR set to: 1
  3114  000930  DA82               	call	PL6	;call to abstracted procedure
  3115  000932  B4D8               	btfsc	status,2,c
  3116  000934  0E01               	movlw	1
  3117  000936  6F65               	movwf	_main$453& (0+255),b
  3118  000938                     L27:
  3119  000938  6B66               	clrf	(_main$453+1)& (0+255),b
  3120                           
  3121                           ; BSR set to: 1
  3122  00093A  5166               	movf	(_main$453+1)& (0+255),w,b
  3123  00093C  1165               	iorwf	_main$453& (0+255),w,b
  3124  00093E  E001               	bz	l363
  3125                           
  3126                           ; BSR set to: 1
  3127  000940  DA6A               	call	PL4	;call to abstracted procedure
  3128  000942                     l363:
  3129                           
  3130                           ; BSR set to: 1
  3131                           ;main.c: 642: if((!timerMem[TMR_SHOW_SETTING_ON].pause && timerMem[TMR_SHOW_SETTING_ON].
      +                          prescaler!=0))
  3132  000942  B5A6               	btfsc	(_timerMem+27)& (0+255),2,b
  3133  000944  D7A5               	goto	l7055
  3134                           
  3135                           ; BSR set to: 1
  3136  000946  EE21  F0A3         	lfsr	2,_timerMem+24
  3137  00094A  50DE               	movf	postinc2,w,c
  3138  00094C  10DE               	iorwf	postinc2,w,c
  3139  00094E  10DD               	iorwf	postdec2,w,c
  3140  000950  E09F               	bz	l7055
  3141                           
  3142                           ; BSR set to: 1
  3143                           ;main.c: 643: {
  3144                           ;main.c: 644: display=escEntMem;
  3145  000952  C02E  F0B5         	movff	_escEntMem,_display
  3146  000956  C02F  F0B6         	movff	_escEntMem+1,_display+1
  3147  00095A                     l7107:
  3148                           
  3149                           ; BSR set to: 1
  3150                           ;main.c: 645: uintToStr(display,&muxBuffer[0],3);
  3151  00095A  C0B5  F067         	movff	_display,?_uintToStr
  3152  00095E  C0B6  F068         	movff	_display+1,?_uintToStr+1
  3153  000962  0100               	movlb	0	; () banked
  3154  000964  0EC9               	movlw	low _muxBuffer
  3155  000966  6F69               	movwf	(?_uintToStr+2)& (0+255),b
  3156  000968  0E03               	movlw	3
  3157  00096A  6F6A               	movwf	(?_uintToStr+3)& (0+255),b
  3158  00096C  EC21  F012         	call	_uintToStr	;wreg free
  3159                           
  3160                           ;main.c: 646: }
  3161  000970  D161               	goto	l7307
  3162  000972                     l7111:
  3163                           
  3164                           ;main.c: 650: else if(state==E_SET_ESCALA_DEC_DESCRIPTION)
  3165  000972  503A               	movf	_state,w,c
  3166  000974  0A0B               	xorlw	11
  3167  000976  E107               	bnz	l7115
  3168                           
  3169                           ;main.c: 651: {
  3170                           ;main.c: 652: muxBuffer[0]='d';
  3171  000978  0E64               	movlw	100
  3172  00097A  0100               	movlb	0	; () banked
  3173  00097C  6FC9               	movwf	_muxBuffer& (0+255),b
  3174                           
  3175                           ;main.c: 653: muxBuffer[1]='E';
  3176  00097E  0E45               	movlw	69
  3177  000980                     L53:
  3178  000980  6FCA               	movwf	(_muxBuffer+1)& (0+255),b
  3179                           
  3180                           ;main.c: 654: muxBuffer[2]='c';
  3181  000982  0E63               	movlw	99
  3182  000984  D742               	goto	L49
  3183  000986                     l7115:
  3184                           
  3185                           ;main.c: 657: else if(state==E_SET_ESCALA_DEC)
  3186  000986  503A               	movf	_state,w,c
  3187  000988  0A0C               	xorlw	12
  3188  00098A  E129               	bnz	l7139
  3189                           
  3190                           ;main.c: 658: {
  3191                           ;main.c: 659: if((timerMem[TMR_SHOW_SETTING_OFF].flag?!(timerMem[TMR_SHOW_SETTING_OFF].f
      +                          lag=0):0)) {{ timerMem[TMR_SHOW_SETTING_ON].flag=0; timerMem[TMR_SHOW_SETTING_ON].presca
      +                          ler=timerDelayConstant[TMR_SHOW_SETTING_ON]; timerMem[TMR_SHOW_SETTING_ON].pause=0; };}
  3192  00098C  0101               	movlb	1	; () banked
  3193  00098E  B3AA               	btfsc	(_timerMem+31)& (0+255),1,b
  3194  000990  D002               	goto	l7121
  3195                           
  3196                           ; BSR set to: 1
  3197  000992  6B67               	clrf	_main$454& (0+255),b
  3198  000994  D004               	goto	L28
  3199  000996                     l7121:
  3200                           
  3201                           ; BSR set to: 1
  3202  000996  DA48               	call	PL5	;call to abstracted procedure
  3203  000998  B4D8               	btfsc	status,2,c
  3204  00099A  0E01               	movlw	1
  3205  00099C  6F67               	movwf	_main$454& (0+255),b
  3206  00099E                     L28:
  3207  00099E  6B68               	clrf	(_main$454+1)& (0+255),b
  3208                           
  3209                           ; BSR set to: 1
  3210  0009A0  5168               	movf	(_main$454+1)& (0+255),w,b
  3211  0009A2  1167               	iorwf	_main$454& (0+255),w,b
  3212  0009A4  E001               	bz	l374
  3213                           
  3214                           ; BSR set to: 1
  3215  0009A6  DA2E               	call	PL2	;call to abstracted procedure
  3216  0009A8                     l374:
  3217                           
  3218                           ; BSR set to: 1
  3219                           ;main.c: 660: if((timerMem[TMR_SHOW_SETTING_ON].flag?!(timerMem[TMR_SHOW_SETTING_ON].fla
      +                          g=0):0)) {{ timerMem[TMR_SHOW_SETTING_OFF].flag=0; timerMem[TMR_SHOW_SETTING_OFF].presca
      +                          ler=timerDelayConstant[TMR_SHOW_SETTING_OFF]; timerMem[TMR_SHOW_SETTING_OFF].pause=0; };
  3220  0009A8  B3A6               	btfsc	(_timerMem+27)& (0+255),1,b
  3221  0009AA  D002               	goto	l7127
  3222                           
  3223                           ; BSR set to: 1
  3224  0009AC  6B69               	clrf	_main$455& (0+255),b
  3225  0009AE  D004               	goto	L29
  3226  0009B0                     l7127:
  3227                           
  3228                           ; BSR set to: 1
  3229  0009B0  DA42               	call	PL6	;call to abstracted procedure
  3230  0009B2  B4D8               	btfsc	status,2,c
  3231  0009B4  0E01               	movlw	1
  3232  0009B6  6F69               	movwf	_main$455& (0+255),b
  3233  0009B8                     L29:
  3234  0009B8  6B6A               	clrf	(_main$455+1)& (0+255),b
  3235                           
  3236                           ; BSR set to: 1
  3237  0009BA  516A               	movf	(_main$455+1)& (0+255),w,b
  3238  0009BC  1169               	iorwf	_main$455& (0+255),w,b
  3239  0009BE  E001               	bz	l379
  3240                           
  3241                           ; BSR set to: 1
  3242  0009C0  DA2A               	call	PL4	;call to abstracted procedure
  3243  0009C2                     l379:
  3244                           
  3245                           ; BSR set to: 1
  3246                           ;main.c: 662: if((!timerMem[TMR_SHOW_SETTING_ON].pause && timerMem[TMR_SHOW_SETTING_ON].
      +                          prescaler!=0))
  3247  0009C2  B5A6               	btfsc	(_timerMem+27)& (0+255),2,b
  3248  0009C4  D765               	goto	l7055
  3249                           
  3250                           ; BSR set to: 1
  3251  0009C6  EE21  F0A3         	lfsr	2,_timerMem+24
  3252  0009CA  50DE               	movf	postinc2,w,c
  3253  0009CC  10DE               	iorwf	postinc2,w,c
  3254  0009CE  10DD               	iorwf	postdec2,w,c
  3255  0009D0  E101 D75E          	bz	l7055
  3256                           
  3257                           ; BSR set to: 1
  3258                           ;main.c: 663: {
  3259                           ;main.c: 664: display=escDecMem;
  3260  0009D4  C02C  F0B5         	movff	_escDecMem,_display
  3261  0009D8  C02D  F0B6         	movff	_escDecMem+1,_display+1
  3262  0009DC  D7BE               	goto	l7107
  3263  0009DE                     l7139:
  3264                           
  3265                           ;main.c: 670: else if(state==E_SET_ADV_XLO_DESCRIPTION)
  3266  0009DE  503A               	movf	_state,w,c
  3267  0009E0  0A0E               	xorlw	14
  3268  0009E2  E102               	bnz	l7143
  3269                           
  3270                           ;main.c: 671: {
  3271                           ;main.c: 672: muxBuffer[0]=' ';
  3272                           
  3273                           ;main.c: 673: muxBuffer[1]='L';
  3274                           
  3275                           ;main.c: 674: muxBuffer[2]='o';
  3276  0009E4  DA64               	call	PL27	;call to abstracted procedure
  3277  0009E6  D004               	goto	L51
  3278  0009E8                     l7143:
  3279                           
  3280                           ;main.c: 677: else if(state==E_SET_ADV_XUP_DESCRIPTION)
  3281  0009E8  503A               	movf	_state,w,c
  3282  0009EA  0A10               	xorlw	16
  3283  0009EC  E103               	bnz	l7147
  3284                           
  3285                           ;main.c: 678: {
  3286                           ;main.c: 679: muxBuffer[0]=' ';
  3287                           
  3288                           ;main.c: 680: muxBuffer[1]='H';
  3289                           
  3290                           ;main.c: 681: muxBuffer[2]='i';
  3291  0009EE  DA65               	call	PL28	;call to abstracted procedure
  3292  0009F0                     L51:
  3293  0009F0  6FCB               	movwf	(_muxBuffer+2)& (0+255),b
  3294  0009F2  D5C6               	goto	l6871
  3295  0009F4                     l7147:
  3296                           
  3297                           ;main.c: 684: else if(state==E_SET_ADV_ELO_DESCRIPTION)
  3298  0009F4  503A               	movf	_state,w,c
  3299  0009F6  0A12               	xorlw	18
  3300  0009F8  E102               	bnz	l7151
  3301                           
  3302                           ;main.c: 685: {
  3303                           ;main.c: 686: muxBuffer[0]=' ';
  3304                           
  3305                           ;main.c: 687: muxBuffer[1]='L';
  3306                           
  3307                           ;main.c: 688: muxBuffer[2]='o';
  3308  0009FA  DA59               	call	PL27	;call to abstracted procedure
  3309  0009FC  D004               	goto	L54
  3310  0009FE                     l7151:
  3311                           
  3312                           ;main.c: 691: else if(state==E_SET_ADV_EUP_DESCRIPTION)
  3313  0009FE  503A               	movf	_state,w,c
  3314  000A00  0A14               	xorlw	20
  3315  000A02  E103               	bnz	l7155
  3316                           
  3317                           ;main.c: 692: {
  3318                           ;main.c: 693: muxBuffer[0]=' ';
  3319                           
  3320                           ;main.c: 694: muxBuffer[1]='H';
  3321                           
  3322                           ;main.c: 695: muxBuffer[2]='i';
  3323  000A04  DA5A               	call	PL28	;call to abstracted procedure
  3324  000A06                     L54:
  3325  000A06  6FCB               	movwf	(_muxBuffer+2)& (0+255),b
  3326  000A08  D5D1               	goto	l6881
  3327  000A0A                     l7155:
  3328                           
  3329                           ;main.c: 698: else if(state==E_SET_ADV_VLO_DESCRIPTION)
  3330  000A0A  503A               	movf	_state,w,c
  3331  000A0C  0A16               	xorlw	22
  3332  000A0E  E104               	bnz	l7159
  3333                           
  3334                           ;main.c: 699: {
  3335                           ;main.c: 700: muxBuffer[0]=' ';
  3336                           
  3337                           ;main.c: 701: muxBuffer[1]='L';
  3338                           
  3339                           ;main.c: 702: muxBuffer[2]='o';
  3340  000A10  DA4E               	call	PL27	;call to abstracted procedure
  3341  000A12  D006               	goto	L52
  3342  000A14                     L46:
  3343                           
  3344                           ;main.c: 703: muxBuffer[ADV]='v';
  3345  000A14  0E76               	movlw	118
  3346  000A16  D6D6               	goto	L17
  3347  000A18                     l7159:
  3348                           
  3349                           ;main.c: 705: else if(state==E_SET_ADV_VUP_DESCRIPTION)
  3350  000A18  503A               	movf	_state,w,c
  3351  000A1A  0A18               	xorlw	24
  3352  000A1C  E103               	bnz	l7163
  3353                           
  3354                           ;main.c: 706: {
  3355                           ;main.c: 707: muxBuffer[0]=' ';
  3356                           
  3357                           ;main.c: 708: muxBuffer[1]='H';
  3358                           
  3359                           ;main.c: 709: muxBuffer[2]='i';
  3360  000A1E  DA4D               	call	PL28	;call to abstracted procedure
  3361  000A20                     L52:
  3362  000A20  6FCB               	movwf	(_muxBuffer+2)& (0+255),b
  3363  000A22  D7F8               	goto	L46
  3364  000A24                     l7163:
  3365                           
  3366                           ;main.c: 712: else if(state==E_SET_ADV_XLO)
  3367  000A24  503A               	movf	_state,w,c
  3368  000A26  0A0F               	xorlw	15
  3369  000A28  E129               	bnz	l7187
  3370                           
  3371                           ;main.c: 713: {
  3372                           ;main.c: 714: if((timerMem[TMR_SHOW_SETTING_OFF].flag?!(timerMem[TMR_SHOW_SETTING_OFF].f
      +                          lag=0):0)) {{ timerMem[TMR_SHOW_SETTING_ON].flag=0; timerMem[TMR_SHOW_SETTING_ON].presca
      +                          ler=timerDelayConstant[TMR_SHOW_SETTING_ON]; timerMem[TMR_SHOW_SETTING_ON].pause=0; };}
  3373  000A2A  0101               	movlb	1	; () banked
  3374  000A2C  B3AA               	btfsc	(_timerMem+31)& (0+255),1,b
  3375  000A2E  D002               	goto	l7169
  3376                           
  3377                           ; BSR set to: 1
  3378  000A30  6B6B               	clrf	_main$456& (0+255),b
  3379  000A32  D004               	goto	L30
  3380  000A34                     l7169:
  3381                           
  3382                           ; BSR set to: 1
  3383  000A34  D9F9               	call	PL5	;call to abstracted procedure
  3384  000A36  B4D8               	btfsc	status,2,c
  3385  000A38  0E01               	movlw	1
  3386  000A3A  6F6B               	movwf	_main$456& (0+255),b
  3387  000A3C                     L30:
  3388  000A3C  6B6C               	clrf	(_main$456+1)& (0+255),b
  3389                           
  3390                           ; BSR set to: 1
  3391  000A3E  516C               	movf	(_main$456+1)& (0+255),w,b
  3392  000A40  116B               	iorwf	_main$456& (0+255),w,b
  3393  000A42  E001               	bz	l400
  3394                           
  3395                           ; BSR set to: 1
  3396  000A44  D9DF               	call	PL2	;call to abstracted procedure
  3397  000A46                     l400:
  3398                           
  3399                           ; BSR set to: 1
  3400                           ;main.c: 715: if((timerMem[TMR_SHOW_SETTING_ON].flag?!(timerMem[TMR_SHOW_SETTING_ON].fla
      +                          g=0):0)) {{ timerMem[TMR_SHOW_SETTING_OFF].flag=0; timerMem[TMR_SHOW_SETTING_OFF].presca
      +                          ler=timerDelayConstant[TMR_SHOW_SETTING_OFF]; timerMem[TMR_SHOW_SETTING_OFF].pause=0; };
  3401  000A46  B3A6               	btfsc	(_timerMem+27)& (0+255),1,b
  3402  000A48  D002               	goto	l7175
  3403                           
  3404                           ; BSR set to: 1
  3405  000A4A  6B6D               	clrf	_main$457& (0+255),b
  3406  000A4C  D004               	goto	L31
  3407  000A4E                     l7175:
  3408                           
  3409                           ; BSR set to: 1
  3410  000A4E  D9F3               	call	PL6	;call to abstracted procedure
  3411  000A50  B4D8               	btfsc	status,2,c
  3412  000A52  0E01               	movlw	1
  3413  000A54  6F6D               	movwf	_main$457& (0+255),b
  3414  000A56                     L31:
  3415  000A56  6B6E               	clrf	(_main$457+1)& (0+255),b
  3416                           
  3417                           ; BSR set to: 1
  3418  000A58  516E               	movf	(_main$457+1)& (0+255),w,b
  3419  000A5A  116D               	iorwf	_main$457& (0+255),w,b
  3420  000A5C  E001               	bz	l405
  3421                           
  3422                           ; BSR set to: 1
  3423  000A5E  D9DB               	call	PL4	;call to abstracted procedure
  3424  000A60                     l405:
  3425                           
  3426                           ; BSR set to: 1
  3427                           ;main.c: 717: if((!timerMem[TMR_SHOW_SETTING_ON].pause && timerMem[TMR_SHOW_SETTING_ON].
      +                          prescaler!=0))
  3428  000A60  B5A6               	btfsc	(_timerMem+27)& (0+255),2,b
  3429  000A62  D716               	goto	l7055
  3430                           
  3431                           ; BSR set to: 1
  3432  000A64  EE21  F0A3         	lfsr	2,_timerMem+24
  3433  000A68  50DE               	movf	postinc2,w,c
  3434  000A6A  10DE               	iorwf	postinc2,w,c
  3435  000A6C  10DD               	iorwf	postdec2,w,c
  3436  000A6E  E101 D70F          	bz	l7055
  3437                           
  3438                           ; BSR set to: 1
  3439                           ;main.c: 718: {
  3440                           ;main.c: 719: display=xLoMem;
  3441  000A72  C034  F0B5         	movff	_xLoMem,_display
  3442  000A76  C035  F0B6         	movff	_xLoMem+1,_display+1
  3443  000A7A  D76F               	goto	l7107
  3444  000A7C                     l7187:
  3445                           
  3446                           ;main.c: 725: else if(state==E_SET_ADV_XUP)
  3447  000A7C  503A               	movf	_state,w,c
  3448  000A7E  0A11               	xorlw	17
  3449  000A80  E129               	bnz	l7211
  3450                           
  3451                           ;main.c: 726: {
  3452                           ;main.c: 727: if((timerMem[TMR_SHOW_SETTING_OFF].flag?!(timerMem[TMR_SHOW_SETTING_OFF].f
      +                          lag=0):0)) {{ timerMem[TMR_SHOW_SETTING_ON].flag=0; timerMem[TMR_SHOW_SETTING_ON].presca
      +                          ler=timerDelayConstant[TMR_SHOW_SETTING_ON]; timerMem[TMR_SHOW_SETTING_ON].pause=0; };}
  3453  000A82  0101               	movlb	1	; () banked
  3454  000A84  B3AA               	btfsc	(_timerMem+31)& (0+255),1,b
  3455  000A86  D002               	goto	l7193
  3456                           
  3457                           ; BSR set to: 1
  3458  000A88  6B6F               	clrf	_main$458& (0+255),b
  3459  000A8A  D004               	goto	L32
  3460  000A8C                     l7193:
  3461                           
  3462                           ; BSR set to: 1
  3463  000A8C  D9CD               	call	PL5	;call to abstracted procedure
  3464  000A8E  B4D8               	btfsc	status,2,c
  3465  000A90  0E01               	movlw	1
  3466  000A92  6F6F               	movwf	_main$458& (0+255),b
  3467  000A94                     L32:
  3468  000A94  6B70               	clrf	(_main$458+1)& (0+255),b
  3469                           
  3470                           ; BSR set to: 1
  3471  000A96  5170               	movf	(_main$458+1)& (0+255),w,b
  3472  000A98  116F               	iorwf	_main$458& (0+255),w,b
  3473  000A9A  E001               	bz	l414
  3474                           
  3475                           ; BSR set to: 1
  3476  000A9C  D9B3               	call	PL2	;call to abstracted procedure
  3477  000A9E                     l414:
  3478                           
  3479                           ; BSR set to: 1
  3480                           ;main.c: 728: if((timerMem[TMR_SHOW_SETTING_ON].flag?!(timerMem[TMR_SHOW_SETTING_ON].fla
      +                          g=0):0)) {{ timerMem[TMR_SHOW_SETTING_OFF].flag=0; timerMem[TMR_SHOW_SETTING_OFF].presca
      +                          ler=timerDelayConstant[TMR_SHOW_SETTING_OFF]; timerMem[TMR_SHOW_SETTING_OFF].pause=0; };
  3481  000A9E  B3A6               	btfsc	(_timerMem+27)& (0+255),1,b
  3482  000AA0  D002               	goto	l7199
  3483                           
  3484                           ; BSR set to: 1
  3485  000AA2  6B71               	clrf	_main$459& (0+255),b
  3486  000AA4  D004               	goto	L33
  3487  000AA6                     l7199:
  3488                           
  3489                           ; BSR set to: 1
  3490  000AA6  D9C7               	call	PL6	;call to abstracted procedure
  3491  000AA8  B4D8               	btfsc	status,2,c
  3492  000AAA  0E01               	movlw	1
  3493  000AAC  6F71               	movwf	_main$459& (0+255),b
  3494  000AAE                     L33:
  3495  000AAE  6B72               	clrf	(_main$459+1)& (0+255),b
  3496                           
  3497                           ; BSR set to: 1
  3498  000AB0  5172               	movf	(_main$459+1)& (0+255),w,b
  3499  000AB2  1171               	iorwf	_main$459& (0+255),w,b
  3500  000AB4  E001               	bz	l419
  3501                           
  3502                           ; BSR set to: 1
  3503  000AB6  D9AF               	call	PL4	;call to abstracted procedure
  3504  000AB8                     l419:
  3505                           
  3506                           ; BSR set to: 1
  3507                           ;main.c: 730: if((!timerMem[TMR_SHOW_SETTING_ON].pause && timerMem[TMR_SHOW_SETTING_ON].
      +                          prescaler!=0))
  3508  000AB8  B5A6               	btfsc	(_timerMem+27)& (0+255),2,b
  3509  000ABA  D6EA               	goto	l7055
  3510                           
  3511                           ; BSR set to: 1
  3512  000ABC  EE21  F0A3         	lfsr	2,_timerMem+24
  3513  000AC0  50DE               	movf	postinc2,w,c
  3514  000AC2  10DE               	iorwf	postinc2,w,c
  3515  000AC4  10DD               	iorwf	postdec2,w,c
  3516  000AC6  E101 D6E3          	bz	l7055
  3517                           
  3518                           ; BSR set to: 1
  3519                           ;main.c: 731: {
  3520                           ;main.c: 732: display=xUpMem;
  3521  000ACA  C036  F0B5         	movff	_xUpMem,_display
  3522  000ACE  C037  F0B6         	movff	_xUpMem+1,_display+1
  3523  000AD2  D743               	goto	l7107
  3524  000AD4                     l7211:
  3525                           
  3526                           ;main.c: 738: else if(state==E_SET_ADV_ELO)
  3527  000AD4  503A               	movf	_state,w,c
  3528  000AD6  0A13               	xorlw	19
  3529  000AD8  E129               	bnz	l7235
  3530                           
  3531                           ;main.c: 739: {
  3532                           ;main.c: 740: if((timerMem[TMR_SHOW_SETTING_OFF].flag?!(timerMem[TMR_SHOW_SETTING_OFF].f
      +                          lag=0):0)) {{ timerMem[TMR_SHOW_SETTING_ON].flag=0; timerMem[TMR_SHOW_SETTING_ON].presca
      +                          ler=timerDelayConstant[TMR_SHOW_SETTING_ON]; timerMem[TMR_SHOW_SETTING_ON].pause=0; };}
  3533  000ADA  0101               	movlb	1	; () banked
  3534  000ADC  B3AA               	btfsc	(_timerMem+31)& (0+255),1,b
  3535  000ADE  D002               	goto	l7217
  3536                           
  3537                           ; BSR set to: 1
  3538  000AE0  6B73               	clrf	_main$460& (0+255),b
  3539  000AE2  D004               	goto	L34
  3540  000AE4                     l7217:
  3541                           
  3542                           ; BSR set to: 1
  3543  000AE4  D9A1               	call	PL5	;call to abstracted procedure
  3544  000AE6  B4D8               	btfsc	status,2,c
  3545  000AE8  0E01               	movlw	1
  3546  000AEA  6F73               	movwf	_main$460& (0+255),b
  3547  000AEC                     L34:
  3548  000AEC  6B74               	clrf	(_main$460+1)& (0+255),b
  3549                           
  3550                           ; BSR set to: 1
  3551  000AEE  5174               	movf	(_main$460+1)& (0+255),w,b
  3552  000AF0  1173               	iorwf	_main$460& (0+255),w,b
  3553  000AF2  E001               	bz	l428
  3554                           
  3555                           ; BSR set to: 1
  3556  000AF4  D987               	call	PL2	;call to abstracted procedure
  3557  000AF6                     l428:
  3558                           
  3559                           ; BSR set to: 1
  3560                           ;main.c: 741: if((timerMem[TMR_SHOW_SETTING_ON].flag?!(timerMem[TMR_SHOW_SETTING_ON].fla
      +                          g=0):0)) {{ timerMem[TMR_SHOW_SETTING_OFF].flag=0; timerMem[TMR_SHOW_SETTING_OFF].presca
      +                          ler=timerDelayConstant[TMR_SHOW_SETTING_OFF]; timerMem[TMR_SHOW_SETTING_OFF].pause=0; };
  3561  000AF6  B3A6               	btfsc	(_timerMem+27)& (0+255),1,b
  3562  000AF8  D002               	goto	l7223
  3563                           
  3564                           ; BSR set to: 1
  3565  000AFA  6B75               	clrf	_main$461& (0+255),b
  3566  000AFC  D004               	goto	L35
  3567  000AFE                     l7223:
  3568                           
  3569                           ; BSR set to: 1
  3570  000AFE  D99B               	call	PL6	;call to abstracted procedure
  3571  000B00  B4D8               	btfsc	status,2,c
  3572  000B02  0E01               	movlw	1
  3573  000B04  6F75               	movwf	_main$461& (0+255),b
  3574  000B06                     L35:
  3575  000B06  6B76               	clrf	(_main$461+1)& (0+255),b
  3576                           
  3577                           ; BSR set to: 1
  3578  000B08  5176               	movf	(_main$461+1)& (0+255),w,b
  3579  000B0A  1175               	iorwf	_main$461& (0+255),w,b
  3580  000B0C  E001               	bz	l433
  3581                           
  3582                           ; BSR set to: 1
  3583  000B0E  D983               	call	PL4	;call to abstracted procedure
  3584  000B10                     l433:
  3585                           
  3586                           ; BSR set to: 1
  3587                           ;main.c: 743: if((!timerMem[TMR_SHOW_SETTING_ON].pause && timerMem[TMR_SHOW_SETTING_ON].
      +                          prescaler!=0))
  3588  000B10  B5A6               	btfsc	(_timerMem+27)& (0+255),2,b
  3589  000B12  D6BE               	goto	l7055
  3590                           
  3591                           ; BSR set to: 1
  3592  000B14  EE21  F0A3         	lfsr	2,_timerMem+24
  3593  000B18  50DE               	movf	postinc2,w,c
  3594  000B1A  10DE               	iorwf	postinc2,w,c
  3595  000B1C  10DD               	iorwf	postdec2,w,c
  3596  000B1E  E101 D6B7          	bz	l7055
  3597                           
  3598                           ; BSR set to: 1
  3599                           ;main.c: 744: {
  3600                           ;main.c: 745: display=eLoMem;
  3601  000B22  C028  F0B5         	movff	_eLoMem,_display
  3602  000B26  C029  F0B6         	movff	_eLoMem+1,_display+1
  3603  000B2A  D717               	goto	l7107
  3604  000B2C                     l7235:
  3605                           
  3606                           ;main.c: 751: else if(state==E_SET_ADV_EUP)
  3607  000B2C  503A               	movf	_state,w,c
  3608  000B2E  0A15               	xorlw	21
  3609  000B30  E129               	bnz	l7259
  3610                           
  3611                           ;main.c: 752: {
  3612                           ;main.c: 753: if((timerMem[TMR_SHOW_SETTING_OFF].flag?!(timerMem[TMR_SHOW_SETTING_OFF].f
      +                          lag=0):0)) {{ timerMem[TMR_SHOW_SETTING_ON].flag=0; timerMem[TMR_SHOW_SETTING_ON].presca
      +                          ler=timerDelayConstant[TMR_SHOW_SETTING_ON]; timerMem[TMR_SHOW_SETTING_ON].pause=0; };}
  3613  000B32  0101               	movlb	1	; () banked
  3614  000B34  B3AA               	btfsc	(_timerMem+31)& (0+255),1,b
  3615  000B36  D002               	goto	l7241
  3616                           
  3617                           ; BSR set to: 1
  3618  000B38  6B77               	clrf	_main$462& (0+255),b
  3619  000B3A  D004               	goto	L36
  3620  000B3C                     l7241:
  3621                           
  3622                           ; BSR set to: 1
  3623  000B3C  D975               	call	PL5	;call to abstracted procedure
  3624  000B3E  B4D8               	btfsc	status,2,c
  3625  000B40  0E01               	movlw	1
  3626  000B42  6F77               	movwf	_main$462& (0+255),b
  3627  000B44                     L36:
  3628  000B44  6B78               	clrf	(_main$462+1)& (0+255),b
  3629                           
  3630                           ; BSR set to: 1
  3631  000B46  5178               	movf	(_main$462+1)& (0+255),w,b
  3632  000B48  1177               	iorwf	_main$462& (0+255),w,b
  3633  000B4A  E001               	bz	l442
  3634                           
  3635                           ; BSR set to: 1
  3636  000B4C  D95B               	call	PL2	;call to abstracted procedure
  3637  000B4E                     l442:
  3638                           
  3639                           ; BSR set to: 1
  3640                           ;main.c: 754: if((timerMem[TMR_SHOW_SETTING_ON].flag?!(timerMem[TMR_SHOW_SETTING_ON].fla
      +                          g=0):0)) {{ timerMem[TMR_SHOW_SETTING_OFF].flag=0; timerMem[TMR_SHOW_SETTING_OFF].presca
      +                          ler=timerDelayConstant[TMR_SHOW_SETTING_OFF]; timerMem[TMR_SHOW_SETTING_OFF].pause=0; };
  3641  000B4E  B3A6               	btfsc	(_timerMem+27)& (0+255),1,b
  3642  000B50  D002               	goto	l7247
  3643                           
  3644                           ; BSR set to: 1
  3645  000B52  6B79               	clrf	_main$463& (0+255),b
  3646  000B54  D004               	goto	L37
  3647  000B56                     l7247:
  3648                           
  3649                           ; BSR set to: 1
  3650  000B56  D96F               	call	PL6	;call to abstracted procedure
  3651  000B58  B4D8               	btfsc	status,2,c
  3652  000B5A  0E01               	movlw	1
  3653  000B5C  6F79               	movwf	_main$463& (0+255),b
  3654  000B5E                     L37:
  3655  000B5E  6B7A               	clrf	(_main$463+1)& (0+255),b
  3656                           
  3657                           ; BSR set to: 1
  3658  000B60  517A               	movf	(_main$463+1)& (0+255),w,b
  3659  000B62  1179               	iorwf	_main$463& (0+255),w,b
  3660  000B64  E001               	bz	l447
  3661                           
  3662                           ; BSR set to: 1
  3663  000B66  D957               	call	PL4	;call to abstracted procedure
  3664  000B68                     l447:
  3665                           
  3666                           ; BSR set to: 1
  3667                           ;main.c: 756: if((!timerMem[TMR_SHOW_SETTING_ON].pause && timerMem[TMR_SHOW_SETTING_ON].
      +                          prescaler!=0))
  3668  000B68  B5A6               	btfsc	(_timerMem+27)& (0+255),2,b
  3669  000B6A  D692               	goto	l7055
  3670                           
  3671                           ; BSR set to: 1
  3672  000B6C  EE21  F0A3         	lfsr	2,_timerMem+24
  3673  000B70  50DE               	movf	postinc2,w,c
  3674  000B72  10DE               	iorwf	postinc2,w,c
  3675  000B74  10DD               	iorwf	postdec2,w,c
  3676  000B76  E101 D68B          	bz	l7055
  3677                           
  3678                           ; BSR set to: 1
  3679                           ;main.c: 757: {
  3680                           ;main.c: 758: display=eUpMem;
  3681  000B7A  C02A  F0B5         	movff	_eUpMem,_display
  3682  000B7E  C02B  F0B6         	movff	_eUpMem+1,_display+1
  3683  000B82  D6EB               	goto	l7107
  3684  000B84                     l7259:
  3685                           
  3686                           ;main.c: 764: else if(state==E_SET_ADV_VLO)
  3687  000B84  503A               	movf	_state,w,c
  3688  000B86  0A17               	xorlw	23
  3689  000B88  E129               	bnz	l7283
  3690                           
  3691                           ;main.c: 765: {
  3692                           ;main.c: 766: if((timerMem[TMR_SHOW_SETTING_OFF].flag?!(timerMem[TMR_SHOW_SETTING_OFF].f
      +                          lag=0):0)) {{ timerMem[TMR_SHOW_SETTING_ON].flag=0; timerMem[TMR_SHOW_SETTING_ON].presca
      +                          ler=timerDelayConstant[TMR_SHOW_SETTING_ON]; timerMem[TMR_SHOW_SETTING_ON].pause=0; };}
  3693  000B8A  0101               	movlb	1	; () banked
  3694  000B8C  B3AA               	btfsc	(_timerMem+31)& (0+255),1,b
  3695  000B8E  D002               	goto	l7265
  3696                           
  3697                           ; BSR set to: 1
  3698  000B90  6B7B               	clrf	_main$464& (0+255),b
  3699  000B92  D004               	goto	L38
  3700  000B94                     l7265:
  3701                           
  3702                           ; BSR set to: 1
  3703  000B94  D949               	call	PL5	;call to abstracted procedure
  3704  000B96  B4D8               	btfsc	status,2,c
  3705  000B98  0E01               	movlw	1
  3706  000B9A  6F7B               	movwf	_main$464& (0+255),b
  3707  000B9C                     L38:
  3708  000B9C  6B7C               	clrf	(_main$464+1)& (0+255),b
  3709                           
  3710                           ; BSR set to: 1
  3711  000B9E  517C               	movf	(_main$464+1)& (0+255),w,b
  3712  000BA0  117B               	iorwf	_main$464& (0+255),w,b
  3713  000BA2  E001               	bz	l456
  3714                           
  3715                           ; BSR set to: 1
  3716  000BA4  D92F               	call	PL2	;call to abstracted procedure
  3717  000BA6                     l456:
  3718                           
  3719                           ; BSR set to: 1
  3720                           ;main.c: 767: if((timerMem[TMR_SHOW_SETTING_ON].flag?!(timerMem[TMR_SHOW_SETTING_ON].fla
      +                          g=0):0)) {{ timerMem[TMR_SHOW_SETTING_OFF].flag=0; timerMem[TMR_SHOW_SETTING_OFF].presca
      +                          ler=timerDelayConstant[TMR_SHOW_SETTING_OFF]; timerMem[TMR_SHOW_SETTING_OFF].pause=0; };
  3721  000BA6  B3A6               	btfsc	(_timerMem+27)& (0+255),1,b
  3722  000BA8  D002               	goto	l7271
  3723                           
  3724                           ; BSR set to: 1
  3725  000BAA  6B7D               	clrf	_main$465& (0+255),b
  3726  000BAC  D004               	goto	L39
  3727  000BAE                     l7271:
  3728                           
  3729                           ; BSR set to: 1
  3730  000BAE  D943               	call	PL6	;call to abstracted procedure
  3731  000BB0  B4D8               	btfsc	status,2,c
  3732  000BB2  0E01               	movlw	1
  3733  000BB4  6F7D               	movwf	_main$465& (0+255),b
  3734  000BB6                     L39:
  3735  000BB6  6B7E               	clrf	(_main$465+1)& (0+255),b
  3736                           
  3737                           ; BSR set to: 1
  3738  000BB8  517E               	movf	(_main$465+1)& (0+255),w,b
  3739  000BBA  117D               	iorwf	_main$465& (0+255),w,b
  3740  000BBC  E001               	bz	l461
  3741                           
  3742                           ; BSR set to: 1
  3743  000BBE  D92B               	call	PL4	;call to abstracted procedure
  3744  000BC0                     l461:
  3745                           
  3746                           ; BSR set to: 1
  3747                           ;main.c: 769: if((!timerMem[TMR_SHOW_SETTING_ON].pause && timerMem[TMR_SHOW_SETTING_ON].
      +                          prescaler!=0))
  3748  000BC0  B5A6               	btfsc	(_timerMem+27)& (0+255),2,b
  3749  000BC2  D666               	goto	l7055
  3750                           
  3751                           ; BSR set to: 1
  3752  000BC4  EE21  F0A3         	lfsr	2,_timerMem+24
  3753  000BC8  50DE               	movf	postinc2,w,c
  3754  000BCA  10DE               	iorwf	postinc2,w,c
  3755  000BCC  10DD               	iorwf	postdec2,w,c
  3756  000BCE  E101 D65F          	bz	l7055
  3757                           
  3758                           ; BSR set to: 1
  3759                           ;main.c: 770: {
  3760                           ;main.c: 771: display=vLoMem;
  3761  000BD2  C030  F0B5         	movff	_vLoMem,_display
  3762  000BD6  C031  F0B6         	movff	_vLoMem+1,_display+1
  3763  000BDA  D6BF               	goto	l7107
  3764  000BDC                     l7283:
  3765                           
  3766                           ;main.c: 777: else if(state==E_SET_ADV_VUP)
  3767  000BDC  503A               	movf	_state,w,c
  3768  000BDE  0A19               	xorlw	25
  3769  000BE0  E129               	bnz	l7307
  3770                           
  3771                           ;main.c: 778: {
  3772                           ;main.c: 779: if((timerMem[TMR_SHOW_SETTING_OFF].flag?!(timerMem[TMR_SHOW_SETTING_OFF].f
      +                          lag=0):0)) {{ timerMem[TMR_SHOW_SETTING_ON].flag=0; timerMem[TMR_SHOW_SETTING_ON].presca
      +                          ler=timerDelayConstant[TMR_SHOW_SETTING_ON]; timerMem[TMR_SHOW_SETTING_ON].pause=0; };}
  3773  000BE2  0101               	movlb	1	; () banked
  3774  000BE4  B3AA               	btfsc	(_timerMem+31)& (0+255),1,b
  3775  000BE6  D002               	goto	l7289
  3776                           
  3777                           ; BSR set to: 1
  3778  000BE8  6B7F               	clrf	_main$466& (0+255),b
  3779  000BEA  D004               	goto	L40
  3780  000BEC                     l7289:
  3781                           
  3782                           ; BSR set to: 1
  3783  000BEC  D91D               	call	PL5	;call to abstracted procedure
  3784  000BEE  B4D8               	btfsc	status,2,c
  3785  000BF0  0E01               	movlw	1
  3786  000BF2  6F7F               	movwf	_main$466& (0+255),b
  3787  000BF4                     L40:
  3788  000BF4  6B80               	clrf	(_main$466+1)& (0+255),b
  3789                           
  3790                           ; BSR set to: 1
  3791  000BF6  5180               	movf	(_main$466+1)& (0+255),w,b
  3792  000BF8  117F               	iorwf	_main$466& (0+255),w,b
  3793  000BFA  E001               	bz	l470
  3794                           
  3795                           ; BSR set to: 1
  3796  000BFC  D903               	call	PL2	;call to abstracted procedure
  3797  000BFE                     l470:
  3798                           
  3799                           ; BSR set to: 1
  3800                           ;main.c: 780: if((timerMem[TMR_SHOW_SETTING_ON].flag?!(timerMem[TMR_SHOW_SETTING_ON].fla
      +                          g=0):0)) {{ timerMem[TMR_SHOW_SETTING_OFF].flag=0; timerMem[TMR_SHOW_SETTING_OFF].presca
      +                          ler=timerDelayConstant[TMR_SHOW_SETTING_OFF]; timerMem[TMR_SHOW_SETTING_OFF].pause=0; };
  3801  000BFE  B3A6               	btfsc	(_timerMem+27)& (0+255),1,b
  3802  000C00  D002               	goto	l7295
  3803                           
  3804                           ; BSR set to: 1
  3805  000C02  6B81               	clrf	_main$467& (0+255),b
  3806  000C04  D004               	goto	L41
  3807  000C06                     l7295:
  3808                           
  3809                           ; BSR set to: 1
  3810  000C06  D917               	call	PL6	;call to abstracted procedure
  3811  000C08  B4D8               	btfsc	status,2,c
  3812  000C0A  0E01               	movlw	1
  3813  000C0C  6F81               	movwf	_main$467& (0+255),b
  3814  000C0E                     L41:
  3815  000C0E  6B82               	clrf	(_main$467+1)& (0+255),b
  3816                           
  3817                           ; BSR set to: 1
  3818  000C10  5182               	movf	(_main$467+1)& (0+255),w,b
  3819  000C12  1181               	iorwf	_main$467& (0+255),w,b
  3820  000C14  E001               	bz	l475
  3821                           
  3822                           ; BSR set to: 1
  3823  000C16  D8FF               	call	PL4	;call to abstracted procedure
  3824  000C18                     l475:
  3825                           
  3826                           ; BSR set to: 1
  3827                           ;main.c: 782: if((!timerMem[TMR_SHOW_SETTING_ON].pause && timerMem[TMR_SHOW_SETTING_ON].
      +                          prescaler!=0))
  3828  000C18  B5A6               	btfsc	(_timerMem+27)& (0+255),2,b
  3829  000C1A  D63A               	goto	l7055
  3830                           
  3831                           ; BSR set to: 1
  3832  000C1C  EE21  F0A3         	lfsr	2,_timerMem+24
  3833  000C20  50DE               	movf	postinc2,w,c
  3834  000C22  10DE               	iorwf	postinc2,w,c
  3835  000C24  10DD               	iorwf	postdec2,w,c
  3836  000C26  E101 D633          	bz	l7055
  3837                           
  3838                           ; BSR set to: 1
  3839                           ;main.c: 783: {
  3840                           ;main.c: 784: display=vUpMem;
  3841  000C2A  C032  F0B5         	movff	_vUpMem,_display
  3842  000C2E  C033  F0B6         	movff	_vUpMem+1,_display+1
  3843  000C32  D693               	goto	l7107
  3844  000C34                     l7307:
  3845                           
  3846                           ;main.c: 789: }
  3847                           ;main.c: 792: if((pulsPinBuffer.flag && pulsPinBuffer.pulsId==UP_FP && pulsPinBuffer.fp=
      +                          =1 ?!(pulsPinBuffer.flag=0):0))
  3848  000C34  0100               	movlb	0	; () banked
  3849  000C36  ABBC               	btfss	_pulsPinBuffer& (0+255),5,b
  3850  000C38  D006               	goto	l488
  3851                           
  3852                           ; BSR set to: 0
  3853  000C3A  51BC               	movf	_pulsPinBuffer& (0+255),w,b
  3854  000C3C  0B1F               	andlw	31
  3855  000C3E  0A02               	xorlw	2
  3856  000C40  E102               	bnz	l488
  3857                           
  3858                           ; BSR set to: 0
  3859  000C42  BDBC               	btfsc	_pulsPinBuffer& (0+255),6,b
  3860  000C44  D003               	goto	l7313
  3861  000C46                     l488:
  3862                           
  3863                           ; BSR set to: 0
  3864  000C46  0101               	movlb	1	; () banked
  3865  000C48  6B83               	clrf	_main$468& (0+255),b
  3866  000C4A  D002               	goto	L42
  3867  000C4C                     l7313:
  3868                           
  3869                           ; BSR set to: 0
  3870  000C4C  D911               	call	PL10	;call to abstracted procedure
  3871  000C4E  6F83               	movwf	_main$468& (0+255),b
  3872  000C50                     L42:
  3873  000C50  6B84               	clrf	(_main$468+1)& (0+255),b
  3874                           
  3875                           ; BSR set to: 1
  3876  000C52  5184               	movf	(_main$468+1)& (0+255),w,b
  3877  000C54  1183               	iorwf	_main$468& (0+255),w,b
  3878  000C56  E01B               	bz	l7359
  3879                           
  3880                           ; BSR set to: 1
  3881                           ;main.c: 793: {
  3882                           ;main.c: 794: if(ignoreNextFp) ignoreNextFp=0;
  3883  000C58  0100               	movlb	0	; () banked
  3884  000C5A  51BB               	movf	_ignoreNextFp& (0+255),w,b
  3885  000C5C  E002               	bz	l489
  3886                           
  3887                           ; BSR set to: 0
  3888  000C5E  6BBB               	clrf	_ignoreNextFp& (0+255),b
  3889  000C60  D016               	goto	l7359
  3890  000C62                     l489:
  3891                           
  3892                           ; BSR set to: 0
  3893                           ;main.c: 795: else
  3894                           ;main.c: 796: {
  3895                           ;main.c: 797: { timerMem[TMR_LONG_PULS_UP].prescaler=0; timerMem[TMR_LONG_PULS_UP].pause
      +                          =1; };
  3896  000C62  0101               	movlb	1	; () banked
  3897  000C64  6B8B               	clrf	_timerMem& (0+255),b
  3898  000C66  6B8C               	clrf	(_timerMem+1)& (0+255),b
  3899  000C68  6B8D               	clrf	(_timerMem+2)& (0+255),b
  3900  000C6A  858E               	bsf	(_timerMem+3)& (0+255),2,b
  3901                           
  3902                           ; BSR set to: 1
  3903                           ;main.c: 800: if(state>=E_IDLE && state<E_MENU_FACTORY_CAL)
  3904  000C6C  503A               	movf	_state,w,c
  3905  000C6E  E007               	bz	l7339
  3906                           
  3907                           ; BSR set to: 1
  3908  000C70  0E07               	movlw	7
  3909  000C72  603A               	cpfslt	_state,c
  3910  000C74  D004               	goto	l7339
  3911                           
  3912                           ; BSR set to: 1
  3913                           ;main.c: 801: {
  3914                           ;main.c: 802: state++;
  3915  000C76  2A3A               	incf	_state,f,c
  3916  000C78                     l7325:
  3917                           
  3918                           ; BSR set to: 1
  3919                           ;main.c: 803: PORTCbits.RC6=1;
  3920                           
  3921                           ; BSR set to: 1
  3922                           ;main.c: 804: { timerMem[TMR_SHOW_MENU].flag=0; timerMem[TMR_SHOW_MENU].prescaler=timerD
      +                          elayConstant[TMR_SHOW_MENU]; timerMem[TMR_SHOW_MENU].pause=0; };
  3923                           
  3924                           ; BSR set to: 1
  3925                           
  3926                           ; BSR set to: 1
  3927  000C78  D910               	call	PL18	;call to abstracted procedure
  3928                           
  3929                           ; BSR set to: 1
  3930                           ;main.c: 805: { timerMem[TMR_BEEP].flag=0; timerMem[TMR_BEEP].prescaler=timerDelayConsta
      +                          nt[TMR_BEEP]; timerMem[TMR_BEEP].pause=0; };
  3931                           
  3932                           ; BSR set to: 1
  3933                           
  3934                           ; BSR set to: 1
  3935  000C7A  D906               	call	PL17	;call to abstracted procedure
  3936                           
  3937                           ;main.c: 806: }
  3938  000C7C  D008               	goto	l7359
  3939  000C7E                     l7339:
  3940                           
  3941                           ; BSR set to: 1
  3942                           ;main.c: 807: else if(state==E_MENU_FACTORY_CAL)
  3943  000C7E  503A               	movf	_state,w,c
  3944  000C80  0A07               	xorlw	7
  3945  000C82  E103               	bnz	l7357
  3946                           
  3947                           ; BSR set to: 1
  3948                           ;main.c: 808: {
  3949                           ;main.c: 809: state=E_MENU_BRILLO;
  3950  000C84  0E02               	movlw	2
  3951  000C86  6E3A               	movwf	_state,c
  3952  000C88  D7F7               	goto	l7325
  3953  000C8A                     l7357:
  3954                           
  3955                           ; BSR set to: 1
  3956                           ;main.c: 814: else incVar();
  3957  000C8A  EC63  F007         	call	_incVar	;wreg free
  3958  000C8E                     l7359:
  3959                           
  3960                           ;main.c: 815: }
  3961                           ;main.c: 816: }
  3962                           ;main.c: 819: if((pulsPinBuffer.flag && pulsPinBuffer.pulsId==DWN_FP && pulsPinBuffer.fp
      +                          ==1 ?!(pulsPinBuffer.flag=0):0))
  3963  000C8E  0100               	movlb	0	; () banked
  3964  000C90  ABBC               	btfss	_pulsPinBuffer& (0+255),5,b
  3965  000C92  D006               	goto	l501
  3966                           
  3967                           ; BSR set to: 0
  3968  000C94  51BC               	movf	_pulsPinBuffer& (0+255),w,b
  3969  000C96  0B1F               	andlw	31
  3970  000C98  0A03               	xorlw	3
  3971  000C9A  E102               	bnz	l501
  3972                           
  3973                           ; BSR set to: 0
  3974  000C9C  BDBC               	btfsc	_pulsPinBuffer& (0+255),6,b
  3975  000C9E  D003               	goto	l7365
  3976  000CA0                     l501:
  3977                           
  3978                           ; BSR set to: 0
  3979  000CA0  0101               	movlb	1	; () banked
  3980  000CA2  6B85               	clrf	_main$469& (0+255),b
  3981  000CA4  D002               	goto	L43
  3982  000CA6                     l7365:
  3983                           
  3984                           ; BSR set to: 0
  3985  000CA6  D8E4               	call	PL10	;call to abstracted procedure
  3986  000CA8  6F85               	movwf	_main$469& (0+255),b
  3987  000CAA                     L43:
  3988  000CAA  6B86               	clrf	(_main$469+1)& (0+255),b
  3989                           
  3990                           ; BSR set to: 1
  3991  000CAC  5186               	movf	(_main$469+1)& (0+255),w,b
  3992  000CAE  1185               	iorwf	_main$469& (0+255),w,b
  3993  000CB0  E01B               	bz	l7411
  3994                           
  3995                           ; BSR set to: 1
  3996                           ;main.c: 820: {
  3997                           ;main.c: 821: if(ignoreNextFp) ignoreNextFp=0;
  3998  000CB2  0100               	movlb	0	; () banked
  3999  000CB4  51BB               	movf	_ignoreNextFp& (0+255),w,b
  4000  000CB6  E002               	bz	l502
  4001                           
  4002                           ; BSR set to: 0
  4003  000CB8  6BBB               	clrf	_ignoreNextFp& (0+255),b
  4004  000CBA  D016               	goto	l7411
  4005  000CBC                     l502:
  4006                           
  4007                           ; BSR set to: 0
  4008                           ;main.c: 822: else
  4009                           ;main.c: 823: {
  4010                           ;main.c: 824: { timerMem[TMR_LONG_PULS_DWN].prescaler=0; timerMem[TMR_LONG_PULS_DWN].pau
      +                          se=1; };
  4011  000CBC  0101               	movlb	1	; () banked
  4012  000CBE  6B8F               	clrf	(_timerMem+4)& (0+255),b
  4013  000CC0  6B90               	clrf	(_timerMem+5)& (0+255),b
  4014  000CC2  6B91               	clrf	(_timerMem+6)& (0+255),b
  4015  000CC4  8592               	bsf	(_timerMem+7)& (0+255),2,b
  4016                           
  4017                           ; BSR set to: 1
  4018                           ;main.c: 827: if(state>=E_IDLE && state<E_MENU_FACTORY_CAL)
  4019  000CC6  503A               	movf	_state,w,c
  4020  000CC8  E007               	bz	l7391
  4021                           
  4022                           ; BSR set to: 1
  4023  000CCA  0E07               	movlw	7
  4024  000CCC  603A               	cpfslt	_state,c
  4025  000CCE  D004               	goto	l7391
  4026                           
  4027                           ; BSR set to: 1
  4028                           ;main.c: 828: {
  4029                           ;main.c: 829: state++;
  4030  000CD0  2A3A               	incf	_state,f,c
  4031  000CD2                     l7377:
  4032                           
  4033                           ; BSR set to: 1
  4034                           ;main.c: 830: PORTCbits.RC6=1;
  4035                           
  4036                           ; BSR set to: 1
  4037                           ;main.c: 831: { timerMem[TMR_SHOW_MENU].flag=0; timerMem[TMR_SHOW_MENU].prescaler=timerD
      +                          elayConstant[TMR_SHOW_MENU]; timerMem[TMR_SHOW_MENU].pause=0; };
  4038                           
  4039                           ; BSR set to: 1
  4040                           
  4041                           ; BSR set to: 1
  4042  000CD2  D8E3               	call	PL18	;call to abstracted procedure
  4043                           
  4044                           ; BSR set to: 1
  4045                           ;main.c: 832: { timerMem[TMR_BEEP].flag=0; timerMem[TMR_BEEP].prescaler=timerDelayConsta
      +                          nt[TMR_BEEP]; timerMem[TMR_BEEP].pause=0; };
  4046                           
  4047                           ; BSR set to: 1
  4048                           
  4049                           ; BSR set to: 1
  4050  000CD4  D8D9               	call	PL17	;call to abstracted procedure
  4051                           
  4052                           ;main.c: 833: }
  4053  000CD6  D008               	goto	l7411
  4054  000CD8                     l7391:
  4055                           
  4056                           ; BSR set to: 1
  4057                           ;main.c: 834: else if(state==E_MENU_FACTORY_CAL)
  4058  000CD8  503A               	movf	_state,w,c
  4059  000CDA  0A07               	xorlw	7
  4060  000CDC  E103               	bnz	l7409
  4061                           
  4062                           ; BSR set to: 1
  4063                           ;main.c: 835: {
  4064                           ;main.c: 836: state=E_MENU_BRILLO;
  4065  000CDE  0E02               	movlw	2
  4066  000CE0  6E3A               	movwf	_state,c
  4067  000CE2  D7F7               	goto	l7377
  4068  000CE4                     l7409:
  4069                           
  4070                           ; BSR set to: 1
  4071                           ;main.c: 841: else decVar();
  4072  000CE4  ECA3  F008         	call	_decVar	;wreg free
  4073  000CE8                     l7411:
  4074                           
  4075                           ;main.c: 842: }
  4076                           ;main.c: 843: }
  4077                           ;main.c: 846: if((pulsPinBuffer.flag && pulsPinBuffer.pulsId==UP_FN && pulsPinBuffer.fp=
      +                          =0?!(pulsPinBuffer.flag=0):0))
  4078  000CE8  0100               	movlb	0	; () banked
  4079  000CEA  ABBC               	btfss	_pulsPinBuffer& (0+255),5,b
  4080  000CEC  D005               	goto	l514
  4081                           
  4082                           ; BSR set to: 0
  4083  000CEE  51BC               	movf	_pulsPinBuffer& (0+255),w,b
  4084  000CF0  0B1F               	andlw	31
  4085  000CF2  E102               	bnz	l514
  4086                           
  4087                           ; BSR set to: 0
  4088  000CF4  ADBC               	btfss	_pulsPinBuffer& (0+255),6,b
  4089  000CF6  D003               	goto	l7417
  4090  000CF8                     l514:
  4091                           
  4092                           ; BSR set to: 0
  4093  000CF8  0101               	movlb	1	; () banked
  4094  000CFA  6B87               	clrf	_main$470& (0+255),b
  4095  000CFC  D002               	goto	L44
  4096  000CFE                     l7417:
  4097                           
  4098                           ; BSR set to: 0
  4099  000CFE  D8B8               	call	PL10	;call to abstracted procedure
  4100  000D00  6F87               	movwf	_main$470& (0+255),b
  4101  000D02                     L44:
  4102  000D02  6B88               	clrf	(_main$470+1)& (0+255),b
  4103                           
  4104                           ; BSR set to: 1
  4105  000D04  5188               	movf	(_main$470+1)& (0+255),w,b
  4106  000D06  1187               	iorwf	_main$470& (0+255),w,b
  4107  000D08  E032               	bz	l508
  4108                           
  4109                           ; BSR set to: 1
  4110                           ;main.c: 847: {
  4111                           ;main.c: 848: if(state==E_MENU_BRILLO || state==E_MENU_ADV_MODE || state==E_MENU_LIMITS
  4112                           ;main.c: 849: || state==E_MENU_ESCALA || state==E_SET_ESCALA_ENT || state==E_SET_ESCALA_
      +                          DEC
  4113                           ;main.c: 850: || state==E_MENU_USER_CAL || state==E_MENU_FACTORY_CAL
  4114                           ;main.c: 851: || state==E_SET_ADV_XLO || state==E_SET_ADV_XUP
  4115                           ;main.c: 852: || state==E_SET_ADV_ELO || state==E_SET_ADV_EUP
  4116                           ;main.c: 853: || state==E_SET_ADV_VLO || state==E_SET_ADV_VUP)
  4117  000D0A  503A               	movf	_state,w,c
  4118  000D0C  0A02               	xorlw	2
  4119  000D0E  E027               	bz	l517
  4120                           
  4121                           ; BSR set to: 1
  4122  000D10  503A               	movf	_state,w,c
  4123  000D12  0A03               	xorlw	3
  4124  000D14  E024               	bz	l517
  4125                           
  4126                           ; BSR set to: 1
  4127  000D16  503A               	movf	_state,w,c
  4128  000D18  0A04               	xorlw	4
  4129  000D1A  E021               	bz	l517
  4130                           
  4131                           ; BSR set to: 1
  4132  000D1C  503A               	movf	_state,w,c
  4133  000D1E  0A05               	xorlw	5
  4134  000D20  E01E               	bz	l517
  4135                           
  4136                           ; BSR set to: 1
  4137  000D22  503A               	movf	_state,w,c
  4138  000D24  0A0A               	xorlw	10
  4139  000D26  E01B               	bz	l517
  4140                           
  4141                           ; BSR set to: 1
  4142  000D28  503A               	movf	_state,w,c
  4143  000D2A  0A0C               	xorlw	12
  4144  000D2C  E018               	bz	l517
  4145                           
  4146                           ; BSR set to: 1
  4147  000D2E  503A               	movf	_state,w,c
  4148  000D30  0A06               	xorlw	6
  4149  000D32  E015               	bz	l517
  4150                           
  4151                           ; BSR set to: 1
  4152  000D34  503A               	movf	_state,w,c
  4153  000D36  0A07               	xorlw	7
  4154  000D38  E012               	bz	l517
  4155                           
  4156                           ; BSR set to: 1
  4157  000D3A  503A               	movf	_state,w,c
  4158  000D3C  0A0F               	xorlw	15
  4159  000D3E  E00F               	bz	l517
  4160                           
  4161                           ; BSR set to: 1
  4162  000D40  503A               	movf	_state,w,c
  4163  000D42  0A11               	xorlw	17
  4164  000D44  E00C               	bz	l517
  4165                           
  4166                           ; BSR set to: 1
  4167  000D46  503A               	movf	_state,w,c
  4168  000D48  0A13               	xorlw	19
  4169  000D4A  E009               	bz	l517
  4170                           
  4171                           ; BSR set to: 1
  4172  000D4C  503A               	movf	_state,w,c
  4173  000D4E  0A15               	xorlw	21
  4174  000D50  E006               	bz	l517
  4175                           
  4176                           ; BSR set to: 1
  4177  000D52  503A               	movf	_state,w,c
  4178  000D54  0A17               	xorlw	23
  4179  000D56  E003               	bz	l517
  4180                           
  4181                           ; BSR set to: 1
  4182  000D58  503A               	movf	_state,w,c
  4183  000D5A  0A19               	xorlw	25
  4184  000D5C  E108               	bnz	l508
  4185  000D5E                     l517:
  4186                           
  4187                           ; BSR set to: 1
  4188                           ;main.c: 854: { timerMem[TMR_LONG_PULS_UP].flag=0; timerMem[TMR_LONG_PULS_UP].prescaler=
      +                          timerDelayConstant[TMR_LONG_PULS_UP]; timerMem[TMR_LONG_PULS_UP].pause=0; };
  4189  000D5E  938E               	bcf	(_timerMem+3)& (0+255),1,b
  4190  000D60  C100  F18B         	movff	_timerDelayConstant,_timerMem
  4191  000D64  C101  F18C         	movff	_timerDelayConstant+1,_timerMem+1
  4192  000D68  C102  F18D         	movff	_timerDelayConstant+2,_timerMem+2
  4193  000D6C  958E               	bcf	(_timerMem+3)& (0+255),2,b
  4194  000D6E                     l508:
  4195                           
  4196                           ; BSR set to: 1
  4197                           ;main.c: 855: }
  4198                           ;main.c: 858: if((pulsPinBuffer.flag && pulsPinBuffer.pulsId==DWN_FN && pulsPinBuffer.fp
      +                          ==0?!(pulsPinBuffer.flag=0):0))
  4199  000D6E  0100               	movlb	0	; () banked
  4200  000D70  ABBC               	btfss	_pulsPinBuffer& (0+255),5,b
  4201  000D72  D007               	goto	l524
  4202                           
  4203                           ; BSR set to: 0
  4204  000D74  51BC               	movf	_pulsPinBuffer& (0+255),w,b
  4205  000D76  0B1F               	andlw	31
  4206  000D78  6FAB               	movwf	??_main& (0+255),b
  4207  000D7A  05AB               	decf	??_main& (0+255),w,b
  4208  000D7C  E102               	bnz	l524
  4209                           
  4210                           ; BSR set to: 0
  4211  000D7E  ADBC               	btfss	_pulsPinBuffer& (0+255),6,b
  4212  000D80  D003               	goto	l7451
  4213  000D82                     l524:
  4214                           
  4215                           ; BSR set to: 0
  4216  000D82  0101               	movlb	1	; () banked
  4217  000D84  6B89               	clrf	_main$471& (0+255),b
  4218  000D86  D002               	goto	L45
  4219  000D88                     l7451:
  4220                           
  4221                           ; BSR set to: 0
  4222  000D88  D873               	call	PL10	;call to abstracted procedure
  4223  000D8A  6F89               	movwf	_main$471& (0+255),b
  4224  000D8C                     L45:
  4225  000D8C  6B8A               	clrf	(_main$471+1)& (0+255),b
  4226                           
  4227                           ; BSR set to: 1
  4228  000D8E  518A               	movf	(_main$471+1)& (0+255),w,b
  4229  000D90  1189               	iorwf	_main$471& (0+255),w,b
  4230  000D92  E102 EF0F  F001    	bz	l6709
  4231                           
  4232                           ; BSR set to: 1
  4233                           ;main.c: 859: {
  4234                           ;main.c: 860: if(state==E_MENU_BRILLO || state==E_MENU_ADV_MODE || state==E_MENU_LIMITS
  4235                           ;main.c: 861: || state==E_MENU_ESCALA || state==E_SET_ESCALA_ENT || state==E_SET_ESCALA_
      +                          DEC
  4236                           ;main.c: 862: || state==E_MENU_USER_CAL || state==E_MENU_FACTORY_CAL
  4237                           ;main.c: 863: || state==E_SET_ADV_XLO || state==E_SET_ADV_XUP
  4238                           ;main.c: 864: || state==E_SET_ADV_ELO || state==E_SET_ADV_EUP
  4239                           ;main.c: 865: || state==E_SET_ADV_VLO || state==E_SET_ADV_VUP)
  4240  000D98  503A               	movf	_state,w,c
  4241  000D9A  0A02               	xorlw	2
  4242  000D9C  E029               	bz	l527
  4243                           
  4244                           ; BSR set to: 1
  4245  000D9E  503A               	movf	_state,w,c
  4246  000DA0  0A03               	xorlw	3
  4247  000DA2  E026               	bz	l527
  4248                           
  4249                           ; BSR set to: 1
  4250  000DA4  503A               	movf	_state,w,c
  4251  000DA6  0A04               	xorlw	4
  4252  000DA8  E023               	bz	l527
  4253                           
  4254                           ; BSR set to: 1
  4255  000DAA  503A               	movf	_state,w,c
  4256  000DAC  0A05               	xorlw	5
  4257  000DAE  E020               	bz	l527
  4258                           
  4259                           ; BSR set to: 1
  4260  000DB0  503A               	movf	_state,w,c
  4261  000DB2  0A0A               	xorlw	10
  4262  000DB4  E01D               	bz	l527
  4263                           
  4264                           ; BSR set to: 1
  4265  000DB6  503A               	movf	_state,w,c
  4266  000DB8  0A0C               	xorlw	12
  4267  000DBA  E01A               	bz	l527
  4268                           
  4269                           ; BSR set to: 1
  4270  000DBC  503A               	movf	_state,w,c
  4271  000DBE  0A06               	xorlw	6
  4272  000DC0  E017               	bz	l527
  4273                           
  4274                           ; BSR set to: 1
  4275  000DC2  503A               	movf	_state,w,c
  4276  000DC4  0A07               	xorlw	7
  4277  000DC6  E014               	bz	l527
  4278                           
  4279                           ; BSR set to: 1
  4280  000DC8  503A               	movf	_state,w,c
  4281  000DCA  0A0F               	xorlw	15
  4282  000DCC  E011               	bz	l527
  4283                           
  4284                           ; BSR set to: 1
  4285  000DCE  503A               	movf	_state,w,c
  4286  000DD0  0A11               	xorlw	17
  4287  000DD2  E00E               	bz	l527
  4288                           
  4289                           ; BSR set to: 1
  4290  000DD4  503A               	movf	_state,w,c
  4291  000DD6  0A13               	xorlw	19
  4292  000DD8  E00B               	bz	l527
  4293                           
  4294                           ; BSR set to: 1
  4295  000DDA  503A               	movf	_state,w,c
  4296  000DDC  0A15               	xorlw	21
  4297  000DDE  E008               	bz	l527
  4298                           
  4299                           ; BSR set to: 1
  4300  000DE0  503A               	movf	_state,w,c
  4301  000DE2  0A17               	xorlw	23
  4302  000DE4  E005               	bz	l527
  4303                           
  4304                           ; BSR set to: 1
  4305  000DE6  503A               	movf	_state,w,c
  4306  000DE8  0A19               	xorlw	25
  4307  000DEA  E002 EF0F  F001    	bnz	l6709
  4308  000DF0                     l527:
  4309                           
  4310                           ; BSR set to: 1
  4311                           ;main.c: 866: { timerMem[TMR_LONG_PULS_DWN].flag=0; timerMem[TMR_LONG_PULS_DWN].prescale
      +                          r=timerDelayConstant[TMR_LONG_PULS_DWN]; timerMem[TMR_LONG_PULS_DWN].pause=0; };
  4312  000DF0  9392               	bcf	(_timerMem+7)& (0+255),1,b
  4313  000DF2  C103  F18F         	movff	_timerDelayConstant+3,_timerMem+4
  4314  000DF6  C104  F190         	movff	_timerDelayConstant+4,_timerMem+5
  4315  000DFA  C105  F191         	movff	_timerDelayConstant+5,_timerMem+6
  4316  000DFE  9592               	bcf	(_timerMem+7)& (0+255),2,b
  4317  000E00  EF0F  F001         	goto	l6709
  4318  000E04                     PL2:
  4319  000E04  93A6               	bcf	(_timerMem+27)& (0+255),1,b
  4320  000E06  C112  F1A3         	movff	_timerDelayConstant+18,_timerMem+24
  4321  000E0A  C113  F1A4         	movff	_timerDelayConstant+19,_timerMem+25
  4322  000E0E  C114  F1A5         	movff	_timerDelayConstant+20,_timerMem+26
  4323  000E12  95A6               	bcf	(_timerMem+27)& (0+255),2,b
  4324  000E14  0012               	return	
  4325  000E16                     PL4:
  4326  000E16  93AA               	bcf	(_timerMem+31)& (0+255),1,b
  4327  000E18  C115  F1A7         	movff	_timerDelayConstant+21,_timerMem+28
  4328  000E1C  C116  F1A8         	movff	_timerDelayConstant+22,_timerMem+29
  4329  000E20  C117  F1A9         	movff	_timerDelayConstant+23,_timerMem+30
  4330  000E24  95AA               	bcf	(_timerMem+31)& (0+255),2,b
  4331  000E26  0012               	return	
  4332  000E28                     PL5:
  4333  000E28  51AA               	movf	(_timerMem+31)& (0+255),w,b
  4334  000E2A  0BFD               	andlw	-3
  4335  000E2C  6FAA               	movwf	(_timerMem+31)& (0+255),b
  4336  000E2E  0101               	movlb	1	; () banked
  4337  000E30  31AA               	rrcf	(_timerMem+31)& (0+255),w,b
  4338  000E32  0B01               	andlw	1
  4339  000E34  0C00               	retlw	0
  4340  000E36                     PL6:
  4341  000E36  51A6               	movf	(_timerMem+27)& (0+255),w,b
  4342  000E38  0BFD               	andlw	-3
  4343  000E3A  6FA6               	movwf	(_timerMem+27)& (0+255),b
  4344  000E3C  0101               	movlb	1	; () banked
  4345  000E3E  31A6               	rrcf	(_timerMem+27)& (0+255),w,b
  4346  000E40  0B01               	andlw	1
  4347  000E42  0C00               	retlw	0
  4348  000E44                     PL9:
  4349  000E44  6B97               	clrf	(_timerMem+12)& (0+255),b
  4350  000E46  6B98               	clrf	(_timerMem+13)& (0+255),b
  4351  000E48  6B99               	clrf	(_timerMem+14)& (0+255),b
  4352  000E4A  859A               	bsf	(_timerMem+15)& (0+255),2,b
  4353  000E4C  8C82               	bsf	3970,6,c	;volatile
  4354  000E4E  9396               	bcf	(_timerMem+11)& (0+255),1,b
  4355  000E50  C106  F193         	movff	_timerDelayConstant+6,_timerMem+8
  4356  000E54  C107  F194         	movff	_timerDelayConstant+7,_timerMem+9
  4357  000E58  C108  F195         	movff	_timerDelayConstant+8,_timerMem+10
  4358  000E5C  9596               	bcf	(_timerMem+11)& (0+255),2,b
  4359  000E5E  93A2               	bcf	(_timerMem+23)& (0+255),1,b
  4360  000E60  C10F  F19F         	movff	_timerDelayConstant+15,_timerMem+20
  4361  000E64  C110  F1A0         	movff	_timerDelayConstant+16,_timerMem+21
  4362  000E68  C111  F1A1         	movff	_timerDelayConstant+17,_timerMem+22
  4363  000E6C  95A2               	bcf	(_timerMem+23)& (0+255),2,b
  4364  000E6E  0012               	return	
  4365  000E70                     PL10:
  4366  000E70  51BC               	movf	_pulsPinBuffer& (0+255),w,b
  4367  000E72  0BDF               	andlw	-33
  4368  000E74  6FBC               	movwf	_pulsPinBuffer& (0+255),b
  4369  000E76  0100               	movlb	0	; () banked
  4370  000E78  39BC               	swapf	_pulsPinBuffer& (0+255),w,b
  4371  000E7A  32E8               	rrcf	wreg,f,c
  4372  000E7C  0B01               	andlw	1
  4373  000E7E  0E00               	movlw	0
  4374  000E80  B4D8               	btfsc	status,2,c
  4375  000E82  0E01               	movlw	1
  4376  000E84  0101               	movlb	1	; () banked
  4377  000E86  0012               	return	
  4378  000E88                     PL17:
  4379  000E88  9396               	bcf	(_timerMem+11)& (0+255),1,b
  4380  000E8A  C106  F193         	movff	_timerDelayConstant+6,_timerMem+8
  4381  000E8E  C107  F194         	movff	_timerDelayConstant+7,_timerMem+9
  4382  000E92  C108  F195         	movff	_timerDelayConstant+8,_timerMem+10
  4383  000E96  9596               	bcf	(_timerMem+11)& (0+255),2,b
  4384  000E98  0012               	return	
  4385  000E9A                     PL18:
  4386  000E9A  8C82               	bsf	3970,6,c	;volatile
  4387  000E9C  939A               	bcf	(_timerMem+15)& (0+255),1,b
  4388  000E9E  C109  F197         	movff	_timerDelayConstant+9,_timerMem+12
  4389  000EA2  C10A  F198         	movff	_timerDelayConstant+10,_timerMem+13
  4390  000EA6  C10B  F199         	movff	_timerDelayConstant+11,_timerMem+14
  4391  000EAA  959A               	bcf	(_timerMem+15)& (0+255),2,b
  4392  000EAC  0012               	return	
  4393  000EAE                     PL27:
  4394  000EAE  0E20               	movlw	32
  4395  000EB0  0100               	movlb	0	; () banked
  4396  000EB2  6FC9               	movwf	_muxBuffer& (0+255),b
  4397  000EB4  0E4C               	movlw	76
  4398  000EB6  6FCA               	movwf	(_muxBuffer+1)& (0+255),b
  4399  000EB8  0C6F               	retlw	111
  4400  000EBA                     PL28:
  4401  000EBA  0E20               	movlw	32
  4402  000EBC  0100               	movlb	0	; () banked
  4403  000EBE  6FC9               	movwf	_muxBuffer& (0+255),b
  4404  000EC0  0E48               	movlw	72
  4405  000EC2  6FCA               	movwf	(_muxBuffer+1)& (0+255),b
  4406  000EC4  0C69               	retlw	105
  4407                           tblptru	equ	0xFF8
  4408                           tblptrh	equ	0xFF7
  4409                           tblptrl	equ	0xFF6
  4410                           tablat	equ	0xFF5
  4411                           prodl	equ	0xFF3
  4412                           intcon	equ	0xFF2
  4413                           intcon2	equ	0xFF1
  4414                           postinc0	equ	0xFEE
  4415                           wreg	equ	0xFE8
  4416                           indf1	equ	0xFE7
  4417                           postinc1	equ	0xFE6
  4418                           postdec1	equ	0xFE5
  4419                           fsr1h	equ	0xFE2
  4420                           fsr1l	equ	0xFE1
  4421                           indf2	equ	0xFDF
  4422                           postinc2	equ	0xFDE
  4423                           postdec2	equ	0xFDD
  4424                           plusw2	equ	0xFDB
  4425                           fsr2h	equ	0xFDA
  4426                           fsr2l	equ	0xFD9
  4427                           status	equ	0xFD8
  4428                           
  4429 ;; *************** function _incVar *****************
  4430 ;; Defined at:
  4431 ;;		line 105 in file "C:\fgr\16gb\0000 interior\deVolt\sw\v3dig\main.c"
  4432 ;; Parameters:    Size  Location     Type
  4433 ;;		None
  4434 ;; Auto vars:     Size  Location     Type
  4435 ;;		None
  4436 ;; Return value:  Size  Location     Type
  4437 ;;		None               void
  4438 ;; Registers used:
  4439 ;;		wreg, status,2, status,0, cstack
  4440 ;; Tracked objects:
  4441 ;;		On entry : F/1
  4442 ;;		On exit  : F/1
  4443 ;;		Unchanged: 0/0
  4444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4445 ;;      Params:         0       0       0       0       0       0       0       0       0
  4446 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4447 ;;      Temps:          0       2       0       0       0       0       0       0       0
  4448 ;;      Totals:         0       2       0       0       0       0       0       0       0
  4449 ;;Total ram usage:        2 bytes
  4450 ;; Hardware stack levels used:    1
  4451 ;; Hardware stack levels required when called:    8
  4452 ;; This function calls:
  4453 ;;		_ee_write_byte
  4454 ;;		___awtoft
  4455 ;;		___ftdiv
  4456 ;;		___ftadd
  4457 ;; This function is called by:
  4458 ;;		_main
  4459 ;; This function uses a non-reentrant model
  4460 ;;
  4461                           
  4462                           	psect	text1
  4463  000EC6                     __ptext1:
  4464                           	opt stack 0
  4465  000EC6                     __end_of_main:
  4466                           	opt stack 0
  4467  000EC6                     _incVar:
  4468                           	opt stack 22
  4469                           
  4470                           ; BSR set to: 1
  4471                           ;main.c: 109: if(state==E_SET_BRILLO)
  4472                           
  4473                           ; BSR set to: 1
  4474  000EC6  503A               	movf	_state,w,c
  4475  000EC8  0A08               	xorlw	8
  4476  000ECA  E109               	bnz	l6273
  4477                           
  4478                           ; BSR set to: 1
  4479                           ;main.c: 110: {
  4480                           ;main.c: 111: if(brilloMem<4)
  4481  000ECC  0E04               	movlw	4
  4482  000ECE  6039               	cpfslt	_brilloMem,c
  4483  000ED0  D006               	goto	l6273
  4484                           
  4485                           ; BSR set to: 1
  4486                           ;main.c: 112: {
  4487                           ;main.c: 113: brilloMem++;
  4488  000ED2  2A39               	incf	_brilloMem,f,c
  4489                           
  4490                           ; BSR set to: 1
  4491                           ;main.c: 114: { ee_write_byte(0,brilloMem); };
  4492  000ED4  C039  F060         	movff	_brilloMem,?_ee_write_byte
  4493  000ED8  0E00               	movlw	0
  4494  000EDA  EC84  F013         	call	_ee_write_byte
  4495  000EDE                     l6273:
  4496                           
  4497                           ;main.c: 115: }
  4498                           ;main.c: 116: }
  4499                           ;main.c: 117: if(state==E_SET_ESCALA_ENT)
  4500  000EDE  503A               	movf	_state,w,c
  4501  000EE0  0A0A               	xorlw	10
  4502  000EE2  E138               	bnz	l6285
  4503                           
  4504                           ;main.c: 118: {
  4505                           ;main.c: 119: if((escEntMem+setInc)<=999)
  4506  000EE4  503C               	movf	_setInc,w,c
  4507  000EE6  242E               	addwf	_escEntMem,w,c
  4508  000EE8  0100               	movlb	0	; () banked
  4509  000EEA  6F8B               	movwf	??_incVar& (0+255),b
  4510  000EEC  0E00               	movlw	0
  4511  000EEE  202F               	addwfc	_escEntMem+1,w,c
  4512  000EF0  D925               	call	PL14	;call to abstracted procedure
  4513  000EF2  B4D8               	btfsc	status,2,c
  4514  000EF4  5D8B               	subwf	??_incVar& (0+255),w,b
  4515  000EF6  E22E               	bc	l6285
  4516                           
  4517                           ; BSR set to: 0
  4518                           ;main.c: 120: {
  4519                           ;main.c: 121: escEntMem=escEntMem+setInc;
  4520  000EF8  503C               	movf	_setInc,w,c
  4521  000EFA  262E               	addwf	_escEntMem,f,c
  4522  000EFC  0E00               	movlw	0
  4523  000EFE  222F               	addwfc	_escEntMem+1,f,c
  4524                           
  4525                           ; BSR set to: 0
  4526                           ;main.c: 122: { ee_write_byte(14,((unsigned char)(((escEntMem)>>8)&0xFF))); ee_write_byt
      +                          e(14+1,((unsigned char)((escEntMem)&0xFF))); };
  4527  000F00  502F               	movf	_escEntMem+1,w,c
  4528  000F02  6F60               	movwf	?_ee_write_byte& (0+255),b
  4529  000F04  0E0E               	movlw	14
  4530  000F06  EC84  F013         	call	_ee_write_byte
  4531  000F0A  C02E  F060         	movff	_escEntMem,?_ee_write_byte
  4532  000F0E  0E0F               	movlw	15
  4533  000F10  EC84  F013         	call	_ee_write_byte
  4534                           
  4535                           ;main.c: 123: escala=(float)escEntMem+(float)escDecMem/1000.0;
  4536  000F14  C02E  F068         	movff	_escEntMem,?___awtoft
  4537  000F18  C02F  F069         	movff	_escEntMem+1,?___awtoft+1
  4538  000F1C  EC51  F013         	call	___awtoft	;wreg free
  4539  000F20  ECD2  F009         	call	PL3	;call to abstracted procedure
  4540  000F24  EC51  F013         	call	___awtoft	;wreg free
  4541  000F28  C068  F06C         	movff	?___awtoft,?___ftdiv
  4542  000F2C  C069  F06D         	movff	?___awtoft+1,?___ftdiv+1
  4543  000F30  C06A  F06E         	movff	?___awtoft+2,?___ftdiv+2
  4544  000F34  EC35  F00E         	call	___ftdiv	;wreg free
  4545  000F38  C06C  F080         	movff	?___ftdiv,?___ftadd+3
  4546  000F3C  C06D  F081         	movff	?___ftdiv+1,?___ftadd+4
  4547  000F40  C06E  F082         	movff	?___ftdiv+2,?___ftadd+5
  4548  000F44  ECB3  F00B         	call	___ftadd	;wreg free
  4549  000F48  C07D  F0B2         	movff	?___ftadd,_escala
  4550  000F4C  C07E  F0B3         	movff	?___ftadd+1,_escala+1
  4551  000F50  C07F  F0B4         	movff	?___ftadd+2,_escala+2
  4552  000F54                     l6285:
  4553                           
  4554                           ;main.c: 124: }
  4555                           ;main.c: 125: }
  4556                           ;main.c: 126: if(state==E_SET_ESCALA_DEC)
  4557  000F54  503A               	movf	_state,w,c
  4558  000F56  0A0C               	xorlw	12
  4559  000F58  E138               	bnz	l6297
  4560                           
  4561                           ;main.c: 127: {
  4562                           ;main.c: 128: if((escDecMem+setInc)<=999)
  4563  000F5A  503C               	movf	_setInc,w,c
  4564  000F5C  242C               	addwf	_escDecMem,w,c
  4565  000F5E  0100               	movlb	0	; () banked
  4566  000F60  6F8B               	movwf	??_incVar& (0+255),b
  4567  000F62  0E00               	movlw	0
  4568  000F64  202D               	addwfc	_escDecMem+1,w,c
  4569  000F66  D8EA               	call	PL14	;call to abstracted procedure
  4570  000F68  B4D8               	btfsc	status,2,c
  4571  000F6A  5D8B               	subwf	??_incVar& (0+255),w,b
  4572  000F6C  E22E               	bc	l6297
  4573                           
  4574                           ; BSR set to: 0
  4575                           ;main.c: 129: {
  4576                           ;main.c: 130: escDecMem=escDecMem+setInc;
  4577  000F6E  503C               	movf	_setInc,w,c
  4578  000F70  262C               	addwf	_escDecMem,f,c
  4579  000F72  0E00               	movlw	0
  4580  000F74  222D               	addwfc	_escDecMem+1,f,c
  4581                           
  4582                           ; BSR set to: 0
  4583                           ;main.c: 131: { ee_write_byte(16,((unsigned char)(((escDecMem)>>8)&0xFF))); ee_write_byt
      +                          e(16+1,((unsigned char)((escDecMem)&0xFF))); };
  4584  000F76  502D               	movf	_escDecMem+1,w,c
  4585  000F78  6F60               	movwf	?_ee_write_byte& (0+255),b
  4586  000F7A  0E10               	movlw	16
  4587  000F7C  EC84  F013         	call	_ee_write_byte
  4588  000F80  C02C  F060         	movff	_escDecMem,?_ee_write_byte
  4589  000F84  0E11               	movlw	17
  4590  000F86  EC84  F013         	call	_ee_write_byte
  4591                           
  4592                           ;main.c: 132: escala=(float)escEntMem+(float)escDecMem/1000.0;
  4593  000F8A  C02E  F068         	movff	_escEntMem,?___awtoft
  4594  000F8E  C02F  F069         	movff	_escEntMem+1,?___awtoft+1
  4595  000F92  EC51  F013         	call	___awtoft	;wreg free
  4596  000F96  ECD2  F009         	call	PL3	;call to abstracted procedure
  4597  000F9A  EC51  F013         	call	___awtoft	;wreg free
  4598  000F9E  C068  F06C         	movff	?___awtoft,?___ftdiv
  4599  000FA2  C069  F06D         	movff	?___awtoft+1,?___ftdiv+1
  4600  000FA6  C06A  F06E         	movff	?___awtoft+2,?___ftdiv+2
  4601  000FAA  EC35  F00E         	call	___ftdiv	;wreg free
  4602  000FAE  C06C  F080         	movff	?___ftdiv,?___ftadd+3
  4603  000FB2  C06D  F081         	movff	?___ftdiv+1,?___ftadd+4
  4604  000FB6  C06E  F082         	movff	?___ftdiv+2,?___ftadd+5
  4605  000FBA  ECB3  F00B         	call	___ftadd	;wreg free
  4606  000FBE  C07D  F0B2         	movff	?___ftadd,_escala
  4607  000FC2  C07E  F0B3         	movff	?___ftadd+1,_escala+1
  4608  000FC6  C07F  F0B4         	movff	?___ftadd+2,_escala+2
  4609  000FCA                     l6297:
  4610                           
  4611                           ;main.c: 133: }
  4612                           ;main.c: 134: }
  4613                           ;main.c: 135: if(state==E_SET_ADV_MODE)
  4614  000FCA  503A               	movf	_state,w,c
  4615  000FCC  0A0D               	xorlw	13
  4616  000FCE  E109               	bnz	l6305
  4617                           
  4618                           ;main.c: 136: {
  4619                           ;main.c: 137: if(advModeMem<CANT_ADV_MODES-1)
  4620  000FD0  0E07               	movlw	7
  4621  000FD2  6038               	cpfslt	_advModeMem,c
  4622  000FD4  D006               	goto	l6305
  4623                           
  4624                           ;main.c: 138: {
  4625                           ;main.c: 139: advModeMem++;
  4626  000FD6  2A38               	incf	_advModeMem,f,c
  4627                           
  4628                           ;main.c: 140: { ee_write_byte(1,advModeMem); };
  4629  000FD8  C038  F060         	movff	_advModeMem,?_ee_write_byte
  4630  000FDC  0E01               	movlw	1
  4631  000FDE  EC84  F013         	call	_ee_write_byte
  4632  000FE2                     l6305:
  4633                           
  4634                           ;main.c: 141: }
  4635                           ;main.c: 142: }
  4636                           ;main.c: 143: if(state==E_SET_ADV_XLO)
  4637  000FE2  503A               	movf	_state,w,c
  4638  000FE4  0A0F               	xorlw	15
  4639  000FE6  E118               	bnz	l106
  4640                           
  4641                           ;main.c: 144: {
  4642                           ;main.c: 145: if((xLoMem+setInc)<=999)
  4643  000FE8  503C               	movf	_setInc,w,c
  4644  000FEA  2434               	addwf	_xLoMem,w,c
  4645  000FEC  0100               	movlb	0	; () banked
  4646  000FEE  6F8B               	movwf	??_incVar& (0+255),b
  4647  000FF0  0E00               	movlw	0
  4648  000FF2  2035               	addwfc	_xLoMem+1,w,c
  4649  000FF4  D8A3               	call	PL14	;call to abstracted procedure
  4650  000FF6  B4D8               	btfsc	status,2,c
  4651  000FF8  5D8B               	subwf	??_incVar& (0+255),w,b
  4652  000FFA  E20E               	bc	l106
  4653                           
  4654                           ; BSR set to: 0
  4655                           ;main.c: 146: {
  4656                           ;main.c: 147: xLoMem=xLoMem+setInc;
  4657  000FFC  503C               	movf	_setInc,w,c
  4658  000FFE  2634               	addwf	_xLoMem,f,c
  4659  001000  0E00               	movlw	0
  4660  001002  2235               	addwfc	_xLoMem+1,f,c
  4661                           
  4662                           ; BSR set to: 0
  4663                           ;main.c: 148: { ee_write_byte(2,((unsigned char)(((xLoMem)>>8)&0xFF))); ee_write_byte(2+
      +                          1,((unsigned char)((xLoMem)&0xFF))); };
  4664  001004  5035               	movf	_xLoMem+1,w,c
  4665  001006  6F60               	movwf	?_ee_write_byte& (0+255),b
  4666  001008  0E02               	movlw	2
  4667  00100A  EC84  F013         	call	_ee_write_byte
  4668  00100E  C034  F060         	movff	_xLoMem,?_ee_write_byte
  4669  001012  0E03               	movlw	3
  4670  001014  EC84  F013         	call	_ee_write_byte
  4671  001018                     l106:
  4672                           
  4673                           ;main.c: 149: }
  4674                           ;main.c: 150: }
  4675                           ;main.c: 151: if(state==E_SET_ADV_XUP)
  4676  001018  503A               	movf	_state,w,c
  4677  00101A  0A11               	xorlw	17
  4678  00101C  E118               	bnz	l108
  4679                           
  4680                           ;main.c: 152: {
  4681                           ;main.c: 153: if((xUpMem+setInc)<=999)
  4682  00101E  503C               	movf	_setInc,w,c
  4683  001020  2436               	addwf	_xUpMem,w,c
  4684  001022  0100               	movlb	0	; () banked
  4685  001024  6F8B               	movwf	??_incVar& (0+255),b
  4686  001026  0E00               	movlw	0
  4687  001028  2037               	addwfc	_xUpMem+1,w,c
  4688  00102A  D888               	call	PL14	;call to abstracted procedure
  4689  00102C  B4D8               	btfsc	status,2,c
  4690  00102E  5D8B               	subwf	??_incVar& (0+255),w,b
  4691  001030  E20E               	bc	l108
  4692                           
  4693                           ; BSR set to: 0
  4694                           ;main.c: 154: {
  4695                           ;main.c: 155: xUpMem=xUpMem+setInc;
  4696  001032  503C               	movf	_setInc,w,c
  4697  001034  2636               	addwf	_xUpMem,f,c
  4698  001036  0E00               	movlw	0
  4699  001038  2237               	addwfc	_xUpMem+1,f,c
  4700                           
  4701                           ; BSR set to: 0
  4702                           ;main.c: 156: { ee_write_byte(4,((unsigned char)(((xUpMem)>>8)&0xFF))); ee_write_byte(4+
      +                          1,((unsigned char)((xUpMem)&0xFF))); };
  4703  00103A  5037               	movf	_xUpMem+1,w,c
  4704  00103C  6F60               	movwf	?_ee_write_byte& (0+255),b
  4705  00103E  0E04               	movlw	4
  4706  001040  EC84  F013         	call	_ee_write_byte
  4707  001044  C036  F060         	movff	_xUpMem,?_ee_write_byte
  4708  001048  0E05               	movlw	5
  4709  00104A  EC84  F013         	call	_ee_write_byte
  4710  00104E                     l108:
  4711                           
  4712                           ;main.c: 157: }
  4713                           ;main.c: 158: }
  4714                           ;main.c: 159: if(state==E_SET_ADV_ELO)
  4715  00104E  503A               	movf	_state,w,c
  4716  001050  0A13               	xorlw	19
  4717  001052  E118               	bnz	l110
  4718                           
  4719                           ;main.c: 160: {
  4720                           ;main.c: 161: if((eLoMem+setInc)<=999)
  4721  001054  503C               	movf	_setInc,w,c
  4722  001056  2428               	addwf	_eLoMem,w,c
  4723  001058  0100               	movlb	0	; () banked
  4724  00105A  6F8B               	movwf	??_incVar& (0+255),b
  4725  00105C  0E00               	movlw	0
  4726  00105E  2029               	addwfc	_eLoMem+1,w,c
  4727  001060  D86D               	call	PL14	;call to abstracted procedure
  4728  001062  B4D8               	btfsc	status,2,c
  4729  001064  5D8B               	subwf	??_incVar& (0+255),w,b
  4730  001066  E20E               	bc	l110
  4731                           
  4732                           ; BSR set to: 0
  4733                           ;main.c: 162: {
  4734                           ;main.c: 163: eLoMem=eLoMem+setInc;
  4735  001068  503C               	movf	_setInc,w,c
  4736  00106A  2628               	addwf	_eLoMem,f,c
  4737  00106C  0E00               	movlw	0
  4738  00106E  2229               	addwfc	_eLoMem+1,f,c
  4739                           
  4740                           ; BSR set to: 0
  4741                           ;main.c: 164: { ee_write_byte(6,((unsigned char)(((eLoMem)>>8)&0xFF))); ee_write_byte(6+
      +                          1,((unsigned char)((eLoMem)&0xFF))); };
  4742  001070  5029               	movf	_eLoMem+1,w,c
  4743  001072  6F60               	movwf	?_ee_write_byte& (0+255),b
  4744  001074  0E06               	movlw	6
  4745  001076  EC84  F013         	call	_ee_write_byte
  4746  00107A  C028  F060         	movff	_eLoMem,?_ee_write_byte
  4747  00107E  0E07               	movlw	7
  4748  001080  EC84  F013         	call	_ee_write_byte
  4749  001084                     l110:
  4750                           
  4751                           ;main.c: 165: }
  4752                           ;main.c: 166: }
  4753                           ;main.c: 167: if(state==E_SET_ADV_EUP)
  4754  001084  503A               	movf	_state,w,c
  4755  001086  0A15               	xorlw	21
  4756  001088  E118               	bnz	l112
  4757                           
  4758                           ;main.c: 168: {
  4759                           ;main.c: 169: if((eUpMem+setInc)<=999)
  4760  00108A  503C               	movf	_setInc,w,c
  4761  00108C  242A               	addwf	_eUpMem,w,c
  4762  00108E  0100               	movlb	0	; () banked
  4763  001090  6F8B               	movwf	??_incVar& (0+255),b
  4764  001092  0E00               	movlw	0
  4765  001094  202B               	addwfc	_eUpMem+1,w,c
  4766  001096  D852               	call	PL14	;call to abstracted procedure
  4767  001098  B4D8               	btfsc	status,2,c
  4768  00109A  5D8B               	subwf	??_incVar& (0+255),w,b
  4769  00109C  E20E               	bc	l112
  4770                           
  4771                           ; BSR set to: 0
  4772                           ;main.c: 170: {
  4773                           ;main.c: 171: eUpMem=eUpMem+setInc;
  4774  00109E  503C               	movf	_setInc,w,c
  4775  0010A0  262A               	addwf	_eUpMem,f,c
  4776  0010A2  0E00               	movlw	0
  4777  0010A4  222B               	addwfc	_eUpMem+1,f,c
  4778                           
  4779                           ; BSR set to: 0
  4780                           ;main.c: 172: { ee_write_byte(8,((unsigned char)(((eUpMem)>>8)&0xFF))); ee_write_byte(8+
      +                          1,((unsigned char)((eUpMem)&0xFF))); };
  4781  0010A6  502B               	movf	_eUpMem+1,w,c
  4782  0010A8  6F60               	movwf	?_ee_write_byte& (0+255),b
  4783  0010AA  0E08               	movlw	8
  4784  0010AC  EC84  F013         	call	_ee_write_byte
  4785  0010B0  C02A  F060         	movff	_eUpMem,?_ee_write_byte
  4786  0010B4  0E09               	movlw	9
  4787  0010B6  EC84  F013         	call	_ee_write_byte
  4788  0010BA                     l112:
  4789                           
  4790                           ;main.c: 173: }
  4791                           ;main.c: 174: }
  4792                           ;main.c: 175: if(state==E_SET_ADV_VLO)
  4793  0010BA  503A               	movf	_state,w,c
  4794  0010BC  0A17               	xorlw	23
  4795  0010BE  E118               	bnz	l114
  4796                           
  4797                           ;main.c: 176: {
  4798                           ;main.c: 177: if((vLoMem+setInc)<=999)
  4799  0010C0  503C               	movf	_setInc,w,c
  4800  0010C2  2430               	addwf	_vLoMem,w,c
  4801  0010C4  0100               	movlb	0	; () banked
  4802  0010C6  6F8B               	movwf	??_incVar& (0+255),b
  4803  0010C8  0E00               	movlw	0
  4804  0010CA  2031               	addwfc	_vLoMem+1,w,c
  4805  0010CC  D837               	call	PL14	;call to abstracted procedure
  4806  0010CE  B4D8               	btfsc	status,2,c
  4807  0010D0  5D8B               	subwf	??_incVar& (0+255),w,b
  4808  0010D2  E20E               	bc	l114
  4809                           
  4810                           ; BSR set to: 0
  4811                           ;main.c: 178: {
  4812                           ;main.c: 179: vLoMem=vLoMem+setInc;
  4813  0010D4  503C               	movf	_setInc,w,c
  4814  0010D6  2630               	addwf	_vLoMem,f,c
  4815  0010D8  0E00               	movlw	0
  4816  0010DA  2231               	addwfc	_vLoMem+1,f,c
  4817                           
  4818                           ; BSR set to: 0
  4819                           ;main.c: 180: { ee_write_byte(10,((unsigned char)(((vLoMem)>>8)&0xFF))); ee_write_byte(1
      +                          0+1,((unsigned char)((vLoMem)&0xFF))); };
  4820  0010DC  5031               	movf	_vLoMem+1,w,c
  4821  0010DE  6F60               	movwf	?_ee_write_byte& (0+255),b
  4822  0010E0  0E0A               	movlw	10
  4823  0010E2  EC84  F013         	call	_ee_write_byte
  4824  0010E6  C030  F060         	movff	_vLoMem,?_ee_write_byte
  4825  0010EA  0E0B               	movlw	11
  4826  0010EC  EC84  F013         	call	_ee_write_byte
  4827  0010F0                     l114:
  4828                           
  4829                           ;main.c: 181: }
  4830                           ;main.c: 182: }
  4831                           ;main.c: 183: if(state==E_SET_ADV_VUP)
  4832  0010F0  503A               	movf	_state,w,c
  4833  0010F2  0A19               	xorlw	25
  4834  0010F4  E118               	bnz	l6355
  4835                           
  4836                           ;main.c: 184: {
  4837                           ;main.c: 185: if((vUpMem+setInc)<=999)
  4838  0010F6  503C               	movf	_setInc,w,c
  4839  0010F8  2432               	addwf	_vUpMem,w,c
  4840  0010FA  0100               	movlb	0	; () banked
  4841  0010FC  6F8B               	movwf	??_incVar& (0+255),b
  4842  0010FE  0E00               	movlw	0
  4843  001100  2033               	addwfc	_vUpMem+1,w,c
  4844  001102  D81C               	call	PL14	;call to abstracted procedure
  4845  001104  B4D8               	btfsc	status,2,c
  4846  001106  5D8B               	subwf	??_incVar& (0+255),w,b
  4847  001108  E20E               	bc	l6355
  4848                           
  4849                           ; BSR set to: 0
  4850                           ;main.c: 186: {
  4851                           ;main.c: 187: vUpMem=vUpMem+setInc;
  4852  00110A  503C               	movf	_setInc,w,c
  4853  00110C  2632               	addwf	_vUpMem,f,c
  4854  00110E  0E00               	movlw	0
  4855  001110  2233               	addwfc	_vUpMem+1,f,c
  4856                           
  4857                           ; BSR set to: 0
  4858                           ;main.c: 188: { ee_write_byte(12,((unsigned char)(((vUpMem)>>8)&0xFF))); ee_write_byte(1
      +                          2+1,((unsigned char)((vUpMem)&0xFF))); };
  4859  001112  5033               	movf	_vUpMem+1,w,c
  4860  001114  6F60               	movwf	?_ee_write_byte& (0+255),b
  4861  001116  0E0C               	movlw	12
  4862  001118  EC84  F013         	call	_ee_write_byte
  4863  00111C  C032  F060         	movff	_vUpMem,?_ee_write_byte
  4864  001120  0E0D               	movlw	13
  4865  001122  EC84  F013         	call	_ee_write_byte
  4866  001126                     l6355:
  4867                           
  4868                           ;main.c: 189: }
  4869                           ;main.c: 190: }
  4870                           ;main.c: 192: { timerMem[TMR_SHOW_SETTING].flag=0; timerMem[TMR_SHOW_SETTING].prescaler=
      +                          timerDelayConstant[TMR_SHOW_SETTING]; timerMem[TMR_SHOW_SETTING].pause=0; };
  4871  001126  0101               	movlb	1	; () banked
  4872  001128  93A2               	bcf	(_timerMem+23)& (0+255),1,b
  4873                           
  4874                           ; BSR set to: 1
  4875  00112A  C10F  F19F         	movff	_timerDelayConstant+15,_timerMem+20
  4876  00112E  C110  F1A0         	movff	_timerDelayConstant+16,_timerMem+21
  4877  001132  C111  F1A1         	movff	_timerDelayConstant+17,_timerMem+22
  4878                           
  4879                           ; BSR set to: 1
  4880  001136  95A2               	bcf	(_timerMem+23)& (0+255),2,b
  4881                           
  4882                           ; BSR set to: 1
  4883                           ;main.c: 193: { timerMem[TMR_SHOW_SETTING_ON].flag=0; timerMem[TMR_SHOW_SETTING_ON].pres
      +                          caler=timerDelayConstant[TMR_SHOW_SETTING_ON]; timerMem[TMR_SHOW_SETTING_ON].pause=0; };
  4884                           
  4885                           ; BSR set to: 1
  4886                           
  4887                           ; BSR set to: 1
  4888  001138  EF02  F007         	goto	PL2	;call to abstracted procedure
  4889  00113C                     __end_of_incVar:
  4890                           	opt stack 0
  4891  00113C                     PL14:
  4892  00113C  6F8C               	movwf	(??_incVar+1)& (0+255),b
  4893  00113E  518C               	movf	(??_incVar+1)& (0+255),w,b
  4894  001140  0A80               	xorlw	128
  4895  001142  0F7D               	addlw	-131
  4896  001144  0CE8               	retlw	232
  4897                           tblptru	equ	0xFF8
  4898                           tblptrh	equ	0xFF7
  4899                           tblptrl	equ	0xFF6
  4900                           tablat	equ	0xFF5
  4901                           prodl	equ	0xFF3
  4902                           intcon	equ	0xFF2
  4903                           intcon2	equ	0xFF1
  4904                           postinc0	equ	0xFEE
  4905                           wreg	equ	0xFE8
  4906                           indf1	equ	0xFE7
  4907                           postinc1	equ	0xFE6
  4908                           postdec1	equ	0xFE5
  4909                           fsr1h	equ	0xFE2
  4910                           fsr1l	equ	0xFE1
  4911                           indf2	equ	0xFDF
  4912                           postinc2	equ	0xFDE
  4913                           postdec2	equ	0xFDD
  4914                           plusw2	equ	0xFDB
  4915                           fsr2h	equ	0xFDA
  4916                           fsr2l	equ	0xFD9
  4917                           status	equ	0xFD8
  4918                           
  4919 ;; *************** function _enterMenu *****************
  4920 ;; Defined at:
  4921 ;;		line 88 in file "C:\fgr\16gb\0000 interior\deVolt\sw\v3dig\main.c"
  4922 ;; Parameters:    Size  Location     Type
  4923 ;;		None
  4924 ;; Auto vars:     Size  Location     Type
  4925 ;;		None
  4926 ;; Return value:  Size  Location     Type
  4927 ;;		None               void
  4928 ;; Registers used:
  4929 ;;		wreg, status,2, status,0
  4930 ;; Tracked objects:
  4931 ;;		On entry : F/1
  4932 ;;		On exit  : F/1
  4933 ;;		Unchanged: FFFFFFF0/0
  4934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4935 ;;      Params:         0       0       0       0       0       0       0       0       0
  4936 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4937 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4938 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4939 ;;Total ram usage:        0 bytes
  4940 ;; Hardware stack levels used:    1
  4941 ;; Hardware stack levels required when called:    6
  4942 ;; This function calls:
  4943 ;;		Nothing
  4944 ;; This function is called by:
  4945 ;;		_main
  4946 ;; This function uses a non-reentrant model
  4947 ;;
  4948                           
  4949                           	psect	text2
  4950  0023F0                     __ptext2:
  4951                           	opt stack 0
  4952  0023F0                     _enterMenu:
  4953                           	opt stack 24
  4954                           
  4955                           ; BSR set to: 1
  4956                           ;main.c: 89: if(state==E_MENU_BRILLO) state=E_SET_BRILLO;
  4957                           
  4958                           ; BSR set to: 1
  4959  0023F0  503A               	movf	_state,w,c
  4960  0023F2  0A02               	xorlw	2
  4961  0023F4  E103               	bnz	l6245
  4962                           
  4963                           ; BSR set to: 1
  4964  0023F6  0E08               	movlw	8
  4965  0023F8  6E3A               	movwf	_state,c
  4966  0023FA  0C08               	retlw	8
  4967  0023FC                     l6245:
  4968                           
  4969                           ; BSR set to: 1
  4970                           ;main.c: 90: else if(state==E_MENU_ADV_MODE) state=E_SET_ADV_MODE;
  4971  0023FC  503A               	movf	_state,w,c
  4972  0023FE  0A03               	xorlw	3
  4973  002400  E103               	bnz	l6249
  4974                           
  4975                           ; BSR set to: 1
  4976  002402  0E0D               	movlw	13
  4977  002404  6E3A               	movwf	_state,c
  4978  002406  0C0D               	retlw	13
  4979  002408                     l6249:
  4980                           
  4981                           ; BSR set to: 1
  4982                           ;main.c: 91: else if(state==E_MENU_LIMITS)
  4983  002408  503A               	movf	_state,w,c
  4984  00240A  0A04               	xorlw	4
  4985  00240C  E105               	bnz	l6253
  4986                           
  4987                           ; BSR set to: 1
  4988                           ;main.c: 92: {
  4989                           ;main.c: 93: setInc=1;
  4990  00240E  0E01               	movlw	1
  4991  002410  6E3C               	movwf	_setInc,c
  4992                           
  4993                           ;main.c: 94: state=E_SET_ADV_XLO_DESCRIPTION;
  4994  002412  0E0E               	movlw	14
  4995  002414  6E3A               	movwf	_state,c
  4996                           
  4997                           ;main.c: 95: }
  4998  002416  0C0E               	retlw	14
  4999  002418                     l6253:
  5000                           
  5001                           ; BSR set to: 1
  5002                           ;main.c: 96: else if(state==E_MENU_ESCALA)
  5003  002418  503A               	movf	_state,w,c
  5004  00241A  0A05               	xorlw	5
  5005  00241C  E105               	bnz	l6257
  5006                           
  5007                           ; BSR set to: 1
  5008                           ;main.c: 97: {
  5009                           ;main.c: 98: setInc=1;
  5010  00241E  0E01               	movlw	1
  5011  002420  6E3C               	movwf	_setInc,c
  5012                           
  5013                           ;main.c: 99: state=E_SET_ESCALA_ENT_DESCRIPTION;
  5014  002422  0E09               	movlw	9
  5015  002424  6E3A               	movwf	_state,c
  5016                           
  5017                           ;main.c: 100: }
  5018  002426  0C09               	retlw	9
  5019  002428                     l6257:
  5020                           
  5021                           ; BSR set to: 1
  5022                           ;main.c: 101: else if(state==E_MENU_USER_CAL) state=E_SET_CAL_DESCRIPTION;
  5023  002428  503A               	movf	_state,w,c
  5024  00242A  0A06               	xorlw	6
  5025  00242C  E103               	bnz	l6261
  5026                           
  5027                           ; BSR set to: 1
  5028  00242E  0E1A               	movlw	26
  5029  002430  6E3A               	movwf	_state,c
  5030  002432  0C1A               	retlw	26
  5031  002434                     l6261:
  5032                           
  5033                           ; BSR set to: 1
  5034                           ;main.c: 102: else if(state==E_MENU_FACTORY_CAL) state=E_SET_RST_DESCRIPTION;
  5035  002434  503A               	movf	_state,w,c
  5036  002436  0A07               	xorlw	7
  5037  002438  A4D8               	btfss	status,2,c
  5038  00243A  0012               	return	
  5039                           
  5040                           ; BSR set to: 1
  5041  00243C  0E22               	movlw	34
  5042  00243E  6E3A               	movwf	_state,c
  5043  002440  0C22               	retlw	34
  5044  002442                     __end_of_enterMenu:
  5045                           	opt stack 0
  5046                           tblptru	equ	0xFF8
  5047                           tblptrh	equ	0xFF7
  5048                           tblptrl	equ	0xFF6
  5049                           tablat	equ	0xFF5
  5050                           prodl	equ	0xFF3
  5051                           intcon	equ	0xFF2
  5052                           intcon2	equ	0xFF1
  5053                           postinc0	equ	0xFEE
  5054                           wreg	equ	0xFE8
  5055                           indf1	equ	0xFE7
  5056                           postinc1	equ	0xFE6
  5057                           postdec1	equ	0xFE5
  5058                           fsr1h	equ	0xFE2
  5059                           fsr1l	equ	0xFE1
  5060                           indf2	equ	0xFDF
  5061                           postinc2	equ	0xFDE
  5062                           postdec2	equ	0xFDD
  5063                           plusw2	equ	0xFDB
  5064                           fsr2h	equ	0xFDA
  5065                           fsr2l	equ	0xFD9
  5066                           status	equ	0xFD8
  5067                           
  5068 ;; *************** function _ee_read_byte *****************
  5069 ;; Defined at:
  5070 ;;		line 68 in file "C:\fgr\16gb\0000 interior\deVolt\sw\v3dig\main.c"
  5071 ;; Parameters:    Size  Location     Type
  5072 ;;  address         1    wreg     unsigned char 
  5073 ;; Auto vars:     Size  Location     Type
  5074 ;;  address         1    0[BANK0 ] unsigned char 
  5075 ;; Return value:  Size  Location     Type
  5076 ;;                  1    wreg      unsigned char 
  5077 ;; Registers used:
  5078 ;;		wreg, status,2
  5079 ;; Tracked objects:
  5080 ;;		On entry : F/0
  5081 ;;		On exit  : F/0
  5082 ;;		Unchanged: FFFFFFF0/0
  5083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5084 ;;      Params:         0       0       0       0       0       0       0       0       0
  5085 ;;      Locals:         0       1       0       0       0       0       0       0       0
  5086 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5087 ;;      Totals:         0       1       0       0       0       0       0       0       0
  5088 ;;Total ram usage:        1 bytes
  5089 ;; Hardware stack levels used:    1
  5090 ;; Hardware stack levels required when called:    6
  5091 ;; This function calls:
  5092 ;;		Nothing
  5093 ;; This function is called by:
  5094 ;;		_main
  5095 ;; This function uses a non-reentrant model
  5096 ;;
  5097                           
  5098                           	psect	text3
  5099  002778                     __ptext3:
  5100                           	opt stack 0
  5101  002778                     _ee_read_byte:
  5102                           	opt stack 24
  5103                           
  5104                           ; BSR set to: 1
  5105                           ;ee_read_byte@address stored from wreg
  5106  002778  CFE8 F060          	movff	wreg,ee_read_byte@address
  5107                           
  5108                           ; BSR set to: 0
  5109                           ;main.c: 69: EEADR = address;
  5110  00277C  C060  FFA9         	movff	ee_read_byte@address,4009	;volatile
  5111                           
  5112                           ; BSR set to: 0
  5113                           ;main.c: 70: EECON1bits.CFGS = 0;
  5114  002780  9CA6               	bcf	4006,6,c	;volatile
  5115                           
  5116                           ; BSR set to: 0
  5117                           ;main.c: 71: EECON1bits.EEPGD = 0;
  5118  002782  9EA6               	bcf	4006,7,c	;volatile
  5119                           
  5120                           ; BSR set to: 0
  5121                           ;main.c: 72: EECON1bits.RD = 1;
  5122  002784  80A6               	bsf	4006,0,c	;volatile
  5123                           
  5124                           ; BSR set to: 0
  5125                           ;main.c: 73: return EEDATA;
  5126  002786  50A8               	movf	4008,w,c	;volatile
  5127                           
  5128                           ; BSR set to: 0
  5129  002788  0012               	return	
  5130  00278A                     __end_of_ee_read_byte:
  5131                           	opt stack 0
  5132                           tblptru	equ	0xFF8
  5133                           tblptrh	equ	0xFF7
  5134                           tblptrl	equ	0xFF6
  5135                           tablat	equ	0xFF5
  5136                           prodl	equ	0xFF3
  5137                           intcon	equ	0xFF2
  5138                           intcon2	equ	0xFF1
  5139                           postinc0	equ	0xFEE
  5140                           wreg	equ	0xFE8
  5141                           indf1	equ	0xFE7
  5142                           postinc1	equ	0xFE6
  5143                           postdec1	equ	0xFE5
  5144                           fsr1h	equ	0xFE2
  5145                           fsr1l	equ	0xFE1
  5146                           indf2	equ	0xFDF
  5147                           postinc2	equ	0xFDE
  5148                           postdec2	equ	0xFDD
  5149                           plusw2	equ	0xFDB
  5150                           fsr2h	equ	0xFDA
  5151                           fsr2l	equ	0xFD9
  5152                           status	equ	0xFD8
  5153                           
  5154 ;; *************** function _decVar *****************
  5155 ;; Defined at:
  5156 ;;		line 197 in file "C:\fgr\16gb\0000 interior\deVolt\sw\v3dig\main.c"
  5157 ;; Parameters:    Size  Location     Type
  5158 ;;		None
  5159 ;; Auto vars:     Size  Location     Type
  5160 ;;		None
  5161 ;; Return value:  Size  Location     Type
  5162 ;;		None               void
  5163 ;; Registers used:
  5164 ;;		wreg, status,2, status,0, cstack
  5165 ;; Tracked objects:
  5166 ;;		On entry : F/1
  5167 ;;		On exit  : F/1
  5168 ;;		Unchanged: 0/0
  5169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5170 ;;      Params:         0       0       0       0       0       0       0       0       0
  5171 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5172 ;;      Temps:          0       2       0       0       0       0       0       0       0
  5173 ;;      Totals:         0       2       0       0       0       0       0       0       0
  5174 ;;Total ram usage:        2 bytes
  5175 ;; Hardware stack levels used:    1
  5176 ;; Hardware stack levels required when called:    8
  5177 ;; This function calls:
  5178 ;;		_ee_write_byte
  5179 ;;		___awtoft
  5180 ;;		___ftdiv
  5181 ;;		___ftadd
  5182 ;; This function is called by:
  5183 ;;		_main
  5184 ;; This function uses a non-reentrant model
  5185 ;;
  5186                           
  5187                           	psect	text4
  5188  001146                     __ptext4:
  5189                           	opt stack 0
  5190  001146                     _decVar:
  5191                           	opt stack 22
  5192                           
  5193                           ; BSR set to: 1
  5194                           ;main.c: 201: if(state==E_SET_BRILLO)
  5195                           
  5196                           ; BSR set to: 0
  5197  001146  503A               	movf	_state,w,c
  5198  001148  0A08               	xorlw	8
  5199  00114A  E108               	bnz	l6375
  5200                           
  5201                           ; BSR set to: 1
  5202                           ;main.c: 202: {
  5203                           ;main.c: 203: if(brilloMem>0)
  5204  00114C  5039               	movf	_brilloMem,w,c
  5205  00114E  E006               	bz	l6375
  5206                           
  5207                           ; BSR set to: 1
  5208                           ;main.c: 204: {
  5209                           ;main.c: 205: brilloMem--;
  5210  001150  0639               	decf	_brilloMem,f,c
  5211                           
  5212                           ; BSR set to: 1
  5213                           ;main.c: 206: { ee_write_byte(0,brilloMem); };
  5214  001152  C039  F060         	movff	_brilloMem,?_ee_write_byte
  5215  001156  0E00               	movlw	0
  5216  001158  EC84  F013         	call	_ee_write_byte
  5217  00115C                     l6375:
  5218                           
  5219                           ;main.c: 207: }
  5220                           ;main.c: 208: }
  5221                           ;main.c: 209: if(state==E_SET_ESCALA_ENT)
  5222  00115C  503A               	movf	_state,w,c
  5223  00115E  0A0A               	xorlw	10
  5224  001160  E136               	bnz	l6387
  5225                           
  5226                           ;main.c: 210: {
  5227                           ;main.c: 211: if((escEntMem-setInc)>=0)
  5228  001162  503C               	movf	_setInc,w,c
  5229  001164  5C2E               	subwf	_escEntMem,w,c
  5230  001166  0100               	movlb	0	; () banked
  5231  001168  6F8B               	movwf	??_decVar& (0+255),b
  5232  00116A  0E00               	movlw	0
  5233  00116C  582F               	subwfb	_escEntMem+1,w,c
  5234  00116E  6F8C               	movwf	(??_decVar+1)& (0+255),b
  5235  001170  BF8C               	btfsc	(??_decVar+1)& (0+255),7,b
  5236  001172  D02D               	goto	l6387
  5237                           
  5238                           ; BSR set to: 0
  5239                           ;main.c: 212: {
  5240                           ;main.c: 213: escEntMem=escEntMem-setInc;
  5241  001174  503C               	movf	_setInc,w,c
  5242  001176  5E2E               	subwf	_escEntMem,f,c
  5243  001178  0E00               	movlw	0
  5244  00117A  5A2F               	subwfb	_escEntMem+1,f,c
  5245                           
  5246                           ; BSR set to: 0
  5247                           ;main.c: 214: { ee_write_byte(14,((unsigned char)(((escEntMem)>>8)&0xFF))); ee_write_byt
      +                          e(14+1,((unsigned char)((escEntMem)&0xFF))); };
  5248  00117C  502F               	movf	_escEntMem+1,w,c
  5249  00117E  6F60               	movwf	?_ee_write_byte& (0+255),b
  5250  001180  0E0E               	movlw	14
  5251  001182  EC84  F013         	call	_ee_write_byte
  5252  001186  C02E  F060         	movff	_escEntMem,?_ee_write_byte
  5253  00118A  0E0F               	movlw	15
  5254  00118C  EC84  F013         	call	_ee_write_byte
  5255                           
  5256                           ;main.c: 215: escala=(float)escEntMem+(float)escDecMem/1000.0;
  5257  001190  C02E  F068         	movff	_escEntMem,?___awtoft
  5258  001194  C02F  F069         	movff	_escEntMem+1,?___awtoft+1
  5259  001198  EC51  F013         	call	___awtoft	;wreg free
  5260  00119C  D903               	call	PL3	;call to abstracted procedure
  5261  00119E  EC51  F013         	call	___awtoft	;wreg free
  5262  0011A2  C068  F06C         	movff	?___awtoft,?___ftdiv
  5263  0011A6  C069  F06D         	movff	?___awtoft+1,?___ftdiv+1
  5264  0011AA  C06A  F06E         	movff	?___awtoft+2,?___ftdiv+2
  5265  0011AE  EC35  F00E         	call	___ftdiv	;wreg free
  5266  0011B2  C06C  F080         	movff	?___ftdiv,?___ftadd+3
  5267  0011B6  C06D  F081         	movff	?___ftdiv+1,?___ftadd+4
  5268  0011BA  C06E  F082         	movff	?___ftdiv+2,?___ftadd+5
  5269  0011BE  ECB3  F00B         	call	___ftadd	;wreg free
  5270  0011C2  C07D  F0B2         	movff	?___ftadd,_escala
  5271  0011C6  C07E  F0B3         	movff	?___ftadd+1,_escala+1
  5272  0011CA  C07F  F0B4         	movff	?___ftadd+2,_escala+2
  5273  0011CE                     l6387:
  5274                           
  5275                           ;main.c: 216: }
  5276                           ;main.c: 217: }
  5277                           ;main.c: 218: if(state==E_SET_ESCALA_DEC)
  5278  0011CE  503A               	movf	_state,w,c
  5279  0011D0  0A0C               	xorlw	12
  5280  0011D2  E136               	bnz	l6399
  5281                           
  5282                           ;main.c: 219: {
  5283                           ;main.c: 220: if((escDecMem-setInc)>=0)
  5284  0011D4  503C               	movf	_setInc,w,c
  5285  0011D6  5C2C               	subwf	_escDecMem,w,c
  5286  0011D8  0100               	movlb	0	; () banked
  5287  0011DA  6F8B               	movwf	??_decVar& (0+255),b
  5288  0011DC  0E00               	movlw	0
  5289  0011DE  582D               	subwfb	_escDecMem+1,w,c
  5290  0011E0  6F8C               	movwf	(??_decVar+1)& (0+255),b
  5291  0011E2  BF8C               	btfsc	(??_decVar+1)& (0+255),7,b
  5292  0011E4  D02D               	goto	l6399
  5293                           
  5294                           ; BSR set to: 0
  5295                           ;main.c: 221: {
  5296                           ;main.c: 222: escDecMem=escDecMem-setInc;
  5297  0011E6  503C               	movf	_setInc,w,c
  5298  0011E8  5E2C               	subwf	_escDecMem,f,c
  5299  0011EA  0E00               	movlw	0
  5300  0011EC  5A2D               	subwfb	_escDecMem+1,f,c
  5301                           
  5302                           ; BSR set to: 0
  5303                           ;main.c: 223: { ee_write_byte(16,((unsigned char)(((escDecMem)>>8)&0xFF))); ee_write_byt
      +                          e(16+1,((unsigned char)((escDecMem)&0xFF))); };
  5304  0011EE  502D               	movf	_escDecMem+1,w,c
  5305  0011F0  6F60               	movwf	?_ee_write_byte& (0+255),b
  5306  0011F2  0E10               	movlw	16
  5307  0011F4  EC84  F013         	call	_ee_write_byte
  5308  0011F8  C02C  F060         	movff	_escDecMem,?_ee_write_byte
  5309  0011FC  0E11               	movlw	17
  5310  0011FE  EC84  F013         	call	_ee_write_byte
  5311                           
  5312                           ;main.c: 224: escala=(float)escEntMem+(float)escDecMem/1000.0;
  5313  001202  C02E  F068         	movff	_escEntMem,?___awtoft
  5314  001206  C02F  F069         	movff	_escEntMem+1,?___awtoft+1
  5315  00120A  EC51  F013         	call	___awtoft	;wreg free
  5316  00120E  D8CA               	call	PL3	;call to abstracted procedure
  5317  001210  EC51  F013         	call	___awtoft	;wreg free
  5318  001214  C068  F06C         	movff	?___awtoft,?___ftdiv
  5319  001218  C069  F06D         	movff	?___awtoft+1,?___ftdiv+1
  5320  00121C  C06A  F06E         	movff	?___awtoft+2,?___ftdiv+2
  5321  001220  EC35  F00E         	call	___ftdiv	;wreg free
  5322  001224  C06C  F080         	movff	?___ftdiv,?___ftadd+3
  5323  001228  C06D  F081         	movff	?___ftdiv+1,?___ftadd+4
  5324  00122C  C06E  F082         	movff	?___ftdiv+2,?___ftadd+5
  5325  001230  ECB3  F00B         	call	___ftadd	;wreg free
  5326  001234  C07D  F0B2         	movff	?___ftadd,_escala
  5327  001238  C07E  F0B3         	movff	?___ftadd+1,_escala+1
  5328  00123C  C07F  F0B4         	movff	?___ftadd+2,_escala+2
  5329  001240                     l6399:
  5330                           
  5331                           ;main.c: 225: }
  5332                           ;main.c: 226: }
  5333                           ;main.c: 227: if(state==E_SET_ADV_MODE)
  5334  001240  503A               	movf	_state,w,c
  5335  001242  0A0D               	xorlw	13
  5336  001244  E108               	bnz	l6407
  5337                           
  5338                           ;main.c: 228: {
  5339                           ;main.c: 229: if(advModeMem>0)
  5340  001246  5038               	movf	_advModeMem,w,c
  5341  001248  E006               	bz	l6407
  5342                           
  5343                           ;main.c: 230: {
  5344                           ;main.c: 231: advModeMem--;
  5345  00124A  0638               	decf	_advModeMem,f,c
  5346                           
  5347                           ;main.c: 232: { ee_write_byte(1,advModeMem); };
  5348  00124C  C038  F060         	movff	_advModeMem,?_ee_write_byte
  5349  001250  0E01               	movlw	1
  5350  001252  EC84  F013         	call	_ee_write_byte
  5351  001256                     l6407:
  5352                           
  5353                           ;main.c: 233: }
  5354                           ;main.c: 234: }
  5355                           ;main.c: 235: if(state==E_SET_ADV_XLO)
  5356  001256  503A               	movf	_state,w,c
  5357  001258  0A0F               	xorlw	15
  5358  00125A  E117               	bnz	l129
  5359                           
  5360                           ;main.c: 236: {
  5361                           ;main.c: 237: if((xLoMem-setInc)>=0)
  5362  00125C  503C               	movf	_setInc,w,c
  5363  00125E  5C34               	subwf	_xLoMem,w,c
  5364  001260  0100               	movlb	0	; () banked
  5365  001262  6F8B               	movwf	??_decVar& (0+255),b
  5366  001264  0E00               	movlw	0
  5367  001266  5835               	subwfb	_xLoMem+1,w,c
  5368  001268  6F8C               	movwf	(??_decVar+1)& (0+255),b
  5369  00126A  BF8C               	btfsc	(??_decVar+1)& (0+255),7,b
  5370  00126C  D00E               	goto	l129
  5371                           
  5372                           ; BSR set to: 0
  5373                           ;main.c: 238: {
  5374                           ;main.c: 239: xLoMem=xLoMem-setInc;
  5375  00126E  503C               	movf	_setInc,w,c
  5376  001270  5E34               	subwf	_xLoMem,f,c
  5377  001272  0E00               	movlw	0
  5378  001274  5A35               	subwfb	_xLoMem+1,f,c
  5379                           
  5380                           ; BSR set to: 0
  5381                           ;main.c: 240: { ee_write_byte(2,((unsigned char)(((xLoMem)>>8)&0xFF))); ee_write_byte(2+
      +                          1,((unsigned char)((xLoMem)&0xFF))); };
  5382  001276  5035               	movf	_xLoMem+1,w,c
  5383  001278  6F60               	movwf	?_ee_write_byte& (0+255),b
  5384  00127A  0E02               	movlw	2
  5385  00127C  EC84  F013         	call	_ee_write_byte
  5386  001280  C034  F060         	movff	_xLoMem,?_ee_write_byte
  5387  001284  0E03               	movlw	3
  5388  001286  EC84  F013         	call	_ee_write_byte
  5389  00128A                     l129:
  5390                           
  5391                           ;main.c: 241: }
  5392                           ;main.c: 242: }
  5393                           ;main.c: 243: if(state==E_SET_ADV_XUP)
  5394  00128A  503A               	movf	_state,w,c
  5395  00128C  0A11               	xorlw	17
  5396  00128E  E117               	bnz	l131
  5397                           
  5398                           ;main.c: 244: {
  5399                           ;main.c: 245: if((xUpMem-setInc)>=0)
  5400  001290  503C               	movf	_setInc,w,c
  5401  001292  5C36               	subwf	_xUpMem,w,c
  5402  001294  0100               	movlb	0	; () banked
  5403  001296  6F8B               	movwf	??_decVar& (0+255),b
  5404  001298  0E00               	movlw	0
  5405  00129A  5837               	subwfb	_xUpMem+1,w,c
  5406  00129C  6F8C               	movwf	(??_decVar+1)& (0+255),b
  5407  00129E  BF8C               	btfsc	(??_decVar+1)& (0+255),7,b
  5408  0012A0  D00E               	goto	l131
  5409                           
  5410                           ; BSR set to: 0
  5411                           ;main.c: 246: {
  5412                           ;main.c: 247: xUpMem=xUpMem-setInc;
  5413  0012A2  503C               	movf	_setInc,w,c
  5414  0012A4  5E36               	subwf	_xUpMem,f,c
  5415  0012A6  0E00               	movlw	0
  5416  0012A8  5A37               	subwfb	_xUpMem+1,f,c
  5417                           
  5418                           ; BSR set to: 0
  5419                           ;main.c: 248: { ee_write_byte(4,((unsigned char)(((xUpMem)>>8)&0xFF))); ee_write_byte(4+
      +                          1,((unsigned char)((xUpMem)&0xFF))); };
  5420  0012AA  5037               	movf	_xUpMem+1,w,c
  5421  0012AC  6F60               	movwf	?_ee_write_byte& (0+255),b
  5422  0012AE  0E04               	movlw	4
  5423  0012B0  EC84  F013         	call	_ee_write_byte
  5424  0012B4  C036  F060         	movff	_xUpMem,?_ee_write_byte
  5425  0012B8  0E05               	movlw	5
  5426  0012BA  EC84  F013         	call	_ee_write_byte
  5427  0012BE                     l131:
  5428                           
  5429                           ;main.c: 249: }
  5430                           ;main.c: 250: }
  5431                           ;main.c: 251: if(state==E_SET_ADV_ELO)
  5432  0012BE  503A               	movf	_state,w,c
  5433  0012C0  0A13               	xorlw	19
  5434  0012C2  E117               	bnz	l133
  5435                           
  5436                           ;main.c: 252: {
  5437                           ;main.c: 253: if((eLoMem-setInc)>=0)
  5438  0012C4  503C               	movf	_setInc,w,c
  5439  0012C6  5C28               	subwf	_eLoMem,w,c
  5440  0012C8  0100               	movlb	0	; () banked
  5441  0012CA  6F8B               	movwf	??_decVar& (0+255),b
  5442  0012CC  0E00               	movlw	0
  5443  0012CE  5829               	subwfb	_eLoMem+1,w,c
  5444  0012D0  6F8C               	movwf	(??_decVar+1)& (0+255),b
  5445  0012D2  BF8C               	btfsc	(??_decVar+1)& (0+255),7,b
  5446  0012D4  D00E               	goto	l133
  5447                           
  5448                           ; BSR set to: 0
  5449                           ;main.c: 254: {
  5450                           ;main.c: 255: eLoMem=eLoMem-setInc;
  5451  0012D6  503C               	movf	_setInc,w,c
  5452  0012D8  5E28               	subwf	_eLoMem,f,c
  5453  0012DA  0E00               	movlw	0
  5454  0012DC  5A29               	subwfb	_eLoMem+1,f,c
  5455                           
  5456                           ; BSR set to: 0
  5457                           ;main.c: 256: { ee_write_byte(6,((unsigned char)(((eLoMem)>>8)&0xFF))); ee_write_byte(6+
      +                          1,((unsigned char)((eLoMem)&0xFF))); };
  5458  0012DE  5029               	movf	_eLoMem+1,w,c
  5459  0012E0  6F60               	movwf	?_ee_write_byte& (0+255),b
  5460  0012E2  0E06               	movlw	6
  5461  0012E4  EC84  F013         	call	_ee_write_byte
  5462  0012E8  C028  F060         	movff	_eLoMem,?_ee_write_byte
  5463  0012EC  0E07               	movlw	7
  5464  0012EE  EC84  F013         	call	_ee_write_byte
  5465  0012F2                     l133:
  5466                           
  5467                           ;main.c: 257: }
  5468                           ;main.c: 258: }
  5469                           ;main.c: 259: if(state==E_SET_ADV_EUP)
  5470  0012F2  503A               	movf	_state,w,c
  5471  0012F4  0A15               	xorlw	21
  5472  0012F6  E117               	bnz	l135
  5473                           
  5474                           ;main.c: 260: {
  5475                           ;main.c: 261: if((eUpMem-setInc)>=0)
  5476  0012F8  503C               	movf	_setInc,w,c
  5477  0012FA  5C2A               	subwf	_eUpMem,w,c
  5478  0012FC  0100               	movlb	0	; () banked
  5479  0012FE  6F8B               	movwf	??_decVar& (0+255),b
  5480  001300  0E00               	movlw	0
  5481  001302  582B               	subwfb	_eUpMem+1,w,c
  5482  001304  6F8C               	movwf	(??_decVar+1)& (0+255),b
  5483  001306  BF8C               	btfsc	(??_decVar+1)& (0+255),7,b
  5484  001308  D00E               	goto	l135
  5485                           
  5486                           ; BSR set to: 0
  5487                           ;main.c: 262: {
  5488                           ;main.c: 263: eUpMem=eUpMem-setInc;
  5489  00130A  503C               	movf	_setInc,w,c
  5490  00130C  5E2A               	subwf	_eUpMem,f,c
  5491  00130E  0E00               	movlw	0
  5492  001310  5A2B               	subwfb	_eUpMem+1,f,c
  5493                           
  5494                           ; BSR set to: 0
  5495                           ;main.c: 264: { ee_write_byte(8,((unsigned char)(((eUpMem)>>8)&0xFF))); ee_write_byte(8+
      +                          1,((unsigned char)((eUpMem)&0xFF))); };
  5496  001312  502B               	movf	_eUpMem+1,w,c
  5497  001314  6F60               	movwf	?_ee_write_byte& (0+255),b
  5498  001316  0E08               	movlw	8
  5499  001318  EC84  F013         	call	_ee_write_byte
  5500  00131C  C02A  F060         	movff	_eUpMem,?_ee_write_byte
  5501  001320  0E09               	movlw	9
  5502  001322  EC84  F013         	call	_ee_write_byte
  5503  001326                     l135:
  5504                           
  5505                           ;main.c: 265: }
  5506                           ;main.c: 266: }
  5507                           ;main.c: 267: if(state==E_SET_ADV_VLO)
  5508  001326  503A               	movf	_state,w,c
  5509  001328  0A17               	xorlw	23
  5510  00132A  E117               	bnz	l137
  5511                           
  5512                           ;main.c: 268: {
  5513                           ;main.c: 269: if((vLoMem-setInc)>=0)
  5514  00132C  503C               	movf	_setInc,w,c
  5515  00132E  5C30               	subwf	_vLoMem,w,c
  5516  001330  0100               	movlb	0	; () banked
  5517  001332  6F8B               	movwf	??_decVar& (0+255),b
  5518  001334  0E00               	movlw	0
  5519  001336  5831               	subwfb	_vLoMem+1,w,c
  5520  001338  6F8C               	movwf	(??_decVar+1)& (0+255),b
  5521  00133A  BF8C               	btfsc	(??_decVar+1)& (0+255),7,b
  5522  00133C  D00E               	goto	l137
  5523                           
  5524                           ; BSR set to: 0
  5525                           ;main.c: 270: {
  5526                           ;main.c: 271: vLoMem=vLoMem-setInc;
  5527  00133E  503C               	movf	_setInc,w,c
  5528  001340  5E30               	subwf	_vLoMem,f,c
  5529  001342  0E00               	movlw	0
  5530  001344  5A31               	subwfb	_vLoMem+1,f,c
  5531                           
  5532                           ; BSR set to: 0
  5533                           ;main.c: 272: { ee_write_byte(10,((unsigned char)(((vLoMem)>>8)&0xFF))); ee_write_byte(1
      +                          0+1,((unsigned char)((vLoMem)&0xFF))); };
  5534  001346  5031               	movf	_vLoMem+1,w,c
  5535  001348  6F60               	movwf	?_ee_write_byte& (0+255),b
  5536  00134A  0E0A               	movlw	10
  5537  00134C  EC84  F013         	call	_ee_write_byte
  5538  001350  C030  F060         	movff	_vLoMem,?_ee_write_byte
  5539  001354  0E0B               	movlw	11
  5540  001356  EC84  F013         	call	_ee_write_byte
  5541  00135A                     l137:
  5542                           
  5543                           ;main.c: 273: }
  5544                           ;main.c: 274: }
  5545                           ;main.c: 275: if(state==E_SET_ADV_VUP)
  5546  00135A  503A               	movf	_state,w,c
  5547  00135C  0A19               	xorlw	25
  5548  00135E  E117               	bnz	l6457
  5549                           
  5550                           ;main.c: 276: {
  5551                           ;main.c: 277: if((vUpMem-setInc)>=0)
  5552  001360  503C               	movf	_setInc,w,c
  5553  001362  5C32               	subwf	_vUpMem,w,c
  5554  001364  0100               	movlb	0	; () banked
  5555  001366  6F8B               	movwf	??_decVar& (0+255),b
  5556  001368  0E00               	movlw	0
  5557  00136A  5833               	subwfb	_vUpMem+1,w,c
  5558  00136C  6F8C               	movwf	(??_decVar+1)& (0+255),b
  5559  00136E  BF8C               	btfsc	(??_decVar+1)& (0+255),7,b
  5560  001370  D00E               	goto	l6457
  5561                           
  5562                           ; BSR set to: 0
  5563                           ;main.c: 278: {
  5564                           ;main.c: 279: vUpMem=vUpMem-setInc;
  5565  001372  503C               	movf	_setInc,w,c
  5566  001374  5E32               	subwf	_vUpMem,f,c
  5567  001376  0E00               	movlw	0
  5568  001378  5A33               	subwfb	_vUpMem+1,f,c
  5569                           
  5570                           ; BSR set to: 0
  5571                           ;main.c: 280: { ee_write_byte(12,((unsigned char)(((vUpMem)>>8)&0xFF))); ee_write_byte(1
      +                          2+1,((unsigned char)((vUpMem)&0xFF))); };
  5572  00137A  5033               	movf	_vUpMem+1,w,c
  5573  00137C  6F60               	movwf	?_ee_write_byte& (0+255),b
  5574  00137E  0E0C               	movlw	12
  5575  001380  EC84  F013         	call	_ee_write_byte
  5576  001384  C032  F060         	movff	_vUpMem,?_ee_write_byte
  5577  001388  0E0D               	movlw	13
  5578  00138A  EC84  F013         	call	_ee_write_byte
  5579  00138E                     l6457:
  5580                           
  5581                           ;main.c: 281: }
  5582                           ;main.c: 282: }
  5583                           ;main.c: 284: { timerMem[TMR_SHOW_SETTING].flag=0; timerMem[TMR_SHOW_SETTING].prescaler=
      +                          timerDelayConstant[TMR_SHOW_SETTING]; timerMem[TMR_SHOW_SETTING].pause=0; };
  5584  00138E  0101               	movlb	1	; () banked
  5585  001390  93A2               	bcf	(_timerMem+23)& (0+255),1,b
  5586                           
  5587                           ; BSR set to: 1
  5588  001392  C10F  F19F         	movff	_timerDelayConstant+15,_timerMem+20
  5589  001396  C110  F1A0         	movff	_timerDelayConstant+16,_timerMem+21
  5590  00139A  C111  F1A1         	movff	_timerDelayConstant+17,_timerMem+22
  5591                           
  5592                           ; BSR set to: 1
  5593  00139E  95A2               	bcf	(_timerMem+23)& (0+255),2,b
  5594                           
  5595                           ; BSR set to: 1
  5596                           ;main.c: 285: { timerMem[TMR_SHOW_SETTING_ON].flag=0; timerMem[TMR_SHOW_SETTING_ON].pres
      +                          caler=timerDelayConstant[TMR_SHOW_SETTING_ON]; timerMem[TMR_SHOW_SETTING_ON].pause=0; };
  5597                           
  5598                           ; BSR set to: 1
  5599                           
  5600                           ; BSR set to: 1
  5601  0013A0  EF02  F007         	goto	PL2	;call to abstracted procedure
  5602  0013A4                     __end_of_decVar:
  5603                           	opt stack 0
  5604  0013A4                     PL3:
  5605  0013A4  C068  F07D         	movff	?___awtoft,?___ftadd
  5606  0013A8  C069  F07E         	movff	?___awtoft+1,?___ftadd+1
  5607  0013AC  C06A  F07F         	movff	?___awtoft+2,?___ftadd+2
  5608  0013B0  6B6F               	clrf	(?___ftdiv+3)& (0+255),b
  5609  0013B2  0E7A               	movlw	122
  5610  0013B4  6F70               	movwf	(?___ftdiv+4)& (0+255),b
  5611  0013B6  0E44               	movlw	68
  5612  0013B8  6F71               	movwf	(?___ftdiv+5)& (0+255),b
  5613  0013BA  C02C  F068         	movff	_escDecMem,?___awtoft
  5614  0013BE  C02D  F069         	movff	_escDecMem+1,?___awtoft+1
  5615  0013C2  0C44               	retlw	68
  5616                           tblptru	equ	0xFF8
  5617                           tblptrh	equ	0xFF7
  5618                           tblptrl	equ	0xFF6
  5619                           tablat	equ	0xFF5
  5620                           prodl	equ	0xFF3
  5621                           intcon	equ	0xFF2
  5622                           intcon2	equ	0xFF1
  5623                           postinc0	equ	0xFEE
  5624                           wreg	equ	0xFE8
  5625                           indf1	equ	0xFE7
  5626                           postinc1	equ	0xFE6
  5627                           postdec1	equ	0xFE5
  5628                           fsr1h	equ	0xFE2
  5629                           fsr1l	equ	0xFE1
  5630                           indf2	equ	0xFDF
  5631                           postinc2	equ	0xFDE
  5632                           postdec2	equ	0xFDD
  5633                           plusw2	equ	0xFDB
  5634                           fsr2h	equ	0xFDA
  5635                           fsr2l	equ	0xFD9
  5636                           status	equ	0xFD8
  5637                           
  5638 ;; *************** function _ee_write_byte *****************
  5639 ;; Defined at:
  5640 ;;		line 48 in file "C:\fgr\16gb\0000 interior\deVolt\sw\v3dig\main.c"
  5641 ;; Parameters:    Size  Location     Type
  5642 ;;  address         1    wreg     unsigned char 
  5643 ;;  _data           1    0[BANK0 ] unsigned char 
  5644 ;; Auto vars:     Size  Location     Type
  5645 ;;  address         1    1[BANK0 ] unsigned char 
  5646 ;; Return value:  Size  Location     Type
  5647 ;;		None               void
  5648 ;; Registers used:
  5649 ;;		wreg, status,2
  5650 ;; Tracked objects:
  5651 ;;		On entry : 0/1
  5652 ;;		On exit  : 0/0
  5653 ;;		Unchanged: 0/0
  5654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5655 ;;      Params:         0       1       0       0       0       0       0       0       0
  5656 ;;      Locals:         0       1       0       0       0       0       0       0       0
  5657 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5658 ;;      Totals:         0       2       0       0       0       0       0       0       0
  5659 ;;Total ram usage:        2 bytes
  5660 ;; Hardware stack levels used:    1
  5661 ;; Hardware stack levels required when called:    6
  5662 ;; This function calls:
  5663 ;;		Nothing
  5664 ;; This function is called by:
  5665 ;;		_incVar
  5666 ;;		_decVar
  5667 ;; This function uses a non-reentrant model
  5668 ;;
  5669                           
  5670                           	psect	text5
  5671  002708                     __ptext5:
  5672                           	opt stack 0
  5673  002708                     _ee_write_byte:
  5674                           	opt stack 23
  5675                           
  5676                           ; BSR set to: 1
  5677                           ;ee_write_byte@address stored from wreg
  5678  002708  CFE8 F061          	movff	wreg,ee_write_byte@address
  5679                           
  5680                           ;main.c: 49: EEDATA = _data;
  5681  00270C  C060  FFA8         	movff	ee_write_byte@_data,4008	;volatile
  5682                           
  5683                           ;main.c: 50: EEADR = address;
  5684  002710  C061  FFA9         	movff	ee_write_byte@address,4009	;volatile
  5685                           
  5686                           ;main.c: 52: EECON1bits.EEPGD = 0;
  5687  002714  9EA6               	bcf	4006,7,c	;volatile
  5688                           
  5689                           ;main.c: 53: EECON1bits.CFGS = 0;
  5690  002716  9CA6               	bcf	4006,6,c	;volatile
  5691                           
  5692                           ;main.c: 54: EECON1bits.WREN = 1;
  5693  002718  84A6               	bsf	4006,2,c	;volatile
  5694                           
  5695                           ;main.c: 55: INTCONbits.GIE = 0;
  5696  00271A  9EF2               	bcf	intcon,7,c	;volatile
  5697                           
  5698                           ;main.c: 56: EECON2 = 0x55;
  5699  00271C  0E55               	movlw	85
  5700  00271E  6EA7               	movwf	4007,c	;volatile
  5701                           
  5702                           ;main.c: 57: EECON2 = 0x0AA;
  5703  002720  0EAA               	movlw	170
  5704  002722  6EA7               	movwf	4007,c	;volatile
  5705                           
  5706                           ;main.c: 58: EECON1bits.WR = 1;
  5707  002724  82A6               	bsf	4006,1,c	;volatile
  5708                           
  5709                           ;main.c: 59: while(EECON1bits.WR) asm("nop");
  5710  002726  D001               	goto	l41
  5711  002728                     l42:
  5712  002728  F000               	nop		;# 
  5713  00272A                     l41:
  5714  00272A  B2A6               	btfsc	4006,1,c	;volatile
  5715  00272C  D7FD               	goto	l42
  5716                           
  5717                           ;main.c: 61: EECON1bits.WREN = 0;
  5718  00272E  94A6               	bcf	4006,2,c	;volatile
  5719                           
  5720                           ;main.c: 62: INTCONbits.GIE = 1;
  5721  002730  8EF2               	bsf	intcon,7,c	;volatile
  5722  002732  0012               	return	
  5723  002734                     __end_of_ee_write_byte:
  5724                           	opt stack 0
  5725                           tblptru	equ	0xFF8
  5726                           tblptrh	equ	0xFF7
  5727                           tblptrl	equ	0xFF6
  5728                           tablat	equ	0xFF5
  5729                           prodl	equ	0xFF3
  5730                           intcon	equ	0xFF2
  5731                           intcon2	equ	0xFF1
  5732                           postinc0	equ	0xFEE
  5733                           wreg	equ	0xFE8
  5734                           indf1	equ	0xFE7
  5735                           postinc1	equ	0xFE6
  5736                           postdec1	equ	0xFE5
  5737                           fsr1h	equ	0xFE2
  5738                           fsr1l	equ	0xFE1
  5739                           indf2	equ	0xFDF
  5740                           postinc2	equ	0xFDE
  5741                           postdec2	equ	0xFDD
  5742                           plusw2	equ	0xFDB
  5743                           fsr2h	equ	0xFDA
  5744                           fsr2l	equ	0xFD9
  5745                           status	equ	0xFD8
  5746                           
  5747 ;; *************** function _endTestDisplayActions *****************
  5748 ;; Defined at:
  5749 ;;		line 289 in file "C:\fgr\16gb\0000 interior\deVolt\sw\v3dig\main.c"
  5750 ;; Parameters:    Size  Location     Type
  5751 ;;		None
  5752 ;; Auto vars:     Size  Location     Type
  5753 ;;		None
  5754 ;; Return value:  Size  Location     Type
  5755 ;;		None               void
  5756 ;; Registers used:
  5757 ;;		wreg, status,2
  5758 ;; Tracked objects:
  5759 ;;		On entry : F/1
  5760 ;;		On exit  : F/1
  5761 ;;		Unchanged: FFFFFFF0/0
  5762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5763 ;;      Params:         0       0       0       0       0       0       0       0       0
  5764 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5765 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5766 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5767 ;;Total ram usage:        0 bytes
  5768 ;; Hardware stack levels used:    1
  5769 ;; Hardware stack levels required when called:    6
  5770 ;; This function calls:
  5771 ;;		Nothing
  5772 ;; This function is called by:
  5773 ;;		_main
  5774 ;; This function uses a non-reentrant model
  5775 ;;
  5776                           
  5777                           	psect	text6
  5778  002734                     __ptext6:
  5779                           	opt stack 0
  5780  002734                     _endTestDisplayActions:
  5781                           	opt stack 24
  5782                           
  5783                           ; BSR set to: 1
  5784                           ;main.c: 290: state=E_IDLE;
  5785  002734  0E01               	movlw	1
  5786  002736  6E3A               	movwf	_state,c
  5787                           
  5788                           ; BSR set to: 1
  5789                           ;main.c: 292: PORTCbits.RC6=0;
  5790  002738  9C82               	bcf	3970,6,c	;volatile
  5791                           
  5792                           ;main.c: 293: muxBuffer[0]='0';
  5793  00273A  0E30               	movlw	48
  5794  00273C  0100               	movlb	0	; () banked
  5795  00273E  6FC9               	movwf	_muxBuffer& (0+255),b
  5796                           
  5797                           ;main.c: 294: muxBuffer[1]='0';
  5798  002740  6FCA               	movwf	(_muxBuffer+1)& (0+255),b
  5799                           
  5800                           ;main.c: 295: muxBuffer[2]='0';
  5801  002742  6FCB               	movwf	(_muxBuffer+2)& (0+255),b
  5802                           
  5803                           ;main.c: 296: muxBuffer[ADV]=' ';
  5804  002744  0E20               	movlw	32
  5805  002746  6FCC               	movwf	(_muxBuffer+3)& (0+255),b
  5806                           
  5807                           ; BSR set to: 0
  5808                           ;main.c: 297: { timerMem[TMR_ADCSAMPLE].flag=0; timerMem[TMR_ADCSAMPLE].prescaler=timerD
      +                          elayConstant[TMR_ADCSAMPLE]; timerMem[TMR_ADCSAMPLE].pause=0; timerMem[TMR_ADCSAMPLE].lo
      +                          op=1; };
  5809  002748  0101               	movlb	1	; () banked
  5810  00274A  93BE               	bcf	(_timerMem+51)& (0+255),1,b
  5811                           
  5812                           ; BSR set to: 1
  5813  00274C  C124  F1BB         	movff	_timerDelayConstant+36,_timerMem+48
  5814  002750  C125  F1BC         	movff	_timerDelayConstant+37,_timerMem+49
  5815  002754  C126  F1BD         	movff	_timerDelayConstant+38,_timerMem+50
  5816                           
  5817                           ; BSR set to: 1
  5818  002758  95BE               	bcf	(_timerMem+51)& (0+255),2,b
  5819                           
  5820                           ; BSR set to: 1
  5821  00275A  81BE               	bsf	(_timerMem+51)& (0+255),0,b
  5822                           
  5823                           ; BSR set to: 1
  5824  00275C  0C20               	retlw	32
  5825  00275E                     __end_of_endTestDisplayActions:
  5826                           	opt stack 0
  5827                           tblptru	equ	0xFF8
  5828                           tblptrh	equ	0xFF7
  5829                           tblptrl	equ	0xFF6
  5830                           tablat	equ	0xFF5
  5831                           prodl	equ	0xFF3
  5832                           intcon	equ	0xFF2
  5833                           intcon2	equ	0xFF1
  5834                           postinc0	equ	0xFEE
  5835                           wreg	equ	0xFE8
  5836                           indf1	equ	0xFE7
  5837                           postinc1	equ	0xFE6
  5838                           postdec1	equ	0xFE5
  5839                           fsr1h	equ	0xFE2
  5840                           fsr1l	equ	0xFE1
  5841                           indf2	equ	0xFDF
  5842                           postinc2	equ	0xFDE
  5843                           postdec2	equ	0xFDD
  5844                           plusw2	equ	0xFDB
  5845                           fsr2h	equ	0xFDA
  5846                           fsr2l	equ	0xFD9
  5847                           status	equ	0xFD8
  5848                           
  5849 ;; *************** function _actionsTimeoutShowSetting *****************
  5850 ;; Defined at:
  5851 ;;		line 301 in file "C:\fgr\16gb\0000 interior\deVolt\sw\v3dig\main.c"
  5852 ;; Parameters:    Size  Location     Type
  5853 ;;		None
  5854 ;; Auto vars:     Size  Location     Type
  5855 ;;		None
  5856 ;; Return value:  Size  Location     Type
  5857 ;;		None               void
  5858 ;; Registers used:
  5859 ;;		wreg, status,2, status,0
  5860 ;; Tracked objects:
  5861 ;;		On entry : F/1
  5862 ;;		On exit  : E/0
  5863 ;;		Unchanged: FFFFFFF0/0
  5864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5865 ;;      Params:         0       0       0       0       0       0       0       0       0
  5866 ;;      Locals:         0       2       0       0       0       0       0       0       0
  5867 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5868 ;;      Totals:         0       2       0       0       0       0       0       0       0
  5869 ;;Total ram usage:        2 bytes
  5870 ;; Hardware stack levels used:    1
  5871 ;; Hardware stack levels required when called:    6
  5872 ;; This function calls:
  5873 ;;		Nothing
  5874 ;; This function is called by:
  5875 ;;		_main
  5876 ;; This function uses a non-reentrant model
  5877 ;;
  5878                           
  5879                           	psect	text7
  5880  00215A                     __ptext7:
  5881                           	opt stack 0
  5882  00215A                     _actionsTimeoutShowSetting:
  5883                           	opt stack 24
  5884                           
  5885                           ; BSR set to: 1
  5886                           ;main.c: 302: if((timerMem[TMR_SHOW_SETTING].flag?!(timerMem[TMR_SHOW_SETTING].flag=0):0
      +                          ))
  5887                           
  5888                           ; BSR set to: 1
  5889  00215A  B3A2               	btfsc	(_timerMem+23)& (0+255),1,b
  5890  00215C  D003               	goto	l6485
  5891                           
  5892                           ; BSR set to: 1
  5893  00215E  0100               	movlb	0	; () banked
  5894  002160  6B60               	clrf	_actionsTimeoutShowSetting$438& (0+255),b
  5895  002162  D00B               	goto	L55
  5896  002164                     l6485:
  5897                           
  5898                           ; BSR set to: 1
  5899  002164  51A2               	movf	(_timerMem+23)& (0+255),w,b
  5900  002166  0BFD               	andlw	-3
  5901  002168  6FA2               	movwf	(_timerMem+23)& (0+255),b
  5902  00216A  0101               	movlb	1	; () banked
  5903  00216C  31A2               	rrcf	(_timerMem+23)& (0+255),w,b
  5904  00216E  0B01               	andlw	1
  5905  002170  0E00               	movlw	0
  5906  002172  B4D8               	btfsc	status,2,c
  5907  002174  0E01               	movlw	1
  5908  002176  0100               	movlb	0	; () banked
  5909  002178  6F60               	movwf	_actionsTimeoutShowSetting$438& (0+255),b
  5910  00217A                     L55:
  5911  00217A  6B61               	clrf	(_actionsTimeoutShowSetting$438+1)& (0+255),b
  5912                           
  5913                           ; BSR set to: 0
  5914  00217C  5161               	movf	(_actionsTimeoutShowSetting$438+1)& (0+255),w,b
  5915  00217E  1160               	iorwf	_actionsTimeoutShowSetting$438& (0+255),w,b
  5916  002180  B4D8               	btfsc	status,2,c
  5917  002182  0012               	return	
  5918  002184  D00E               	goto	l6617
  5919  002186                     l6489:
  5920                           
  5921                           ; BSR set to: 0
  5922                           ;main.c: 307: state++;
  5923  002186  2A3A               	incf	_state,f,c
  5924                           
  5925                           ; BSR set to: 0
  5926                           ;main.c: 308: { timerMem[TMR_SHOW_SETTING].flag=0; timerMem[TMR_SHOW_SETTING].prescaler=
      +                          timerDelayConstant[TMR_SHOW_SETTING]; timerMem[TMR_SHOW_SETTING].pause=0; };
  5927  002188  0101               	movlb	1	; () banked
  5928  00218A  93A2               	bcf	(_timerMem+23)& (0+255),1,b
  5929                           
  5930                           ; BSR set to: 1
  5931  00218C  C10F  F19F         	movff	_timerDelayConstant+15,_timerMem+20
  5932  002190  C110  F1A0         	movff	_timerDelayConstant+16,_timerMem+21
  5933  002194  C111  F1A1         	movff	_timerDelayConstant+17,_timerMem+22
  5934                           
  5935                           ; BSR set to: 1
  5936  002198  95A2               	bcf	(_timerMem+23)& (0+255),2,b
  5937                           
  5938                           ;main.c: 309: break;
  5939  00219A  0012               	return	
  5940  00219C                     l6513:
  5941                           
  5942                           ; BSR set to: 0
  5943                           ;main.c: 319: state=E_IDLE;
  5944  00219C  0E01               	movlw	1
  5945  00219E  6E3A               	movwf	_state,c
  5946                           
  5947                           ;main.c: 320: break;
  5948  0021A0  0C01               	retlw	1
  5949  0021A2                     l6617:
  5950                           
  5951                           ; BSR set to: 0
  5952  0021A2  503A               	movf	_state,w,c
  5953                           
  5954                           ; Switch size 1, requested type "space"
  5955                           ; Number of cases is 17, Range of values is 9 to 25
  5956                           ; switch strategies available:
  5957                           ; Name         Instructions Cycles
  5958                           ; simple_byte           52    27 (average)
  5959                           ;	Chosen strategy is simple_byte
  5960  0021A4  0A09               	xorlw	9	; case 9
  5961  0021A6  E0EF               	bz	l6489
  5962  0021A8  0A03               	xorlw	3	; case 10
  5963  0021AA  E0ED               	bz	l6489
  5964  0021AC  0A01               	xorlw	1	; case 11
  5965  0021AE  E0EB               	bz	l6489
  5966  0021B0  0A07               	xorlw	7	; case 12
  5967  0021B2  E0F4               	bz	l6513
  5968  0021B4  0A02               	xorlw	2	; case 14
  5969  0021B6  E0E7               	bz	l6489
  5970  0021B8  0A01               	xorlw	1	; case 15
  5971  0021BA  E0E5               	bz	l6489
  5972  0021BC  0A1F               	xorlw	31	; case 16
  5973  0021BE  E0E3               	bz	l6489
  5974  0021C0  0A01               	xorlw	1	; case 17
  5975  0021C2  E0E1               	bz	l6489
  5976  0021C4  0A03               	xorlw	3	; case 18
  5977  0021C6  E0DF               	bz	l6489
  5978  0021C8  0A01               	xorlw	1	; case 19
  5979  0021CA  E0DD               	bz	l6489
  5980  0021CC  0A07               	xorlw	7	; case 20
  5981  0021CE  E0DB               	bz	l6489
  5982  0021D0  0A01               	xorlw	1	; case 21
  5983  0021D2  E0D9               	bz	l6489
  5984  0021D4  0A03               	xorlw	3	; case 22
  5985  0021D6  E0D7               	bz	l6489
  5986  0021D8  0A00               	xorlw	0	; case 22
  5987  0021DA  E0D5               	bz	l6489
  5988  0021DC  0A01               	xorlw	1	; case 23
  5989  0021DE  E0D3               	bz	l6489
  5990  0021E0  0A0F               	xorlw	15	; case 24
  5991  0021E2  E0D1               	bz	l6489
  5992  0021E4  0A01               	xorlw	1	; case 25
  5993  0021E6  D7DA               	goto	l6513
  5994  0021E8                     __end_of_actionsTimeoutShowSetting:
  5995                           	opt stack 0
  5996                           tblptru	equ	0xFF8
  5997                           tblptrh	equ	0xFF7
  5998                           tblptrl	equ	0xFF6
  5999                           tablat	equ	0xFF5
  6000                           prodl	equ	0xFF3
  6001                           intcon	equ	0xFF2
  6002                           intcon2	equ	0xFF1
  6003                           postinc0	equ	0xFEE
  6004                           wreg	equ	0xFE8
  6005                           indf1	equ	0xFE7
  6006                           postinc1	equ	0xFE6
  6007                           postdec1	equ	0xFE5
  6008                           fsr1h	equ	0xFE2
  6009                           fsr1l	equ	0xFE1
  6010                           indf2	equ	0xFDF
  6011                           postinc2	equ	0xFDE
  6012                           postdec2	equ	0xFDD
  6013                           plusw2	equ	0xFDB
  6014                           fsr2h	equ	0xFDA
  6015                           fsr2l	equ	0xFD9
  6016                           status	equ	0xFD8
  6017                           
  6018 ;; *************** function _pulsPinInit *****************
  6019 ;; Defined at:
  6020 ;;		line 60 in file "C:\fgr\16gb\libSwPic\oldV2\lib_sw_pic_20171007\pulsadorPin_1ms.c"
  6021 ;; Parameters:    Size  Location     Type
  6022 ;;		None
  6023 ;; Auto vars:     Size  Location     Type
  6024 ;;  i               1    6[BANK0 ] unsigned char 
  6025 ;; Return value:  Size  Location     Type
  6026 ;;		None               void
  6027 ;; Registers used:
  6028 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6029 ;; Tracked objects:
  6030 ;;		On entry : 0/0
  6031 ;;		On exit  : F/0
  6032 ;;		Unchanged: FFFFFFF0/0
  6033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6034 ;;      Params:         0       0       0       0       0       0       0       0       0
  6035 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6036 ;;      Temps:          0       6       0       0       0       0       0       0       0
  6037 ;;      Totals:         0       7       0       0       0       0       0       0       0
  6038 ;;Total ram usage:        7 bytes
  6039 ;; Hardware stack levels used:    1
  6040 ;; Hardware stack levels required when called:    6
  6041 ;; This function calls:
  6042 ;;		Nothing
  6043 ;; This function is called by:
  6044 ;;		_main
  6045 ;; This function uses a non-reentrant model
  6046 ;;
  6047                           
  6048                           	psect	text8
  6049  0021E8                     __ptext8:
  6050                           	opt stack 0
  6051  0021E8                     _pulsPinInit:
  6052                           	opt stack 24
  6053                           
  6054                           ;pulsadorPin_1ms.c: 61: char i;
  6055                           ;pulsadorPin_1ms.c: 63: for(i=0;i<PULS_PIN_CANT;i++)
  6056  0021E8  0100               	movlb	0	; () banked
  6057  0021EA  6B66               	clrf	pulsPinInit@i& (0+255),b
  6058  0021EC                     l7487:
  6059                           
  6060                           ; BSR set to: 0
  6061                           ;pulsadorPin_1ms.c: 64: {
  6062                           ;pulsadorPin_1ms.c: 65: pulsPin[i].state=!(((1UL<<(pulsPin[i].bitNum)) & (*(pulsPin[i].p
      +                          2port)))==0);
  6063  0021EC  5166               	movf	pulsPinInit@i& (0+255),w,b
  6064  0021EE  0D04               	mullw	4
  6065  0021F0  50F3               	movf	prodl,w,c
  6066  0021F2  0F3D               	addlw	low _pulsPin
  6067  0021F4  6ED9               	movwf	fsr2l,c
  6068  0021F6  6ADA               	clrf	fsr2h,c
  6069  0021F8  CFDE F060          	movff	postinc2,??_pulsPinInit
  6070  0021FC  CFDD F061          	movff	postdec2,??_pulsPinInit+1
  6071  002200  C060  FFD9         	movff	??_pulsPinInit,fsr2l
  6072  002204  C061  FFDA         	movff	??_pulsPinInit+1,fsr2h
  6073  002208  50DF               	movf	indf2,w,c
  6074  00220A  6F62               	movwf	(??_pulsPinInit+2)& (0+255),b
  6075  00220C  D82C               	call	PL23	;call to abstracted procedure
  6076  00220E  50DF               	movf	indf2,w,c
  6077  002210  0B07               	andlw	7
  6078  002212  6F63               	movwf	(??_pulsPinInit+3)& (0+255),b
  6079  002214  0E01               	movlw	1
  6080  002216  6F64               	movwf	(??_pulsPinInit+4)& (0+255),b
  6081  002218  2B63               	incf	(??_pulsPinInit+3)& (0+255),f,b
  6082  00221A  D002               	goto	u10474
  6083  00221C                     u10475:
  6084  00221C  90D8               	bcf	status,0,c
  6085  00221E  3764               	rlcf	(??_pulsPinInit+4)& (0+255),f,b
  6086  002220                     u10474:
  6087  002220  2F63               	decfsz	(??_pulsPinInit+3)& (0+255),f,b
  6088  002222  D7FC               	goto	u10475
  6089  002224  5164               	movf	(??_pulsPinInit+4)& (0+255),w,b
  6090  002226  1562               	andwf	(??_pulsPinInit+2)& (0+255),w,b
  6091  002228  0E01               	movlw	1
  6092  00222A  B4D8               	btfsc	status,2,c
  6093  00222C  0E00               	movlw	0
  6094  00222E  6F65               	movwf	(??_pulsPinInit+5)& (0+255),b
  6095  002230  D81A               	call	PL23	;call to abstracted procedure
  6096  002232  4765               	rlncf	(??_pulsPinInit+5)& (0+255),f,b
  6097  002234  4765               	rlncf	(??_pulsPinInit+5)& (0+255),f,b
  6098  002236  4765               	rlncf	(??_pulsPinInit+5)& (0+255),f,b
  6099  002238  50DF               	movf	indf2,w,c
  6100  00223A  1965               	xorwf	(??_pulsPinInit+5)& (0+255),w,b
  6101  00223C  0BF7               	andlw	-9
  6102  00223E  1965               	xorwf	(??_pulsPinInit+5)& (0+255),w,b
  6103  002240  6EDF               	movwf	indf2,c
  6104                           
  6105                           ;pulsadorPin_1ms.c: 66: pulsPin[i].prevState=pulsPin[i].state;
  6106  002242  D811               	call	PL23	;call to abstracted procedure
  6107  002244  30DF               	rrcf	indf2,w,c
  6108  002246  32E8               	rrcf	wreg,f,c
  6109  002248  32E8               	rrcf	wreg,f,c
  6110  00224A  0B01               	andlw	1
  6111  00224C  6F60               	movwf	??_pulsPinInit& (0+255),b
  6112  00224E  D80B               	call	PL23	;call to abstracted procedure
  6113  002250  3B60               	swapf	??_pulsPinInit& (0+255),f,b
  6114  002252  50DF               	movf	indf2,w,c
  6115  002254  1960               	xorwf	??_pulsPinInit& (0+255),w,b
  6116  002256  0BEF               	andlw	-17
  6117  002258  1960               	xorwf	??_pulsPinInit& (0+255),w,b
  6118  00225A  6EDF               	movwf	indf2,c
  6119                           
  6120                           ; BSR set to: 0
  6121  00225C  2B66               	incf	pulsPinInit@i& (0+255),f,b
  6122                           
  6123                           ; BSR set to: 0
  6124  00225E  0E03               	movlw	3
  6125  002260  6566               	cpfsgt	pulsPinInit@i& (0+255),b
  6126  002262  D7C4               	goto	l7487
  6127  002264  0C03               	retlw	3
  6128  002266                     __end_of_pulsPinInit:
  6129                           	opt stack 0
  6130  002266                     PL23:
  6131  002266  5166               	movf	pulsPinInit@i& (0+255),w,b
  6132  002268  0D04               	mullw	4
  6133  00226A  50F3               	movf	prodl,w,c
  6134  00226C  0F3F               	addlw	low (_pulsPin+2)
  6135  00226E  6ED9               	movwf	fsr2l,c
  6136  002270  6ADA               	clrf	fsr2h,c
  6137  002272  0012               	return	
  6138                           tblptru	equ	0xFF8
  6139                           tblptrh	equ	0xFF7
  6140                           tblptrl	equ	0xFF6
  6141                           tablat	equ	0xFF5
  6142                           prodl	equ	0xFF3
  6143                           intcon	equ	0xFF2
  6144                           intcon2	equ	0xFF1
  6145                           postinc0	equ	0xFEE
  6146                           wreg	equ	0xFE8
  6147                           indf1	equ	0xFE7
  6148                           postinc1	equ	0xFE6
  6149                           postdec1	equ	0xFE5
  6150                           fsr1h	equ	0xFE2
  6151                           fsr1l	equ	0xFE1
  6152                           indf2	equ	0xFDF
  6153                           postinc2	equ	0xFDE
  6154                           postdec2	equ	0xFDD
  6155                           plusw2	equ	0xFDB
  6156                           fsr2h	equ	0xFDA
  6157                           fsr2l	equ	0xFD9
  6158                           status	equ	0xFD8
  6159                           
  6160 ;; *************** function _systemInit *****************
  6161 ;; Defined at:
  6162 ;;		line 11 in file "C:\fgr\16gb\0000 interior\deVolt\sw\v3dig\system.c"
  6163 ;; Parameters:    Size  Location     Type
  6164 ;;		None
  6165 ;; Auto vars:     Size  Location     Type
  6166 ;;		None
  6167 ;; Return value:  Size  Location     Type
  6168 ;;		None               void
  6169 ;; Registers used:
  6170 ;;		wreg, status,2, cstack
  6171 ;; Tracked objects:
  6172 ;;		On entry : F/0
  6173 ;;		On exit  : F/0
  6174 ;;		Unchanged: FFFFFFF0/0
  6175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6176 ;;      Params:         0       0       0       0       0       0       0       0       0
  6177 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6178 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6179 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6180 ;;Total ram usage:        0 bytes
  6181 ;; Hardware stack levels used:    1
  6182 ;; Hardware stack levels required when called:    7
  6183 ;; This function calls:
  6184 ;;		_adcSetup
  6185 ;; This function is called by:
  6186 ;;		_main
  6187 ;; This function uses a non-reentrant model
  6188 ;;
  6189                           
  6190                           	psect	text9
  6191  00237A                     __ptext9:
  6192                           	opt stack 0
  6193  00237A                     _systemInit:
  6194                           	opt stack 23
  6195                           
  6196                           ; BSR set to: 0
  6197                           ;system.c: 12: OSCCONbits.SCS=0x00;
  6198                           
  6199                           ; BSR set to: 0
  6200  00237A  0EFC               	movlw	-4
  6201  00237C  16D3               	andwf	4051,f,c	;volatile
  6202                           
  6203                           ; BSR set to: 0
  6204                           ;system.c: 13: UCFGbits.UTRDIS=1;
  6205  00237E  866F               	bsf	3951,3,c	;volatile
  6206                           
  6207                           ; BSR set to: 0
  6208                           ;system.c: 14: RCONbits.IPEN=1;
  6209  002380  8ED0               	bsf	4048,7,c	;volatile
  6210                           
  6211                           ; BSR set to: 0
  6212                           ;system.c: 15: INTCON2bits.RBPU=0;
  6213  002382  9EF1               	bcf	intcon2,7,c	;volatile
  6214                           
  6215                           ; BSR set to: 0
  6216                           ;system.c: 17: IPR2bits.TMR3IP=0;
  6217  002384  92A2               	bcf	4002,1,c	;volatile
  6218                           
  6219                           ; BSR set to: 0
  6220                           ;system.c: 18: IPR1bits.ADIP=0;
  6221  002386  9C9F               	bcf	3999,6,c	;volatile
  6222                           
  6223                           ; BSR set to: 0
  6224                           ;system.c: 21: adcSetup();
  6225  002388  ECAF  F013         	call	_adcSetup	;wreg free
  6226                           
  6227                           ; BSR set to: 0
  6228                           ;system.c: 23: { T0CONbits.T08BIT=1; T0CONbits.T0CS=0; T0CONbits.PSA=0; T0CONbits.T0PS=0
      +                          x07; TMR0=241; T0CONbits.TMR0ON=1; };
  6229  00238C  8CD5               	bsf	4053,6,c	;volatile
  6230                           
  6231                           ; BSR set to: 0
  6232  00238E  9AD5               	bcf	4053,5,c	;volatile
  6233                           
  6234                           ; BSR set to: 0
  6235  002390  96D5               	bcf	4053,3,c	;volatile
  6236                           
  6237                           ; BSR set to: 0
  6238  002392  0E07               	movlw	7
  6239  002394  12D5               	iorwf	4053,f,c	;volatile
  6240                           
  6241                           ; BSR set to: 0
  6242  002396  6AD7               	clrf	4055,c	;volatile
  6243  002398  0EF1               	movlw	241
  6244  00239A  6ED6               	movwf	4054,c	;volatile
  6245                           
  6246                           ; BSR set to: 0
  6247  00239C  8ED5               	bsf	4053,7,c	;volatile
  6248                           
  6249                           ; BSR set to: 0
  6250                           ;system.c: 24: { T3CONbits.TMR3CS=0; T3CONbits.T3CKPS=0x03; T3CONbits.T3SYNC=1; TMR3=640
      +                          36UL; T3CONbits.TMR3ON=1; T3CONbits.RD16=1; };
  6251  00239E  92B1               	bcf	4017,1,c	;volatile
  6252                           
  6253                           ; BSR set to: 0
  6254  0023A0  0E30               	movlw	48
  6255  0023A2  12B1               	iorwf	4017,f,c	;volatile
  6256                           
  6257                           ; BSR set to: 0
  6258  0023A4  84B1               	bsf	4017,2,c	;volatile
  6259                           
  6260                           ; BSR set to: 0
  6261  0023A6  0EFA               	movlw	250
  6262  0023A8  6EB3               	movwf	4019,c	;volatile
  6263  0023AA  0E24               	movlw	36
  6264  0023AC  6EB2               	movwf	4018,c	;volatile
  6265                           
  6266                           ; BSR set to: 0
  6267  0023AE  80B1               	bsf	4017,0,c	;volatile
  6268                           
  6269                           ; BSR set to: 0
  6270  0023B0  8EB1               	bsf	4017,7,c	;volatile
  6271                           
  6272                           ; BSR set to: 0
  6273                           ;system.c: 26: { TRISA0=0; TRISA1=0; TRISA5=0; TRISA3=0; TRISA4=0; TRISA2=0; TRISB7=0; T
      +                          RISB1=0; TRISB2=0; TRISB4=0; TRISB6=0; TRISB5=0; TRISB3=0; TRISC6=0; };
  6274  0023B2  9092               	bcf	3986,0,c	;volatile
  6275                           
  6276                           ; BSR set to: 0
  6277  0023B4  9292               	bcf	3986,1,c	;volatile
  6278                           
  6279                           ; BSR set to: 0
  6280  0023B6  9A92               	bcf	3986,5,c	;volatile
  6281                           
  6282                           ; BSR set to: 0
  6283  0023B8  9692               	bcf	3986,3,c	;volatile
  6284                           
  6285                           ; BSR set to: 0
  6286  0023BA  9892               	bcf	3986,4,c	;volatile
  6287                           
  6288                           ; BSR set to: 0
  6289  0023BC  9492               	bcf	3986,2,c	;volatile
  6290                           
  6291                           ; BSR set to: 0
  6292  0023BE  9E93               	bcf	3987,7,c	;volatile
  6293                           
  6294                           ; BSR set to: 0
  6295  0023C0  9293               	bcf	3987,1,c	;volatile
  6296                           
  6297                           ; BSR set to: 0
  6298  0023C2  9493               	bcf	3987,2,c	;volatile
  6299                           
  6300                           ; BSR set to: 0
  6301  0023C4  9893               	bcf	3987,4,c	;volatile
  6302                           
  6303                           ; BSR set to: 0
  6304  0023C6  9C93               	bcf	3987,6,c	;volatile
  6305                           
  6306                           ; BSR set to: 0
  6307  0023C8  9A93               	bcf	3987,5,c	;volatile
  6308                           
  6309                           ; BSR set to: 0
  6310  0023CA  9693               	bcf	3987,3,c	;volatile
  6311                           
  6312                           ; BSR set to: 0
  6313  0023CC  9C94               	bcf	3988,6,c	;volatile
  6314                           
  6315                           ; BSR set to: 0
  6316                           ;system.c: 27: { PORTAbits.RA0=0; PORTAbits.RA1=0; PORTAbits.RA5=0; PORTAbits.RA3=0; POR
      +                          TAbits.RA4=0; PORTAbits.RA2=0; PORTBbits.RB7=0; PORTBbits.RB1=0; PORTBbits.RB2=0; PORTBb
      +                          its.RB4=0; PORTBbits.RB6=0; PORTBbits.RB5=0; PORTBbits.RB3=0; PORTCbits.RC6=0; };
  6317  0023CE  9080               	bcf	3968,0,c	;volatile
  6318                           
  6319                           ; BSR set to: 0
  6320  0023D0  9280               	bcf	3968,1,c	;volatile
  6321                           
  6322                           ; BSR set to: 0
  6323  0023D2  9A80               	bcf	3968,5,c	;volatile
  6324                           
  6325                           ; BSR set to: 0
  6326  0023D4  9680               	bcf	3968,3,c	;volatile
  6327                           
  6328                           ; BSR set to: 0
  6329  0023D6  9880               	bcf	3968,4,c	;volatile
  6330                           
  6331                           ; BSR set to: 0
  6332                           
  6333                           ; BSR set to: 0
  6334                           
  6335                           ; BSR set to: 0
  6336                           
  6337                           ; BSR set to: 0
  6338                           
  6339                           ; BSR set to: 0
  6340                           
  6341                           ; BSR set to: 0
  6342  0023D8  ECB7  F00A         	call	PL24	;call to abstracted procedure
  6343                           
  6344                           ; BSR set to: 0
  6345  0023DC  9A81               	bcf	3969,5,c	;volatile
  6346                           
  6347                           ; BSR set to: 0
  6348  0023DE  9681               	bcf	3969,3,c	;volatile
  6349                           
  6350                           ; BSR set to: 0
  6351  0023E0  9C82               	bcf	3970,6,c	;volatile
  6352                           
  6353                           ; BSR set to: 0
  6354                           ;system.c: 29: INTCONbits.TMR0IE=1;
  6355  0023E2  8AF2               	bsf	intcon,5,c	;volatile
  6356                           
  6357                           ; BSR set to: 0
  6358                           ;system.c: 30: PIE2bits.TMR3IE=1;
  6359  0023E4  82A0               	bsf	4000,1,c	;volatile
  6360                           
  6361                           ; BSR set to: 0
  6362                           ;system.c: 32: INTCONbits.PEIE=1;
  6363  0023E6  8CF2               	bsf	intcon,6,c	;volatile
  6364                           
  6365                           ; BSR set to: 0
  6366                           ;system.c: 33: INTCONbits.GIE=1;
  6367  0023E8  8EF2               	bsf	intcon,7,c	;volatile
  6368                           
  6369                           ; BSR set to: 0
  6370                           ;system.c: 34: INTCONbits.GIEH=1;
  6371  0023EA  8EF2               	bsf	intcon,7,c	;volatile
  6372                           
  6373                           ; BSR set to: 0
  6374                           ;system.c: 35: INTCONbits.GIEL=1;
  6375  0023EC  8CF2               	bsf	intcon,6,c	;volatile
  6376                           
  6377                           ; BSR set to: 0
  6378  0023EE  0C24               	retlw	36
  6379  0023F0                     __end_of_systemInit:
  6380                           	opt stack 0
  6381                           tblptru	equ	0xFF8
  6382                           tblptrh	equ	0xFF7
  6383                           tblptrl	equ	0xFF6
  6384                           tablat	equ	0xFF5
  6385                           prodl	equ	0xFF3
  6386                           intcon	equ	0xFF2
  6387                           intcon2	equ	0xFF1
  6388                           postinc0	equ	0xFEE
  6389                           wreg	equ	0xFE8
  6390                           indf1	equ	0xFE7
  6391                           postinc1	equ	0xFE6
  6392                           postdec1	equ	0xFE5
  6393                           fsr1h	equ	0xFE2
  6394                           fsr1l	equ	0xFE1
  6395                           indf2	equ	0xFDF
  6396                           postinc2	equ	0xFDE
  6397                           postdec2	equ	0xFDD
  6398                           plusw2	equ	0xFDB
  6399                           fsr2h	equ	0xFDA
  6400                           fsr2l	equ	0xFD9
  6401                           status	equ	0xFD8
  6402                           
  6403 ;; *************** function _timerDriver *****************
  6404 ;; Defined at:
  6405 ;;		line 10 in file "C:\fgr\16gb\libSwPic\oldV2\lib_sw_pic_20171007\timer.c"
  6406 ;; Parameters:    Size  Location     Type
  6407 ;;  i               1    wreg     unsigned char 
  6408 ;; Auto vars:     Size  Location     Type
  6409 ;;  i               1    3[BANK0 ] unsigned char 
  6410 ;; Return value:  Size  Location     Type
  6411 ;;		None               void
  6412 ;; Registers used:
  6413 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6414 ;; Tracked objects:
  6415 ;;		On entry : E/1
  6416 ;;		On exit  : E/0
  6417 ;;		Unchanged: FFFFFFF0/0
  6418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6419 ;;      Params:         0       0       0       0       0       0       0       0       0
  6420 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6421 ;;      Temps:          0       3       0       0       0       0       0       0       0
  6422 ;;      Totals:         0       4       0       0       0       0       0       0       0
  6423 ;;Total ram usage:        4 bytes
  6424 ;; Hardware stack levels used:    1
  6425 ;; Hardware stack levels required when called:    6
  6426 ;; This function calls:
  6427 ;;		Nothing
  6428 ;; This function is called by:
  6429 ;;		_main
  6430 ;; This function uses a non-reentrant model
  6431 ;;
  6432                           
  6433                           	psect	text10
  6434  001E1E                     __ptext10:
  6435                           	opt stack 0
  6436  001E1E                     _timerDriver:
  6437                           	opt stack 24
  6438                           
  6439                           ; BSR set to: 0
  6440                           ;timerDriver@i stored from wreg
  6441  001E1E  CFE8 F063          	movff	wreg,timerDriver@i
  6442                           
  6443                           ;timer.c: 12: if(!timerMem[i].pause && timerMem[i].prescaler>0)
  6444  001E22  0100               	movlb	0	; () banked
  6445  001E24  D850               	call	PL12	;call to abstracted procedure
  6446  001E26  50DF               	movf	indf2,w,c
  6447  001E28  6F61               	movwf	(??_timerDriver+1)& (0+255),b
  6448  001E2A  B561               	btfsc	(??_timerDriver+1)& (0+255),2,b
  6449  001E2C  0012               	return	
  6450                           
  6451                           ; BSR set to: 0
  6452  001E2E  5163               	movf	timerDriver@i& (0+255),w,b
  6453  001E30  ECFB  F00E         	call	PL13	;call to abstracted procedure
  6454  001E34  CFDE F060          	movff	postinc2,??_timerDriver
  6455  001E38  CFDE F061          	movff	postinc2,??_timerDriver+1
  6456  001E3C  CFDE F062          	movff	postinc2,??_timerDriver+2
  6457  001E40  5162               	movf	(??_timerDriver+2)& (0+255),w,b
  6458  001E42  0A80               	xorlw	128
  6459  001E44  0F80               	addlw	128
  6460  001E46  E105               	bnz	u10515
  6461  001E48  0E00               	movlw	0
  6462  001E4A  5D61               	subwf	(??_timerDriver+1)& (0+255),w,b
  6463  001E4C  E102               	bnz	u10515
  6464  001E4E  0E01               	movlw	1
  6465  001E50  5D60               	subwf	??_timerDriver& (0+255),w,b
  6466  001E52                     u10515:
  6467  001E52  A0D8               	btfss	status,0,c
  6468  001E54  0012               	return	
  6469                           
  6470                           ; BSR set to: 0
  6471                           ;timer.c: 13: {
  6472                           ;timer.c: 14: timerMem[i].prescaler--;
  6473  001E56  5163               	movf	timerDriver@i& (0+255),w,b
  6474  001E58  ECFB  F00E         	call	PL13	;call to abstracted procedure
  6475  001E5C  0EFF               	movlw	255
  6476  001E5E  06DE               	decf	postinc2,f,c
  6477  001E60  22DE               	addwfc	postinc2,f,c
  6478  001E62  22DD               	addwfc	postdec2,f,c
  6479                           
  6480                           ;timer.c: 15: if(timerMem[i].prescaler==0)
  6481  001E64  0100               	movlb	0	; () banked
  6482  001E66  5163               	movf	timerDriver@i& (0+255),w,b
  6483  001E68  0D04               	mullw	4
  6484  001E6A  0101               	movlb	1	; () banked
  6485  001E6C  0E8B               	movlw	low _timerMem
  6486  001E6E  24F3               	addwf	prodl,w,c
  6487  001E70  6ED9               	movwf	fsr2l,c
  6488  001E72  6ADA               	clrf	fsr2h,c
  6489  001E74  0E01               	movlw	high _timerMem
  6490  001E76  22DA               	addwfc	fsr2h,f,c
  6491  001E78  50DE               	movf	postinc2,w,c
  6492  001E7A  10DE               	iorwf	postinc2,w,c
  6493  001E7C  10DD               	iorwf	postdec2,w,c
  6494  001E7E  A4D8               	btfss	status,2,c
  6495  001E80  0012               	return	
  6496                           
  6497                           ; BSR set to: 1
  6498                           ;timer.c: 16: {
  6499                           ;timer.c: 17: timerMem[i].flag=1;
  6500  001E82  0100               	movlb	0	; () banked
  6501  001E84  D820               	call	PL12	;call to abstracted procedure
  6502  001E86  0E02               	movlw	2
  6503  001E88  12DF               	iorwf	223,f,c
  6504                           
  6505                           ;timer.c: 18: if(timerMem[i].loop) timerMem[i].prescaler=timerDelayConstant[i];
  6506  001E8A  D81D               	call	PL12	;call to abstracted procedure
  6507  001E8C  50DF               	movf	indf2,w,c
  6508  001E8E  6F61               	movwf	(??_timerDriver+1)& (0+255),b
  6509  001E90  A161               	btfss	(??_timerDriver+1)& (0+255),0,b
  6510  001E92  0012               	return	
  6511                           
  6512                           ; BSR set to: 0
  6513  001E94  5163               	movf	timerDriver@i& (0+255),w,b
  6514  001E96  0D03               	mullw	3
  6515  001E98  0E00               	movlw	low _timerDelayConstant
  6516  001E9A  24F3               	addwf	prodl,w,c
  6517  001E9C  6ED9               	movwf	fsr2l,c
  6518  001E9E  6ADA               	clrf	fsr2h,c
  6519  001EA0  0E01               	movlw	high _timerDelayConstant
  6520  001EA2  22DA               	addwfc	fsr2h,f,c
  6521  001EA4  5163               	movf	timerDriver@i& (0+255),w,b
  6522  001EA6  0D04               	mullw	4
  6523  001EA8  0101               	movlb	1	; () banked
  6524  001EAA  0E8B               	movlw	low _timerMem
  6525  001EAC  24F3               	addwf	prodl,w,c
  6526  001EAE  6EE1               	movwf	fsr1l,c
  6527  001EB0  6AE2               	clrf	fsr1h,c
  6528  001EB2  0E01               	movlw	high _timerMem
  6529  001EB4  22E2               	addwfc	fsr1h,f,c
  6530  001EB6  CFDE FFE6          	movff	postinc2,postinc1
  6531  001EBA  CFDE FFE6          	movff	postinc2,postinc1
  6532  001EBE  CFDE FFE5          	movff	postinc2,postdec1
  6533  001EC2  52E5               	movf	postdec1,f,c
  6534  001EC4  0012               	return	
  6535  001EC6                     __end_of_timerDriver:
  6536                           	opt stack 0
  6537  001EC6                     PL12:
  6538  001EC6  5163               	movf	timerDriver@i& (0+255),w,b
  6539  001EC8  0D04               	mullw	4
  6540  001ECA  CFF3 F060          	movff	prodl,??_timerDriver
  6541  001ECE  0E03               	movlw	3
  6542  001ED0  2760               	addwf	??_timerDriver& (0+255),f,b
  6543  001ED2  0E8B               	movlw	low _timerMem
  6544  001ED4  2560               	addwf	??_timerDriver& (0+255),w,b
  6545  001ED6  6ED9               	movwf	fsr2l,c
  6546  001ED8  6ADA               	clrf	fsr2h,c
  6547  001EDA  0E01               	movlw	high _timerMem
  6548  001EDC  22DA               	addwfc	fsr2h,f,c
  6549  001EDE  0012               	return	
  6550                           tblptru	equ	0xFF8
  6551                           tblptrh	equ	0xFF7
  6552                           tblptrl	equ	0xFF6
  6553                           tablat	equ	0xFF5
  6554                           prodl	equ	0xFF3
  6555                           intcon	equ	0xFF2
  6556                           intcon2	equ	0xFF1
  6557                           postinc0	equ	0xFEE
  6558                           wreg	equ	0xFE8
  6559                           indf1	equ	0xFE7
  6560                           postinc1	equ	0xFE6
  6561                           postdec1	equ	0xFE5
  6562                           fsr1h	equ	0xFE2
  6563                           fsr1l	equ	0xFE1
  6564                           indf2	equ	0xFDF
  6565                           postinc2	equ	0xFDE
  6566                           postdec2	equ	0xFDD
  6567                           plusw2	equ	0xFDB
  6568                           fsr2h	equ	0xFDA
  6569                           fsr2l	equ	0xFD9
  6570                           status	equ	0xFD8
  6571                           
  6572 ;; *************** function _uintToStr *****************
  6573 ;; Defined at:
  6574 ;;		line 286 in file "C:\fgr\16gb\0000 interior\deVolt\sw\v3dig\stdio.c"
  6575 ;; Parameters:    Size  Location     Type
  6576 ;;  num             2    7[BANK0 ] unsigned int 
  6577 ;;  str             1    9[BANK0 ] PTR unsigned char 
  6578 ;;		 -> muxBuffer(5), 
  6579 ;;  strLen          1   10[BANK0 ] unsigned char 
  6580 ;; Auto vars:     Size  Location     Type
  6581 ;;  i               1   11[BANK0 ] unsigned char 
  6582 ;; Return value:  Size  Location     Type
  6583 ;;		None               void
  6584 ;; Registers used:
  6585 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6586 ;; Tracked objects:
  6587 ;;		On entry : F/0
  6588 ;;		On exit  : F/0
  6589 ;;		Unchanged: FFFFFFF0/0
  6590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6591 ;;      Params:         0       4       0       0       0       0       0       0       0
  6592 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6593 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6594 ;;      Totals:         0       5       0       0       0       0       0       0       0
  6595 ;;Total ram usage:        5 bytes
  6596 ;; Hardware stack levels used:    1
  6597 ;; Hardware stack levels required when called:    7
  6598 ;; This function calls:
  6599 ;;		___lwmod
  6600 ;;		___lwdiv
  6601 ;; This function is called by:
  6602 ;;		_main
  6603 ;; This function uses a non-reentrant model
  6604 ;;
  6605                           
  6606                           	psect	text11
  6607  002442                     __ptext11:
  6608                           	opt stack 0
  6609  002442                     _uintToStr:
  6610                           	opt stack 23
  6611                           
  6612                           ; BSR set to: 0
  6613                           ;stdio.c: 287: char i;
  6614                           ;stdio.c: 289: str+=strLen-1;
  6615  002442  056A               	decf	uintToStr@strLen& (0+255),w,b
  6616  002444  2769               	addwf	uintToStr@str& (0+255),f,b
  6617                           
  6618                           ; BSR set to: 0
  6619                           ;stdio.c: 290: for(i=0;i<strLen;i++)
  6620  002446  6B6B               	clrf	uintToStr@i& (0+255),b
  6621  002448  D01E               	goto	l7675
  6622  00244A                     l7667:
  6623                           
  6624                           ; BSR set to: 0
  6625                           ;stdio.c: 291: {
  6626                           ;stdio.c: 292: *(str--)='0'+(num%10);
  6627  00244A  5169               	movf	uintToStr@str& (0+255),w,b
  6628  00244C  6ED9               	movwf	fsr2l,c
  6629  00244E  6ADA               	clrf	fsr2h,c
  6630  002450  C067  F060         	movff	uintToStr@num,?___lwmod
  6631  002454  C068  F061         	movff	uintToStr@num+1,?___lwmod+1
  6632  002458  6B63               	clrf	(?___lwmod+3)& (0+255),b
  6633  00245A  0E0A               	movlw	10
  6634  00245C  6F62               	movwf	(?___lwmod+2)& (0+255),b
  6635  00245E  ECD8  F012         	call	___lwmod	;wreg free
  6636  002462  5160               	movf	?___lwmod& (0+255),w,b
  6637  002464  0F30               	addlw	48
  6638  002466  6EDF               	movwf	indf2,c
  6639                           
  6640                           ; BSR set to: 0
  6641  002468  0769               	decf	uintToStr@str& (0+255),f,b
  6642                           
  6643                           ; BSR set to: 0
  6644                           ;stdio.c: 293: num/=10;
  6645  00246A  C067  F060         	movff	uintToStr@num,?___lwdiv
  6646  00246E  C068  F061         	movff	uintToStr@num+1,?___lwdiv+1
  6647  002472  6B63               	clrf	(?___lwdiv+3)& (0+255),b
  6648  002474  0E0A               	movlw	10
  6649  002476  6F62               	movwf	(?___lwdiv+2)& (0+255),b
  6650  002478  EC48  F012         	call	___lwdiv	;wreg free
  6651  00247C  C060  F067         	movff	?___lwdiv,uintToStr@num
  6652  002480  C061  F068         	movff	?___lwdiv+1,uintToStr@num+1
  6653                           
  6654                           ; BSR set to: 0
  6655  002484  2B6B               	incf	uintToStr@i& (0+255),f,b
  6656  002486                     l7675:
  6657                           
  6658                           ; BSR set to: 0
  6659  002486  516A               	movf	uintToStr@strLen& (0+255),w,b
  6660  002488  5D6B               	subwf	uintToStr@i& (0+255),w,b
  6661  00248A  B0D8               	btfsc	status,0,c
  6662  00248C  0012               	return	
  6663  00248E  D7DD               	goto	l7667
  6664  002490                     __end_of_uintToStr:
  6665                           	opt stack 0
  6666                           tblptru	equ	0xFF8
  6667                           tblptrh	equ	0xFF7
  6668                           tblptrl	equ	0xFF6
  6669                           tablat	equ	0xFF5
  6670                           prodl	equ	0xFF3
  6671                           intcon	equ	0xFF2
  6672                           intcon2	equ	0xFF1
  6673                           postinc0	equ	0xFEE
  6674                           wreg	equ	0xFE8
  6675                           indf1	equ	0xFE7
  6676                           postinc1	equ	0xFE6
  6677                           postdec1	equ	0xFE5
  6678                           fsr1h	equ	0xFE2
  6679                           fsr1l	equ	0xFE1
  6680                           indf2	equ	0xFDF
  6681                           postinc2	equ	0xFDE
  6682                           postdec2	equ	0xFDD
  6683                           plusw2	equ	0xFDB
  6684                           fsr2h	equ	0xFDA
  6685                           fsr2l	equ	0xFD9
  6686                           status	equ	0xFD8
  6687                           
  6688 ;; *************** function _adcDriver *****************
  6689 ;; Defined at:
  6690 ;;		line 9 in file "C:\fgr\16gb\0000 interior\deVolt\sw\v3dig\adc.c"
  6691 ;; Parameters:    Size  Location     Type
  6692 ;;		None
  6693 ;; Auto vars:     Size  Location     Type
  6694 ;;  ch2Cnv          1    8[BANK0 ] unsigned char 
  6695 ;; Return value:  Size  Location     Type
  6696 ;;		None               void
  6697 ;; Registers used:
  6698 ;;		wreg, status,2, status,0
  6699 ;; Tracked objects:
  6700 ;;		On entry : 0/1
  6701 ;;		On exit  : F/0
  6702 ;;		Unchanged: FFFFFFF0/0
  6703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6704 ;;      Params:         0       0       0       0       0       0       0       0       0
  6705 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6706 ;;      Temps:          0       8       0       0       0       0       0       0       0
  6707 ;;      Totals:         0       9       0       0       0       0       0       0       0
  6708 ;;Total ram usage:        9 bytes
  6709 ;; Hardware stack levels used:    1
  6710 ;; Hardware stack levels required when called:    6
  6711 ;; This function calls:
  6712 ;;		Nothing
  6713 ;; This function is called by:
  6714 ;;		_main
  6715 ;; This function uses a non-reentrant model
  6716 ;;
  6717                           
  6718                           	psect	text12
  6719  002032                     __ptext12:
  6720                           	opt stack 0
  6721  002032                     _adcDriver:
  6722                           	opt stack 24
  6723                           
  6724                           ;adc.c: 10: char ch2Cnv;
  6725                           ;adc.c: 12: if(adcStruct.flgs2convert && !adcStruct.inProcessFlg)
  6726                           
  6727                           ; BSR set to: 0
  6728  002032  0100               	movlb	0	; () banked
  6729  002034  51B0               	movf	(_adcStruct+3)& (0+255),w,b
  6730  002036  11AF               	iorwf	(_adcStruct+2)& (0+255),w,b
  6731  002038  A4D8               	btfss	status,2,c
  6732                           
  6733                           ; BSR set to: 0
  6734  00203A  B3AD               	btfsc	_adcStruct& (0+255),1,b
  6735  00203C  0012               	return	
  6736  00203E                     l694:
  6737                           
  6738                           ; BSR set to: 0
  6739                           ;adc.c: 15: {
  6740                           ;adc.c: 16: ch2Cnv=adcStruct.nx2convert;
  6741  00203E  C0B1  F068         	movff	_adcStruct+4,adcDriver@ch2Cnv
  6742                           
  6743                           ; BSR set to: 0
  6744                           ;adc.c: 17: if(adcStruct.nx2convert<=12) adcStruct.nx2convert++;
  6745  002042  0E0D               	movlw	13
  6746  002044  61B1               	cpfslt	(_adcStruct+4)& (0+255),b
  6747  002046  D002               	goto	l695
  6748                           
  6749                           ; BSR set to: 0
  6750  002048  2BB1               	incf	(_adcStruct+4)& (0+255),f,b
  6751  00204A  D001               	goto	l7617
  6752  00204C                     l695:
  6753                           
  6754                           ; BSR set to: 0
  6755                           ;adc.c: 18: else adcStruct.nx2convert=0;
  6756  00204C  6BB1               	clrf	(_adcStruct+4)& (0+255),b
  6757  00204E                     l7617:
  6758                           
  6759                           ; BSR set to: 0
  6760                           ;adc.c: 19: }
  6761                           ;adc.c: 20: while(!((1UL<<(ch2Cnv)) & (adcStruct.flgs2convert)));
  6762  00204E  0E01               	movlw	1
  6763  002050  6F60               	movwf	??_adcDriver& (0+255),b
  6764  002052  6B61               	clrf	(??_adcDriver+1)& (0+255),b
  6765  002054  6B62               	clrf	(??_adcDriver+2)& (0+255),b
  6766  002056  6B63               	clrf	(??_adcDriver+3)& (0+255),b
  6767  002058  5168               	movf	adcDriver@ch2Cnv& (0+255),w,b
  6768  00205A  2AE8               	incf	wreg,f,c
  6769  00205C  D005               	goto	u10570
  6770  00205E                     u10575:
  6771  00205E  90D8               	bcf	status,0,c
  6772  002060  3760               	rlcf	??_adcDriver& (0+255),f,b
  6773  002062  3761               	rlcf	(??_adcDriver+1)& (0+255),f,b
  6774  002064  3762               	rlcf	(??_adcDriver+2)& (0+255),f,b
  6775  002066  3763               	rlcf	(??_adcDriver+3)& (0+255),f,b
  6776  002068                     u10570:
  6777  002068  2EE8               	decfsz	wreg,f,c
  6778  00206A  D7F9               	goto	u10575
  6779  00206C  51AF               	movf	(_adcStruct+2)& (0+255),w,b
  6780  00206E  1560               	andwf	??_adcDriver& (0+255),w,b
  6781  002070  6F64               	movwf	(??_adcDriver+4)& (0+255),b
  6782  002072  51B0               	movf	(_adcStruct+3)& (0+255),w,b
  6783  002074  1561               	andwf	(??_adcDriver+1)& (0+255),w,b
  6784  002076  6F65               	movwf	(??_adcDriver+5)& (0+255),b
  6785  002078  6B66               	clrf	(??_adcDriver+6)& (0+255),b
  6786  00207A  6B67               	clrf	(??_adcDriver+7)& (0+255),b
  6787  00207C  5167               	movf	(??_adcDriver+7)& (0+255),w,b
  6788  00207E  1164               	iorwf	(??_adcDriver+4)& (0+255),w,b
  6789  002080  1165               	iorwf	(??_adcDriver+5)& (0+255),w,b
  6790  002082  1166               	iorwf	(??_adcDriver+6)& (0+255),w,b
  6791  002084  E0DC               	bz	l694
  6792                           
  6793                           ; BSR set to: 0
  6794                           ;adc.c: 22: ADCON0bits.CHS=ch2Cnv;
  6795  002086  C068  F060         	movff	adcDriver@ch2Cnv,??_adcDriver
  6796  00208A  4760               	rlncf	??_adcDriver& (0+255),f,b
  6797  00208C  4760               	rlncf	??_adcDriver& (0+255),f,b
  6798  00208E  50C2               	movf	4034,w,c	;volatile
  6799  002090  1960               	xorwf	??_adcDriver& (0+255),w,b
  6800  002092  0BC3               	andlw	-61
  6801  002094  1960               	xorwf	??_adcDriver& (0+255),w,b
  6802  002096  6EC2               	movwf	4034,c	;volatile
  6803                           
  6804                           ;adc.c: 25: ((adcStruct.flgs2convert) &= ~(1UL << (ch2Cnv)));
  6805  002098  C068  F060         	movff	adcDriver@ch2Cnv,??_adcDriver
  6806  00209C  0E01               	movlw	1
  6807  00209E  6F61               	movwf	(??_adcDriver+1)& (0+255),b
  6808  0020A0  6B62               	clrf	(??_adcDriver+2)& (0+255),b
  6809  0020A2  2B60               	incf	??_adcDriver& (0+255),f,b
  6810  0020A4  D003               	goto	u10594
  6811  0020A6                     u10595:
  6812  0020A6  90D8               	bcf	status,0,c
  6813  0020A8  3761               	rlcf	(??_adcDriver+1)& (0+255),f,b
  6814  0020AA  3762               	rlcf	(??_adcDriver+2)& (0+255),f,b
  6815  0020AC                     u10594:
  6816  0020AC  2F60               	decfsz	??_adcDriver& (0+255),f,b
  6817  0020AE  D7FB               	goto	u10595
  6818  0020B0  1D61               	comf	(??_adcDriver+1)& (0+255),w,b
  6819  0020B2  6F63               	movwf	(??_adcDriver+3)& (0+255),b
  6820  0020B4  1D62               	comf	(??_adcDriver+2)& (0+255),w,b
  6821  0020B6  6F64               	movwf	(??_adcDriver+4)& (0+255),b
  6822  0020B8  5163               	movf	(??_adcDriver+3)& (0+255),w,b
  6823  0020BA  17AF               	andwf	(_adcStruct+2)& (0+255),f,b
  6824  0020BC  5164               	movf	(??_adcDriver+4)& (0+255),w,b
  6825  0020BE  17B0               	andwf	(_adcStruct+3)& (0+255),f,b
  6826                           
  6827                           ; BSR set to: 0
  6828                           ;adc.c: 26: adcStruct.inProcessFlg=1;
  6829  0020C0  83AD               	bsf	_adcStruct& (0+255),1,b
  6830                           
  6831                           ; BSR set to: 0
  6832                           ;adc.c: 27: adcStruct.completeFlg=0;
  6833  0020C2  91AD               	bcf	_adcStruct& (0+255),0,b
  6834                           
  6835                           ; BSR set to: 0
  6836                           ;adc.c: 28: ADCON0bits.GODONE=1;
  6837  0020C4  82C2               	bsf	4034,1,c	;volatile
  6838                           
  6839                           ; BSR set to: 0
  6840  0020C6  0012               	return	
  6841  0020C8                     __end_of_adcDriver:
  6842                           	opt stack 0
  6843                           tblptru	equ	0xFF8
  6844                           tblptrh	equ	0xFF7
  6845                           tblptrl	equ	0xFF6
  6846                           tablat	equ	0xFF5
  6847                           prodl	equ	0xFF3
  6848                           intcon	equ	0xFF2
  6849                           intcon2	equ	0xFF1
  6850                           postinc0	equ	0xFEE
  6851                           wreg	equ	0xFE8
  6852                           indf1	equ	0xFE7
  6853                           postinc1	equ	0xFE6
  6854                           postdec1	equ	0xFE5
  6855                           fsr1h	equ	0xFE2
  6856                           fsr1l	equ	0xFE1
  6857                           indf2	equ	0xFDF
  6858                           postinc2	equ	0xFDE
  6859                           postdec2	equ	0xFDD
  6860                           plusw2	equ	0xFDB
  6861                           fsr2h	equ	0xFDA
  6862                           fsr2l	equ	0xFD9
  6863                           status	equ	0xFD8
  6864                           
  6865 ;; *************** function _getConv *****************
  6866 ;; Defined at:
  6867 ;;		line 33 in file "C:\fgr\16gb\0000 interior\deVolt\sw\v3dig\adc.c"
  6868 ;; Parameters:    Size  Location     Type
  6869 ;;		None
  6870 ;; Auto vars:     Size  Location     Type
  6871 ;;		None
  6872 ;; Return value:  Size  Location     Type
  6873 ;;                  2    0[BANK0 ] int 
  6874 ;; Registers used:
  6875 ;;		None
  6876 ;; Tracked objects:
  6877 ;;		On entry : F/0
  6878 ;;		On exit  : F/0
  6879 ;;		Unchanged: FFFFFFF0/0
  6880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6881 ;;      Params:         0       2       0       0       0       0       0       0       0
  6882 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6883 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6884 ;;      Totals:         0       2       0       0       0       0       0       0       0
  6885 ;;Total ram usage:        2 bytes
  6886 ;; Hardware stack levels used:    1
  6887 ;; Hardware stack levels required when called:    6
  6888 ;; This function calls:
  6889 ;;		Nothing
  6890 ;; This function is called by:
  6891 ;;		_main
  6892 ;; This function uses a non-reentrant model
  6893 ;;
  6894                           
  6895                           	psect	text13
  6896  0027AC                     __ptext13:
  6897                           	opt stack 0
  6898  0027AC                     _getConv:
  6899                           	opt stack 24
  6900                           
  6901                           ; BSR set to: 0
  6902                           ;adc.c: 34: adcStruct.inProcessFlg=0;
  6903                           
  6904                           ; BSR set to: 0
  6905  0027AC  93AD               	bcf	_adcStruct& (0+255),1,b
  6906                           
  6907                           ;adc.c: 35: adcStruct.completeFlg=0;
  6908  0027AE  91AD               	bcf	_adcStruct& (0+255),0,b
  6909                           
  6910                           ;adc.c: 36: return ADRES;
  6911  0027B0  CFC3 F060          	movff	4035,?_getConv	;volatile
  6912  0027B4  CFC4 F061          	movff	4036,?_getConv+1	;volatile
  6913                           
  6914                           ; BSR set to: 0
  6915  0027B8  0012               	return	
  6916  0027BA                     __end_of_getConv:
  6917                           	opt stack 0
  6918                           tblptru	equ	0xFF8
  6919                           tblptrh	equ	0xFF7
  6920                           tblptrl	equ	0xFF6
  6921                           tablat	equ	0xFF5
  6922                           prodl	equ	0xFF3
  6923                           intcon	equ	0xFF2
  6924                           intcon2	equ	0xFF1
  6925                           postinc0	equ	0xFEE
  6926                           wreg	equ	0xFE8
  6927                           indf1	equ	0xFE7
  6928                           postinc1	equ	0xFE6
  6929                           postdec1	equ	0xFE5
  6930                           fsr1h	equ	0xFE2
  6931                           fsr1l	equ	0xFE1
  6932                           indf2	equ	0xFDF
  6933                           postinc2	equ	0xFDE
  6934                           postdec2	equ	0xFDD
  6935                           plusw2	equ	0xFDB
  6936                           fsr2h	equ	0xFDA
  6937                           fsr2l	equ	0xFD9
  6938                           status	equ	0xFD8
  6939                           
  6940 ;; *************** function _iir *****************
  6941 ;; Defined at:
  6942 ;;		line 21 in file "C:\fgr\16gb\0000 interior\deVolt\sw\v3dig\iir.c"
  6943 ;; Parameters:    Size  Location     Type
  6944 ;;  NewSample       3   53[BANK0 ] float 
  6945 ;; Auto vars:     Size  Location     Type
  6946 ;;  BCoef           9   65[BANK0 ] float [3]
  6947 ;;  ACoef           9   56[BANK0 ] float [3]
  6948 ;;  n               1   74[BANK0 ] unsigned char 
  6949 ;; Return value:  Size  Location     Type
  6950 ;;                  3   53[BANK0 ] float 
  6951 ;; Registers used:
  6952 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6953 ;; Tracked objects:
  6954 ;;		On entry : F/0
  6955 ;;		On exit  : F/0
  6956 ;;		Unchanged: FFFFFFF0/0
  6957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6958 ;;      Params:         0       3       0       0       0       0       0       0       0
  6959 ;;      Locals:         0      19       0       0       0       0       0       0       0
  6960 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6961 ;;      Totals:         0      22       0       0       0       0       0       0       0
  6962 ;;Total ram usage:       22 bytes
  6963 ;; Hardware stack levels used:    1
  6964 ;; Hardware stack levels required when called:    9
  6965 ;; This function calls:
  6966 ;;		___ftmul
  6967 ;;		___ftsub
  6968 ;;		___asftadd
  6969 ;;		___asftdiv
  6970 ;; This function is called by:
  6971 ;;		_main
  6972 ;; This function uses a non-reentrant model
  6973 ;;
  6974                           
  6975                           	psect	text14
  6976  0018DA                     __ptext14:
  6977                           	opt stack 0
  6978  0018DA                     _iir:
  6979                           	opt stack 21
  6980                           
  6981                           ; BSR set to: 0
  6982                           ;iir.c: 22: float ACoef[2+1]={ 0.00094547653094439164,0.00189095306188878330,0.000945476
      +                          53094439164};
  6983                           
  6984                           ; BSR set to: 0
  6985  0018DA  EE21  F027         	lfsr	2,iir@F4235
  6986  0018DE  EE10  F098         	lfsr	1,iir@ACoef
  6987  0018E2  0E09               	movlw	9
  6988  0018E4                     u10601:
  6989  0018E4  CFDE FFE6          	movff	postinc2,postinc1
  6990  0018E8  2EE8               	decfsz	wreg,f,c
  6991  0018EA  D7FC               	goto	u10601
  6992                           
  6993                           ;iir.c: 23: float BCoef[2+1]={1.00000000000000000000,-1.91119706742607360000,0.914975834
      +                          80143418000};
  6994  0018EC  EE21  F030         	lfsr	2,iir@F4237
  6995  0018F0  EE10  F0A1         	lfsr	1,iir@BCoef
  6996  0018F4  0E09               	movlw	9
  6997  0018F6                     u10611:
  6998  0018F6  CFDE FFE6          	movff	postinc2,postinc1
  6999  0018FA  2EE8               	decfsz	wreg,f,c
  7000  0018FC  D7FC               	goto	u10611
  7001                           
  7002                           ; BSR set to: 0
  7003                           ;iir.c: 26: char n;
  7004                           ;iir.c: 28: for(n=2;n>0;n--)
  7005  0018FE  0E02               	movlw	2
  7006  001900  6FAA               	movwf	iir@n& (0+255),b
  7007  001902                     l7637:
  7008                           
  7009                           ; BSR set to: 0
  7010                           ;iir.c: 29: {
  7011                           ;iir.c: 30: x[n]=x[n-1];
  7012  001902  51AA               	movf	iir@n& (0+255),w,b
  7013  001904  0D03               	mullw	3
  7014  001906  0EBC               	movlw	low (_x+65533)
  7015  001908  24F3               	addwf	prodl,w,c
  7016  00190A  6ED9               	movwf	fsr2l,c
  7017  00190C  6ADA               	clrf	fsr2h,c
  7018  00190E  0E01               	movlw	high (_x+65533)
  7019  001910  22DA               	addwfc	fsr2h,f,c
  7020  001912  0100               	movlb	0	; () banked
  7021  001914  51AA               	movf	iir@n& (0+255),w,b
  7022  001916  0D03               	mullw	3
  7023  001918  0EBF               	movlw	low _x
  7024  00191A  24F3               	addwf	prodl,w,c
  7025  00191C  6EE1               	movwf	fsr1l,c
  7026  00191E  6AE2               	clrf	fsr1h,c
  7027  001920  0E01               	movlw	high _x
  7028  001922  22E2               	addwfc	fsr1h,f,c
  7029  001924  CFDE FFE6          	movff	postinc2,postinc1
  7030  001928  CFDE FFE6          	movff	postinc2,postinc1
  7031  00192C  CFDE FFE5          	movff	postinc2,postdec1
  7032                           
  7033                           ;iir.c: 31: y[n]=y[n-1];
  7034  001930  51AA               	movf	iir@n& (0+255),w,b
  7035  001932  0D03               	mullw	3
  7036  001934  50F3               	movf	prodl,w,c
  7037  001936  0FBA               	addlw	low (_y+253)
  7038  001938  6ED9               	movwf	fsr2l,c
  7039  00193A  6ADA               	clrf	fsr2h,c
  7040  00193C  51AA               	movf	iir@n& (0+255),w,b
  7041  00193E  0D03               	mullw	3
  7042  001940  50F3               	movf	prodl,w,c
  7043  001942  0FBD               	addlw	low _y
  7044  001944  6EE1               	movwf	fsr1l,c
  7045  001946  6AE2               	clrf	fsr1h,c
  7046  001948  CFDE FFE6          	movff	postinc2,postinc1
  7047  00194C  CFDE FFE6          	movff	postinc2,postinc1
  7048  001950  CFDE FFE5          	movff	postinc2,postdec1
  7049  001954  52E5               	movf	postdec1,f,c
  7050                           
  7051                           ; BSR set to: 0
  7052  001956  07AA               	decf	iir@n& (0+255),f,b
  7053                           
  7054                           ; BSR set to: 0
  7055  001958  67AA               	tstfsz	iir@n& (0+255),b
  7056  00195A  D7D3               	goto	l7637
  7057                           
  7058                           ; BSR set to: 0
  7059                           ;iir.c: 32: }
  7060                           ;iir.c: 35: x[0]=NewSample;
  7061  00195C  C095  F1BF         	movff	iir@NewSample,_x
  7062  001960  C096  F1C0         	movff	iir@NewSample+1,_x+1
  7063  001964  C097  F1C1         	movff	iir@NewSample+2,_x+2
  7064                           
  7065                           ; BSR set to: 0
  7066                           ;iir.c: 36: y[0]=ACoef[0]*x[0];
  7067  001968  C098  F068         	movff	iir@ACoef,?___ftmul
  7068  00196C  C099  F069         	movff	iir@ACoef+1,?___ftmul+1
  7069  001970  C09A  F06A         	movff	iir@ACoef+2,?___ftmul+2
  7070  001974  C1BF  F06B         	movff	_x,?___ftmul+3
  7071  001978  C1C0  F06C         	movff	_x+1,?___ftmul+4
  7072  00197C  C1C1  F06D         	movff	_x+2,?___ftmul+5
  7073  001980  ECB8  F00D         	call	___ftmul	;wreg free
  7074  001984  C068  F0BD         	movff	?___ftmul,_y
  7075  001988  C069  F0BE         	movff	?___ftmul+1,_y+1
  7076  00198C  C06A  F0BF         	movff	?___ftmul+2,_y+2
  7077                           
  7078                           ; BSR set to: 0
  7079                           ;iir.c: 37: for(n=1;n<=2;n++) y[0]+=ACoef[n]*x[n]-BCoef[n]*y[n];
  7080  001990  0E01               	movlw	1
  7081  001992  6FAA               	movwf	iir@n& (0+255),b
  7082  001994                     l7651:
  7083                           
  7084                           ; BSR set to: 0
  7085  001994  51AA               	movf	iir@n& (0+255),w,b
  7086  001996  0D03               	mullw	3
  7087  001998  50F3               	movf	prodl,w,c
  7088  00199A  0FBD               	addlw	low _y
  7089  00199C  6ED9               	movwf	fsr2l,c
  7090  00199E  6ADA               	clrf	fsr2h,c
  7091  0019A0  D84B               	call	PL31	;call to abstracted procedure
  7092  0019A2  0FA1               	addlw	low iir@BCoef
  7093  0019A4  6ED9               	movwf	fsr2l,c
  7094  0019A6  6ADA               	clrf	fsr2h,c
  7095  0019A8  CFDE F068          	movff	postinc2,?___ftmul
  7096  0019AC  CFDE F069          	movff	postinc2,?___ftmul+1
  7097  0019B0  CFDD F06A          	movff	postdec2,?___ftmul+2
  7098  0019B4  ECB8  F00D         	call	___ftmul	;wreg free
  7099  0019B8  C068  F08E         	movff	?___ftmul,?___ftsub+3
  7100  0019BC  C069  F08F         	movff	?___ftmul+1,?___ftsub+4
  7101  0019C0  C06A  F090         	movff	?___ftmul+2,?___ftsub+5
  7102  0019C4  51AA               	movf	iir@n& (0+255),w,b
  7103  0019C6  0D03               	mullw	3
  7104  0019C8  0EBF               	movlw	low _x
  7105  0019CA  24F3               	addwf	prodl,w,c
  7106  0019CC  6ED9               	movwf	fsr2l,c
  7107  0019CE  6ADA               	clrf	fsr2h,c
  7108  0019D0  0E01               	movlw	high _x
  7109  0019D2  22DA               	addwfc	fsr2h,f,c
  7110  0019D4  0100               	movlb	0	; () banked
  7111  0019D6  D830               	call	PL31	;call to abstracted procedure
  7112  0019D8  0F98               	addlw	low iir@ACoef
  7113  0019DA  6ED9               	movwf	fsr2l,c
  7114  0019DC  6ADA               	clrf	fsr2h,c
  7115  0019DE  CFDE F068          	movff	postinc2,?___ftmul
  7116  0019E2  CFDE F069          	movff	postinc2,?___ftmul+1
  7117  0019E6  CFDD F06A          	movff	postdec2,?___ftmul+2
  7118  0019EA  ECB8  F00D         	call	___ftmul	;wreg free
  7119  0019EE  C068  F08B         	movff	?___ftmul,?___ftsub
  7120  0019F2  C069  F08C         	movff	?___ftmul+1,?___ftsub+1
  7121  0019F6  C06A  F08D         	movff	?___ftmul+2,?___ftsub+2
  7122  0019FA  EC6D  F013         	call	___ftsub	;wreg free
  7123  0019FE  C08B  F091         	movff	?___ftsub,?___asftadd
  7124  001A02  C08C  F092         	movff	?___ftsub+1,?___asftadd+1
  7125  001A06  C08D  F093         	movff	?___ftsub+2,?___asftadd+2
  7126  001A0A  0EBD               	movlw	_y& (0+255)
  7127  001A0C  ECF7  F012         	call	___asftadd
  7128                           
  7129                           ; BSR set to: 0
  7130  001A10  2BAA               	incf	iir@n& (0+255),f,b
  7131                           
  7132                           ; BSR set to: 0
  7133  001A12  0E02               	movlw	2
  7134  001A14  65AA               	cpfsgt	iir@n& (0+255),b
  7135  001A16  D7BE               	goto	l7651
  7136                           
  7137                           ; BSR set to: 0
  7138                           ;iir.c: 38: y[0]/=BCoef[0];
  7139  001A18  C0A1  F07D         	movff	iir@BCoef,?___asftdiv
  7140  001A1C  C0A2  F07E         	movff	iir@BCoef+1,?___asftdiv+1
  7141  001A20  C0A3  F07F         	movff	iir@BCoef+2,?___asftdiv+2
  7142  001A24  0EBD               	movlw	_y& (0+255)
  7143  001A26  EC15  F013         	call	___asftdiv
  7144                           
  7145                           ; BSR set to: 0
  7146                           ;iir.c: 41: return y[0];
  7147  001A2A  C0BD  F095         	movff	_y,?_iir
  7148  001A2E  C0BE  F096         	movff	_y+1,?_iir+1
  7149  001A32  C0BF  F097         	movff	_y+2,?_iir+2
  7150                           
  7151                           ; BSR set to: 0
  7152  001A36  0012               	return	
  7153  001A38                     __end_of_iir:
  7154                           	opt stack 0
  7155  001A38                     PL31:
  7156  001A38  CFDE F06B          	movff	postinc2,?___ftmul+3
  7157  001A3C  CFDE F06C          	movff	postinc2,?___ftmul+4
  7158  001A40  CFDD F06D          	movff	postdec2,?___ftmul+5
  7159  001A44  51AA               	movf	iir@n& (0+255),w,b
  7160  001A46  0D03               	mullw	3
  7161  001A48  50F3               	movf	prodl,w,c
  7162  001A4A  0012               	return	
  7163                           tblptru	equ	0xFF8
  7164                           tblptrh	equ	0xFF7
  7165                           tblptrl	equ	0xFF6
  7166                           tablat	equ	0xFF5
  7167                           prodl	equ	0xFF3
  7168                           intcon	equ	0xFF2
  7169                           intcon2	equ	0xFF1
  7170                           postinc0	equ	0xFEE
  7171                           wreg	equ	0xFE8
  7172                           indf1	equ	0xFE7
  7173                           postinc1	equ	0xFE6
  7174                           postdec1	equ	0xFE5
  7175                           fsr1h	equ	0xFE2
  7176                           fsr1l	equ	0xFE1
  7177                           indf2	equ	0xFDF
  7178                           postinc2	equ	0xFDE
  7179                           postdec2	equ	0xFDD
  7180                           plusw2	equ	0xFDB
  7181                           fsr2h	equ	0xFDA
  7182                           fsr2l	equ	0xFD9
  7183                           status	equ	0xFD8
  7184                           
  7185 ;; *************** function _adcSetup *****************
  7186 ;; Defined at:
  7187 ;;		line 48 in file "C:\fgr\16gb\0000 interior\deVolt\sw\v3dig\adc.c"
  7188 ;; Parameters:    Size  Location     Type
  7189 ;;		None
  7190 ;; Auto vars:     Size  Location     Type
  7191 ;;		None
  7192 ;; Return value:  Size  Location     Type
  7193 ;;		None               void
  7194 ;; Registers used:
  7195 ;;		wreg, status,2
  7196 ;; Tracked objects:
  7197 ;;		On entry : F/0
  7198 ;;		On exit  : F/0
  7199 ;;		Unchanged: FFFFFFF0/0
  7200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7201 ;;      Params:         0       0       0       0       0       0       0       0       0
  7202 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7203 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7204 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7205 ;;Total ram usage:        0 bytes
  7206 ;; Hardware stack levels used:    1
  7207 ;; Hardware stack levels required when called:    6
  7208 ;; This function calls:
  7209 ;;		Nothing
  7210 ;; This function is called by:
  7211 ;;		_systemInit
  7212 ;; This function uses a non-reentrant model
  7213 ;;
  7214                           
  7215                           	psect	text15
  7216  00275E                     __ptext15:
  7217                           	opt stack 0
  7218  00275E                     _adcSetup:
  7219                           	opt stack 23
  7220                           
  7221                           ; BSR set to: 0
  7222                           ;adc.c: 49: ADCON1bits.PCFG=0x0F;
  7223                           
  7224                           ; BSR set to: 0
  7225  00275E  0E0F               	movlw	15
  7226  002760  12C1               	iorwf	4033,f,c	;volatile
  7227                           
  7228                           ;adc.c: 50: ADCON2bits.ADCS=0x06;
  7229  002762  50C0               	movf	4032,w,c	;volatile
  7230  002764  0BF8               	andlw	-8
  7231  002766  0906               	iorlw	6
  7232  002768  6EC0               	movwf	4032,c	;volatile
  7233                           
  7234                           ;adc.c: 51: ADCON2bits.ACQT=0x00;
  7235  00276A  0EC7               	movlw	-57
  7236  00276C  16C0               	andwf	4032,f,c	;volatile
  7237                           
  7238                           ; BSR set to: 0
  7239                           ;adc.c: 52: ADFM=1;
  7240  00276E  8EC0               	bsf	4032,7,c	;volatile
  7241                           
  7242                           ; BSR set to: 0
  7243                           ;adc.c: 53: ADCON0bits.ADON=1;
  7244  002770  80C2               	bsf	4034,0,c	;volatile
  7245                           
  7246                           ; BSR set to: 0
  7247                           ;adc.c: 54: PIR1bits.ADIF=0;
  7248  002772  9C9E               	bcf	3998,6,c	;volatile
  7249                           
  7250                           ; BSR set to: 0
  7251                           ;adc.c: 55: PIE1bits.ADIE=1;
  7252  002774  8C9D               	bsf	3997,6,c	;volatile
  7253                           
  7254                           ; BSR set to: 0
  7255  002776  0CC7               	retlw	199
  7256  002778                     __end_of_adcSetup:
  7257                           	opt stack 0
  7258                           tblptru	equ	0xFF8
  7259                           tblptrh	equ	0xFF7
  7260                           tblptrl	equ	0xFF6
  7261                           tablat	equ	0xFF5
  7262                           prodl	equ	0xFF3
  7263                           intcon	equ	0xFF2
  7264                           intcon2	equ	0xFF1
  7265                           postinc0	equ	0xFEE
  7266                           wreg	equ	0xFE8
  7267                           indf1	equ	0xFE7
  7268                           postinc1	equ	0xFE6
  7269                           postdec1	equ	0xFE5
  7270                           fsr1h	equ	0xFE2
  7271                           fsr1l	equ	0xFE1
  7272                           indf2	equ	0xFDF
  7273                           postinc2	equ	0xFDE
  7274                           postdec2	equ	0xFDD
  7275                           plusw2	equ	0xFDB
  7276                           fsr2h	equ	0xFDA
  7277                           fsr2l	equ	0xFD9
  7278                           status	equ	0xFD8
  7279                           
  7280 ;; *************** function ___awtoft *****************
  7281 ;; Defined at:
  7282 ;;		line 33 in file "C:\Program Files (x86)\HI-TECH Software\PICC-18\9.80\sources\awtoft.c"
  7283 ;; Parameters:    Size  Location     Type
  7284 ;;  c               2    8[BANK0 ] int 
  7285 ;; Auto vars:     Size  Location     Type
  7286 ;;  sign            1   11[BANK0 ] unsigned char 
  7287 ;; Return value:  Size  Location     Type
  7288 ;;                  3    8[BANK0 ] float 
  7289 ;; Registers used:
  7290 ;;		wreg, status,2, status,0, cstack
  7291 ;; Tracked objects:
  7292 ;;		On entry : 0/0
  7293 ;;		On exit  : F/0
  7294 ;;		Unchanged: FFFFFFF0/0
  7295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7296 ;;      Params:         0       3       0       0       0       0       0       0       0
  7297 ;;      Locals:         0       1       0       0       0       0       0       0       0
  7298 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7299 ;;      Totals:         0       4       0       0       0       0       0       0       0
  7300 ;;Total ram usage:        4 bytes
  7301 ;; Hardware stack levels used:    1
  7302 ;; Hardware stack levels required when called:    7
  7303 ;; This function calls:
  7304 ;;		___ftpack
  7305 ;; This function is called by:
  7306 ;;		_incVar
  7307 ;;		_decVar
  7308 ;;		_main
  7309 ;; This function uses a non-reentrant model
  7310 ;;
  7311                           
  7312                           	psect	text16
  7313  0026A2                     __ptext16:
  7314                           	opt stack 0
  7315  0026A2                     ___awtoft:
  7316                           	opt stack 22
  7317                           
  7318                           ; BSR set to: 0
  7319  0026A2  0100               	movlb	0	; () banked
  7320  0026A4  6B6B               	clrf	___awtoft@sign& (0+255),b
  7321  0026A6  AF69               	btfss	(___awtoft@c+1)& (0+255),7,b
  7322  0026A8  D006               	goto	l7725
  7323                           
  7324                           ; BSR set to: 0
  7325  0026AA  6D68               	negf	___awtoft@c& (0+255),b
  7326  0026AC  1F69               	comf	(___awtoft@c+1)& (0+255),f,b
  7327  0026AE  B0D8               	btfsc	status,0,c
  7328  0026B0  2B69               	incf	(___awtoft@c+1)& (0+255),f,b
  7329                           
  7330                           ; BSR set to: 0
  7331  0026B2  0E01               	movlw	1
  7332  0026B4  6F6B               	movwf	___awtoft@sign& (0+255),b
  7333  0026B6                     l7725:
  7334                           
  7335                           ; BSR set to: 0
  7336  0026B6  C068  F060         	movff	___awtoft@c,?___ftpack
  7337  0026BA  C069  F061         	movff	___awtoft@c+1,?___ftpack+1
  7338  0026BE  6B62               	clrf	(?___ftpack+2)& (0+255),b
  7339  0026C0  0E8E               	movlw	142
  7340  0026C2  6F63               	movwf	(?___ftpack+3)& (0+255),b
  7341  0026C4  C06B  F064         	movff	___awtoft@sign,?___ftpack+4
  7342  0026C8  EC64  F010         	call	___ftpack	;wreg free
  7343  0026CC  C060  F068         	movff	?___ftpack,?___awtoft
  7344  0026D0  C061  F069         	movff	?___ftpack+1,?___awtoft+1
  7345  0026D4  C062  F06A         	movff	?___ftpack+2,?___awtoft+2
  7346                           
  7347                           ; BSR set to: 0
  7348  0026D8  0012               	return	
  7349  0026DA                     __end_of___awtoft:
  7350                           	opt stack 0
  7351                           tblptru	equ	0xFF8
  7352                           tblptrh	equ	0xFF7
  7353                           tblptrl	equ	0xFF6
  7354                           tablat	equ	0xFF5
  7355                           prodl	equ	0xFF3
  7356                           intcon	equ	0xFF2
  7357                           intcon2	equ	0xFF1
  7358                           postinc0	equ	0xFEE
  7359                           wreg	equ	0xFE8
  7360                           indf1	equ	0xFE7
  7361                           postinc1	equ	0xFE6
  7362                           postdec1	equ	0xFE5
  7363                           fsr1h	equ	0xFE2
  7364                           fsr1l	equ	0xFE1
  7365                           indf2	equ	0xFDF
  7366                           postinc2	equ	0xFDE
  7367                           postdec2	equ	0xFDD
  7368                           plusw2	equ	0xFDB
  7369                           fsr2h	equ	0xFDA
  7370                           fsr2l	equ	0xFD9
  7371                           status	equ	0xFD8
  7372                           
  7373 ;; *************** function ___fttol *****************
  7374 ;; Defined at:
  7375 ;;		line 45 in file "C:\Program Files (x86)\HI-TECH Software\PICC-18\9.80\sources\fttol.c"
  7376 ;; Parameters:    Size  Location     Type
  7377 ;;  f1              3    0[BANK0 ] float 
  7378 ;; Auto vars:     Size  Location     Type
  7379 ;;  lval            4   10[BANK0 ] unsigned long 
  7380 ;;  exp1            1   14[BANK0 ] unsigned char 
  7381 ;;  sign1           1    9[BANK0 ] unsigned char 
  7382 ;; Return value:  Size  Location     Type
  7383 ;;                  4    0[BANK0 ] long 
  7384 ;; Registers used:
  7385 ;;		wreg, status,2, status,0
  7386 ;; Tracked objects:
  7387 ;;		On entry : F/0
  7388 ;;		On exit  : F/0
  7389 ;;		Unchanged: FFFFFFF0/0
  7390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7391 ;;      Params:         0       4       0       0       0       0       0       0       0
  7392 ;;      Locals:         0       6       0       0       0       0       0       0       0
  7393 ;;      Temps:          0       5       0       0       0       0       0       0       0
  7394 ;;      Totals:         0      15       0       0       0       0       0       0       0
  7395 ;;Total ram usage:       15 bytes
  7396 ;; Hardware stack levels used:    1
  7397 ;; Hardware stack levels required when called:    6
  7398 ;; This function calls:
  7399 ;;		Nothing
  7400 ;; This function is called by:
  7401 ;;		_main
  7402 ;; This function uses a non-reentrant model
  7403 ;;
  7404                           
  7405                           	psect	text17
  7406  001EE0                     __ptext17:
  7407                           	opt stack 0
  7408  001EE0                     ___fttol:
  7409                           	opt stack 24
  7410                           
  7411                           ; BSR set to: 0
  7412                           
  7413                           ; BSR set to: 0
  7414  001EE0  0E0F               	movlw	15
  7415  001EE2  D844               	call	PL19	;call to abstracted procedure
  7416  001EE4  6F6E               	movwf	___fttol@exp1& (0+255),b
  7417  001EE6  0100               	movlb	0	; () banked
  7418  001EE8  676E               	tstfsz	___fttol@exp1& (0+255),b
  7419  001EEA  D005               	goto	l7883
  7420  001EEC                     l7881:
  7421                           
  7422                           ; BSR set to: 0
  7423  001EEC  6B60               	clrf	?___fttol& (0+255),b
  7424  001EEE  6B61               	clrf	(?___fttol+1)& (0+255),b
  7425  001EF0  6B62               	clrf	(?___fttol+2)& (0+255),b
  7426  001EF2  6B63               	clrf	(?___fttol+3)& (0+255),b
  7427  001EF4  0012               	return	
  7428  001EF6                     l7883:
  7429                           
  7430                           ; BSR set to: 0
  7431  001EF6  0E17               	movlw	23
  7432  001EF8  D839               	call	PL19	;call to abstracted procedure
  7433  001EFA  6F69               	movwf	___fttol@sign1& (0+255),b
  7434                           
  7435                           ; BSR set to: 0
  7436  001EFC  8F61               	bsf	(___fttol@f1+1)& (0+255),7,b
  7437                           
  7438                           ; BSR set to: 0
  7439  001EFE  6B62               	clrf	(___fttol@f1+2)& (0+255),b
  7440                           
  7441                           ; BSR set to: 0
  7442  001F00  5160               	movf	___fttol@f1& (0+255),w,b
  7443  001F02  6F6A               	movwf	___fttol@lval& (0+255),b
  7444  001F04  5161               	movf	(___fttol@f1+1)& (0+255),w,b
  7445  001F06  6F6B               	movwf	(___fttol@lval+1)& (0+255),b
  7446  001F08  5162               	movf	(___fttol@f1+2)& (0+255),w,b
  7447  001F0A  6F6C               	movwf	(___fttol@lval+2)& (0+255),b
  7448  001F0C  6B6D               	clrf	(___fttol@lval+3)& (0+255),b
  7449                           
  7450                           ; BSR set to: 0
  7451  001F0E  0E8E               	movlw	142
  7452  001F10  5F6E               	subwf	___fttol@exp1& (0+255),f,b
  7453                           
  7454                           ; BSR set to: 0
  7455  001F12  AF6E               	btfss	___fttol@exp1& (0+255),7,b
  7456  001F14  D00C               	goto	l7903
  7457                           
  7458                           ; BSR set to: 0
  7459  001F16  516E               	movf	___fttol@exp1& (0+255),w,b
  7460  001F18  0A80               	xorlw	128
  7461  001F1A  0F8F               	addlw	143
  7462  001F1C  E3E7               	bnc	l7881
  7463  001F1E                     l7899:
  7464                           
  7465                           ; BSR set to: 0
  7466  001F1E  90D8               	bcf	status,0,c
  7467  001F20  336D               	rrcf	(___fttol@lval+3)& (0+255),f,b
  7468  001F22  336C               	rrcf	(___fttol@lval+2)& (0+255),f,b
  7469  001F24  336B               	rrcf	(___fttol@lval+1)& (0+255),f,b
  7470  001F26  336A               	rrcf	___fttol@lval& (0+255),f,b
  7471                           
  7472                           ; BSR set to: 0
  7473  001F28  3F6E               	incfsz	___fttol@exp1& (0+255),f,b
  7474  001F2A  D7F9               	goto	l7899
  7475  001F2C  D00C               	goto	l7911
  7476  001F2E                     l7903:
  7477                           
  7478                           ; BSR set to: 0
  7479  001F2E  0E17               	movlw	23
  7480  001F30  656E               	cpfsgt	___fttol@exp1& (0+255),b
  7481  001F32  D007               	goto	l7909
  7482  001F34  D7DB               	goto	l7881
  7483  001F36                     l7907:
  7484                           
  7485                           ; BSR set to: 0
  7486  001F36  90D8               	bcf	status,0,c
  7487  001F38  376A               	rlcf	___fttol@lval& (0+255),f,b
  7488  001F3A  376B               	rlcf	(___fttol@lval+1)& (0+255),f,b
  7489  001F3C  376C               	rlcf	(___fttol@lval+2)& (0+255),f,b
  7490  001F3E  376D               	rlcf	(___fttol@lval+3)& (0+255),f,b
  7491  001F40  076E               	decf	___fttol@exp1& (0+255),f,b
  7492  001F42                     l7909:
  7493                           
  7494                           ; BSR set to: 0
  7495  001F42  676E               	tstfsz	___fttol@exp1& (0+255),b
  7496  001F44  D7F8               	goto	l7907
  7497  001F46                     l7911:
  7498                           
  7499                           ; BSR set to: 0
  7500  001F46  5169               	movf	___fttol@sign1& (0+255),w,b
  7501  001F48  E008               	bz	l7915
  7502                           
  7503                           ; BSR set to: 0
  7504  001F4A  1F6D               	comf	(___fttol@lval+3)& (0+255),f,b
  7505  001F4C  1F6C               	comf	(___fttol@lval+2)& (0+255),f,b
  7506  001F4E  1F6B               	comf	(___fttol@lval+1)& (0+255),f,b
  7507  001F50  6D6A               	negf	___fttol@lval& (0+255),b
  7508  001F52  0E00               	movlw	0
  7509  001F54  236B               	addwfc	(___fttol@lval+1)& (0+255),f,b
  7510  001F56  236C               	addwfc	(___fttol@lval+2)& (0+255),f,b
  7511  001F58  236D               	addwfc	(___fttol@lval+3)& (0+255),f,b
  7512  001F5A                     l7915:
  7513                           
  7514                           ; BSR set to: 0
  7515  001F5A  C06A  F060         	movff	___fttol@lval,?___fttol
  7516  001F5E  C06B  F061         	movff	___fttol@lval+1,?___fttol+1
  7517  001F62  C06C  F062         	movff	___fttol@lval+2,?___fttol+2
  7518  001F66  C06D  F063         	movff	___fttol@lval+3,?___fttol+3
  7519                           
  7520                           ; BSR set to: 0
  7521  001F6A  0012               	return	
  7522  001F6C                     __end_of___fttol:
  7523                           	opt stack 0
  7524  001F6C                     PL19:
  7525  001F6C  6F64               	movwf	??___fttol& (0+255),b
  7526  001F6E  C060  F065         	movff	___fttol@f1,??___fttol+1
  7527  001F72  C061  F066         	movff	___fttol@f1+1,??___fttol+2
  7528  001F76  C062  F067         	movff	___fttol@f1+2,??___fttol+3
  7529  001F7A  2964               	incf	??___fttol& (0+255),w,b
  7530  001F7C  6F68               	movwf	(??___fttol+4)& (0+255),b
  7531  001F7E  D004               	goto	u11050
  7532  001F80                     u11055:
  7533  001F80  90D8               	bcf	status,0,c
  7534  001F82  3367               	rrcf	(??___fttol+3)& (0+255),f,b
  7535  001F84  3366               	rrcf	(??___fttol+2)& (0+255),f,b
  7536  001F86  3365               	rrcf	(??___fttol+1)& (0+255),f,b
  7537  001F88                     u11050:
  7538  001F88  2F68               	decfsz	(??___fttol+4)& (0+255),f,b
  7539  001F8A  D7FA               	goto	u11055
  7540  001F8C  5165               	movf	(??___fttol+1)& (0+255),w,b
  7541  001F8E  0012               	return	
  7542                           tblptru	equ	0xFF8
  7543                           tblptrh	equ	0xFF7
  7544                           tblptrl	equ	0xFF6
  7545                           tablat	equ	0xFF5
  7546                           prodl	equ	0xFF3
  7547                           intcon	equ	0xFF2
  7548                           intcon2	equ	0xFF1
  7549                           postinc0	equ	0xFEE
  7550                           wreg	equ	0xFE8
  7551                           indf1	equ	0xFE7
  7552                           postinc1	equ	0xFE6
  7553                           postdec1	equ	0xFE5
  7554                           fsr1h	equ	0xFE2
  7555                           fsr1l	equ	0xFE1
  7556                           indf2	equ	0xFDF
  7557                           postinc2	equ	0xFDE
  7558                           postdec2	equ	0xFDD
  7559                           plusw2	equ	0xFDB
  7560                           fsr2h	equ	0xFDA
  7561                           fsr2l	equ	0xFD9
  7562                           status	equ	0xFD8
  7563                           
  7564 ;; *************** function ___ftsub *****************
  7565 ;; Defined at:
  7566 ;;		line 22 in file "C:\Program Files (x86)\HI-TECH Software\PICC-18\9.80\sources\ftsub.c"
  7567 ;; Parameters:    Size  Location     Type
  7568 ;;  f1              3   43[BANK0 ] float 
  7569 ;;  f2              3   46[BANK0 ] float 
  7570 ;; Auto vars:     Size  Location     Type
  7571 ;;		None
  7572 ;; Return value:  Size  Location     Type
  7573 ;;                  3   43[BANK0 ] float 
  7574 ;; Registers used:
  7575 ;;		wreg, status,2, status,0, cstack
  7576 ;; Tracked objects:
  7577 ;;		On entry : F/0
  7578 ;;		On exit  : F/0
  7579 ;;		Unchanged: FFFFFFF0/0
  7580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7581 ;;      Params:         0       6       0       0       0       0       0       0       0
  7582 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7583 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7584 ;;      Totals:         0       6       0       0       0       0       0       0       0
  7585 ;;Total ram usage:        6 bytes
  7586 ;; Hardware stack levels used:    1
  7587 ;; Hardware stack levels required when called:    8
  7588 ;; This function calls:
  7589 ;;		___ftadd
  7590 ;; This function is called by:
  7591 ;;		_iir
  7592 ;; This function uses a non-reentrant model
  7593 ;;
  7594                           
  7595                           	psect	text18
  7596  0026DA                     __ptext18:
  7597                           	opt stack 0
  7598  0026DA                     ___ftsub:
  7599                           	opt stack 21
  7600                           
  7601                           ; BSR set to: 0
  7602                           
  7603                           ; BSR set to: 0
  7604  0026DA  0E80               	movlw	128
  7605  0026DC  1B90               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  7606                           
  7607                           ; BSR set to: 0
  7608  0026DE  C08B  F07D         	movff	___ftsub@f1,?___ftadd
  7609  0026E2  C08C  F07E         	movff	___ftsub@f1+1,?___ftadd+1
  7610  0026E6  C08D  F07F         	movff	___ftsub@f1+2,?___ftadd+2
  7611  0026EA  C08E  F080         	movff	___ftsub@f2,?___ftadd+3
  7612  0026EE  C08F  F081         	movff	___ftsub@f2+1,?___ftadd+4
  7613  0026F2  C090  F082         	movff	___ftsub@f2+2,?___ftadd+5
  7614  0026F6  ECB3  F00B         	call	___ftadd	;wreg free
  7615  0026FA  C07D  F08B         	movff	?___ftadd,?___ftsub
  7616  0026FE  C07E  F08C         	movff	?___ftadd+1,?___ftsub+1
  7617  002702  C07F  F08D         	movff	?___ftadd+2,?___ftsub+2
  7618                           
  7619                           ; BSR set to: 0
  7620  002706  0012               	return	
  7621  002708                     __end_of___ftsub:
  7622                           	opt stack 0
  7623                           tblptru	equ	0xFF8
  7624                           tblptrh	equ	0xFF7
  7625                           tblptrl	equ	0xFF6
  7626                           tablat	equ	0xFF5
  7627                           prodl	equ	0xFF3
  7628                           intcon	equ	0xFF2
  7629                           intcon2	equ	0xFF1
  7630                           postinc0	equ	0xFEE
  7631                           wreg	equ	0xFE8
  7632                           indf1	equ	0xFE7
  7633                           postinc1	equ	0xFE6
  7634                           postdec1	equ	0xFE5
  7635                           fsr1h	equ	0xFE2
  7636                           fsr1l	equ	0xFE1
  7637                           indf2	equ	0xFDF
  7638                           postinc2	equ	0xFDE
  7639                           postdec2	equ	0xFDD
  7640                           plusw2	equ	0xFDB
  7641                           fsr2h	equ	0xFDA
  7642                           fsr2l	equ	0xFD9
  7643                           status	equ	0xFD8
  7644                           
  7645 ;; *************** function ___lwdiv *****************
  7646 ;; Defined at:
  7647 ;;		line 10 in file "C:\Program Files (x86)\HI-TECH Software\PICC-18\9.80\sources\lwdiv.c"
  7648 ;; Parameters:    Size  Location     Type
  7649 ;;  dividend        2    0[BANK0 ] unsigned int 
  7650 ;;  divisor         2    2[BANK0 ] unsigned int 
  7651 ;; Auto vars:     Size  Location     Type
  7652 ;;  quotient        2    5[BANK0 ] unsigned int 
  7653 ;;  counter         1    4[BANK0 ] unsigned char 
  7654 ;; Return value:  Size  Location     Type
  7655 ;;                  2    0[BANK0 ] unsigned int 
  7656 ;; Registers used:
  7657 ;;		wreg, status,2, status,0
  7658 ;; Tracked objects:
  7659 ;;		On entry : F/0
  7660 ;;		On exit  : F/0
  7661 ;;		Unchanged: FFFFFFF0/0
  7662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7663 ;;      Params:         0       4       0       0       0       0       0       0       0
  7664 ;;      Locals:         0       3       0       0       0       0       0       0       0
  7665 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7666 ;;      Totals:         0       7       0       0       0       0       0       0       0
  7667 ;;Total ram usage:        7 bytes
  7668 ;; Hardware stack levels used:    1
  7669 ;; Hardware stack levels required when called:    6
  7670 ;; This function calls:
  7671 ;;		Nothing
  7672 ;; This function is called by:
  7673 ;;		_uintToStr
  7674 ;; This function uses a non-reentrant model
  7675 ;;
  7676                           
  7677                           	psect	text19
  7678  002490                     __ptext19:
  7679                           	opt stack 0
  7680  002490                     ___lwdiv:
  7681                           	opt stack 23
  7682                           
  7683                           ; BSR set to: 0
  7684                           
  7685                           ; BSR set to: 0
  7686  002490  6B65               	clrf	___lwdiv@quotient& (0+255),b
  7687  002492  6B66               	clrf	(___lwdiv@quotient+1)& (0+255),b
  7688                           
  7689                           ; BSR set to: 0
  7690  002494  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  7691  002496  1162               	iorwf	___lwdiv@divisor& (0+255),w,b
  7692  002498  E01B               	bz	l1351
  7693                           
  7694                           ; BSR set to: 0
  7695  00249A  0E01               	movlw	1
  7696  00249C  6F64               	movwf	___lwdiv@counter& (0+255),b
  7697  00249E  D004               	goto	l7927
  7698  0024A0                     l7925:
  7699                           
  7700                           ; BSR set to: 0
  7701  0024A0  90D8               	bcf	status,0,c
  7702  0024A2  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
  7703  0024A4  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  7704  0024A6  2B64               	incf	___lwdiv@counter& (0+255),f,b
  7705  0024A8                     l7927:
  7706                           
  7707                           ; BSR set to: 0
  7708  0024A8  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  7709  0024AA  D7FA               	goto	l7925
  7710  0024AC                     l7929:
  7711                           
  7712                           ; BSR set to: 0
  7713  0024AC  90D8               	bcf	status,0,c
  7714  0024AE  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
  7715  0024B0  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  7716                           
  7717                           ; BSR set to: 0
  7718  0024B2  5162               	movf	___lwdiv@divisor& (0+255),w,b
  7719  0024B4  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
  7720  0024B6  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  7721  0024B8  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  7722  0024BA  E305               	bnc	l7937
  7723                           
  7724                           ; BSR set to: 0
  7725  0024BC  5162               	movf	___lwdiv@divisor& (0+255),w,b
  7726  0024BE  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
  7727  0024C0  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  7728  0024C2  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  7729                           
  7730                           ; BSR set to: 0
  7731  0024C4  8165               	bsf	___lwdiv@quotient& (0+255),0,b
  7732  0024C6                     l7937:
  7733                           
  7734                           ; BSR set to: 0
  7735  0024C6  90D8               	bcf	status,0,c
  7736  0024C8  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  7737  0024CA  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
  7738                           
  7739                           ; BSR set to: 0
  7740  0024CC  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
  7741  0024CE  D7EE               	goto	l7929
  7742  0024D0                     l1351:
  7743                           
  7744                           ; BSR set to: 0
  7745  0024D0  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
  7746  0024D4  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
  7747                           
  7748                           ; BSR set to: 0
  7749  0024D8  0012               	return	
  7750  0024DA                     __end_of___lwdiv:
  7751                           	opt stack 0
  7752                           tblptru	equ	0xFF8
  7753                           tblptrh	equ	0xFF7
  7754                           tblptrl	equ	0xFF6
  7755                           tablat	equ	0xFF5
  7756                           prodl	equ	0xFF3
  7757                           intcon	equ	0xFF2
  7758                           intcon2	equ	0xFF1
  7759                           postinc0	equ	0xFEE
  7760                           wreg	equ	0xFE8
  7761                           indf1	equ	0xFE7
  7762                           postinc1	equ	0xFE6
  7763                           postdec1	equ	0xFE5
  7764                           fsr1h	equ	0xFE2
  7765                           fsr1l	equ	0xFE1
  7766                           indf2	equ	0xFDF
  7767                           postinc2	equ	0xFDE
  7768                           postdec2	equ	0xFDD
  7769                           plusw2	equ	0xFDB
  7770                           fsr2h	equ	0xFDA
  7771                           fsr2l	equ	0xFD9
  7772                           status	equ	0xFD8
  7773                           
  7774 ;; *************** function ___lwmod *****************
  7775 ;; Defined at:
  7776 ;;		line 10 in file "C:\Program Files (x86)\HI-TECH Software\PICC-18\9.80\sources\lwmod.c"
  7777 ;; Parameters:    Size  Location     Type
  7778 ;;  dividend        2    0[BANK0 ] unsigned int 
  7779 ;;  divisor         2    2[BANK0 ] unsigned int 
  7780 ;; Auto vars:     Size  Location     Type
  7781 ;;  counter         1    4[BANK0 ] unsigned char 
  7782 ;; Return value:  Size  Location     Type
  7783 ;;                  2    0[BANK0 ] unsigned int 
  7784 ;; Registers used:
  7785 ;;		wreg, status,2, status,0
  7786 ;; Tracked objects:
  7787 ;;		On entry : F/0
  7788 ;;		On exit  : F/0
  7789 ;;		Unchanged: FFFFFFF0/0
  7790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7791 ;;      Params:         0       4       0       0       0       0       0       0       0
  7792 ;;      Locals:         0       1       0       0       0       0       0       0       0
  7793 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7794 ;;      Totals:         0       5       0       0       0       0       0       0       0
  7795 ;;Total ram usage:        5 bytes
  7796 ;; Hardware stack levels used:    1
  7797 ;; Hardware stack levels required when called:    6
  7798 ;; This function calls:
  7799 ;;		Nothing
  7800 ;; This function is called by:
  7801 ;;		_uintToStr
  7802 ;; This function uses a non-reentrant model
  7803 ;;
  7804                           
  7805                           	psect	text20
  7806  0025B0                     __ptext20:
  7807                           	opt stack 0
  7808  0025B0                     ___lwmod:
  7809                           	opt stack 23
  7810                           
  7811                           ; BSR set to: 0
  7812                           
  7813                           ; BSR set to: 0
  7814  0025B0  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
  7815  0025B2  1162               	iorwf	___lwmod@divisor& (0+255),w,b
  7816  0025B4  E017               	bz	l1361
  7817                           
  7818                           ; BSR set to: 0
  7819  0025B6  0E01               	movlw	1
  7820  0025B8  6F64               	movwf	___lwmod@counter& (0+255),b
  7821  0025BA  D004               	goto	l7947
  7822  0025BC                     l7945:
  7823                           
  7824                           ; BSR set to: 0
  7825  0025BC  90D8               	bcf	status,0,c
  7826  0025BE  3762               	rlcf	___lwmod@divisor& (0+255),f,b
  7827  0025C0  3763               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  7828  0025C2  2B64               	incf	___lwmod@counter& (0+255),f,b
  7829  0025C4                     l7947:
  7830                           
  7831                           ; BSR set to: 0
  7832  0025C4  AF63               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  7833  0025C6  D7FA               	goto	l7945
  7834  0025C8                     l7949:
  7835                           
  7836                           ; BSR set to: 0
  7837  0025C8  5162               	movf	___lwmod@divisor& (0+255),w,b
  7838  0025CA  5D60               	subwf	___lwmod@dividend& (0+255),w,b
  7839  0025CC  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
  7840  0025CE  5961               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  7841  0025D0  E304               	bnc	l7953
  7842                           
  7843                           ; BSR set to: 0
  7844  0025D2  5162               	movf	___lwmod@divisor& (0+255),w,b
  7845  0025D4  5F60               	subwf	___lwmod@dividend& (0+255),f,b
  7846  0025D6  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
  7847  0025D8  5B61               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  7848  0025DA                     l7953:
  7849                           
  7850                           ; BSR set to: 0
  7851  0025DA  90D8               	bcf	status,0,c
  7852  0025DC  3363               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  7853  0025DE  3362               	rrcf	___lwmod@divisor& (0+255),f,b
  7854                           
  7855                           ; BSR set to: 0
  7856  0025E0  2F64               	decfsz	___lwmod@counter& (0+255),f,b
  7857  0025E2  D7F2               	goto	l7949
  7858  0025E4                     l1361:
  7859                           
  7860                           ; BSR set to: 0
  7861  0025E4  C060  F060         	movff	___lwmod@dividend,?___lwmod
  7862  0025E8  C061  F061         	movff	___lwmod@dividend+1,?___lwmod+1
  7863                           
  7864                           ; BSR set to: 0
  7865  0025EC  0012               	return	
  7866  0025EE                     __end_of___lwmod:
  7867                           	opt stack 0
  7868                           tblptru	equ	0xFF8
  7869                           tblptrh	equ	0xFF7
  7870                           tblptrl	equ	0xFF6
  7871                           tablat	equ	0xFF5
  7872                           prodl	equ	0xFF3
  7873                           intcon	equ	0xFF2
  7874                           intcon2	equ	0xFF1
  7875                           postinc0	equ	0xFEE
  7876                           wreg	equ	0xFE8
  7877                           indf1	equ	0xFE7
  7878                           postinc1	equ	0xFE6
  7879                           postdec1	equ	0xFE5
  7880                           fsr1h	equ	0xFE2
  7881                           fsr1l	equ	0xFE1
  7882                           indf2	equ	0xFDF
  7883                           postinc2	equ	0xFDE
  7884                           postdec2	equ	0xFDD
  7885                           plusw2	equ	0xFDB
  7886                           fsr2h	equ	0xFDA
  7887                           fsr2l	equ	0xFD9
  7888                           status	equ	0xFD8
  7889                           
  7890 ;; *************** function ___asftadd *****************
  7891 ;; Defined at:
  7892 ;;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\PICC-18\9.80\sources\asftadd.c"
  7893 ;; Parameters:    Size  Location     Type
  7894 ;;  f1p             1    wreg     PTR float 
  7895 ;;		 -> y(9), 
  7896 ;;  f2              3   49[BANK0 ] float 
  7897 ;; Auto vars:     Size  Location     Type
  7898 ;;  f1p             1   52[BANK0 ] PTR float 
  7899 ;;		 -> y(9), 
  7900 ;; Return value:  Size  Location     Type
  7901 ;;                  3   49[BANK0 ] float 
  7902 ;; Registers used:
  7903 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7904 ;; Tracked objects:
  7905 ;;		On entry : F/0
  7906 ;;		On exit  : F/0
  7907 ;;		Unchanged: FFFFFFF0/0
  7908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7909 ;;      Params:         0       3       0       0       0       0       0       0       0
  7910 ;;      Locals:         0       1       0       0       0       0       0       0       0
  7911 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7912 ;;      Totals:         0       4       0       0       0       0       0       0       0
  7913 ;;Total ram usage:        4 bytes
  7914 ;; Hardware stack levels used:    1
  7915 ;; Hardware stack levels required when called:    8
  7916 ;; This function calls:
  7917 ;;		___ftadd
  7918 ;; This function is called by:
  7919 ;;		_iir
  7920 ;; This function uses a non-reentrant model
  7921 ;;
  7922                           
  7923                           	psect	text21
  7924  0025EE                     __ptext21:
  7925                           	opt stack 0
  7926  0025EE                     ___asftadd:
  7927                           	opt stack 21
  7928                           
  7929                           ; BSR set to: 0
  7930                           ;___asftadd@f1p stored from wreg
  7931  0025EE  CFE8 F094          	movff	wreg,___asftadd@f1p
  7932                           
  7933                           ; BSR set to: 0
  7934                           ;	Return value of ___asftadd is never used
  7935  0025F2  5194               	movf	___asftadd@f1p& (0+255),w,b
  7936  0025F4  6ED9               	movwf	fsr2l,c
  7937  0025F6  6ADA               	clrf	fsr2h,c
  7938  0025F8  CFDE F07D          	movff	postinc2,?___ftadd
  7939  0025FC  CFDE F07E          	movff	postinc2,?___ftadd+1
  7940  002600  CFDD F07F          	movff	postdec2,?___ftadd+2
  7941  002604  C091  F080         	movff	___asftadd@f2,?___ftadd+3
  7942  002608  C092  F081         	movff	___asftadd@f2+1,?___ftadd+4
  7943  00260C  C093  F082         	movff	___asftadd@f2+2,?___ftadd+5
  7944  002610  ECB3  F00B         	call	___ftadd	;wreg free
  7945  002614  5194               	movf	___asftadd@f1p& (0+255),w,b
  7946  002616  6ED9               	movwf	fsr2l,c
  7947  002618  6ADA               	clrf	fsr2h,c
  7948  00261A  C07D  FFDE         	movff	?___ftadd,postinc2
  7949  00261E  C07E  FFDE         	movff	?___ftadd+1,postinc2
  7950  002622  C07F  FFDD         	movff	?___ftadd+2,postdec2
  7951  002626  52DD               	movf	postdec2,f,c
  7952                           
  7953                           ; BSR set to: 0
  7954  002628  0012               	return	
  7955  00262A                     __end_of___asftadd:
  7956                           	opt stack 0
  7957                           tblptru	equ	0xFF8
  7958                           tblptrh	equ	0xFF7
  7959                           tblptrl	equ	0xFF6
  7960                           tablat	equ	0xFF5
  7961                           prodl	equ	0xFF3
  7962                           intcon	equ	0xFF2
  7963                           intcon2	equ	0xFF1
  7964                           postinc0	equ	0xFEE
  7965                           wreg	equ	0xFE8
  7966                           indf1	equ	0xFE7
  7967                           postinc1	equ	0xFE6
  7968                           postdec1	equ	0xFE5
  7969                           fsr1h	equ	0xFE2
  7970                           fsr1l	equ	0xFE1
  7971                           indf2	equ	0xFDF
  7972                           postinc2	equ	0xFDE
  7973                           postdec2	equ	0xFDD
  7974                           plusw2	equ	0xFDB
  7975                           fsr2h	equ	0xFDA
  7976                           fsr2l	equ	0xFD9
  7977                           status	equ	0xFD8
  7978                           
  7979 ;; *************** function ___ftadd *****************
  7980 ;; Defined at:
  7981 ;;		line 87 in file "C:\Program Files (x86)\HI-TECH Software\PICC-18\9.80\sources\ftadd.c"
  7982 ;; Parameters:    Size  Location     Type
  7983 ;;  f1              3   29[BANK0 ] float 
  7984 ;;  f2              3   32[BANK0 ] float 
  7985 ;; Auto vars:     Size  Location     Type
  7986 ;;  exp1            1   42[BANK0 ] unsigned char 
  7987 ;;  exp2            1   41[BANK0 ] unsigned char 
  7988 ;;  sign            1   40[BANK0 ] unsigned char 
  7989 ;; Return value:  Size  Location     Type
  7990 ;;                  3   29[BANK0 ] float 
  7991 ;; Registers used:
  7992 ;;		wreg, status,2, status,0, cstack
  7993 ;; Tracked objects:
  7994 ;;		On entry : F/0
  7995 ;;		On exit  : F/0
  7996 ;;		Unchanged: FFFFFFF0/0
  7997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7998 ;;      Params:         0       6       0       0       0       0       0       0       0
  7999 ;;      Locals:         0       3       0       0       0       0       0       0       0
  8000 ;;      Temps:          0       5       0       0       0       0       0       0       0
  8001 ;;      Totals:         0      14       0       0       0       0       0       0       0
  8002 ;;Total ram usage:       14 bytes
  8003 ;; Hardware stack levels used:    1
  8004 ;; Hardware stack levels required when called:    7
  8005 ;; This function calls:
  8006 ;;		___ftpack
  8007 ;; This function is called by:
  8008 ;;		_incVar
  8009 ;;		_decVar
  8010 ;;		_main
  8011 ;;		___ftsub
  8012 ;;		___asftadd
  8013 ;; This function uses a non-reentrant model
  8014 ;;
  8015                           
  8016                           	psect	text22
  8017  001766                     __ptext22:
  8018                           	opt stack 0
  8019  001766                     ___ftadd:
  8020                           	opt stack 22
  8021                           
  8022                           ; BSR set to: 0
  8023                           
  8024                           ; BSR set to: 0
  8025  001766  0E0F               	movlw	15
  8026  001768  6F83               	movwf	??___ftadd& (0+255),b
  8027  00176A  C07D  F084         	movff	___ftadd@f1,??___ftadd+1
  8028  00176E  C07E  F085         	movff	___ftadd@f1+1,??___ftadd+2
  8029  001772  C07F  F086         	movff	___ftadd@f1+2,??___ftadd+3
  8030  001776  2983               	incf	??___ftadd& (0+255),w,b
  8031  001778  6F87               	movwf	(??___ftadd+4)& (0+255),b
  8032  00177A  D001               	goto	u10730
  8033  00177C                     u10735:
  8034  00177C  D8A9               	call	PL43	;call to abstracted procedure
  8035  00177E                     u10730:
  8036  00177E  2F87               	decfsz	(??___ftadd+4)& (0+255),f,b
  8037  001780  D7FD               	goto	u10735
  8038  001782  5184               	movf	(??___ftadd+1)& (0+255),w,b
  8039  001784  6F8A               	movwf	___ftadd@exp1& (0+255),b
  8040  001786  0E0F               	movlw	15
  8041  001788  6F83               	movwf	??___ftadd& (0+255),b
  8042  00178A  C080  F084         	movff	___ftadd@f2,??___ftadd+1
  8043  00178E  C081  F085         	movff	___ftadd@f2+1,??___ftadd+2
  8044  001792  C082  F086         	movff	___ftadd@f2+2,??___ftadd+3
  8045  001796  2983               	incf	??___ftadd& (0+255),w,b
  8046  001798  6F87               	movwf	(??___ftadd+4)& (0+255),b
  8047  00179A  D001               	goto	u10740
  8048  00179C                     u10745:
  8049  00179C  D899               	call	PL43	;call to abstracted procedure
  8050  00179E                     u10740:
  8051  00179E  2F87               	decfsz	(??___ftadd+4)& (0+255),f,b
  8052  0017A0  D7FD               	goto	u10745
  8053  0017A2  5184               	movf	(??___ftadd+1)& (0+255),w,b
  8054  0017A4  6F89               	movwf	___ftadd@exp2& (0+255),b
  8055                           
  8056                           ; BSR set to: 0
  8057  0017A6  518A               	movf	___ftadd@exp1& (0+255),w,b
  8058  0017A8  E009               	bz	l1176
  8059                           
  8060                           ; BSR set to: 0
  8061  0017AA  5189               	movf	___ftadd@exp2& (0+255),w,b
  8062  0017AC  618A               	cpfslt	___ftadd@exp1& (0+255),b
  8063  0017AE  D00D               	goto	l7737
  8064                           
  8065                           ; BSR set to: 0
  8066  0017B0  518A               	movf	___ftadd@exp1& (0+255),w,b
  8067  0017B2  5D89               	subwf	___ftadd@exp2& (0+255),w,b
  8068  0017B4  6F83               	movwf	??___ftadd& (0+255),b
  8069  0017B6  0E19               	movlw	25
  8070  0017B8  5D83               	subwf	??___ftadd& (0+255),w,b
  8071  0017BA  E307               	bnc	l7737
  8072  0017BC                     l1176:
  8073                           
  8074                           ; BSR set to: 0
  8075  0017BC  C080  F07D         	movff	___ftadd@f2,?___ftadd
  8076  0017C0  C081  F07E         	movff	___ftadd@f2+1,?___ftadd+1
  8077  0017C4  C082  F07F         	movff	___ftadd@f2+2,?___ftadd+2
  8078  0017C8  0012               	return	
  8079  0017CA                     l7737:
  8080                           
  8081                           ; BSR set to: 0
  8082  0017CA  5189               	movf	___ftadd@exp2& (0+255),w,b
  8083  0017CC  E009               	bz	l1180
  8084                           
  8085                           ; BSR set to: 0
  8086  0017CE  518A               	movf	___ftadd@exp1& (0+255),w,b
  8087  0017D0  6189               	cpfslt	___ftadd@exp2& (0+255),b
  8088  0017D2  D00D               	goto	l7743
  8089                           
  8090                           ; BSR set to: 0
  8091  0017D4  5189               	movf	___ftadd@exp2& (0+255),w,b
  8092  0017D6  5D8A               	subwf	___ftadd@exp1& (0+255),w,b
  8093  0017D8  6F83               	movwf	??___ftadd& (0+255),b
  8094  0017DA  0E19               	movlw	25
  8095  0017DC  5D83               	subwf	??___ftadd& (0+255),w,b
  8096  0017DE  E307               	bnc	l7743
  8097  0017E0                     l1180:
  8098                           
  8099                           ; BSR set to: 0
  8100  0017E0  C07D  F07D         	movff	___ftadd@f1,?___ftadd
  8101  0017E4  C07E  F07E         	movff	___ftadd@f1+1,?___ftadd+1
  8102  0017E8  C07F  F07F         	movff	___ftadd@f1+2,?___ftadd+2
  8103  0017EC  0012               	return	
  8104  0017EE                     l7743:
  8105                           
  8106                           ; BSR set to: 0
  8107  0017EE  0E06               	movlw	6
  8108  0017F0  6F88               	movwf	___ftadd@sign& (0+255),b
  8109                           
  8110                           ; BSR set to: 0
  8111  0017F2  BF7F               	btfsc	(___ftadd@f1+2)& (0+255),7,b
  8112                           
  8113                           ; BSR set to: 0
  8114  0017F4  8F88               	bsf	___ftadd@sign& (0+255),7,b
  8115                           
  8116                           ; BSR set to: 0
  8117  0017F6  BF82               	btfsc	(___ftadd@f2+2)& (0+255),7,b
  8118                           
  8119                           ; BSR set to: 0
  8120  0017F8  8D88               	bsf	___ftadd@sign& (0+255),6,b
  8121                           
  8122                           ; BSR set to: 0
  8123  0017FA  8F7E               	bsf	(___ftadd@f1+1)& (0+255),7,b
  8124                           
  8125                           ; BSR set to: 0
  8126  0017FC  6B7F               	clrf	(___ftadd@f1+2)& (0+255),b
  8127  0017FE  8F81               	bsf	(___ftadd@f2+1)& (0+255),7,b
  8128                           
  8129                           ; BSR set to: 0
  8130  001800  6B82               	clrf	(___ftadd@f2+2)& (0+255),b
  8131                           
  8132                           ; BSR set to: 0
  8133  001802  5189               	movf	___ftadd@exp2& (0+255),w,b
  8134  001804  618A               	cpfslt	___ftadd@exp1& (0+255),b
  8135  001806  D017               	goto	l7769
  8136  001808                     l7759:
  8137                           
  8138                           ; BSR set to: 0
  8139  001808  90D8               	bcf	status,0,c
  8140  00180A  3780               	rlcf	___ftadd@f2& (0+255),f,b
  8141  00180C  3781               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  8142  00180E  3782               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  8143  001810  0789               	decf	___ftadd@exp2& (0+255),f,b
  8144                           
  8145                           ; BSR set to: 0
  8146  001812  5189               	movf	___ftadd@exp2& (0+255),w,b
  8147  001814  198A               	xorwf	___ftadd@exp1& (0+255),w,b
  8148  001816  E00B               	bz	l7767
  8149                           
  8150                           ; BSR set to: 0
  8151  001818  0788               	decf	___ftadd@sign& (0+255),f,b
  8152  00181A  0100               	movlb	0	; () banked
  8153  00181C  5188               	movf	___ftadd@sign& (0+255),w,b
  8154  00181E  0B07               	andlw	7
  8155  001820  E006               	bz	l7767
  8156  001822  D7F2               	goto	l7759
  8157  001824                     l7765:
  8158                           
  8159                           ; BSR set to: 0
  8160  001824  90D8               	bcf	status,0,c
  8161  001826  337F               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  8162  001828  337E               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  8163  00182A  337D               	rrcf	___ftadd@f1& (0+255),f,b
  8164  00182C  2B8A               	incf	___ftadd@exp1& (0+255),f,b
  8165  00182E                     l7767:
  8166                           
  8167                           ; BSR set to: 0
  8168  00182E  5189               	movf	___ftadd@exp2& (0+255),w,b
  8169  001830  638A               	cpfseq	___ftadd@exp1& (0+255),b
  8170  001832  D7F8               	goto	l7765
  8171  001834  D019               	goto	l1191
  8172  001836                     l7769:
  8173                           
  8174                           ; BSR set to: 0
  8175  001836  518A               	movf	___ftadd@exp1& (0+255),w,b
  8176  001838  6189               	cpfslt	___ftadd@exp2& (0+255),b
  8177  00183A  D016               	goto	l1191
  8178  00183C                     l7771:
  8179                           
  8180                           ; BSR set to: 0
  8181  00183C  90D8               	bcf	status,0,c
  8182  00183E  377D               	rlcf	___ftadd@f1& (0+255),f,b
  8183  001840  377E               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  8184  001842  377F               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  8185  001844  078A               	decf	___ftadd@exp1& (0+255),f,b
  8186                           
  8187                           ; BSR set to: 0
  8188  001846  5189               	movf	___ftadd@exp2& (0+255),w,b
  8189  001848  198A               	xorwf	___ftadd@exp1& (0+255),w,b
  8190  00184A  E00B               	bz	l7779
  8191                           
  8192                           ; BSR set to: 0
  8193  00184C  0788               	decf	___ftadd@sign& (0+255),f,b
  8194  00184E  0100               	movlb	0	; () banked
  8195  001850  5188               	movf	___ftadd@sign& (0+255),w,b
  8196  001852  0B07               	andlw	7
  8197  001854  E006               	bz	l7779
  8198  001856  D7F2               	goto	l7771
  8199  001858                     l7777:
  8200                           
  8201                           ; BSR set to: 0
  8202  001858  90D8               	bcf	status,0,c
  8203  00185A  3382               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  8204  00185C  3381               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  8205  00185E  3380               	rrcf	___ftadd@f2& (0+255),f,b
  8206  001860  2B89               	incf	___ftadd@exp2& (0+255),f,b
  8207  001862                     l7779:
  8208                           
  8209                           ; BSR set to: 0
  8210  001862  5189               	movf	___ftadd@exp2& (0+255),w,b
  8211  001864  638A               	cpfseq	___ftadd@exp1& (0+255),b
  8212  001866  D7F8               	goto	l7777
  8213  001868                     l1191:
  8214                           
  8215                           ; BSR set to: 0
  8216  001868  AF88               	btfss	___ftadd@sign& (0+255),7,b
  8217  00186A  D007               	goto	l1200
  8218                           
  8219                           ; BSR set to: 0
  8220  00186C  1F7D               	comf	___ftadd@f1& (0+255),f,b
  8221  00186E  1F7E               	comf	(___ftadd@f1+1)& (0+255),f,b
  8222  001870  1F7F               	comf	(___ftadd@f1+2)& (0+255),f,b
  8223  001872  2B7D               	incf	___ftadd@f1& (0+255),f,b
  8224  001874  0E00               	movlw	0
  8225  001876  237E               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  8226  001878  237F               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  8227  00187A                     l1200:
  8228                           
  8229                           ; BSR set to: 0
  8230  00187A  AD88               	btfss	___ftadd@sign& (0+255),6,b
  8231  00187C  D002               	goto	l1201
  8232                           
  8233                           ; BSR set to: 0
  8234  00187E  1F80               	comf	___ftadd@f2& (0+255),f,b
  8235  001880  D820               	call	PL34	;call to abstracted procedure
  8236  001882                     l1201:
  8237                           
  8238                           ; BSR set to: 0
  8239  001882  6B88               	clrf	___ftadd@sign& (0+255),b
  8240  001884  517D               	movf	___ftadd@f1& (0+255),w,b
  8241  001886  2780               	addwf	___ftadd@f2& (0+255),f,b
  8242  001888  517E               	movf	(___ftadd@f1+1)& (0+255),w,b
  8243  00188A  2381               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  8244  00188C  517F               	movf	(___ftadd@f1+2)& (0+255),w,b
  8245  00188E  2382               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  8246  001890  AF82               	btfss	(___ftadd@f2+2)& (0+255),7,b
  8247  001892  D004               	goto	l7789
  8248                           
  8249                           ; BSR set to: 0
  8250  001894  1F80               	comf	___ftadd@f2& (0+255),f,b
  8251  001896  D815               	call	PL34	;call to abstracted procedure
  8252                           
  8253                           ; BSR set to: 0
  8254  001898  0E01               	movlw	1
  8255  00189A  6F88               	movwf	___ftadd@sign& (0+255),b
  8256  00189C                     l7789:
  8257                           
  8258                           ; BSR set to: 0
  8259  00189C  C080  F060         	movff	___ftadd@f2,?___ftpack
  8260  0018A0  C081  F061         	movff	___ftadd@f2+1,?___ftpack+1
  8261  0018A4  C082  F062         	movff	___ftadd@f2+2,?___ftpack+2
  8262  0018A8  C08A  F063         	movff	___ftadd@exp1,?___ftpack+3
  8263  0018AC  C088  F064         	movff	___ftadd@sign,?___ftpack+4
  8264  0018B0  EC64  F010         	call	___ftpack	;wreg free
  8265  0018B4  C060  F07D         	movff	?___ftpack,?___ftadd
  8266  0018B8  C061  F07E         	movff	?___ftpack+1,?___ftadd+1
  8267  0018BC  C062  F07F         	movff	?___ftpack+2,?___ftadd+2
  8268                           
  8269                           ; BSR set to: 0
  8270  0018C0  0012               	return	
  8271  0018C2                     __end_of___ftadd:
  8272                           	opt stack 0
  8273  0018C2                     PL34:
  8274  0018C2  1F81               	comf	(___ftadd@f2+1)& (0+255),f,b
  8275  0018C4  1F82               	comf	(___ftadd@f2+2)& (0+255),f,b
  8276  0018C6  2B80               	incf	___ftadd@f2& (0+255),f,b
  8277  0018C8  0E00               	movlw	0
  8278  0018CA  2381               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  8279  0018CC  2382               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  8280  0018CE  0C00               	retlw	0
  8281  0018D0                     PL43:
  8282  0018D0  90D8               	bcf	status,0,c
  8283  0018D2  3386               	rrcf	(??___ftadd+3)& (0+255),f,b
  8284  0018D4  3385               	rrcf	(??___ftadd+2)& (0+255),f,b
  8285  0018D6  3384               	rrcf	(??___ftadd+1)& (0+255),f,b
  8286  0018D8  0012               	return	
  8287                           tblptru	equ	0xFF8
  8288                           tblptrh	equ	0xFF7
  8289                           tblptrl	equ	0xFF6
  8290                           tablat	equ	0xFF5
  8291                           prodl	equ	0xFF3
  8292                           intcon	equ	0xFF2
  8293                           intcon2	equ	0xFF1
  8294                           postinc0	equ	0xFEE
  8295                           wreg	equ	0xFE8
  8296                           indf1	equ	0xFE7
  8297                           postinc1	equ	0xFE6
  8298                           postdec1	equ	0xFE5
  8299                           fsr1h	equ	0xFE2
  8300                           fsr1l	equ	0xFE1
  8301                           indf2	equ	0xFDF
  8302                           postinc2	equ	0xFDE
  8303                           postdec2	equ	0xFDD
  8304                           plusw2	equ	0xFDB
  8305                           fsr2h	equ	0xFDA
  8306                           fsr2l	equ	0xFD9
  8307                           status	equ	0xFD8
  8308                           
  8309 ;; *************** function ___asftdiv *****************
  8310 ;; Defined at:
  8311 ;;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\PICC-18\9.80\sources\asftdiv.c"
  8312 ;; Parameters:    Size  Location     Type
  8313 ;;  f1p             1    wreg     PTR float 
  8314 ;;		 -> y(9), 
  8315 ;;  f2              3   29[BANK0 ] float 
  8316 ;; Auto vars:     Size  Location     Type
  8317 ;;  f1p             1   32[BANK0 ] PTR float 
  8318 ;;		 -> y(9), 
  8319 ;; Return value:  Size  Location     Type
  8320 ;;                  3   29[BANK0 ] float 
  8321 ;; Registers used:
  8322 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8323 ;; Tracked objects:
  8324 ;;		On entry : F/0
  8325 ;;		On exit  : F/0
  8326 ;;		Unchanged: FFFFFFF0/0
  8327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8328 ;;      Params:         0       3       0       0       0       0       0       0       0
  8329 ;;      Locals:         0       1       0       0       0       0       0       0       0
  8330 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8331 ;;      Totals:         0       4       0       0       0       0       0       0       0
  8332 ;;Total ram usage:        4 bytes
  8333 ;; Hardware stack levels used:    1
  8334 ;; Hardware stack levels required when called:    8
  8335 ;; This function calls:
  8336 ;;		___ftdiv
  8337 ;; This function is called by:
  8338 ;;		_iir
  8339 ;; This function uses a non-reentrant model
  8340 ;;
  8341                           
  8342                           	psect	text23
  8343  00262A                     __ptext23:
  8344                           	opt stack 0
  8345  00262A                     ___asftdiv:
  8346                           	opt stack 21
  8347                           
  8348                           ; BSR set to: 0
  8349                           ;___asftdiv@f1p stored from wreg
  8350  00262A  CFE8 F080          	movff	wreg,___asftdiv@f1p
  8351                           
  8352                           ; BSR set to: 0
  8353                           ;	Return value of ___asftdiv is never used
  8354  00262E  5180               	movf	___asftdiv@f1p& (0+255),w,b
  8355  002630  6ED9               	movwf	fsr2l,c
  8356  002632  6ADA               	clrf	fsr2h,c
  8357  002634  CFDE F06C          	movff	postinc2,?___ftdiv
  8358  002638  CFDE F06D          	movff	postinc2,?___ftdiv+1
  8359  00263C  CFDD F06E          	movff	postdec2,?___ftdiv+2
  8360  002640  C07D  F06F         	movff	___asftdiv@f2,?___ftdiv+3
  8361  002644  C07E  F070         	movff	___asftdiv@f2+1,?___ftdiv+4
  8362  002648  C07F  F071         	movff	___asftdiv@f2+2,?___ftdiv+5
  8363  00264C  EC35  F00E         	call	___ftdiv	;wreg free
  8364  002650  5180               	movf	___asftdiv@f1p& (0+255),w,b
  8365  002652  6ED9               	movwf	fsr2l,c
  8366  002654  6ADA               	clrf	fsr2h,c
  8367  002656  C06C  FFDE         	movff	?___ftdiv,postinc2
  8368  00265A  C06D  FFDE         	movff	?___ftdiv+1,postinc2
  8369  00265E  C06E  FFDD         	movff	?___ftdiv+2,postdec2
  8370  002662  52DD               	movf	postdec2,f,c
  8371                           
  8372                           ; BSR set to: 0
  8373  002664  0012               	return	
  8374  002666                     __end_of___asftdiv:
  8375                           	opt stack 0
  8376                           tblptru	equ	0xFF8
  8377                           tblptrh	equ	0xFF7
  8378                           tblptrl	equ	0xFF6
  8379                           tablat	equ	0xFF5
  8380                           prodl	equ	0xFF3
  8381                           intcon	equ	0xFF2
  8382                           intcon2	equ	0xFF1
  8383                           postinc0	equ	0xFEE
  8384                           wreg	equ	0xFE8
  8385                           indf1	equ	0xFE7
  8386                           postinc1	equ	0xFE6
  8387                           postdec1	equ	0xFE5
  8388                           fsr1h	equ	0xFE2
  8389                           fsr1l	equ	0xFE1
  8390                           indf2	equ	0xFDF
  8391                           postinc2	equ	0xFDE
  8392                           postdec2	equ	0xFDD
  8393                           plusw2	equ	0xFDB
  8394                           fsr2h	equ	0xFDA
  8395                           fsr2l	equ	0xFD9
  8396                           status	equ	0xFD8
  8397                           
  8398 ;; *************** function ___asftmul *****************
  8399 ;; Defined at:
  8400 ;;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\PICC-18\9.80\sources\asftmul.c"
  8401 ;; Parameters:    Size  Location     Type
  8402 ;;  f1p             1    wreg     PTR float 
  8403 ;;		 -> medicionFloat(3), 
  8404 ;;  f2              3   25[BANK0 ] float 
  8405 ;; Auto vars:     Size  Location     Type
  8406 ;;  f1p             1   28[BANK0 ] PTR float 
  8407 ;;		 -> medicionFloat(3), 
  8408 ;; Return value:  Size  Location     Type
  8409 ;;                  3   25[BANK0 ] float 
  8410 ;; Registers used:
  8411 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8412 ;; Tracked objects:
  8413 ;;		On entry : F/0
  8414 ;;		On exit  : F/0
  8415 ;;		Unchanged: FFFFFFF0/0
  8416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8417 ;;      Params:         0       3       0       0       0       0       0       0       0
  8418 ;;      Locals:         0       1       0       0       0       0       0       0       0
  8419 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8420 ;;      Totals:         0       4       0       0       0       0       0       0       0
  8421 ;;Total ram usage:        4 bytes
  8422 ;; Hardware stack levels used:    1
  8423 ;; Hardware stack levels required when called:    8
  8424 ;; This function calls:
  8425 ;;		___ftmul
  8426 ;; This function is called by:
  8427 ;;		_main
  8428 ;; This function uses a non-reentrant model
  8429 ;;
  8430                           
  8431                           	psect	text24
  8432  002666                     __ptext24:
  8433                           	opt stack 0
  8434  002666                     ___asftmul:
  8435                           	opt stack 22
  8436                           
  8437                           ; BSR set to: 0
  8438                           ;___asftmul@f1p stored from wreg
  8439  002666  CFE8 F07C          	movff	wreg,___asftmul@f1p
  8440                           
  8441                           ; BSR set to: 0
  8442                           ;	Return value of ___asftmul is never used
  8443  00266A  517C               	movf	___asftmul@f1p& (0+255),w,b
  8444  00266C  6ED9               	movwf	fsr2l,c
  8445  00266E  6ADA               	clrf	fsr2h,c
  8446  002670  CFDE F068          	movff	postinc2,?___ftmul
  8447  002674  CFDE F069          	movff	postinc2,?___ftmul+1
  8448  002678  CFDD F06A          	movff	postdec2,?___ftmul+2
  8449  00267C  C079  F06B         	movff	___asftmul@f2,?___ftmul+3
  8450  002680  C07A  F06C         	movff	___asftmul@f2+1,?___ftmul+4
  8451  002684  C07B  F06D         	movff	___asftmul@f2+2,?___ftmul+5
  8452  002688  ECB8  F00D         	call	___ftmul	;wreg free
  8453  00268C  517C               	movf	___asftmul@f1p& (0+255),w,b
  8454  00268E  6ED9               	movwf	fsr2l,c
  8455  002690  6ADA               	clrf	fsr2h,c
  8456  002692  C068  FFDE         	movff	?___ftmul,postinc2
  8457  002696  C069  FFDE         	movff	?___ftmul+1,postinc2
  8458  00269A  C06A  FFDD         	movff	?___ftmul+2,postdec2
  8459  00269E  52DD               	movf	postdec2,f,c
  8460                           
  8461                           ; BSR set to: 0
  8462  0026A0  0012               	return	
  8463  0026A2                     __end_of___asftmul:
  8464                           	opt stack 0
  8465                           tblptru	equ	0xFF8
  8466                           tblptrh	equ	0xFF7
  8467                           tblptrl	equ	0xFF6
  8468                           tablat	equ	0xFF5
  8469                           prodl	equ	0xFF3
  8470                           intcon	equ	0xFF2
  8471                           intcon2	equ	0xFF1
  8472                           postinc0	equ	0xFEE
  8473                           wreg	equ	0xFE8
  8474                           indf1	equ	0xFE7
  8475                           postinc1	equ	0xFE6
  8476                           postdec1	equ	0xFE5
  8477                           fsr1h	equ	0xFE2
  8478                           fsr1l	equ	0xFE1
  8479                           indf2	equ	0xFDF
  8480                           postinc2	equ	0xFDE
  8481                           postdec2	equ	0xFDD
  8482                           plusw2	equ	0xFDB
  8483                           fsr2h	equ	0xFDA
  8484                           fsr2l	equ	0xFD9
  8485                           status	equ	0xFD8
  8486                           
  8487 ;; *************** function ___ftpack *****************
  8488 ;; Defined at:
  8489 ;;		line 63 in file "C:\Program Files (x86)\HI-TECH Software\PICC-18\9.80\sources\float.c"
  8490 ;; Parameters:    Size  Location     Type
  8491 ;;  arg             3    0[BANK0 ] unsigned um
  8492 ;;  exp             1    3[BANK0 ] unsigned char 
  8493 ;;  sign            1    4[BANK0 ] unsigned char 
  8494 ;; Auto vars:     Size  Location     Type
  8495 ;;		None
  8496 ;; Return value:  Size  Location     Type
  8497 ;;                  3    0[BANK0 ] float 
  8498 ;; Registers used:
  8499 ;;		wreg, status,2, status,0
  8500 ;; Tracked objects:
  8501 ;;		On entry : F/0
  8502 ;;		On exit  : F/0
  8503 ;;		Unchanged: FFFFFFF0/0
  8504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8505 ;;      Params:         0       5       0       0       0       0       0       0       0
  8506 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8507 ;;      Temps:          0       3       0       0       0       0       0       0       0
  8508 ;;      Totals:         0       8       0       0       0       0       0       0       0
  8509 ;;Total ram usage:        8 bytes
  8510 ;; Hardware stack levels used:    1
  8511 ;; Hardware stack levels required when called:    6
  8512 ;; This function calls:
  8513 ;;		Nothing
  8514 ;; This function is called by:
  8515 ;;		___awtoft
  8516 ;;		___ftadd
  8517 ;;		___ftdiv
  8518 ;;		___ftmul
  8519 ;; This function uses a non-reentrant model
  8520 ;;
  8521                           
  8522                           	psect	text25
  8523  0020C8                     __ptext25:
  8524                           	opt stack 0
  8525  0020C8                     ___ftpack:
  8526                           	opt stack 22
  8527                           
  8528                           ; BSR set to: 0
  8529                           
  8530                           ; BSR set to: 0
  8531  0020C8  5163               	movf	___ftpack@exp& (0+255),w,b
  8532  0020CA  E004               	bz	l1138
  8533                           
  8534                           ; BSR set to: 0
  8535  0020CC  5160               	movf	___ftpack@arg& (0+255),w,b
  8536  0020CE  1161               	iorwf	(___ftpack@arg+1)& (0+255),w,b
  8537  0020D0  1162               	iorwf	(___ftpack@arg+2)& (0+255),w,b
  8538  0020D2  E106               	bnz	l7693
  8539  0020D4                     l1138:
  8540                           
  8541                           ; BSR set to: 0
  8542  0020D4  6B60               	clrf	?___ftpack& (0+255),b
  8543  0020D6  6B61               	clrf	(?___ftpack+1)& (0+255),b
  8544  0020D8  6B62               	clrf	(?___ftpack+2)& (0+255),b
  8545  0020DA  0012               	return	
  8546  0020DC                     l7691:
  8547                           
  8548                           ; BSR set to: 0
  8549  0020DC  2B63               	incf	___ftpack@exp& (0+255),f,b
  8550  0020DE  D838               	call	PL41	;call to abstracted procedure
  8551  0020E0                     l7693:
  8552                           
  8553                           ; BSR set to: 0
  8554  0020E0  6B65               	clrf	??___ftpack& (0+255),b
  8555  0020E2  6B66               	clrf	(??___ftpack+1)& (0+255),b
  8556  0020E4  0EFE               	movlw	254
  8557  0020E6  1562               	andwf	(___ftpack@arg+2)& (0+255),w,b
  8558  0020E8  6F67               	movwf	(??___ftpack+2)& (0+255),b
  8559  0020EA  5165               	movf	??___ftpack& (0+255),w,b
  8560  0020EC  1166               	iorwf	(??___ftpack+1)& (0+255),w,b
  8561  0020EE  1167               	iorwf	(??___ftpack+2)& (0+255),w,b
  8562  0020F0  E007               	bz	l7699
  8563  0020F2  D7F4               	goto	l7691
  8564  0020F4                     l7695:
  8565                           
  8566                           ; BSR set to: 0
  8567  0020F4  2B63               	incf	___ftpack@exp& (0+255),f,b
  8568                           
  8569                           ; BSR set to: 0
  8570  0020F6  2B60               	incf	___ftpack@arg& (0+255),f,b
  8571  0020F8  0E00               	movlw	0
  8572  0020FA  2361               	addwfc	(___ftpack@arg+1)& (0+255),f,b
  8573  0020FC  2362               	addwfc	(___ftpack@arg+2)& (0+255),f,b
  8574  0020FE  D828               	call	PL41	;call to abstracted procedure
  8575  002100                     l7699:
  8576                           
  8577                           ; BSR set to: 0
  8578  002100  6B65               	clrf	??___ftpack& (0+255),b
  8579  002102  6B66               	clrf	(??___ftpack+1)& (0+255),b
  8580  002104  5162               	movf	(___ftpack@arg+2)& (0+255),w,b
  8581  002106  6F67               	movwf	(??___ftpack+2)& (0+255),b
  8582  002108  5165               	movf	??___ftpack& (0+255),w,b
  8583  00210A  1166               	iorwf	(??___ftpack+1)& (0+255),w,b
  8584  00210C  1167               	iorwf	(??___ftpack+2)& (0+255),w,b
  8585  00210E  E006               	bz	l7703
  8586  002110  D7F1               	goto	l7695
  8587  002112                     l7701:
  8588                           
  8589                           ; BSR set to: 0
  8590  002112  0763               	decf	___ftpack@exp& (0+255),f,b
  8591  002114  90D8               	bcf	status,0,c
  8592  002116  3760               	rlcf	___ftpack@arg& (0+255),f,b
  8593  002118  3761               	rlcf	(___ftpack@arg+1)& (0+255),f,b
  8594  00211A  3762               	rlcf	(___ftpack@arg+2)& (0+255),f,b
  8595  00211C                     l7703:
  8596                           
  8597                           ; BSR set to: 0
  8598  00211C  AF61               	btfss	(___ftpack@arg+1)& (0+255),7,b
  8599  00211E  D7F9               	goto	l7701
  8600                           
  8601                           ; BSR set to: 0
  8602  002120  A163               	btfss	___ftpack@exp& (0+255),0,b
  8603                           
  8604                           ; BSR set to: 0
  8605  002122  9F61               	bcf	(___ftpack@arg+1)& (0+255),7,b
  8606                           
  8607                           ; BSR set to: 0
  8608  002124  90D8               	bcf	status,0,c
  8609  002126  3363               	rrcf	___ftpack@exp& (0+255),f,b
  8610                           
  8611                           ; BSR set to: 0
  8612  002128  5163               	movf	___ftpack@exp& (0+255),w,b
  8613  00212A  6F67               	movwf	(??___ftpack+2)& (0+255),b
  8614  00212C  6B66               	clrf	(??___ftpack+1)& (0+255),b
  8615  00212E  6B65               	clrf	??___ftpack& (0+255),b
  8616  002130  5165               	movf	??___ftpack& (0+255),w,b
  8617  002132  1360               	iorwf	___ftpack@arg& (0+255),f,b
  8618  002134  5166               	movf	(??___ftpack+1)& (0+255),w,b
  8619  002136  1361               	iorwf	(___ftpack@arg+1)& (0+255),f,b
  8620  002138  5167               	movf	(??___ftpack+2)& (0+255),w,b
  8621  00213A  1362               	iorwf	(___ftpack@arg+2)& (0+255),f,b
  8622                           
  8623                           ; BSR set to: 0
  8624  00213C  5164               	movf	___ftpack@sign& (0+255),w,b
  8625  00213E  A4D8               	btfss	status,2,c
  8626                           
  8627                           ; BSR set to: 0
  8628  002140  8F62               	bsf	(___ftpack@arg+2)& (0+255),7,b
  8629                           
  8630                           ; BSR set to: 0
  8631  002142  C060  F060         	movff	___ftpack@arg,?___ftpack
  8632  002146  C061  F061         	movff	___ftpack@arg+1,?___ftpack+1
  8633  00214A  C062  F062         	movff	___ftpack@arg+2,?___ftpack+2
  8634                           
  8635                           ; BSR set to: 0
  8636  00214E  0012               	return	
  8637  002150                     __end_of___ftpack:
  8638                           	opt stack 0
  8639  002150                     PL41:
  8640  002150  90D8               	bcf	status,0,c
  8641  002152  3362               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  8642  002154  3361               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  8643  002156  3360               	rrcf	___ftpack@arg& (0+255),f,b
  8644  002158  0012               	return	
  8645                           tblptru	equ	0xFF8
  8646                           tblptrh	equ	0xFF7
  8647                           tblptrl	equ	0xFF6
  8648                           tablat	equ	0xFF5
  8649                           prodl	equ	0xFF3
  8650                           intcon	equ	0xFF2
  8651                           intcon2	equ	0xFF1
  8652                           postinc0	equ	0xFEE
  8653                           wreg	equ	0xFE8
  8654                           indf1	equ	0xFE7
  8655                           postinc1	equ	0xFE6
  8656                           postdec1	equ	0xFE5
  8657                           fsr1h	equ	0xFE2
  8658                           fsr1l	equ	0xFE1
  8659                           indf2	equ	0xFDF
  8660                           postinc2	equ	0xFDE
  8661                           postdec2	equ	0xFDD
  8662                           plusw2	equ	0xFDB
  8663                           fsr2h	equ	0xFDA
  8664                           fsr2l	equ	0xFD9
  8665                           status	equ	0xFD8
  8666                           
  8667 ;; *************** function ___ftdiv *****************
  8668 ;; Defined at:
  8669 ;;		line 50 in file "C:\Program Files (x86)\HI-TECH Software\PICC-18\9.80\sources\ftdiv.c"
  8670 ;; Parameters:    Size  Location     Type
  8671 ;;  f1              3   12[BANK0 ] float 
  8672 ;;  f2              3   15[BANK0 ] float 
  8673 ;; Auto vars:     Size  Location     Type
  8674 ;;  f3              3   24[BANK0 ] float 
  8675 ;;  sign            1   28[BANK0 ] unsigned char 
  8676 ;;  exp             1   27[BANK0 ] unsigned char 
  8677 ;;  cntr            1   23[BANK0 ] unsigned char 
  8678 ;; Return value:  Size  Location     Type
  8679 ;;                  3   12[BANK0 ] float 
  8680 ;; Registers used:
  8681 ;;		wreg, status,2, status,0, cstack
  8682 ;; Tracked objects:
  8683 ;;		On entry : F/0
  8684 ;;		On exit  : F/0
  8685 ;;		Unchanged: FFFFFFF0/0
  8686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8687 ;;      Params:         0       6       0       0       0       0       0       0       0
  8688 ;;      Locals:         0       6       0       0       0       0       0       0       0
  8689 ;;      Temps:          0       5       0       0       0       0       0       0       0
  8690 ;;      Totals:         0      17       0       0       0       0       0       0       0
  8691 ;;Total ram usage:       17 bytes
  8692 ;; Hardware stack levels used:    1
  8693 ;; Hardware stack levels required when called:    7
  8694 ;; This function calls:
  8695 ;;		___ftpack
  8696 ;; This function is called by:
  8697 ;;		_incVar
  8698 ;;		_decVar
  8699 ;;		_main
  8700 ;;		___asftdiv
  8701 ;; This function uses a non-reentrant model
  8702 ;;
  8703                           
  8704                           	psect	text26
  8705  001C6A                     __ptext26:
  8706                           	opt stack 0
  8707  001C6A                     ___ftdiv:
  8708                           	opt stack 22
  8709                           
  8710                           ; BSR set to: 0
  8711                           
  8712                           ; BSR set to: 0
  8713  001C6A  0E0F               	movlw	15
  8714  001C6C  6F72               	movwf	??___ftdiv& (0+255),b
  8715  001C6E  C06C  F073         	movff	___ftdiv@f1,??___ftdiv+1
  8716  001C72  C06D  F074         	movff	___ftdiv@f1+1,??___ftdiv+2
  8717  001C76  C06E  F075         	movff	___ftdiv@f1+2,??___ftdiv+3
  8718  001C7A  2972               	incf	??___ftdiv& (0+255),w,b
  8719  001C7C  6F76               	movwf	(??___ftdiv+4)& (0+255),b
  8720  001C7E  D001               	goto	u10940
  8721  001C80                     u10945:
  8722  001C80  D860               	call	PL44	;call to abstracted procedure
  8723  001C82                     u10940:
  8724  001C82  2F76               	decfsz	(??___ftdiv+4)& (0+255),f,b
  8725  001C84  D7FD               	goto	u10945
  8726  001C86  5173               	movf	(??___ftdiv+1)& (0+255),w,b
  8727  001C88  6F7B               	movwf	___ftdiv@exp& (0+255),b
  8728  001C8A  0100               	movlb	0	; () banked
  8729  001C8C  677B               	tstfsz	___ftdiv@exp& (0+255),b
  8730  001C8E  D004               	goto	l7797
  8731                           
  8732                           ; BSR set to: 0
  8733  001C90  6B6C               	clrf	?___ftdiv& (0+255),b
  8734  001C92  6B6D               	clrf	(?___ftdiv+1)& (0+255),b
  8735  001C94  6B6E               	clrf	(?___ftdiv+2)& (0+255),b
  8736  001C96  0012               	return	
  8737  001C98                     l7797:
  8738                           
  8739                           ; BSR set to: 0
  8740  001C98  0E0F               	movlw	15
  8741  001C9A  6F72               	movwf	??___ftdiv& (0+255),b
  8742  001C9C  C06F  F073         	movff	___ftdiv@f2,??___ftdiv+1
  8743  001CA0  C070  F074         	movff	___ftdiv@f2+1,??___ftdiv+2
  8744  001CA4  C071  F075         	movff	___ftdiv@f2+2,??___ftdiv+3
  8745  001CA8  2972               	incf	??___ftdiv& (0+255),w,b
  8746  001CAA  6F76               	movwf	(??___ftdiv+4)& (0+255),b
  8747  001CAC  D001               	goto	u10960
  8748  001CAE                     u10965:
  8749  001CAE  D849               	call	PL44	;call to abstracted procedure
  8750  001CB0                     u10960:
  8751  001CB0  2F76               	decfsz	(??___ftdiv+4)& (0+255),f,b
  8752  001CB2  D7FD               	goto	u10965
  8753  001CB4  5173               	movf	(??___ftdiv+1)& (0+255),w,b
  8754  001CB6  6F7C               	movwf	___ftdiv@sign& (0+255),b
  8755  001CB8  0100               	movlb	0	; () banked
  8756  001CBA  677C               	tstfsz	___ftdiv@sign& (0+255),b
  8757  001CBC  D004               	goto	l1209
  8758                           
  8759                           ; BSR set to: 0
  8760  001CBE  6B6C               	clrf	?___ftdiv& (0+255),b
  8761  001CC0  6B6D               	clrf	(?___ftdiv+1)& (0+255),b
  8762  001CC2  6B6E               	clrf	(?___ftdiv+2)& (0+255),b
  8763  001CC4  0012               	return	
  8764  001CC6                     l1209:
  8765                           
  8766                           ; BSR set to: 0
  8767  001CC6  6B78               	clrf	___ftdiv@f3& (0+255),b
  8768  001CC8  6B79               	clrf	(___ftdiv@f3+1)& (0+255),b
  8769  001CCA  6B7A               	clrf	(___ftdiv@f3+2)& (0+255),b
  8770                           
  8771                           ; BSR set to: 0
  8772  001CCC  517C               	movf	___ftdiv@sign& (0+255),w,b
  8773  001CCE  0F89               	addlw	137
  8774  001CD0  5F7B               	subwf	___ftdiv@exp& (0+255),f,b
  8775                           
  8776                           ; BSR set to: 0
  8777  001CD2  C06E  F07C         	movff	___ftdiv@f1+2,___ftdiv@sign
  8778  001CD6  0100               	movlb	0	; () banked
  8779  001CD8  5171               	movf	(___ftdiv@f2+2)& (0+255),w,b
  8780  001CDA  1B7C               	xorwf	___ftdiv@sign& (0+255),f,b
  8781  001CDC  0E80               	movlw	128
  8782  001CDE  177C               	andwf	___ftdiv@sign& (0+255),f,b
  8783                           
  8784                           ; BSR set to: 0
  8785  001CE0  8F6D               	bsf	(___ftdiv@f1+1)& (0+255),7,b
  8786                           
  8787                           ; BSR set to: 0
  8788  001CE2  6B6E               	clrf	(___ftdiv@f1+2)& (0+255),b
  8789                           
  8790                           ; BSR set to: 0
  8791  001CE4  8F70               	bsf	(___ftdiv@f2+1)& (0+255),7,b
  8792                           
  8793                           ; BSR set to: 0
  8794  001CE6  6B71               	clrf	(___ftdiv@f2+2)& (0+255),b
  8795                           
  8796                           ; BSR set to: 0
  8797  001CE8  0E18               	movlw	24
  8798  001CEA  6F77               	movwf	___ftdiv@cntr& (0+255),b
  8799  001CEC                     l7815:
  8800                           
  8801                           ; BSR set to: 0
  8802  001CEC  90D8               	bcf	status,0,c
  8803  001CEE  3778               	rlcf	___ftdiv@f3& (0+255),f,b
  8804  001CF0  3779               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
  8805  001CF2  377A               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
  8806                           
  8807                           ; BSR set to: 0
  8808  001CF4  516F               	movf	___ftdiv@f2& (0+255),w,b
  8809  001CF6  5D6C               	subwf	___ftdiv@f1& (0+255),w,b
  8810  001CF8  5170               	movf	(___ftdiv@f2+1)& (0+255),w,b
  8811  001CFA  596D               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
  8812  001CFC  5171               	movf	(___ftdiv@f2+2)& (0+255),w,b
  8813  001CFE  596E               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
  8814  001D00  E307               	bnc	l1211
  8815                           
  8816                           ; BSR set to: 0
  8817  001D02  516F               	movf	___ftdiv@f2& (0+255),w,b
  8818  001D04  5F6C               	subwf	___ftdiv@f1& (0+255),f,b
  8819  001D06  5170               	movf	(___ftdiv@f2+1)& (0+255),w,b
  8820  001D08  5B6D               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
  8821  001D0A  5171               	movf	(___ftdiv@f2+2)& (0+255),w,b
  8822  001D0C  5B6E               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
  8823                           
  8824                           ; BSR set to: 0
  8825  001D0E  8178               	bsf	___ftdiv@f3& (0+255),0,b
  8826  001D10                     l1211:
  8827                           
  8828                           ; BSR set to: 0
  8829  001D10  90D8               	bcf	status,0,c
  8830  001D12  376C               	rlcf	___ftdiv@f1& (0+255),f,b
  8831  001D14  376D               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
  8832  001D16  376E               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
  8833                           
  8834                           ; BSR set to: 0
  8835  001D18  2F77               	decfsz	___ftdiv@cntr& (0+255),f,b
  8836  001D1A  D7E8               	goto	l7815
  8837                           
  8838                           ; BSR set to: 0
  8839  001D1C  C078  F060         	movff	___ftdiv@f3,?___ftpack
  8840  001D20  C079  F061         	movff	___ftdiv@f3+1,?___ftpack+1
  8841  001D24  C07A  F062         	movff	___ftdiv@f3+2,?___ftpack+2
  8842  001D28  C07B  F063         	movff	___ftdiv@exp,?___ftpack+3
  8843  001D2C  C07C  F064         	movff	___ftdiv@sign,?___ftpack+4
  8844  001D30  EC64  F010         	call	___ftpack	;wreg free
  8845  001D34  C060  F06C         	movff	?___ftpack,?___ftdiv
  8846  001D38  C061  F06D         	movff	?___ftpack+1,?___ftdiv+1
  8847  001D3C  C062  F06E         	movff	?___ftpack+2,?___ftdiv+2
  8848                           
  8849                           ; BSR set to: 0
  8850  001D40  0012               	return	
  8851  001D42                     __end_of___ftdiv:
  8852                           	opt stack 0
  8853  001D42                     PL44:
  8854  001D42  90D8               	bcf	status,0,c
  8855  001D44  3375               	rrcf	(??___ftdiv+3)& (0+255),f,b
  8856  001D46  3374               	rrcf	(??___ftdiv+2)& (0+255),f,b
  8857  001D48  3373               	rrcf	(??___ftdiv+1)& (0+255),f,b
  8858  001D4A  0012               	return	
  8859                           tblptru	equ	0xFF8
  8860                           tblptrh	equ	0xFF7
  8861                           tblptrl	equ	0xFF6
  8862                           tablat	equ	0xFF5
  8863                           prodl	equ	0xFF3
  8864                           intcon	equ	0xFF2
  8865                           intcon2	equ	0xFF1
  8866                           postinc0	equ	0xFEE
  8867                           wreg	equ	0xFE8
  8868                           indf1	equ	0xFE7
  8869                           postinc1	equ	0xFE6
  8870                           postdec1	equ	0xFE5
  8871                           fsr1h	equ	0xFE2
  8872                           fsr1l	equ	0xFE1
  8873                           indf2	equ	0xFDF
  8874                           postinc2	equ	0xFDE
  8875                           postdec2	equ	0xFDD
  8876                           plusw2	equ	0xFDB
  8877                           fsr2h	equ	0xFDA
  8878                           fsr2l	equ	0xFD9
  8879                           status	equ	0xFD8
  8880                           
  8881 ;; *************** function ___ftmul *****************
  8882 ;; Defined at:
  8883 ;;		line 52 in file "C:\Program Files (x86)\HI-TECH Software\PICC-18\9.80\sources\ftmul.c"
  8884 ;; Parameters:    Size  Location     Type
  8885 ;;  f1              3    8[BANK0 ] float 
  8886 ;;  f2              3   11[BANK0 ] float 
  8887 ;; Auto vars:     Size  Location     Type
  8888 ;;  f3_as_produc    3   20[BANK0 ] unsigned um
  8889 ;;  sign            1   24[BANK0 ] unsigned char 
  8890 ;;  cntr            1   23[BANK0 ] unsigned char 
  8891 ;;  exp             1   19[BANK0 ] unsigned char 
  8892 ;; Return value:  Size  Location     Type
  8893 ;;                  3    8[BANK0 ] float 
  8894 ;; Registers used:
  8895 ;;		wreg, status,2, status,0, cstack
  8896 ;; Tracked objects:
  8897 ;;		On entry : F/0
  8898 ;;		On exit  : F/0
  8899 ;;		Unchanged: FFFFFFF0/0
  8900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8901 ;;      Params:         0       6       0       0       0       0       0       0       0
  8902 ;;      Locals:         0       6       0       0       0       0       0       0       0
  8903 ;;      Temps:          0       5       0       0       0       0       0       0       0
  8904 ;;      Totals:         0      17       0       0       0       0       0       0       0
  8905 ;;Total ram usage:       17 bytes
  8906 ;; Hardware stack levels used:    1
  8907 ;; Hardware stack levels required when called:    7
  8908 ;; This function calls:
  8909 ;;		___ftpack
  8910 ;; This function is called by:
  8911 ;;		_iir
  8912 ;;		___asftmul
  8913 ;; This function uses a non-reentrant model
  8914 ;;
  8915                           
  8916                           	psect	text27
  8917  001B70                     __ptext27:
  8918                           	opt stack 0
  8919  001B70                     ___ftmul:
  8920                           	opt stack 22
  8921                           
  8922                           ; BSR set to: 0
  8923                           
  8924                           ; BSR set to: 0
  8925  001B70  0E0F               	movlw	15
  8926  001B72  6F6E               	movwf	??___ftmul& (0+255),b
  8927  001B74  C068  F06F         	movff	___ftmul@f1,??___ftmul+1
  8928  001B78  C069  F070         	movff	___ftmul@f1+1,??___ftmul+2
  8929  001B7C  C06A  F071         	movff	___ftmul@f1+2,??___ftmul+3
  8930  001B80  296E               	incf	??___ftmul& (0+255),w,b
  8931  001B82  6F72               	movwf	(??___ftmul+4)& (0+255),b
  8932  001B84  D001               	goto	u10990
  8933  001B86                     u10995:
  8934  001B86  D86C               	call	PL42	;call to abstracted procedure
  8935  001B88                     u10990:
  8936  001B88  2F72               	decfsz	(??___ftmul+4)& (0+255),f,b
  8937  001B8A  D7FD               	goto	u10995
  8938  001B8C  516F               	movf	(??___ftmul+1)& (0+255),w,b
  8939  001B8E  6F73               	movwf	___ftmul@exp& (0+255),b
  8940  001B90  0100               	movlb	0	; () banked
  8941  001B92  6773               	tstfsz	___ftmul@exp& (0+255),b
  8942  001B94  D004               	goto	l7833
  8943                           
  8944                           ; BSR set to: 0
  8945  001B96  6B68               	clrf	?___ftmul& (0+255),b
  8946  001B98  6B69               	clrf	(?___ftmul+1)& (0+255),b
  8947  001B9A  6B6A               	clrf	(?___ftmul+2)& (0+255),b
  8948  001B9C  0012               	return	
  8949  001B9E                     l7833:
  8950                           
  8951                           ; BSR set to: 0
  8952  001B9E  0E0F               	movlw	15
  8953  001BA0  6F6E               	movwf	??___ftmul& (0+255),b
  8954  001BA2  C06B  F06F         	movff	___ftmul@f2,??___ftmul+1
  8955  001BA6  C06C  F070         	movff	___ftmul@f2+1,??___ftmul+2
  8956  001BAA  C06D  F071         	movff	___ftmul@f2+2,??___ftmul+3
  8957  001BAE  296E               	incf	??___ftmul& (0+255),w,b
  8958  001BB0  6F72               	movwf	(??___ftmul+4)& (0+255),b
  8959  001BB2  D001               	goto	u11010
  8960  001BB4                     u11015:
  8961  001BB4  D855               	call	PL42	;call to abstracted procedure
  8962  001BB6                     u11010:
  8963  001BB6  2F72               	decfsz	(??___ftmul+4)& (0+255),f,b
  8964  001BB8  D7FD               	goto	u11015
  8965  001BBA  516F               	movf	(??___ftmul+1)& (0+255),w,b
  8966  001BBC  6F78               	movwf	___ftmul@sign& (0+255),b
  8967  001BBE  0100               	movlb	0	; () banked
  8968  001BC0  6778               	tstfsz	___ftmul@sign& (0+255),b
  8969  001BC2  D004               	goto	l7837
  8970                           
  8971                           ; BSR set to: 0
  8972  001BC4  6B68               	clrf	?___ftmul& (0+255),b
  8973  001BC6  6B69               	clrf	(?___ftmul+1)& (0+255),b
  8974  001BC8  6B6A               	clrf	(?___ftmul+2)& (0+255),b
  8975  001BCA  0012               	return	
  8976  001BCC                     l7837:
  8977                           
  8978                           ; BSR set to: 0
  8979  001BCC  5178               	movf	___ftmul@sign& (0+255),w,b
  8980  001BCE  0F7B               	addlw	123
  8981  001BD0  2773               	addwf	___ftmul@exp& (0+255),f,b
  8982                           
  8983                           ; BSR set to: 0
  8984  001BD2  C06A  F078         	movff	___ftmul@f1+2,___ftmul@sign
  8985  001BD6  0100               	movlb	0	; () banked
  8986  001BD8  516D               	movf	(___ftmul@f2+2)& (0+255),w,b
  8987  001BDA  1B78               	xorwf	___ftmul@sign& (0+255),f,b
  8988  001BDC  0E80               	movlw	128
  8989  001BDE  1778               	andwf	___ftmul@sign& (0+255),f,b
  8990                           
  8991                           ; BSR set to: 0
  8992  001BE0  8F69               	bsf	(___ftmul@f1+1)& (0+255),7,b
  8993                           
  8994                           ; BSR set to: 0
  8995  001BE2  8F6C               	bsf	(___ftmul@f2+1)& (0+255),7,b
  8996                           
  8997                           ; BSR set to: 0
  8998  001BE4  0E00               	movlw	0
  8999  001BE6  176D               	andwf	(___ftmul@f2+2)& (0+255),f,b
  9000                           
  9001                           ; BSR set to: 0
  9002  001BE8  6B74               	clrf	___ftmul@f3_as_product& (0+255),b
  9003  001BEA  6B75               	clrf	(___ftmul@f3_as_product+1)& (0+255),b
  9004  001BEC  6B76               	clrf	(___ftmul@f3_as_product+2)& (0+255),b
  9005                           
  9006                           ; BSR set to: 0
  9007  001BEE  0E07               	movlw	7
  9008  001BF0  6F77               	movwf	___ftmul@cntr& (0+255),b
  9009  001BF2                     l7851:
  9010                           
  9011                           ; BSR set to: 0
  9012  001BF2  A168               	btfss	___ftmul@f1& (0+255),0,b
  9013  001BF4  D002               	goto	l7855
  9014                           
  9015                           ; BSR set to: 0
  9016  001BF6  516B               	movf	___ftmul@f2& (0+255),w,b
  9017  001BF8  D82D               	call	PL40	;call to abstracted procedure
  9018  001BFA                     l7855:
  9019                           
  9020                           ; BSR set to: 0
  9021  001BFA  90D8               	bcf	status,0,c
  9022  001BFC  336A               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  9023  001BFE  3369               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  9024  001C00  3368               	rrcf	___ftmul@f1& (0+255),f,b
  9025  001C02  90D8               	bcf	status,0,c
  9026  001C04  376B               	rlcf	___ftmul@f2& (0+255),f,b
  9027  001C06  376C               	rlcf	(___ftmul@f2+1)& (0+255),f,b
  9028  001C08  376D               	rlcf	(___ftmul@f2+2)& (0+255),f,b
  9029                           
  9030                           ; BSR set to: 0
  9031  001C0A  2F77               	decfsz	___ftmul@cntr& (0+255),f,b
  9032  001C0C  D7F2               	goto	l7851
  9033                           
  9034                           ; BSR set to: 0
  9035  001C0E  0E09               	movlw	9
  9036  001C10  6F77               	movwf	___ftmul@cntr& (0+255),b
  9037  001C12                     l7861:
  9038                           
  9039                           ; BSR set to: 0
  9040  001C12  A168               	btfss	___ftmul@f1& (0+255),0,b
  9041  001C14  D002               	goto	l7865
  9042                           
  9043                           ; BSR set to: 0
  9044  001C16  516B               	movf	___ftmul@f2& (0+255),w,b
  9045  001C18  D81D               	call	PL40	;call to abstracted procedure
  9046  001C1A                     l7865:
  9047                           
  9048                           ; BSR set to: 0
  9049  001C1A  90D8               	bcf	status,0,c
  9050  001C1C  336A               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  9051  001C1E  3369               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  9052  001C20  3368               	rrcf	___ftmul@f1& (0+255),f,b
  9053  001C22  90D8               	bcf	status,0,c
  9054  001C24  3376               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  9055  001C26  3375               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  9056  001C28  3374               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  9057                           
  9058                           ; BSR set to: 0
  9059  001C2A  2F77               	decfsz	___ftmul@cntr& (0+255),f,b
  9060  001C2C  D7F2               	goto	l7861
  9061                           
  9062                           ; BSR set to: 0
  9063  001C2E  C074  F060         	movff	___ftmul@f3_as_product,?___ftpack
  9064  001C32  C075  F061         	movff	___ftmul@f3_as_product+1,?___ftpack+1
  9065  001C36  C076  F062         	movff	___ftmul@f3_as_product+2,?___ftpack+2
  9066  001C3A  C073  F063         	movff	___ftmul@exp,?___ftpack+3
  9067  001C3E  C078  F064         	movff	___ftmul@sign,?___ftpack+4
  9068  001C42  EC64  F010         	call	___ftpack	;wreg free
  9069  001C46  C060  F068         	movff	?___ftpack,?___ftmul
  9070  001C4A  C061  F069         	movff	?___ftpack+1,?___ftmul+1
  9071  001C4E  C062  F06A         	movff	?___ftpack+2,?___ftmul+2
  9072                           
  9073                           ; BSR set to: 0
  9074  001C52  0012               	return	
  9075  001C54                     __end_of___ftmul:
  9076                           	opt stack 0
  9077  001C54                     PL40:
  9078  001C54  2774               	addwf	___ftmul@f3_as_product& (0+255),f,b
  9079  001C56  516C               	movf	(___ftmul@f2+1)& (0+255),w,b
  9080  001C58  2375               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  9081  001C5A  516D               	movf	(___ftmul@f2+2)& (0+255),w,b
  9082  001C5C  2376               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  9083  001C5E  0012               	return	
  9084  001C60                     PL42:
  9085  001C60  90D8               	bcf	status,0,c
  9086  001C62  3371               	rrcf	(??___ftmul+3)& (0+255),f,b
  9087  001C64  3370               	rrcf	(??___ftmul+2)& (0+255),f,b
  9088  001C66  336F               	rrcf	(??___ftmul+1)& (0+255),f,b
  9089  001C68  0012               	return	
  9090                           tblptru	equ	0xFF8
  9091                           tblptrh	equ	0xFF7
  9092                           tblptrl	equ	0xFF6
  9093                           tablat	equ	0xFF5
  9094                           prodl	equ	0xFF3
  9095                           intcon	equ	0xFF2
  9096                           intcon2	equ	0xFF1
  9097                           postinc0	equ	0xFEE
  9098                           wreg	equ	0xFE8
  9099                           indf1	equ	0xFE7
  9100                           postinc1	equ	0xFE6
  9101                           postdec1	equ	0xFE5
  9102                           fsr1h	equ	0xFE2
  9103                           fsr1l	equ	0xFE1
  9104                           indf2	equ	0xFDF
  9105                           postinc2	equ	0xFDE
  9106                           postdec2	equ	0xFDD
  9107                           plusw2	equ	0xFDB
  9108                           fsr2h	equ	0xFDA
  9109                           fsr2l	equ	0xFD9
  9110                           status	equ	0xFD8
  9111                           
  9112 ;; *************** function _isr2 *****************
  9113 ;; Defined at:
  9114 ;;		line 26 in file "C:\fgr\16gb\0000 interior\deVolt\sw\v3dig\interrupts.c"
  9115 ;; Parameters:    Size  Location     Type
  9116 ;;		None
  9117 ;; Auto vars:     Size  Location     Type
  9118 ;;		None
  9119 ;; Return value:  Size  Location     Type
  9120 ;;		None               void
  9121 ;; Registers used:
  9122 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9123 ;; Tracked objects:
  9124 ;;		On entry : 0/0
  9125 ;;		On exit  : 0/0
  9126 ;;		Unchanged: FFFFFFF0/0
  9127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9128 ;;      Params:         0       0       0       0       0       0       0       0       0
  9129 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9130 ;;      Temps:          9       0       0       0       0       0       0       0       0
  9131 ;;      Totals:         9       0       0       0       0       0       0       0       0
  9132 ;;Total ram usage:        9 bytes
  9133 ;; Hardware stack levels used:    1
  9134 ;; Hardware stack levels required when called:    5
  9135 ;; This function calls:
  9136 ;;		_isr_timer3
  9137 ;;		_isr_adc
  9138 ;; This function is called by:
  9139 ;;		Interrupt level 1
  9140 ;; This function uses a non-reentrant model
  9141 ;;
  9142                           
  9143                           	psect	intcodelo
  9144  000018                     __pintcodelo:
  9145                           	opt stack 0
  9146  000018                     _isr2:
  9147                           	opt stack 21
  9148                           
  9149                           ; BSR set to: 0
  9150  000018  CFD8 F00A          	movff	status,??_isr2
  9151  00001C  CFE8 F00B          	movff	wreg,??_isr2+1
  9152  000020  CFE0 F00C          	movff	bsr,??_isr2+2
  9153  000024  CFE1 F00D          	movff	fsr1l,??_isr2+3
  9154  000028  CFE2 F00E          	movff	fsr1h,??_isr2+4
  9155  00002C  CFD9 F00F          	movff	fsr2l,??_isr2+5
  9156  000030  CFDA F010          	movff	fsr2h,??_isr2+6
  9157  000034  CFF3 F011          	movff	prodl,??_isr2+7
  9158  000038  CFF4 F012          	movff	prodh,??_isr2+8
  9159  00003C                     
  9160                           ;interrupts.c: 27: if(PIE2bits.TMR3IE && PIR2bits.TMR3IF) isr_timer3();
  9161  00003C  A2A0               	btfss	4000,1,c	;volatile
  9162  00003E  D001               	goto	i1u769_21
  9163  000040  D001               	goto	i1u769_20
  9164  000042                     i1u769_21:
  9165  000042  D007               	goto	i1l650
  9166  000044                     i1u769_20:
  9167  000044  A2A1               	btfss	4001,1,c	;volatile
  9168  000046  D001               	goto	i1u770_21
  9169  000048  D001               	goto	i1u770_20
  9170  00004A                     i1u770_21:
  9171  00004A  D003               	goto	i1l650
  9172  00004C                     i1u770_20:
  9173  00004C  EC92  F012         	call	_isr_timer3	;wreg free
  9174  000050  D00A               	goto	i1l653
  9175  000052                     i1l650:
  9176                           
  9177                           ;interrupts.c: 28: else if(PIE1bits.ADIE && PIR1bits.ADIF) isr_adc();
  9178  000052  AC9D               	btfss	3997,6,c	;volatile
  9179  000054  D001               	goto	i1u771_21
  9180  000056  D001               	goto	i1u771_20
  9181  000058                     i1u771_21:
  9182  000058  D006               	goto	i1l653
  9183  00005A                     i1u771_20:
  9184  00005A  AC9E               	btfss	3998,6,c	;volatile
  9185  00005C  D001               	goto	i1u772_21
  9186  00005E  D001               	goto	i1u772_20
  9187  000060                     i1u772_21:
  9188  000060  D002               	goto	i1l653
  9189  000062                     i1u772_20:
  9190  000062  ECCE  F013         	call	_isr_adc	;wreg free
  9191  000066                     i1l653:
  9192  000066  C012  FFF4         	movff	??_isr2+8,prodh
  9193  00006A  C011  FFF3         	movff	??_isr2+7,prodl
  9194  00006E  C010  FFDA         	movff	??_isr2+6,fsr2h
  9195  000072  C00F  FFD9         	movff	??_isr2+5,fsr2l
  9196  000076  C00E  FFE2         	movff	??_isr2+4,fsr1h
  9197  00007A  C00D  FFE1         	movff	??_isr2+3,fsr1l
  9198  00007E  C00C  FFE0         	movff	??_isr2+2,bsr
  9199  000082  C00B  FFE8         	movff	??_isr2+1,wreg
  9200  000086  C00A  FFD8         	movff	??_isr2,status
  9201  00008A  0010               	retfie	
  9202  00008C                     __end_of_isr2:
  9203                           	opt stack 0
  9204                           tblptru	equ	0xFF8
  9205                           tblptrh	equ	0xFF7
  9206                           tblptrl	equ	0xFF6
  9207                           tablat	equ	0xFF5
  9208                           prodh	equ	0xFF4
  9209                           prodl	equ	0xFF3
  9210                           intcon	equ	0xFF2
  9211                           intcon2	equ	0xFF1
  9212                           postinc0	equ	0xFEE
  9213                           wreg	equ	0xFE8
  9214                           indf1	equ	0xFE7
  9215                           postinc1	equ	0xFE6
  9216                           postdec1	equ	0xFE5
  9217                           fsr1h	equ	0xFE2
  9218                           fsr1l	equ	0xFE1
  9219                           bsr	equ	0xFE0
  9220                           indf2	equ	0xFDF
  9221                           postinc2	equ	0xFDE
  9222                           postdec2	equ	0xFDD
  9223                           plusw2	equ	0xFDB
  9224                           fsr2h	equ	0xFDA
  9225                           fsr2l	equ	0xFD9
  9226                           status	equ	0xFD8
  9227                           
  9228 ;; *************** function _isr_timer3 *****************
  9229 ;; Defined at:
  9230 ;;		line 72 in file "C:\fgr\16gb\0000 interior\deVolt\sw\v3dig\interrupts.c"
  9231 ;; Parameters:    Size  Location     Type
  9232 ;;		None
  9233 ;; Auto vars:     Size  Location     Type
  9234 ;;		None
  9235 ;; Return value:  Size  Location     Type
  9236 ;;		None               void
  9237 ;; Registers used:
  9238 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9239 ;; Tracked objects:
  9240 ;;		On entry : 0/0
  9241 ;;		On exit  : E/0
  9242 ;;		Unchanged: FFFFFFF0/0
  9243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9244 ;;      Params:         0       0       0       0       0       0       0       0       0
  9245 ;;      Locals:         2       0       0       0       0       0       0       0       0
  9246 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9247 ;;      Totals:         2       0       0       0       0       0       0       0       0
  9248 ;;Total ram usage:        2 bytes
  9249 ;; Hardware stack levels used:    1
  9250 ;; Hardware stack levels required when called:    4
  9251 ;; This function calls:
  9252 ;;		i1_timerDriver
  9253 ;;		_pulsPinDriver
  9254 ;; This function is called by:
  9255 ;;		_isr2
  9256 ;; This function uses a non-reentrant model
  9257 ;;
  9258                           
  9259                           	psect	text29
  9260  002524                     __ptext29:
  9261                           	opt stack 0
  9262  002524                     _isr_timer3:
  9263                           	opt stack 21
  9264                           
  9265                           ;interrupts.c: 73: TMR3=64036UL;
  9266  002524  0EFA               	movlw	250
  9267  002526  6EB3               	movwf	4019,c	;volatile
  9268  002528  0E24               	movlw	36
  9269  00252A  6EB2               	movwf	4018,c	;volatile
  9270                           
  9271                           ;interrupts.c: 75: timerDriver(TMR_ADCSAMPLE);
  9272  00252C  0E0C               	movlw	12
  9273  00252E  ECA6  F00E         	call	i1_timerDriver
  9274                           
  9275                           ; BSR set to: 1
  9276                           ;interrupts.c: 76: timerDriver(TMR_250MS);
  9277  002532  0E04               	movlw	4
  9278  002534  ECA6  F00E         	call	i1_timerDriver
  9279                           
  9280                           ; BSR set to: 1
  9281                           ;interrupts.c: 78: timerDriver(TMR_BEEP);
  9282  002538  0E02               	movlw	2
  9283  00253A  ECA6  F00E         	call	i1_timerDriver
  9284                           
  9285                           ; BSR set to: 1
  9286                           ;interrupts.c: 79: if((timerMem[TMR_BEEP].flag?!(timerMem[TMR_BEEP].flag=0):0)) PORTCbit
      +                          s.RC6=0;
  9287  00253E  B396               	btfsc	(_timerMem+11)& (0+255),1,b
  9288  002540  D002               	goto	i1l6127
  9289                           
  9290                           ; BSR set to: 1
  9291  002542  6A08               	clrf	_isr_timer3$1607,c
  9292  002544  D00A               	goto	L56
  9293  002546                     i1l6127:
  9294                           
  9295                           ; BSR set to: 1
  9296  002546  5196               	movf	(_timerMem+11)& (0+255),w,b
  9297  002548  0BFD               	andlw	-3
  9298  00254A  6F96               	movwf	(_timerMem+11)& (0+255),b
  9299  00254C  0101               	movlb	1	; () banked
  9300  00254E  3196               	rrcf	(_timerMem+11)& (0+255),w,b
  9301  002550  0B01               	andlw	1
  9302  002552  0E00               	movlw	0
  9303  002554  B4D8               	btfsc	status,2,c
  9304  002556  0E01               	movlw	1
  9305  002558  6E08               	movwf	_isr_timer3$1607,c
  9306  00255A                     L56:
  9307  00255A  6A09               	clrf	_isr_timer3$1607+1,c
  9308                           
  9309                           ; BSR set to: 1
  9310  00255C  5009               	movf	_isr_timer3$1607+1,w,c
  9311  00255E  1008               	iorwf	_isr_timer3$1607,w,c
  9312  002560  A4D8               	btfss	status,2,c
  9313                           
  9314                           ; BSR set to: 1
  9315  002562  9C82               	bcf	3970,6,c	;volatile
  9316                           
  9317                           ; BSR set to: 1
  9318                           ;interrupts.c: 81: pulsPinDriver();
  9319  002564  ECF6  F00A         	call	_pulsPinDriver	;wreg free
  9320                           
  9321                           ;interrupts.c: 83: PIR2bits.TMR3IF=0;
  9322  002568  92A1               	bcf	4001,1,c	;volatile
  9323  00256A  0012               	return	
  9324  00256C                     __end_of_isr_timer3:
  9325                           	opt stack 0
  9326                           tblptru	equ	0xFF8
  9327                           tblptrh	equ	0xFF7
  9328                           tblptrl	equ	0xFF6
  9329                           tablat	equ	0xFF5
  9330                           prodh	equ	0xFF4
  9331                           prodl	equ	0xFF3
  9332                           intcon	equ	0xFF2
  9333                           intcon2	equ	0xFF1
  9334                           postinc0	equ	0xFEE
  9335                           wreg	equ	0xFE8
  9336                           indf1	equ	0xFE7
  9337                           postinc1	equ	0xFE6
  9338                           postdec1	equ	0xFE5
  9339                           fsr1h	equ	0xFE2
  9340                           fsr1l	equ	0xFE1
  9341                           bsr	equ	0xFE0
  9342                           indf2	equ	0xFDF
  9343                           postinc2	equ	0xFDE
  9344                           postdec2	equ	0xFDD
  9345                           plusw2	equ	0xFDB
  9346                           fsr2h	equ	0xFDA
  9347                           fsr2l	equ	0xFD9
  9348                           status	equ	0xFD8
  9349                           
  9350 ;; *************** function _isr_adc *****************
  9351 ;; Defined at:
  9352 ;;		line 40 in file "C:\fgr\16gb\0000 interior\deVolt\sw\v3dig\adc.c"
  9353 ;; Parameters:    Size  Location     Type
  9354 ;;		None
  9355 ;; Auto vars:     Size  Location     Type
  9356 ;;		None
  9357 ;; Return value:  Size  Location     Type
  9358 ;;		None               void
  9359 ;; Registers used:
  9360 ;;		wreg, status,2, status,0
  9361 ;; Tracked objects:
  9362 ;;		On entry : 0/0
  9363 ;;		On exit  : F/0
  9364 ;;		Unchanged: FFFFFFF0/0
  9365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9366 ;;      Params:         0       0       0       0       0       0       0       0       0
  9367 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9368 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9369 ;;      Totals:         0       0       0       0       0       0       0       0       0
  9370 ;;Total ram usage:        0 bytes
  9371 ;; Hardware stack levels used:    1
  9372 ;; Hardware stack levels required when called:    3
  9373 ;; This function calls:
  9374 ;;		Nothing
  9375 ;; This function is called by:
  9376 ;;		_isr2
  9377 ;; This function uses a non-reentrant model
  9378 ;;
  9379                           
  9380                           	psect	text30
  9381  00279C                     __ptext30:
  9382                           	opt stack 0
  9383  00279C                     _isr_adc:
  9384                           	opt stack 22
  9385                           
  9386                           ;adc.c: 41: adcStruct.chComp=ADCON0bits.CHS;
  9387  00279C  30C2               	rrcf	4034,w,c	;volatile
  9388  00279E  32E8               	rrcf	wreg,f,c
  9389  0027A0  0B0F               	andlw	15
  9390  0027A2  0100               	movlb	0	; () banked
  9391  0027A4  6FAE               	movwf	(_adcStruct+1)& (0+255),b
  9392                           
  9393                           ; BSR set to: 0
  9394                           ;adc.c: 42: adcStruct.completeFlg=1;
  9395  0027A6  81AD               	bsf	_adcStruct& (0+255),0,b
  9396                           
  9397                           ; BSR set to: 0
  9398                           ;adc.c: 44: PIR1bits.ADIF=0;
  9399  0027A8  9C9E               	bcf	3998,6,c	;volatile
  9400                           
  9401                           ; BSR set to: 0
  9402  0027AA  0012               	return	
  9403  0027AC                     __end_of_isr_adc:
  9404                           	opt stack 0
  9405                           tblptru	equ	0xFF8
  9406                           tblptrh	equ	0xFF7
  9407                           tblptrl	equ	0xFF6
  9408                           tablat	equ	0xFF5
  9409                           prodh	equ	0xFF4
  9410                           prodl	equ	0xFF3
  9411                           intcon	equ	0xFF2
  9412                           intcon2	equ	0xFF1
  9413                           postinc0	equ	0xFEE
  9414                           wreg	equ	0xFE8
  9415                           indf1	equ	0xFE7
  9416                           postinc1	equ	0xFE6
  9417                           postdec1	equ	0xFE5
  9418                           fsr1h	equ	0xFE2
  9419                           fsr1l	equ	0xFE1
  9420                           bsr	equ	0xFE0
  9421                           indf2	equ	0xFDF
  9422                           postinc2	equ	0xFDE
  9423                           postdec2	equ	0xFDD
  9424                           plusw2	equ	0xFDB
  9425                           fsr2h	equ	0xFDA
  9426                           fsr2l	equ	0xFD9
  9427                           status	equ	0xFD8
  9428                           
  9429 ;; *************** function _pulsPinDriver *****************
  9430 ;; Defined at:
  9431 ;;		line 14 in file "C:\fgr\16gb\libSwPic\oldV2\lib_sw_pic_20171007\pulsadorPin_1ms.c"
  9432 ;; Parameters:    Size  Location     Type
  9433 ;;		None
  9434 ;; Auto vars:     Size  Location     Type
  9435 ;;  i               1    6[COMRAM] unsigned char 
  9436 ;;  j               1    0        unsigned char 
  9437 ;; Return value:  Size  Location     Type
  9438 ;;		None               void
  9439 ;; Registers used:
  9440 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9441 ;; Tracked objects:
  9442 ;;		On entry : F/1
  9443 ;;		On exit  : E/0
  9444 ;;		Unchanged: FFFFFFF0/0
  9445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9446 ;;      Params:         0       0       0       0       0       0       0       0       0
  9447 ;;      Locals:         1       0       0       0       0       0       0       0       0
  9448 ;;      Temps:          6       0       0       0       0       0       0       0       0
  9449 ;;      Totals:         7       0       0       0       0       0       0       0       0
  9450 ;;Total ram usage:        7 bytes
  9451 ;; Hardware stack levels used:    1
  9452 ;; Hardware stack levels required when called:    3
  9453 ;; This function calls:
  9454 ;;		Nothing
  9455 ;; This function is called by:
  9456 ;;		_isr_timer3
  9457 ;; This function uses a non-reentrant model
  9458 ;;
  9459                           
  9460                           	psect	text31
  9461  0015EC                     __ptext31:
  9462                           	opt stack 0
  9463  0015EC                     _pulsPinDriver:
  9464                           	opt stack 21
  9465                           
  9466                           ; BSR set to: 1
  9467                           ;pulsadorPin_1ms.c: 15: char i,j;
  9468                           ;pulsadorPin_1ms.c: 17: for(i=0;i<PULS_PIN_CANT;i++)
  9469                           
  9470                           ; BSR set to: 0
  9471  0015EC  6A07               	clrf	pulsPinDriver@i,c
  9472  0015EE                     i1l5767:
  9473                           
  9474                           ;pulsadorPin_1ms.c: 18: {
  9475                           ;pulsadorPin_1ms.c: 19: pulsPin[i].state=!(((1UL<<(pulsPin[i].bitNum)) & (*(pulsPin[i].p
      +                          2port)))==0);
  9476  0015EE  5007               	movf	pulsPinDriver@i,w,c
  9477  0015F0  0D04               	mullw	4
  9478  0015F2  50F3               	movf	prodl,w,c
  9479  0015F4  0F3D               	addlw	low _pulsPin
  9480  0015F6  6ED9               	movwf	fsr2l,c
  9481  0015F8  6ADA               	clrf	fsr2h,c
  9482  0015FA  CFDE F001          	movff	postinc2,??_pulsPinDriver
  9483  0015FE  CFDD F002          	movff	postdec2,??_pulsPinDriver+1
  9484  001602  C001  FFD9         	movff	??_pulsPinDriver,fsr2l
  9485  001606  C002  FFDA         	movff	??_pulsPinDriver+1,fsr2h
  9486  00160A  50DF               	movf	indf2,w,c
  9487  00160C  6E03               	movwf	(??_pulsPinDriver+2)& (0+255),c
  9488  00160E  D883               	call	PL7	;call to abstracted procedure
  9489  001610  50DF               	movf	indf2,w,c
  9490  001612  0B07               	andlw	7
  9491  001614  6E04               	movwf	(??_pulsPinDriver+3)& (0+255),c
  9492  001616  0E01               	movlw	1
  9493  001618  6E05               	movwf	(??_pulsPinDriver+4)& (0+255),c
  9494  00161A  2A04               	incf	??_pulsPinDriver+3,f,c
  9495  00161C  D002               	goto	i1u694_24
  9496  00161E                     i1u694_25:
  9497  00161E  90D8               	bcf	status,0,c
  9498  001620  3605               	rlcf	??_pulsPinDriver+4,f,c
  9499  001622                     i1u694_24:
  9500  001622  2E04               	decfsz	??_pulsPinDriver+3,f,c
  9501  001624  D7FC               	goto	i1u694_25
  9502  001626  5005               	movf	??_pulsPinDriver+4,w,c
  9503  001628  1403               	andwf	??_pulsPinDriver+2,w,c
  9504  00162A  0E01               	movlw	1
  9505  00162C  B4D8               	btfsc	status,2,c
  9506  00162E  0E00               	movlw	0
  9507  001630  6E06               	movwf	(??_pulsPinDriver+5)& (0+255),c
  9508  001632  D871               	call	PL7	;call to abstracted procedure
  9509  001634  4606               	rlncf	??_pulsPinDriver+5,f,c
  9510  001636  4606               	rlncf	??_pulsPinDriver+5,f,c
  9511  001638  4606               	rlncf	??_pulsPinDriver+5,f,c
  9512  00163A  50DF               	movf	indf2,w,c
  9513  00163C  1806               	xorwf	??_pulsPinDriver+5,w,c
  9514  00163E  0BF7               	andlw	-9
  9515  001640  1806               	xorwf	??_pulsPinDriver+5,w,c
  9516  001642  6EDF               	movwf	indf2,c
  9517                           
  9518                           ;pulsadorPin_1ms.c: 20: if(pulsPin[i].state!=pulsPin[i].prevState)
  9519  001644  D868               	call	PL7	;call to abstracted procedure
  9520  001646  38DF               	swapf	indf2,w,c
  9521  001648  0B01               	andlw	1
  9522  00164A  6E01               	movwf	??_pulsPinDriver& (0+255),c
  9523  00164C  D864               	call	PL7	;call to abstracted procedure
  9524  00164E  30DF               	rrcf	indf2,w,c
  9525  001650  32E8               	rrcf	wreg,f,c
  9526  001652  32E8               	rrcf	wreg,f,c
  9527  001654  0B01               	andlw	1
  9528  001656  1801               	xorwf	??_pulsPinDriver,w,c
  9529  001658  E054               	bz	i1l5815
  9530                           
  9531                           ;pulsadorPin_1ms.c: 21: {
  9532                           ;pulsadorPin_1ms.c: 22: if(pulsPin[i].fp && pulsPin[i].state==1 && pulsPin[i].prevState=
      +                          =0)
  9533  00165A  D85D               	call	PL7	;call to abstracted procedure
  9534  00165C  50DF               	movf	indf2,w,c
  9535  00165E  6E01               	movwf	??_pulsPinDriver& (0+255),c
  9536  001660  AA01               	btfss	??_pulsPinDriver,5,c
  9537  001662  D01E               	goto	i1l5791
  9538  001664  5007               	movf	pulsPinDriver@i,w,c
  9539  001666  D85E               	call	PL8	;call to abstracted procedure
  9540  001668  A601               	btfss	??_pulsPinDriver,3,c
  9541  00166A  D01A               	goto	i1l5791
  9542  00166C  5007               	movf	pulsPinDriver@i,w,c
  9543  00166E  D85A               	call	PL8	;call to abstracted procedure
  9544  001670  B801               	btfsc	??_pulsPinDriver,4,c
  9545  001672  D016               	goto	i1l5791
  9546                           
  9547                           ;pulsadorPin_1ms.c: 23: {
  9548                           ;pulsadorPin_1ms.c: 24: if(pulsPin[i].timer)
  9549  001674  5007               	movf	pulsPinDriver@i,w,c
  9550  001676  0D04               	mullw	4
  9551  001678  50F3               	movf	prodl,w,c
  9552  00167A  0F40               	addlw	low (_pulsPin+3)
  9553  00167C  6ED9               	movwf	fsr2l,c
  9554  00167E  6ADA               	clrf	fsr2h,c
  9555  001680  50DF               	movf	indf2,w,c
  9556  001682  E00B               	bz	i1l5783
  9557                           
  9558                           ;pulsadorPin_1ms.c: 25: if(pulsPin[i].unbounceRst)
  9559  001684  D848               	call	PL7	;call to abstracted procedure
  9560  001686  50DF               	movf	indf2,w,c
  9561  001688  6E01               	movwf	??_pulsPinDriver& (0+255),c
  9562  00168A  AE01               	btfss	??_pulsPinDriver,7,c
  9563  00168C  D003               	goto	i1l5781
  9564                           
  9565                           ;pulsadorPin_1ms.c: 26: pulsPin[i].timer=100;
  9566  00168E  5007               	movf	pulsPinDriver@i,w,c
  9567  001690  D858               	call	PL20	;call to abstracted procedure
  9568  001692  D006               	goto	i1l5791
  9569  001694                     i1l5781:
  9570                           
  9571                           ;pulsadorPin_1ms.c: 27: else
  9572                           ;pulsadorPin_1ms.c: 28: pulsPin[i].timer--;
  9573  001694  D84F               	call	PL15	;call to abstracted procedure
  9574  001696  06DF               	decf	indf2,f,c
  9575  001698  D003               	goto	i1l5791
  9576  00169A                     i1l5783:
  9577                           
  9578                           ;pulsadorPin_1ms.c: 29: else
  9579                           ;pulsadorPin_1ms.c: 30: {
  9580                           ;pulsadorPin_1ms.c: 31: pulsPin[i].timer=100;
  9581  00169A  D84C               	call	PL15	;call to abstracted procedure
  9582                           
  9583                           ;pulsadorPin_1ms.c: 32: pulsPinBuffer.pulsId=i;
  9584                           
  9585                           ; BSR set to: 0
  9586                           ;pulsadorPin_1ms.c: 33: pulsPinBuffer.flag=1;
  9587  00169C  D85A               	call	PL30	;call to abstracted procedure
  9588                           
  9589                           ; BSR set to: 0
  9590                           ;pulsadorPin_1ms.c: 34: pulsPinBuffer.fp=1;
  9591  00169E  8DBC               	bsf	_pulsPinBuffer& (0+255),6,b
  9592  0016A0                     i1l5791:
  9593                           
  9594                           ;pulsadorPin_1ms.c: 35: }
  9595                           ;pulsadorPin_1ms.c: 36: }
  9596                           ;pulsadorPin_1ms.c: 37: if(pulsPin[i].fn && pulsPin[i].state==0 && pulsPin[i].prevState=
      +                          =1)
  9597  0016A0  D83A               	call	PL7	;call to abstracted procedure
  9598  0016A2  50DF               	movf	indf2,w,c
  9599  0016A4  6E01               	movwf	??_pulsPinDriver& (0+255),c
  9600  0016A6  AC01               	btfss	??_pulsPinDriver,6,c
  9601  0016A8  D01E               	goto	i1l5813
  9602  0016AA  5007               	movf	pulsPinDriver@i,w,c
  9603  0016AC  D83B               	call	PL8	;call to abstracted procedure
  9604  0016AE  B601               	btfsc	??_pulsPinDriver,3,c
  9605  0016B0  D01A               	goto	i1l5813
  9606  0016B2  5007               	movf	pulsPinDriver@i,w,c
  9607  0016B4  D837               	call	PL8	;call to abstracted procedure
  9608  0016B6  A801               	btfss	??_pulsPinDriver,4,c
  9609  0016B8  D016               	goto	i1l5813
  9610                           
  9611                           ;pulsadorPin_1ms.c: 38: {
  9612                           ;pulsadorPin_1ms.c: 39: if(pulsPin[i].timer)
  9613  0016BA  5007               	movf	pulsPinDriver@i,w,c
  9614  0016BC  0D04               	mullw	4
  9615  0016BE  50F3               	movf	prodl,w,c
  9616  0016C0  0F40               	addlw	low (_pulsPin+3)
  9617  0016C2  6ED9               	movwf	fsr2l,c
  9618  0016C4  6ADA               	clrf	fsr2h,c
  9619  0016C6  50DF               	movf	indf2,w,c
  9620  0016C8  E00B               	bz	i1l5805
  9621                           
  9622                           ;pulsadorPin_1ms.c: 40: if(pulsPin[i].unbounceRst)
  9623  0016CA  D825               	call	PL7	;call to abstracted procedure
  9624  0016CC  50DF               	movf	indf2,w,c
  9625  0016CE  6E01               	movwf	??_pulsPinDriver& (0+255),c
  9626  0016D0  AE01               	btfss	??_pulsPinDriver,7,c
  9627  0016D2  D003               	goto	i1l5803
  9628                           
  9629                           ;pulsadorPin_1ms.c: 41: pulsPin[i].timer=100;
  9630  0016D4  5007               	movf	pulsPinDriver@i,w,c
  9631  0016D6  D835               	call	PL20	;call to abstracted procedure
  9632  0016D8  D006               	goto	i1l5813
  9633  0016DA                     i1l5803:
  9634                           
  9635                           ;pulsadorPin_1ms.c: 42: else
  9636                           ;pulsadorPin_1ms.c: 43: pulsPin[i].timer--;
  9637  0016DA  D82C               	call	PL15	;call to abstracted procedure
  9638  0016DC  06DF               	decf	indf2,f,c
  9639  0016DE  D003               	goto	i1l5813
  9640  0016E0                     i1l5805:
  9641                           
  9642                           ;pulsadorPin_1ms.c: 44: else
  9643                           ;pulsadorPin_1ms.c: 45: {
  9644                           ;pulsadorPin_1ms.c: 46: pulsPin[i].timer=100;
  9645  0016E0  D829               	call	PL15	;call to abstracted procedure
  9646                           
  9647                           ;pulsadorPin_1ms.c: 47: pulsPinBuffer.pulsId=i;
  9648                           
  9649                           ; BSR set to: 0
  9650                           ;pulsadorPin_1ms.c: 48: pulsPinBuffer.flag=1;
  9651  0016E2  D837               	call	PL30	;call to abstracted procedure
  9652                           
  9653                           ; BSR set to: 0
  9654                           ;pulsadorPin_1ms.c: 49: pulsPinBuffer.fp=0;
  9655  0016E4  9DBC               	bcf	_pulsPinBuffer& (0+255),6,b
  9656  0016E6                     i1l5813:
  9657                           
  9658                           ;pulsadorPin_1ms.c: 50: }
  9659                           ;pulsadorPin_1ms.c: 51: }
  9660                           ;pulsadorPin_1ms.c: 52: pulsPin[i].prevState=pulsPin[i].state;
  9661  0016E6  D817               	call	PL7	;call to abstracted procedure
  9662  0016E8  30DF               	rrcf	indf2,w,c
  9663  0016EA  32E8               	rrcf	wreg,f,c
  9664  0016EC  32E8               	rrcf	wreg,f,c
  9665  0016EE  0B01               	andlw	1
  9666  0016F0  6E01               	movwf	??_pulsPinDriver& (0+255),c
  9667  0016F2  D811               	call	PL7	;call to abstracted procedure
  9668  0016F4  3A01               	swapf	??_pulsPinDriver,f,c
  9669  0016F6  50DF               	movf	indf2,w,c
  9670  0016F8  1801               	xorwf	??_pulsPinDriver,w,c
  9671  0016FA  0BEF               	andlw	-17
  9672  0016FC  1801               	xorwf	??_pulsPinDriver,w,c
  9673  0016FE  6EDF               	movwf	indf2,c
  9674                           
  9675                           ;pulsadorPin_1ms.c: 53: }
  9676  001700  D005               	goto	i1l5819
  9677  001702                     i1l5815:
  9678                           
  9679                           ;pulsadorPin_1ms.c: 54: else if(pulsPin[i].timer) pulsPin[i].timer--;
  9680  001702  D818               	call	PL15	;call to abstracted procedure
  9681  001704  50DF               	movf	indf2,w,c
  9682  001706  E002               	bz	i1l5819
  9683  001708  D815               	call	PL15	;call to abstracted procedure
  9684  00170A  06DF               	decf	indf2,f,c
  9685  00170C                     i1l5819:
  9686  00170C  2A07               	incf	pulsPinDriver@i,f,c
  9687  00170E  0E03               	movlw	3
  9688  001710  6407               	cpfsgt	pulsPinDriver@i,c
  9689  001712  D76D               	goto	i1l5767
  9690  001714  0C03               	retlw	3
  9691  001716                     __end_of_pulsPinDriver:
  9692                           	opt stack 0
  9693  001716                     PL7:
  9694  001716  5007               	movf	pulsPinDriver@i,w,c
  9695  001718  0D04               	mullw	4
  9696  00171A  50F3               	movf	prodl,w,c
  9697  00171C  0F3F               	addlw	low (_pulsPin+2)
  9698  00171E  6ED9               	movwf	fsr2l,c
  9699  001720  6ADA               	clrf	fsr2h,c
  9700  001722  0012               	return	
  9701  001724                     PL8:
  9702  001724  0D04               	mullw	4
  9703  001726  50F3               	movf	prodl,w,c
  9704  001728  0F3F               	addlw	low (_pulsPin+2)
  9705  00172A  6ED9               	movwf	fsr2l,c
  9706  00172C  6ADA               	clrf	fsr2h,c
  9707  00172E  50DF               	movf	indf2,w,c
  9708  001730  6E01               	movwf	??_pulsPinDriver& (0+255),c
  9709  001732  0012               	return	
  9710  001734                     PL15:
  9711  001734  5007               	movf	pulsPinDriver@i,w,c
  9712  001736  0D04               	mullw	4
  9713  001738  50F3               	movf	prodl,w,c
  9714  00173A  0F40               	addlw	low (_pulsPin+3)
  9715  00173C  6ED9               	movwf	fsr2l,c
  9716  00173E  6ADA               	clrf	fsr2h,c
  9717  001740  0012               	return	
  9718  001742                     PL20:
  9719  001742  0D04               	mullw	4
  9720  001744  50F3               	movf	prodl,w,c
  9721  001746  0F40               	addlw	low (_pulsPin+3)
  9722  001748  6ED9               	movwf	fsr2l,c
  9723  00174A  6ADA               	clrf	fsr2h,c
  9724  00174C  0E64               	movlw	100
  9725  00174E  6EDF               	movwf	indf2,c
  9726  001750  0C64               	retlw	100
  9727  001752                     PL30:
  9728  001752  0E64               	movlw	100
  9729  001754  6EDF               	movwf	indf2,c
  9730  001756  0100               	movlb	0	; () banked
  9731  001758  51BC               	movf	_pulsPinBuffer& (0+255),w,b
  9732  00175A  1807               	xorwf	pulsPinDriver@i,w,c
  9733  00175C  0BE0               	andlw	-32
  9734  00175E  1807               	xorwf	pulsPinDriver@i,w,c
  9735  001760  6FBC               	movwf	_pulsPinBuffer& (0+255),b
  9736  001762  8BBC               	bsf	_pulsPinBuffer& (0+255),5,b
  9737  001764  0012               	return	
  9738                           tblptru	equ	0xFF8
  9739                           tblptrh	equ	0xFF7
  9740                           tblptrl	equ	0xFF6
  9741                           tablat	equ	0xFF5
  9742                           prodh	equ	0xFF4
  9743                           prodl	equ	0xFF3
  9744                           intcon	equ	0xFF2
  9745                           intcon2	equ	0xFF1
  9746                           postinc0	equ	0xFEE
  9747                           wreg	equ	0xFE8
  9748                           indf1	equ	0xFE7
  9749                           postinc1	equ	0xFE6
  9750                           postdec1	equ	0xFE5
  9751                           fsr1h	equ	0xFE2
  9752                           fsr1l	equ	0xFE1
  9753                           bsr	equ	0xFE0
  9754                           indf2	equ	0xFDF
  9755                           postinc2	equ	0xFDE
  9756                           postdec2	equ	0xFDD
  9757                           plusw2	equ	0xFDB
  9758                           fsr2h	equ	0xFDA
  9759                           fsr2l	equ	0xFD9
  9760                           status	equ	0xFD8
  9761                           
  9762 ;; *************** function i1_timerDriver *****************
  9763 ;; Defined at:
  9764 ;;		line 10 in file "C:\fgr\16gb\libSwPic\oldV2\lib_sw_pic_20171007\timer.c"
  9765 ;; Parameters:    Size  Location     Type
  9766 ;;  timerDriver     1    wreg     unsigned char 
  9767 ;; Auto vars:     Size  Location     Type
  9768 ;;  timerDriver     1    3[COMRAM] unsigned char 
  9769 ;; Return value:  Size  Location     Type
  9770 ;;		None               void
  9771 ;; Registers used:
  9772 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9773 ;; Tracked objects:
  9774 ;;		On entry : 0/0
  9775 ;;		On exit  : F/1
  9776 ;;		Unchanged: FFFFFFF0/0
  9777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9778 ;;      Params:         0       0       0       0       0       0       0       0       0
  9779 ;;      Locals:         1       0       0       0       0       0       0       0       0
  9780 ;;      Temps:          3       0       0       0       0       0       0       0       0
  9781 ;;      Totals:         4       0       0       0       0       0       0       0       0
  9782 ;;Total ram usage:        4 bytes
  9783 ;; Hardware stack levels used:    1
  9784 ;; Hardware stack levels required when called:    3
  9785 ;; This function calls:
  9786 ;;		Nothing
  9787 ;; This function is called by:
  9788 ;;		_isr_timer3
  9789 ;; This function uses a non-reentrant model
  9790 ;;
  9791                           
  9792                           	psect	text32
  9793  001D4C                     __ptext32:
  9794                           	opt stack 0
  9795  001D4C                     i1_timerDriver:
  9796                           	opt stack 21
  9797                           
  9798                           ;i1timerDriver@i stored from wreg
  9799  001D4C  CFE8 F004          	movff	wreg,i1timerDriver@i
  9800                           
  9801                           ;timer.c: 12: if(!timerMem[i].pause && timerMem[i].prescaler>0)
  9802  001D50  5004               	movf	i1timerDriver@i,w,c
  9803  001D52  0D04               	mullw	4
  9804  001D54  CFF3 F001          	movff	prodl,??i1_timerDriver
  9805  001D58  0E03               	movlw	3
  9806  001D5A  2601               	addwf	??i1_timerDriver,f,c
  9807  001D5C  0101               	movlb	1	; () banked
  9808  001D5E  0E8B               	movlw	low _timerMem
  9809  001D60  2401               	addwf	??i1_timerDriver,w,c
  9810  001D62  6ED9               	movwf	fsr2l,c
  9811  001D64  6ADA               	clrf	fsr2h,c
  9812  001D66  0E01               	movlw	high _timerMem
  9813  001D68  22DA               	addwfc	fsr2h,f,c
  9814  001D6A  50DF               	movf	indf2,w,c
  9815  001D6C  6E02               	movwf	(??i1_timerDriver+1)& (0+255),c
  9816  001D6E  B402               	btfsc	??i1_timerDriver+1,2,c
  9817  001D70  0012               	return	
  9818                           
  9819                           ; BSR set to: 1
  9820  001D72  5004               	movf	i1timerDriver@i,w,c
  9821  001D74  D840               	call	PL13	;call to abstracted procedure
  9822  001D76  CFDE F001          	movff	postinc2,??i1_timerDriver
  9823  001D7A  CFDE F002          	movff	postinc2,??i1_timerDriver+1
  9824  001D7E  CFDE F003          	movff	postinc2,??i1_timerDriver+2
  9825  001D82  5003               	movf	??i1_timerDriver+2,w,c
  9826  001D84  0A80               	xorlw	128
  9827  001D86  0F80               	addlw	128
  9828  001D88  E105               	bnz	i1u764_25
  9829  001D8A  0E00               	movlw	0
  9830  001D8C  5C02               	subwf	??i1_timerDriver+1,w,c
  9831  001D8E  E102               	bnz	i1u764_25
  9832  001D90  0E01               	movlw	1
  9833  001D92  5C01               	subwf	??i1_timerDriver,w,c
  9834  001D94                     i1u764_25:
  9835  001D94  A0D8               	btfss	status,0,c
  9836  001D96  0012               	return	
  9837                           
  9838                           ; BSR set to: 1
  9839                           ;timer.c: 13: {
  9840                           ;timer.c: 14: timerMem[i].prescaler--;
  9841  001D98  5004               	movf	i1timerDriver@i,w,c
  9842  001D9A  D82D               	call	PL13	;call to abstracted procedure
  9843  001D9C  0EFF               	movlw	255
  9844  001D9E  06DE               	decf	postinc2,f,c
  9845  001DA0  22DE               	addwfc	postinc2,f,c
  9846  001DA2  22DD               	addwfc	postdec2,f,c
  9847                           
  9848                           ;timer.c: 15: if(timerMem[i].prescaler==0)
  9849  001DA4  5004               	movf	i1timerDriver@i,w,c
  9850  001DA6  D827               	call	PL13	;call to abstracted procedure
  9851  001DA8  50DE               	movf	postinc2,w,c
  9852  001DAA  10DE               	iorwf	postinc2,w,c
  9853  001DAC  10DD               	iorwf	postdec2,w,c
  9854  001DAE  A4D8               	btfss	status,2,c
  9855  001DB0  0012               	return	
  9856                           
  9857                           ; BSR set to: 1
  9858                           ;timer.c: 16: {
  9859                           ;timer.c: 17: timerMem[i].flag=1;
  9860  001DB2  5004               	movf	i1timerDriver@i,w,c
  9861  001DB4  D828               	call	PL25	;call to abstracted procedure
  9862  001DB6  0E02               	movlw	2
  9863  001DB8  12DF               	iorwf	223,f,c
  9864                           
  9865                           ;timer.c: 18: if(timerMem[i].loop) timerMem[i].prescaler=timerDelayConstant[i];
  9866  001DBA  5004               	movf	i1timerDriver@i,w,c
  9867  001DBC  D824               	call	PL25	;call to abstracted procedure
  9868  001DBE  50DF               	movf	indf2,w,c
  9869  001DC0  6E02               	movwf	(??i1_timerDriver+1)& (0+255),c
  9870  001DC2  A002               	btfss	??i1_timerDriver+1,0,c
  9871  001DC4  0012               	return	
  9872                           
  9873                           ; BSR set to: 1
  9874  001DC6  5004               	movf	i1timerDriver@i,w,c
  9875  001DC8  0D03               	mullw	3
  9876  001DCA  0E00               	movlw	low _timerDelayConstant
  9877  001DCC  24F3               	addwf	prodl,w,c
  9878  001DCE  6ED9               	movwf	fsr2l,c
  9879  001DD0  6ADA               	clrf	fsr2h,c
  9880  001DD2  0E01               	movlw	high _timerDelayConstant
  9881  001DD4  22DA               	addwfc	fsr2h,f,c
  9882  001DD6  5004               	movf	i1timerDriver@i,w,c
  9883  001DD8  0D04               	mullw	4
  9884  001DDA  0E8B               	movlw	low _timerMem
  9885  001DDC  24F3               	addwf	prodl,w,c
  9886  001DDE  6EE1               	movwf	fsr1l,c
  9887  001DE0  6AE2               	clrf	fsr1h,c
  9888  001DE2  0E01               	movlw	high _timerMem
  9889  001DE4  22E2               	addwfc	fsr1h,f,c
  9890  001DE6  CFDE FFE6          	movff	postinc2,postinc1
  9891  001DEA  CFDE FFE6          	movff	postinc2,postinc1
  9892  001DEE  CFDE FFE5          	movff	postinc2,postdec1
  9893  001DF2  52E5               	movf	postdec1,f,c
  9894                           
  9895                           ; BSR set to: 1
  9896  001DF4  0012               	return	
  9897  001DF6                     __end_ofi1_timerDriver:
  9898                           	opt stack 0
  9899  001DF6                     PL13:
  9900  001DF6  0D04               	mullw	4
  9901  001DF8  0E8B               	movlw	low _timerMem
  9902  001DFA  24F3               	addwf	prodl,w,c
  9903  001DFC  6ED9               	movwf	fsr2l,c
  9904  001DFE  6ADA               	clrf	fsr2h,c
  9905  001E00  0E01               	movlw	high _timerMem
  9906  001E02  22DA               	addwfc	fsr2h,f,c
  9907  001E04  0012               	return	
  9908  001E06                     PL25:
  9909  001E06  0D04               	mullw	4
  9910  001E08  CFF3 F001          	movff	prodl,??i1_timerDriver
  9911  001E0C  0E03               	movlw	3
  9912  001E0E  2601               	addwf	??i1_timerDriver,f,c
  9913  001E10  0E8B               	movlw	low _timerMem
  9914  001E12  2401               	addwf	??i1_timerDriver,w,c
  9915  001E14  6ED9               	movwf	fsr2l,c
  9916  001E16  6ADA               	clrf	fsr2h,c
  9917  001E18  0E01               	movlw	high _timerMem
  9918  001E1A  22DA               	addwfc	fsr2h,f,c
  9919  001E1C  0012               	return	
  9920                           tblptru	equ	0xFF8
  9921                           tblptrh	equ	0xFF7
  9922                           tblptrl	equ	0xFF6
  9923                           tablat	equ	0xFF5
  9924                           prodh	equ	0xFF4
  9925                           prodl	equ	0xFF3
  9926                           intcon	equ	0xFF2
  9927                           intcon2	equ	0xFF1
  9928                           postinc0	equ	0xFEE
  9929                           wreg	equ	0xFE8
  9930                           indf1	equ	0xFE7
  9931                           postinc1	equ	0xFE6
  9932                           postdec1	equ	0xFE5
  9933                           fsr1h	equ	0xFE2
  9934                           fsr1l	equ	0xFE1
  9935                           bsr	equ	0xFE0
  9936                           indf2	equ	0xFDF
  9937                           postinc2	equ	0xFDE
  9938                           postdec2	equ	0xFDD
  9939                           plusw2	equ	0xFDB
  9940                           fsr2h	equ	0xFDA
  9941                           fsr2l	equ	0xFD9
  9942                           status	equ	0xFD8
  9943                           
  9944 ;; *************** function _isr *****************
  9945 ;; Defined at:
  9946 ;;		line 21 in file "C:\fgr\16gb\0000 interior\deVolt\sw\v3dig\interrupts.c"
  9947 ;; Parameters:    Size  Location     Type
  9948 ;;		None
  9949 ;; Auto vars:     Size  Location     Type
  9950 ;;		None
  9951 ;; Return value:  Size  Location     Type
  9952 ;;		None               void
  9953 ;; Registers used:
  9954 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, structret, tblptrl, tblptrh, tblptr
      +u, prodl, prodh, bsr, cstack
  9955 ;; Tracked objects:
  9956 ;;		On entry : 0/0
  9957 ;;		On exit  : 0/0
  9958 ;;		Unchanged: FFFFFFF0/0
  9959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9960 ;;      Params:         0       0       0       0       0       0       0       0       0
  9961 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9962 ;;      Temps:         14       0       0       0       0       0       0       0       0
  9963 ;;      Totals:        14       0       0       0       0       0       0       0       0
  9964 ;;Total ram usage:       14 bytes
  9965 ;; Hardware stack levels used:    1
  9966 ;; Hardware stack levels required when called:    2
  9967 ;; This function calls:
  9968 ;;		_isr_timer0
  9969 ;; This function is called by:
  9970 ;;		Interrupt level 2
  9971 ;; This function uses a non-reentrant model
  9972 ;;
  9973                           
  9974                           	psect	intcode
  9975  000008                     __pintcode:
  9976                           	opt stack 0
  9977  000008                     _isr:
  9978                           	opt stack 21
  9979                           
  9980                           ; BSR set to: 1
  9981  000008  CFFA F01A          	movff	pclath,??_isr
  9982  00000C  CFFB F01B          	movff	pclatu,??_isr+1
  9983  000010  CFE9 F01C          	movff	fsr0l,??_isr+2
  9984  000014  ED7F  F011         	call	int_func,f	;refresh shadow registers
  9985                           pclatu	equ	0xFFB
  9986                           pclath	equ	0xFFA
  9987                           tblptru	equ	0xFF8
  9988                           tblptrh	equ	0xFF7
  9989                           tblptrl	equ	0xFF6
  9990                           tablat	equ	0xFF5
  9991                           prodh	equ	0xFF4
  9992                           prodl	equ	0xFF3
  9993                           intcon	equ	0xFF2
  9994                           intcon2	equ	0xFF1
  9995                           postinc0	equ	0xFEE
  9996                           fsr0l	equ	0xFE9
  9997                           wreg	equ	0xFE8
  9998                           indf1	equ	0xFE7
  9999                           postinc1	equ	0xFE6
 10000                           postdec1	equ	0xFE5
 10001                           fsr1h	equ	0xFE2
 10002                           fsr1l	equ	0xFE1
 10003                           bsr	equ	0xFE0
 10004                           indf2	equ	0xFDF
 10005                           postinc2	equ	0xFDE
 10006                           postdec2	equ	0xFDD
 10007                           plusw2	equ	0xFDB
 10008                           fsr2h	equ	0xFDA
 10009                           fsr2l	equ	0xFD9
 10010                           status	equ	0xFD8
 10011                           
 10012                           	psect	intcode_body
 10013  0022FE                     __pintcode_body:
 10014                           	opt stack 21
 10015  0022FE                     int_func:
 10016                           	opt stack 21
 10017  0022FE  0006               	pop		; remove dummy address from shadow register refresh
 10018  002300  CFEA F01D          	movff	fsr0h,??_isr+3
 10019  002304  CFE1 F01E          	movff	fsr1l,??_isr+4
 10020  002308  CFE2 F01F          	movff	fsr1h,??_isr+5
 10021  00230C  CFD9 F020          	movff	fsr2l,??_isr+6
 10022  002310  CFDA F021          	movff	fsr2h,??_isr+7
 10023  002314  CFF3 F022          	movff	prodl,??_isr+8
 10024  002318  CFF4 F023          	movff	prodh,??_isr+9
 10025  00231C  CFF6 F024          	movff	tblptrl,??_isr+10
 10026  002320  CFF7 F025          	movff	tblptrh,??_isr+11
 10027  002324  CFF8 F026          	movff	tblptru,??_isr+12
 10028  002328  CFF5 F027          	movff	tablat,??_isr+13
 10029  00232C                     
 10030                           ;interrupts.c: 22: if(INTCONbits.TMR0IE && INTCONbits.TMR0IF) isr_timer0();
 10031  00232C  AAF2               	btfss	intcon,5,c	;volatile
 10032  00232E  D001               	goto	i2u681_41
 10033  002330  D001               	goto	i2u681_40
 10034  002332                     i2u681_41:
 10035  002332  D006               	goto	i2l647
 10036  002334                     i2u681_40:
 10037  002334  A4F2               	btfss	intcon,2,c	;volatile
 10038  002336  D001               	goto	i2u682_41
 10039  002338  D001               	goto	i2u682_40
 10040  00233A                     i2u682_41:
 10041  00233A  D002               	goto	i2l647
 10042  00233C                     i2u682_40:
 10043  00233C  ECC8  F00F         	call	_isr_timer0	;wreg free
 10044  002340                     i2l647:
 10045  002340  C027  FFF5         	movff	??_isr+13,tablat
 10046  002344  C026  FFF8         	movff	??_isr+12,tblptru
 10047  002348  C025  FFF7         	movff	??_isr+11,tblptrh
 10048  00234C  C024  FFF6         	movff	??_isr+10,tblptrl
 10049  002350  C023  FFF4         	movff	??_isr+9,prodh
 10050  002354  C022  FFF3         	movff	??_isr+8,prodl
 10051  002358  C021  FFDA         	movff	??_isr+7,fsr2h
 10052  00235C  C020  FFD9         	movff	??_isr+6,fsr2l
 10053  002360  C01F  FFE2         	movff	??_isr+5,fsr1h
 10054  002364  C01E  FFE1         	movff	??_isr+4,fsr1l
 10055  002368  C01D  FFEA         	movff	??_isr+3,fsr0h
 10056  00236C  C01C  FFE9         	movff	??_isr+2,fsr0l
 10057  002370  C01B  FFFB         	movff	??_isr+1,pclatu
 10058  002374  C01A  FFFA         	movff	??_isr,pclath
 10059  002378  0011               	retfie		f
 10060  00237A                     __end_of_isr:
 10061                           	opt stack 0
 10062                           pclatu	equ	0xFFB
 10063                           pclath	equ	0xFFA
 10064                           tblptru	equ	0xFF8
 10065                           tblptrh	equ	0xFF7
 10066                           tblptrl	equ	0xFF6
 10067                           tablat	equ	0xFF5
 10068                           prodh	equ	0xFF4
 10069                           prodl	equ	0xFF3
 10070                           intcon	equ	0xFF2
 10071                           intcon2	equ	0xFF1
 10072                           postinc0	equ	0xFEE
 10073                           fsr0h	equ	0xFEA
 10074                           fsr0l	equ	0xFE9
 10075                           wreg	equ	0xFE8
 10076                           indf1	equ	0xFE7
 10077                           postinc1	equ	0xFE6
 10078                           postdec1	equ	0xFE5
 10079                           fsr1h	equ	0xFE2
 10080                           fsr1l	equ	0xFE1
 10081                           bsr	equ	0xFE0
 10082                           indf2	equ	0xFDF
 10083                           postinc2	equ	0xFDE
 10084                           postdec2	equ	0xFDD
 10085                           plusw2	equ	0xFDB
 10086                           fsr2h	equ	0xFDA
 10087                           fsr2l	equ	0xFD9
 10088                           status	equ	0xFD8
 10089                           
 10090 ;; *************** function _isr_timer0 *****************
 10091 ;; Defined at:
 10092 ;;		line 33 in file "C:\fgr\16gb\0000 interior\deVolt\sw\v3dig\interrupts.c"
 10093 ;; Parameters:    Size  Location     Type
 10094 ;;		None
 10095 ;; Auto vars:     Size  Location     Type
 10096 ;;		None
 10097 ;; Return value:  Size  Location     Type
 10098 ;;		None               void
 10099 ;; Registers used:
 10100 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10101 ;; Tracked objects:
 10102 ;;		On entry : 0/0
 10103 ;;		On exit  : E/0
 10104 ;;		Unchanged: FFFFFFF0/0
 10105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10106 ;;      Params:         0       0       0       0       0       0       0       0       0
 10107 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10108 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10109 ;;      Totals:         0       0       0       0       0       0       0       0       0
 10110 ;;Total ram usage:        0 bytes
 10111 ;; Hardware stack levels used:    1
 10112 ;; Hardware stack levels required when called:    1
 10113 ;; This function calls:
 10114 ;;		_fseek
 10115 ;;		_fgetc
 10116 ;;		_char2pins
 10117 ;; This function is called by:
 10118 ;;		_isr
 10119 ;; This function uses a non-reentrant model
 10120 ;;
 10121                           
 10122                           	psect	text34
 10123  001F90                     __ptext34:
 10124                           	opt stack 0
 10125  001F90                     _isr_timer0:
 10126                           	opt stack 21
 10127                           
 10128                           ;interrupts.c: 34: if(tOnFlag)
 10129  001F90  503B               	movf	_tOnFlag,w,c
 10130  001F92  E03C               	bz	i2l5689
 10131                           
 10132                           ;interrupts.c: 35: {
 10133                           ;interrupts.c: 36: TMR0=brilloTon[brilloMem];
 10134  001F94  0E3E               	movlw	low _brilloTon
 10135  001F96  2439               	addwf	_brilloMem,w,c
 10136  001F98  6ED9               	movwf	fsr2l,c
 10137  001F9A  6ADA               	clrf	fsr2h,c
 10138  001F9C  0E01               	movlw	high _brilloTon
 10139  001F9E  22DA               	addwfc	fsr2h,f,c
 10140  001FA0  50DF               	movf	indf2,w,c
 10141  001FA2  6ED6               	movwf	4054,c	;volatile
 10142  001FA4  6AD7               	clrf	4055,c	;volatile
 10143                           
 10144                           ; BSR set to: 1
 10145                           ;interrupts.c: 37: tOnFlag=0;
 10146  001FA6  6A3B               	clrf	_tOnFlag,c
 10147                           
 10148                           ; BSR set to: 1
 10149                           ;interrupts.c: 39: if(segments.nextUp>3)
 10150  001FA8  0E03               	movlw	3
 10151  001FAA  0100               	movlb	0	; () banked
 10152  001FAC  65B9               	cpfsgt	_segments& (0+255),b
 10153  001FAE  D00F               	goto	i2l5679
 10154                           
 10155                           ; BSR set to: 0
 10156                           ;interrupts.c: 40: {
 10157                           ;interrupts.c: 41: fseek(&muxFile,0,SEEK_SET);
 10158  001FB0  0101               	movlb	1	; () banked
 10159  001FB2  0E01               	movlw	high _muxFile
 10160  001FB4  6E14               	movwf	?_fseek+1,c
 10161  001FB6  0E43               	movlw	low _muxFile
 10162  001FB8  6E13               	movwf	?_fseek,c
 10163  001FBA  6A16               	clrf	?_fseek+3,c
 10164  001FBC  6A15               	clrf	?_fseek+2,c
 10165  001FBE  6A18               	clrf	?_fseek+5,c
 10166  001FC0  0E02               	movlw	2
 10167  001FC2  6E17               	movwf	?_fseek+4,c
 10168  001FC4  EC26  F00D         	call	_fseek	;wreg free
 10169                           
 10170                           ; BSR set to: 1
 10171                           ;interrupts.c: 42: segments.nextUp=0;
 10172  001FC8  0100               	movlb	0	; () banked
 10173  001FCA  6BB9               	clrf	_segments& (0+255),b
 10174                           
 10175                           ;interrupts.c: 43: }
 10176  001FCC  D001               	goto	i2l5681
 10177  001FCE                     i2l5679:
 10178                           
 10179                           ; BSR set to: 0
 10180                           ;interrupts.c: 44: else segments.nextUp++;
 10181  001FCE  2BB9               	incf	_segments& (0+255),f,b
 10182  001FD0                     i2l5681:
 10183                           
 10184                           ; BSR set to: 0
 10185                           ;interrupts.c: 46: PORTBbits.RB3=0;
 10186  001FD0  9681               	bcf	3969,3,c	;volatile
 10187                           
 10188                           ; BSR set to: 0
 10189                           ;interrupts.c: 47: char2pins(fgetc(&muxFile));
 10190  001FD2  0101               	movlb	1	; () banked
 10191  001FD4  0E01               	movlw	high _muxFile
 10192  001FD6  6E14               	movwf	?_fgetc+1,c
 10193  001FD8  0E43               	movlw	low _muxFile
 10194  001FDA  6E13               	movwf	?_fgetc,c
 10195  001FDC  ECB6  F012         	call	_fgetc	;wreg free
 10196  001FE0  ECE2  F009         	call	_char2pins
 10197                           
 10198                           ;interrupts.c: 49: switch(segments.nextUp)
 10199  001FE4  D009               	goto	i2l5687
 10200  001FE6                     i2l660:
 10201                           
 10202                           ; BSR set to: 0
 10203  001FE6  8A80               	bsf	3968,5,c	;volatile
 10204  001FE8  D022               	goto	i2l5703
 10205  001FEA                     i2l662:
 10206                           
 10207                           ; BSR set to: 0
 10208  001FEA  8681               	bsf	3969,3,c	;volatile
 10209  001FEC  8280               	bsf	3968,1,c	;volatile
 10210  001FEE  D01F               	goto	i2l5703
 10211  001FF0                     i2l663:
 10212                           
 10213                           ; BSR set to: 0
 10214  001FF0  8080               	bsf	3968,0,c	;volatile
 10215  001FF2  D01D               	goto	i2l5703
 10216  001FF4                     i2l664:
 10217                           
 10218                           ; BSR set to: 0
 10219  001FF4  8880               	bsf	3968,4,c	;volatile
 10220  001FF6  D01B               	goto	i2l5703
 10221  001FF8                     i2l5687:
 10222                           
 10223                           ; BSR set to: 1
 10224  001FF8  0100               	movlb	0	; () banked
 10225  001FFA  51B9               	movf	_segments& (0+255),w,b
 10226                           
 10227                           ; Switch size 1, requested type "space"
 10228                           ; Number of cases is 4, Range of values is 0 to 3
 10229                           ; switch strategies available:
 10230                           ; Name         Instructions Cycles
 10231                           ; simple_byte           13     7 (average)
 10232                           ;	Chosen strategy is simple_byte
 10233  001FFC  E0F4               	bz	i2l660
 10234  001FFE  0A01               	xorlw	1	; case 1
 10235  002000  E0F4               	bz	i2l662
 10236  002002  0A03               	xorlw	3	; case 2
 10237  002004  E0F5               	bz	i2l663
 10238  002006  0A01               	xorlw	1	; case 3
 10239  002008  E0F5               	bz	i2l664
 10240  00200A  D011               	goto	i2l5703
 10241  00200C                     i2l5689:
 10242                           
 10243                           ;interrupts.c: 57: else
 10244                           ;interrupts.c: 58: {
 10245                           ;interrupts.c: 59: TMR0=brilloToff[brilloMem];
 10246  00200C  0101               	movlb	1	; () banked
 10247  00200E  0E39               	movlw	low _brilloToff
 10248  002010  2439               	addwf	_brilloMem,w,c
 10249  002012  6ED9               	movwf	fsr2l,c
 10250  002014  6ADA               	clrf	fsr2h,c
 10251  002016  0E01               	movlw	high _brilloToff
 10252  002018  22DA               	addwfc	fsr2h,f,c
 10253  00201A  50DF               	movf	indf2,w,c
 10254  00201C  6ED6               	movwf	4054,c	;volatile
 10255  00201E  6AD7               	clrf	4055,c	;volatile
 10256                           
 10257                           ; BSR set to: 1
 10258                           ;interrupts.c: 60: tOnFlag=1;
 10259  002020  0E01               	movlw	1
 10260  002022  6E3B               	movwf	_tOnFlag,c
 10261                           
 10262                           ; BSR set to: 1
 10263                           ;interrupts.c: 62: PORTAbits.RA0=0;
 10264  002024  9080               	bcf	3968,0,c	;volatile
 10265                           
 10266                           ; BSR set to: 1
 10267                           ;interrupts.c: 63: PORTAbits.RA1=0;
 10268  002026  9280               	bcf	3968,1,c	;volatile
 10269                           
 10270                           ; BSR set to: 1
 10271                           ;interrupts.c: 64: PORTAbits.RA5=0;
 10272  002028  9A80               	bcf	3968,5,c	;volatile
 10273                           
 10274                           ; BSR set to: 1
 10275                           ;interrupts.c: 65: PORTAbits.RA4=0;
 10276  00202A  9880               	bcf	3968,4,c	;volatile
 10277                           
 10278                           ; BSR set to: 1
 10279                           ;interrupts.c: 66: PORTBbits.RB3=0;
 10280  00202C  9681               	bcf	3969,3,c	;volatile
 10281  00202E                     i2l5703:
 10282                           
 10283                           ;interrupts.c: 67: }
 10284                           ;interrupts.c: 68: INTCONbits.TMR0IF=0;
 10285  00202E  94F2               	bcf	intcon,2,c	;volatile
 10286  002030  0012               	return	
 10287  002032                     __end_of_isr_timer0:
 10288                           	opt stack 0
 10289                           pclatu	equ	0xFFB
 10290                           pclath	equ	0xFFA
 10291                           tblptru	equ	0xFF8
 10292                           tblptrh	equ	0xFF7
 10293                           tblptrl	equ	0xFF6
 10294                           tablat	equ	0xFF5
 10295                           prodh	equ	0xFF4
 10296                           prodl	equ	0xFF3
 10297                           intcon	equ	0xFF2
 10298                           intcon2	equ	0xFF1
 10299                           postinc0	equ	0xFEE
 10300                           fsr0h	equ	0xFEA
 10301                           fsr0l	equ	0xFE9
 10302                           wreg	equ	0xFE8
 10303                           indf1	equ	0xFE7
 10304                           postinc1	equ	0xFE6
 10305                           postdec1	equ	0xFE5
 10306                           fsr1h	equ	0xFE2
 10307                           fsr1l	equ	0xFE1
 10308                           bsr	equ	0xFE0
 10309                           indf2	equ	0xFDF
 10310                           postinc2	equ	0xFDE
 10311                           postdec2	equ	0xFDD
 10312                           plusw2	equ	0xFDB
 10313                           fsr2h	equ	0xFDA
 10314                           fsr2l	equ	0xFD9
 10315                           status	equ	0xFD8
 10316                           
 10317 ;; *************** function _fseek *****************
 10318 ;; Defined at:
 10319 ;;		line 117 in file "C:\fgr\16gb\0000 interior\deVolt\sw\v3dig\stdio.c"
 10320 ;; Parameters:    Size  Location     Type
 10321 ;;  fp              2   18[COMRAM] PTR struct .
 10322 ;;		 -> muxFile(7), 
 10323 ;;  offset          2   20[COMRAM] int 
 10324 ;;  mode            2   22[COMRAM] int 
 10325 ;; Auto vars:     Size  Location     Type
 10326 ;;		None
 10327 ;; Return value:  Size  Location     Type
 10328 ;;		None               void
 10329 ;; Registers used:
 10330 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 10331 ;; Tracked objects:
 10332 ;;		On entry : F/1
 10333 ;;		On exit  : F/1
 10334 ;;		Unchanged: FFFFFFF0/0
 10335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10336 ;;      Params:         6       0       0       0       0       0       0       0       0
 10337 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10338 ;;      Temps:          1       0       0       0       0       0       0       0       0
 10339 ;;      Totals:         7       0       0       0       0       0       0       0       0
 10340 ;;Total ram usage:        7 bytes
 10341 ;; Hardware stack levels used:    1
 10342 ;; This function calls:
 10343 ;;		Nothing
 10344 ;; This function is called by:
 10345 ;;		_isr_timer0
 10346 ;; This function uses a non-reentrant model
 10347 ;;
 10348                           
 10349                           	psect	text35
 10350  001A4C                     __ptext35:
 10351                           	opt stack 0
 10352  001A4C                     _fseek:
 10353                           	opt stack 21
 10354                           
 10355                           ; BSR set to: 1
 10356                           ;stdio.c: 118: fp->flg&=~(1<<3);
 10357  001A4C  C013  FFD9         	movff	fseek@fp,fsr2l
 10358  001A50  C014  FFDA         	movff	fseek@fp+1,fsr2h
 10359  001A54  0EF7               	movlw	247
 10360  001A56  16DF               	andwf	indf2,f,c
 10361                           
 10362                           ; BSR set to: 1
 10363                           ;stdio.c: 119: if(mode==SEEK_SET)
 10364  001A58  5017               	movf	fseek@mode,w,c
 10365  001A5A  0A02               	xorlw	2
 10366  001A5C  1018               	iorwf	fseek@mode+1,w,c
 10367  001A5E  E129               	bnz	i2l5723
 10368                           
 10369                           ; BSR set to: 1
 10370                           ;stdio.c: 120: {
 10371                           ;stdio.c: 121: if(fp->flg&(1<<0))
 10372  001A60  D865               	call	PL16	;call to abstracted procedure
 10373  001A62  A019               	btfss	??_fseek,0,c
 10374  001A64  D011               	goto	i2l5719
 10375                           
 10376                           ; BSR set to: 1
 10377                           ;stdio.c: 122: {
 10378                           ;stdio.c: 123: (fp->nxr)=fp->bas;
 10379  001A66  EE20 F003          	lfsr	2,3
 10380  001A6A  5013               	movf	fseek@fp,w,c
 10381  001A6C  26D9               	addwf	fsr2l,f,c
 10382  001A6E  5014               	movf	fseek@fp+1,w,c
 10383  001A70  22DA               	addwfc	fsr2h,f,c
 10384  001A72  EE10 F001          	lfsr	1,1
 10385                           
 10386                           ;stdio.c: 124: (fp->nr)=fp->bufsiz;
 10387  001A76  D861               	call	PL21	;call to abstracted procedure
 10388  001A78  EE10 F004          	lfsr	1,4
 10389  001A7C  5013               	movf	fseek@fp,w,c
 10390  001A7E  26E1               	addwf	fsr1l,f,c
 10391  001A80  5014               	movf	fseek@fp+1,w,c
 10392  001A82  22E2               	addwfc	fsr1h,f,c
 10393  001A84  CFDF FFE7          	movff	indf2,indf1
 10394  001A88                     i2l5719:
 10395                           
 10396                           ; BSR set to: 1
 10397                           ;stdio.c: 125: }
 10398                           ;stdio.c: 126: if(fp->flg&(1<<1))
 10399  001A88  D851               	call	PL16	;call to abstracted procedure
 10400  001A8A  A219               	btfss	??_fseek,1,c
 10401  001A8C  0012               	return	
 10402                           
 10403                           ; BSR set to: 1
 10404                           ;stdio.c: 127: {
 10405                           ;stdio.c: 128: (fp->nxw)=fp->bas;
 10406  001A8E  EE20 F003          	lfsr	2,3
 10407  001A92  5013               	movf	fseek@fp,w,c
 10408  001A94  26D9               	addwf	fsr2l,f,c
 10409  001A96  5014               	movf	fseek@fp+1,w,c
 10410  001A98  22DA               	addwfc	fsr2h,f,c
 10411  001A9A  EE10 F002          	lfsr	1,2
 10412                           
 10413                           ;stdio.c: 129: (fp->nw)=fp->bufsiz;
 10414  001A9E  D84D               	call	PL21	;call to abstracted procedure
 10415  001AA0  EE10 F005          	lfsr	1,5
 10416  001AA4  5013               	movf	fseek@fp,w,c
 10417  001AA6  26E1               	addwf	fsr1l,f,c
 10418  001AA8  5014               	movf	fseek@fp+1,w,c
 10419  001AAA  22E2               	addwfc	fsr1h,f,c
 10420  001AAC  CFDF FFE7          	movff	indf2,indf1
 10421  001AB0  0012               	return	
 10422  001AB2                     i2l5723:
 10423                           
 10424                           ; BSR set to: 1
 10425                           ;stdio.c: 132: else if(mode==SEEK_END)
 10426  001AB2  5018               	movf	fseek@mode+1,w,c
 10427  001AB4  1017               	iorwf	fseek@mode,w,c
 10428  001AB6  E10F               	bnz	i2l5737
 10429                           
 10430                           ; BSR set to: 1
 10431                           ;stdio.c: 133: {
 10432                           ;stdio.c: 134: if(fp->flg&(1<<0))
 10433  001AB8  D839               	call	PL16	;call to abstracted procedure
 10434  001ABA  A019               	btfss	??_fseek,0,c
 10435  001ABC  D004               	goto	i2l5731
 10436                           
 10437                           ; BSR set to: 1
 10438                           ;stdio.c: 135: {
 10439                           ;stdio.c: 136: (fp->nxr)=fp->bas+fp->bufsiz;
 10440  001ABE  EE20 F001          	lfsr	2,1
 10441  001AC2  5013               	movf	fseek@fp,w,c
 10442                           
 10443                           ; BSR set to: 1
 10444                           ;stdio.c: 137: (fp->nw)=0;
 10445  001AC4  D816               	call	PL11	;call to abstracted procedure
 10446  001AC6                     i2l5731:
 10447                           
 10448                           ; BSR set to: 1
 10449                           ;stdio.c: 138: }
 10450                           ;stdio.c: 139: if(fp->flg&(1<<1))
 10451  001AC6  D832               	call	PL16	;call to abstracted procedure
 10452  001AC8  A219               	btfss	??_fseek,1,c
 10453  001ACA  0012               	return	
 10454                           
 10455                           ; BSR set to: 1
 10456                           ;stdio.c: 140: {
 10457                           ;stdio.c: 141: (fp->nxw)=fp->bas+fp->bufsiz;
 10458  001ACC  EE20 F002          	lfsr	2,2
 10459  001AD0  5013               	movf	fseek@fp,w,c
 10460                           
 10461                           ; BSR set to: 1
 10462                           ;stdio.c: 142: (fp->nw)=0;
 10463  001AD2  D80F               	call	PL11	;call to abstracted procedure
 10464  001AD4  0C00               	retlw	0
 10465  001AD6                     i2l5737:
 10466                           
 10467                           ; BSR set to: 1
 10468                           ;stdio.c: 145: else
 10469                           ;stdio.c: 146: {
 10470                           ;stdio.c: 147: if(fp->flg&(1<<0))
 10471  001AD6  D82A               	call	PL16	;call to abstracted procedure
 10472  001AD8  A019               	btfss	??_fseek,0,c
 10473  001ADA  D004               	goto	i2l753
 10474                           
 10475                           ; BSR set to: 1
 10476                           ;stdio.c: 148: {
 10477                           ;stdio.c: 149: (fp->nxr)+=offset;
 10478  001ADC  EE20 F001          	lfsr	2,1
 10479  001AE0  5013               	movf	fseek@fp,w,c
 10480                           
 10481                           ;stdio.c: 150: (fp->nw)-=offset;
 10482  001AE2  D838               	call	PL22	;call to abstracted procedure
 10483  001AE4                     i2l753:
 10484                           
 10485                           ; BSR set to: 1
 10486                           ;stdio.c: 151: }
 10487                           ;stdio.c: 152: if(fp->flg&(1<<1))
 10488  001AE4  D823               	call	PL16	;call to abstracted procedure
 10489  001AE6  A219               	btfss	??_fseek,1,c
 10490  001AE8  0012               	return	
 10491                           
 10492                           ; BSR set to: 1
 10493                           ;stdio.c: 153: {
 10494                           ;stdio.c: 154: (fp->nxw)+=offset;
 10495  001AEA  EE20 F002          	lfsr	2,2
 10496  001AEE  5013               	movf	fseek@fp,w,c
 10497                           
 10498                           ;stdio.c: 155: (fp->nw)-=offset;
 10499  001AF0  D031               	goto	PL22	;call to abstracted procedure
 10500  001AF2                     __end_of_fseek:
 10501                           	opt stack 0
 10502  001AF2                     PL11:
 10503  001AF2  26D9               	addwf	fsr2l,f,c
 10504  001AF4  5014               	movf	fseek@fp+1,w,c
 10505  001AF6  22DA               	addwfc	fsr2h,f,c
 10506  001AF8  EE10 F006          	lfsr	1,6
 10507  001AFC  5013               	movf	fseek@fp,w,c
 10508  001AFE  26E1               	addwf	fsr1l,f,c
 10509  001B00  5014               	movf	fseek@fp+1,w,c
 10510  001B02  22E2               	addwfc	fsr1h,f,c
 10511  001B04  50E7               	movf	indf1,w,c
 10512  001B06  6E19               	movwf	??_fseek& (0+255),c
 10513  001B08  EE10 F003          	lfsr	1,3
 10514  001B0C  5013               	movf	fseek@fp,w,c
 10515  001B0E  26E1               	addwf	fsr1l,f,c
 10516  001B10  5014               	movf	fseek@fp+1,w,c
 10517  001B12  22E2               	addwfc	fsr1h,f,c
 10518  001B14  50E7               	movf	indf1,w,c
 10519  001B16  2419               	addwf	??_fseek,w,c
 10520  001B18  6EDF               	movwf	indf2,c
 10521  001B1A  EE20 F005          	lfsr	2,5
 10522  001B1E  5013               	movf	fseek@fp,w,c
 10523  001B20  26D9               	addwf	fsr2l,f,c
 10524  001B22  5014               	movf	fseek@fp+1,w,c
 10525  001B24  22DA               	addwfc	fsr2h,f,c
 10526  001B26  0E00               	movlw	0
 10527  001B28  6EDF               	movwf	indf2,c
 10528  001B2A  0C00               	retlw	0
 10529  001B2C                     PL16:
 10530  001B2C  C013  FFD9         	movff	fseek@fp,fsr2l
 10531  001B30  C014  FFDA         	movff	fseek@fp+1,fsr2h
 10532  001B34  50DF               	movf	indf2,w,c
 10533  001B36  6E19               	movwf	??_fseek& (0+255),c
 10534  001B38  0012               	return	
 10535  001B3A                     PL21:
 10536  001B3A  5013               	movf	fseek@fp,w,c
 10537  001B3C  26E1               	addwf	fsr1l,f,c
 10538  001B3E  5014               	movf	fseek@fp+1,w,c
 10539  001B40  22E2               	addwfc	fsr1h,f,c
 10540  001B42  CFDF FFE7          	movff	indf2,indf1
 10541  001B46  EE20 F006          	lfsr	2,6
 10542  001B4A  5013               	movf	fseek@fp,w,c
 10543  001B4C  26D9               	addwf	fsr2l,f,c
 10544  001B4E  5014               	movf	fseek@fp+1,w,c
 10545  001B50  22DA               	addwfc	fsr2h,f,c
 10546  001B52  0012               	return	
 10547  001B54                     PL22:
 10548  001B54  26D9               	addwf	fsr2l,f,c
 10549  001B56  5014               	movf	fseek@fp+1,w,c
 10550  001B58  22DA               	addwfc	fsr2h,f,c
 10551  001B5A  5015               	movf	fseek@offset,w,c
 10552  001B5C  26DF               	addwf	indf2,f,c
 10553  001B5E  EE20 F005          	lfsr	2,5
 10554  001B62  5013               	movf	fseek@fp,w,c
 10555  001B64  26D9               	addwf	fsr2l,f,c
 10556  001B66  5014               	movf	fseek@fp+1,w,c
 10557  001B68  22DA               	addwfc	fsr2h,f,c
 10558  001B6A  5015               	movf	fseek@offset,w,c
 10559  001B6C  5EDF               	subwf	indf2,f,c
 10560  001B6E  0012               	return	
 10561                           pclatu	equ	0xFFB
 10562                           pclath	equ	0xFFA
 10563                           tblptru	equ	0xFF8
 10564                           tblptrh	equ	0xFF7
 10565                           tblptrl	equ	0xFF6
 10566                           tablat	equ	0xFF5
 10567                           prodh	equ	0xFF4
 10568                           prodl	equ	0xFF3
 10569                           intcon	equ	0xFF2
 10570                           intcon2	equ	0xFF1
 10571                           postinc0	equ	0xFEE
 10572                           fsr0h	equ	0xFEA
 10573                           fsr0l	equ	0xFE9
 10574                           wreg	equ	0xFE8
 10575                           indf1	equ	0xFE7
 10576                           postinc1	equ	0xFE6
 10577                           postdec1	equ	0xFE5
 10578                           fsr1h	equ	0xFE2
 10579                           fsr1l	equ	0xFE1
 10580                           bsr	equ	0xFE0
 10581                           indf2	equ	0xFDF
 10582                           postinc2	equ	0xFDE
 10583                           postdec2	equ	0xFDD
 10584                           plusw2	equ	0xFDB
 10585                           fsr2h	equ	0xFDA
 10586                           fsr2l	equ	0xFD9
 10587                           status	equ	0xFD8
 10588                           
 10589 ;; *************** function _char2pins *****************
 10590 ;; Defined at:
 10591 ;;		line 23 in file "C:\fgr\16gb\0000 interior\deVolt\sw\v3dig\segments.c"
 10592 ;; Parameters:    Size  Location     Type
 10593 ;;  c               1    wreg     unsigned char 
 10594 ;; Auto vars:     Size  Location     Type
 10595 ;;  c               1   18[COMRAM] unsigned char 
 10596 ;; Return value:  Size  Location     Type
 10597 ;;		None               void
 10598 ;; Registers used:
 10599 ;;		wreg, status,2, status,0
 10600 ;; Tracked objects:
 10601 ;;		On entry : F/1
 10602 ;;		On exit  : F/1
 10603 ;;		Unchanged: FFFFFFF0/0
 10604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10605 ;;      Params:         0       0       0       0       0       0       0       0       0
 10606 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10607 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10608 ;;      Totals:         1       0       0       0       0       0       0       0       0
 10609 ;;Total ram usage:        1 bytes
 10610 ;; Hardware stack levels used:    1
 10611 ;; This function calls:
 10612 ;;		Nothing
 10613 ;; This function is called by:
 10614 ;;		_isr_timer0
 10615 ;; This function uses a non-reentrant model
 10616 ;;
 10617                           
 10618                           	psect	text36
 10619  0013C4                     __ptext36:
 10620                           	opt stack 0
 10621  0013C4                     _char2pins:
 10622                           	opt stack 21
 10623                           
 10624                           ; BSR set to: 1
 10625                           ;char2pins@c stored from wreg
 10626  0013C4  CFE8 F013          	movff	wreg,char2pins@c
 10627                           
 10628                           ; BSR set to: 1
 10629                           ;segments.c: 24: switch(c)
 10630  0013C8  D083               	goto	i2l5759
 10631  0013CA                     i2l815:
 10632                           
 10633                           ; BSR set to: 1
 10634                           ;segments.c: 27: PORTAbits.RA2=1;
 10635  0013CA  8480               	bsf	3968,2,c	;volatile
 10636                           
 10637                           ;segments.c: 28: PORTBbits.RB7=1;
 10638  0013CC  8E81               	bsf	3969,7,c	;volatile
 10639                           
 10640                           ;segments.c: 29: PORTBbits.RB1=1;
 10641  0013CE  8281               	bsf	3969,1,c	;volatile
 10642                           
 10643                           ;segments.c: 30: PORTBbits.RB2=1;
 10644  0013D0  8481               	bsf	3969,2,c	;volatile
 10645                           
 10646                           ;segments.c: 31: PORTBbits.RB4=1;
 10647  0013D2  8881               	bsf	3969,4,c	;volatile
 10648                           
 10649                           ;segments.c: 32: PORTBbits.RB6=1;
 10650  0013D4  8C81               	bsf	3969,6,c	;volatile
 10651                           
 10652                           ;segments.c: 33: PORTBbits.RB5=0;
 10653  0013D6  9A81               	bcf	3969,5,c	;volatile
 10654                           
 10655                           ;segments.c: 34: break;
 10656  0013D8  0012               	return	
 10657  0013DA                     i2l817:
 10658                           
 10659                           ; BSR set to: 1
 10660                           ;segments.c: 36: PORTAbits.RA2=0;
 10661  0013DA  9480               	bcf	3968,2,c	;volatile
 10662                           
 10663                           ;segments.c: 37: PORTBbits.RB7=1;
 10664  0013DC  8E81               	bsf	3969,7,c	;volatile
 10665                           
 10666                           ;segments.c: 38: PORTBbits.RB1=1;
 10667                           
 10668                           ;segments.c: 39: PORTBbits.RB2=0;
 10669                           
 10670                           ;segments.c: 40: PORTBbits.RB4=0;
 10671                           
 10672                           ;segments.c: 41: PORTBbits.RB6=0;
 10673                           
 10674                           ;segments.c: 42: PORTBbits.RB5=0;
 10675                           
 10676                           ;segments.c: 43: break;
 10677  0013DE  D0FA               	goto	PL38	;call to abstracted procedure
 10678  0013E0                     i2l818:
 10679                           
 10680                           ; BSR set to: 1
 10681                           ;segments.c: 45: PORTAbits.RA2=1;
 10682  0013E0  8480               	bsf	3968,2,c	;volatile
 10683                           
 10684                           ;segments.c: 46: PORTBbits.RB7=1;
 10685  0013E2  8E81               	bsf	3969,7,c	;volatile
 10686                           
 10687                           ;segments.c: 47: PORTBbits.RB1=0;
 10688                           
 10689                           ;segments.c: 48: PORTBbits.RB2=1;
 10690                           
 10691                           ;segments.c: 49: PORTBbits.RB4=1;
 10692                           
 10693                           ;segments.c: 50: PORTBbits.RB6=0;
 10694                           
 10695                           ;segments.c: 51: PORTBbits.RB5=1;
 10696                           
 10697                           ;segments.c: 52: break;
 10698  0013E4  D0E5               	goto	PL35	;call to abstracted procedure
 10699  0013E6                     i2l819:
 10700                           
 10701                           ; BSR set to: 1
 10702                           ;segments.c: 54: PORTAbits.RA2=1;
 10703  0013E6  8480               	bsf	3968,2,c	;volatile
 10704                           
 10705                           ;segments.c: 55: PORTBbits.RB7=1;
 10706  0013E8  8E81               	bsf	3969,7,c	;volatile
 10707                           
 10708                           ;segments.c: 56: PORTBbits.RB1=1;
 10709  0013EA  8281               	bsf	3969,1,c	;volatile
 10710                           
 10711                           ;segments.c: 57: PORTBbits.RB2=1;
 10712  0013EC  8481               	bsf	3969,2,c	;volatile
 10713                           
 10714                           ;segments.c: 58: PORTBbits.RB4=0;
 10715  0013EE  9881               	bcf	3969,4,c	;volatile
 10716                           
 10717                           ;segments.c: 59: PORTBbits.RB6=0;
 10718  0013F0  9C81               	bcf	3969,6,c	;volatile
 10719                           
 10720                           ;segments.c: 60: PORTBbits.RB5=1;
 10721  0013F2  8A81               	bsf	3969,5,c	;volatile
 10722                           
 10723                           ;segments.c: 61: break;
 10724  0013F4  0012               	return	
 10725  0013F6                     i2l820:
 10726                           
 10727                           ; BSR set to: 1
 10728                           ;segments.c: 63: PORTAbits.RA2=0;
 10729  0013F6  9480               	bcf	3968,2,c	;volatile
 10730                           
 10731                           ;segments.c: 64: PORTBbits.RB7=1;
 10732  0013F8  8E81               	bsf	3969,7,c	;volatile
 10733                           
 10734                           ;segments.c: 65: PORTBbits.RB1=1;
 10735  0013FA  8281               	bsf	3969,1,c	;volatile
 10736                           
 10737                           ;segments.c: 66: PORTBbits.RB2=0;
 10738  0013FC  9481               	bcf	3969,2,c	;volatile
 10739                           
 10740                           ;segments.c: 67: PORTBbits.RB4=0;
 10741  0013FE  9881               	bcf	3969,4,c	;volatile
 10742                           
 10743                           ;segments.c: 68: PORTBbits.RB6=1;
 10744  001400  8C81               	bsf	3969,6,c	;volatile
 10745                           
 10746                           ;segments.c: 69: PORTBbits.RB5=1;
 10747  001402  8A81               	bsf	3969,5,c	;volatile
 10748                           
 10749                           ;segments.c: 70: break;
 10750  001404  0012               	return	
 10751  001406                     i2l821:
 10752                           
 10753                           ; BSR set to: 1
 10754                           ;segments.c: 72: PORTAbits.RA2=1;
 10755  001406  8480               	bsf	3968,2,c	;volatile
 10756                           
 10757                           ;segments.c: 73: PORTBbits.RB7=0;
 10758  001408  9E81               	bcf	3969,7,c	;volatile
 10759                           
 10760                           ;segments.c: 74: PORTBbits.RB1=1;
 10761                           
 10762                           ;segments.c: 75: PORTBbits.RB2=1;
 10763                           
 10764                           ;segments.c: 76: PORTBbits.RB4=0;
 10765                           
 10766                           ;segments.c: 77: PORTBbits.RB6=1;
 10767                           
 10768                           ;segments.c: 78: PORTBbits.RB5=1;
 10769                           
 10770                           ;segments.c: 79: break;
 10771  00140A  D0BE               	goto	PL29	;call to abstracted procedure
 10772  00140C                     i2l822:
 10773                           
 10774                           ; BSR set to: 1
 10775                           ;segments.c: 81: PORTAbits.RA2=1;
 10776  00140C  8480               	bsf	3968,2,c	;volatile
 10777  00140E  D01F               	goto	L57
 10778  001410                     i2l823:
 10779                           
 10780                           ; BSR set to: 1
 10781                           ;segments.c: 90: PORTAbits.RA2=1;
 10782  001410  8480               	bsf	3968,2,c	;volatile
 10783                           
 10784                           ;segments.c: 91: PORTBbits.RB7=1;
 10785  001412  8E81               	bsf	3969,7,c	;volatile
 10786                           
 10787                           ;segments.c: 92: PORTBbits.RB1=1;
 10788  001414  8281               	bsf	3969,1,c	;volatile
 10789                           
 10790                           ;segments.c: 93: PORTBbits.RB2=0;
 10791  001416  9481               	bcf	3969,2,c	;volatile
 10792                           
 10793                           ;segments.c: 94: PORTBbits.RB4=0;
 10794  001418  9881               	bcf	3969,4,c	;volatile
 10795                           
 10796                           ;segments.c: 95: PORTBbits.RB6=1;
 10797  00141A  8C81               	bsf	3969,6,c	;volatile
 10798                           
 10799                           ;segments.c: 96: PORTBbits.RB5=0;
 10800  00141C  9A81               	bcf	3969,5,c	;volatile
 10801                           
 10802                           ;segments.c: 97: break;
 10803  00141E  0012               	return	
 10804  001420                     i2l824:
 10805                           
 10806                           ; BSR set to: 1
 10807                           ;segments.c: 99: PORTAbits.RA2=1;
 10808  001420  8480               	bsf	3968,2,c	;volatile
 10809                           
 10810                           ;segments.c: 100: PORTBbits.RB7=1;
 10811  001422  8E81               	bsf	3969,7,c	;volatile
 10812                           
 10813                           ;segments.c: 101: PORTBbits.RB1=1;
 10814                           
 10815                           ;segments.c: 102: PORTBbits.RB2=1;
 10816                           
 10817                           ;segments.c: 103: PORTBbits.RB4=1;
 10818                           
 10819                           ;segments.c: 104: PORTBbits.RB6=1;
 10820                           
 10821                           ;segments.c: 105: PORTBbits.RB5=1;
 10822                           
 10823                           ;segments.c: 106: break;
 10824  001424  D0AB               	goto	PL26	;call to abstracted procedure
 10825  001426                     i2l825:
 10826                           
 10827                           ; BSR set to: 1
 10828                           ;segments.c: 108: PORTAbits.RA2=1;
 10829  001426  8480               	bsf	3968,2,c	;volatile
 10830  001428  D04A               	goto	L58
 10831  00142A                     i2l826:
 10832                           
 10833                           ; BSR set to: 1
 10834                           ;segments.c: 117: PORTAbits.RA2=0;
 10835  00142A  9480               	bcf	3968,2,c	;volatile
 10836                           
 10837                           ;segments.c: 118: PORTBbits.RB7=0;
 10838  00142C  9E81               	bcf	3969,7,c	;volatile
 10839                           
 10840                           ;segments.c: 119: PORTBbits.RB1=0;
 10841  00142E  9281               	bcf	3969,1,c	;volatile
 10842                           
 10843                           ;segments.c: 120: PORTBbits.RB2=1;
 10844  001430  8481               	bsf	3969,2,c	;volatile
 10845                           
 10846                           ;segments.c: 121: PORTBbits.RB4=0;
 10847  001432  9881               	bcf	3969,4,c	;volatile
 10848                           
 10849                           ;segments.c: 122: PORTBbits.RB6=0;
 10850  001434  9C81               	bcf	3969,6,c	;volatile
 10851                           
 10852                           ;segments.c: 123: PORTBbits.RB5=0;
 10853  001436  9A81               	bcf	3969,5,c	;volatile
 10854                           
 10855                           ;segments.c: 124: break;
 10856  001438  0012               	return	
 10857  00143A                     i2l827:
 10858                           
 10859                           ; BSR set to: 1
 10860                           ;segments.c: 126: PORTAbits.RA2=0;
 10861                           
 10862                           ;segments.c: 127: PORTBbits.RB7=0;
 10863                           
 10864                           ;segments.c: 128: PORTBbits.RB1=0;
 10865                           
 10866                           ;segments.c: 129: PORTBbits.RB2=0;
 10867                           
 10868                           ;segments.c: 130: PORTBbits.RB4=0;
 10869                           
 10870                           ;segments.c: 131: PORTBbits.RB6=0;
 10871  00143A  D899               	call	PL24	;call to abstracted procedure
 10872                           
 10873                           ;segments.c: 132: PORTBbits.RB5=0;
 10874  00143C  9A81               	bcf	3969,5,c	;volatile
 10875                           
 10876                           ;segments.c: 133: PORTBbits.RB3=1;
 10877  00143E  8681               	bsf	3969,3,c	;volatile
 10878                           
 10879                           ;segments.c: 134: break;
 10880  001440  0012               	return	
 10881  001442                     i2l828:
 10882                           
 10883                           ; BSR set to: 1
 10884                           ;segments.c: 136: PORTAbits.RA2=0;
 10885  001442  9480               	bcf	3968,2,c	;volatile
 10886                           
 10887                           ;segments.c: 137: PORTBbits.RB7=0;
 10888  001444  9E81               	bcf	3969,7,c	;volatile
 10889                           
 10890                           ;segments.c: 138: PORTBbits.RB1=1;
 10891                           
 10892                           ;segments.c: 139: PORTBbits.RB2=0;
 10893                           
 10894                           ;segments.c: 140: PORTBbits.RB4=0;
 10895                           
 10896                           ;segments.c: 141: PORTBbits.RB6=0;
 10897                           
 10898                           ;segments.c: 142: PORTBbits.RB5=0;
 10899                           
 10900                           ;segments.c: 143: break;
 10901  001446  D0C6               	goto	PL38	;call to abstracted procedure
 10902  001448                     i2l829:
 10903                           
 10904                           ; BSR set to: 1
 10905  001448  8480               	bsf	3968,2,c	;volatile
 10906                           
 10907                           ;segments.c: 147: PORTBbits.RB4=1;PORTBbits.RB6=1;PORTBbits.RB5=1;
 10908                           
 10909                           ;segments.c: 148: break;
 10910  00144A  D0A4               	goto	PL32	;call to abstracted procedure
 10911  00144C                     i2l830:
 10912                           
 10913                           ; BSR set to: 1
 10914  00144C  9480               	bcf	3968,2,c	;volatile
 10915  00144E                     L57:
 10916  00144E  9E81               	bcf	3969,7,c	;volatile
 10917                           
 10918                           ;segments.c: 150: PORTBbits.RB4=1;PORTBbits.RB6=1;PORTBbits.RB5=1;
 10919                           
 10920                           ;segments.c: 151: break;
 10921  001450  D095               	goto	PL26	;call to abstracted procedure
 10922  001452                     i2l831:
 10923                           
 10924                           ; BSR set to: 1
 10925  001452  8480               	bsf	3968,2,c	;volatile
 10926                           
 10927                           ;segments.c: 153: PORTBbits.RB4=1;PORTBbits.RB6=1;PORTBbits.RB5=0;
 10928                           
 10929                           ;segments.c: 154: break;
 10930  001454  D0A6               	goto	PL33	;call to abstracted procedure
 10931  001456                     i2l832:
 10932                           
 10933                           ; BSR set to: 1
 10934  001456  9480               	bcf	3968,2,c	;volatile
 10935  001458  9E81               	bcf	3969,7,c	;volatile
 10936                           
 10937                           ;segments.c: 156: PORTBbits.RB4=1;PORTBbits.RB6=0;PORTBbits.RB5=1;
 10938                           
 10939                           ;segments.c: 157: break;
 10940  00145A  D0AA               	goto	PL35	;call to abstracted procedure
 10941  00145C                     i2l833:
 10942                           
 10943                           ; BSR set to: 1
 10944  00145C  9480               	bcf	3968,2,c	;volatile
 10945  00145E  8E81               	bsf	3969,7,c	;volatile
 10946                           
 10947                           ;segments.c: 159: PORTBbits.RB4=1;PORTBbits.RB6=0;PORTBbits.RB5=1;break;
 10948  001460  D0B3               	goto	PL37	;call to abstracted procedure
 10949  001462                     i2l834:
 10950                           
 10951                           ; BSR set to: 1
 10952  001462  8480               	bsf	3968,2,c	;volatile
 10953  001464  D021               	goto	L59
 10954  001466                     i2l835:
 10955                           
 10956                           ; BSR set to: 1
 10957  001466  8480               	bsf	3968,2,c	;volatile
 10958  001468  8E81               	bsf	3969,7,c	;volatile
 10959                           
 10960                           ;segments.c: 164: PORTBbits.RB4=1;PORTBbits.RB6=1;PORTBbits.RB5=1;
 10961                           
 10962                           ;segments.c: 165: break;
 10963  00146A  D0BA               	goto	PL39	;call to abstracted procedure
 10964  00146C                     i2l836:
 10965                           
 10966                           ; BSR set to: 1
 10967  00146C  8480               	bsf	3968,2,c	;volatile
 10968  00146E  9E81               	bcf	3969,7,c	;volatile
 10969                           
 10970                           ;segments.c: 167: PORTBbits.RB4=1;PORTBbits.RB6=1;PORTBbits.RB5=1;
 10971                           
 10972                           ;segments.c: 168: break;
 10973  001470  D0A5               	goto	PL36	;call to abstracted procedure
 10974  001472                     i2l837:
 10975                           
 10976                           ; BSR set to: 1
 10977  001472  9480               	bcf	3968,2,c	;volatile
 10978                           
 10979                           ;segments.c: 170: PORTBbits.RB4=1;PORTBbits.RB6=1;PORTBbits.RB5=1;
 10980                           
 10981                           ;segments.c: 171: break;
 10982  001474  D08F               	goto	PL32	;call to abstracted procedure
 10983  001476                     i2l839:
 10984                           
 10985                           ; BSR set to: 1
 10986  001476  9480               	bcf	3968,2,c	;volatile
 10987                           
 10988                           ;segments.c: 176: PORTBbits.RB4=1;PORTBbits.RB6=1;PORTBbits.RB5=0;
 10989                           
 10990                           ;segments.c: 177: break;
 10991  001478  D094               	goto	PL33	;call to abstracted procedure
 10992  00147A                     i2l840:
 10993                           
 10994                           ; BSR set to: 1
 10995  00147A  9480               	bcf	3968,2,c	;volatile
 10996  00147C  9E81               	bcf	3969,7,c	;volatile
 10997  00147E  8281               	bsf	3969,1,c	;volatile
 10998  001480  9481               	bcf	3969,2,c	;volatile
 10999                           
 11000                           ;segments.c: 179: PORTBbits.RB4=1;PORTBbits.RB6=0;PORTBbits.RB5=1;
 11001  001482  8881               	bsf	3969,4,c	;volatile
 11002  001484  9C81               	bcf	3969,6,c	;volatile
 11003  001486  8A81               	bsf	3969,5,c	;volatile
 11004                           
 11005                           ;segments.c: 180: break;
 11006  001488  0012               	return	
 11007  00148A                     i2l841:
 11008                           
 11009                           ; BSR set to: 1
 11010  00148A  9480               	bcf	3968,2,c	;volatile
 11011  00148C  9E81               	bcf	3969,7,c	;volatile
 11012                           
 11013                           ;segments.c: 182: PORTBbits.RB4=1;PORTBbits.RB6=0;PORTBbits.RB5=1;
 11014                           
 11015                           ;segments.c: 183: break;
 11016  00148E  D09C               	goto	PL37	;call to abstracted procedure
 11017  001490                     i2l842:
 11018                           
 11019                           ; BSR set to: 1
 11020  001490  8480               	bsf	3968,2,c	;volatile
 11021  001492  8E81               	bsf	3969,7,c	;volatile
 11022                           
 11023                           ;segments.c: 185: PORTBbits.RB4=1;PORTBbits.RB6=1;PORTBbits.RB5=1;
 11024                           
 11025                           ;segments.c: 186: break;
 11026  001494  D093               	goto	PL36	;call to abstracted procedure
 11027  001496                     i2l843:
 11028                           
 11029                           ; BSR set to: 1
 11030  001496  9480               	bcf	3968,2,c	;volatile
 11031  001498  9E81               	bcf	3969,7,c	;volatile
 11032  00149A  9281               	bcf	3969,1,c	;volatile
 11033  00149C  9481               	bcf	3969,2,c	;volatile
 11034                           
 11035                           ;segments.c: 188: PORTBbits.RB4=1;PORTBbits.RB6=0;PORTBbits.RB5=1;
 11036  00149E  8881               	bsf	3969,4,c	;volatile
 11037  0014A0  9C81               	bcf	3969,6,c	;volatile
 11038  0014A2  8A81               	bsf	3969,5,c	;volatile
 11039                           
 11040                           ;segments.c: 189: break;
 11041  0014A4  0012               	return	
 11042  0014A6                     i2l845:
 11043                           
 11044                           ; BSR set to: 1
 11045  0014A6  9480               	bcf	3968,2,c	;volatile
 11046  0014A8                     L59:
 11047  0014A8  9E81               	bcf	3969,7,c	;volatile
 11048                           
 11049                           ;segments.c: 194: PORTBbits.RB4=1;PORTBbits.RB6=1;PORTBbits.RB5=1;
 11050                           
 11051                           ;segments.c: 195: break;
 11052  0014AA  D09A               	goto	PL39	;call to abstracted procedure
 11053  0014AC                     i2l846:
 11054                           
 11055                           ; BSR set to: 1
 11056  0014AC  9480               	bcf	3968,2,c	;volatile
 11057  0014AE  9E81               	bcf	3969,7,c	;volatile
 11058  0014B0  8281               	bsf	3969,1,c	;volatile
 11059  0014B2  8481               	bsf	3969,2,c	;volatile
 11060                           
 11061                           ;segments.c: 197: PORTBbits.RB4=1;PORTBbits.RB6=0;PORTBbits.RB5=0;
 11062  0014B4  8881               	bsf	3969,4,c	;volatile
 11063  0014B6  9C81               	bcf	3969,6,c	;volatile
 11064  0014B8  9A81               	bcf	3969,5,c	;volatile
 11065                           
 11066                           ;segments.c: 198: break;
 11067  0014BA  0012               	return	
 11068  0014BC                     i2l847:
 11069                           
 11070                           ; BSR set to: 1
 11071  0014BC  9480               	bcf	3968,2,c	;volatile
 11072  0014BE                     L58:
 11073  0014BE  8E81               	bsf	3969,7,c	;volatile
 11074                           
 11075                           ;segments.c: 200: PORTBbits.RB4=0;PORTBbits.RB6=1;PORTBbits.RB5=1;
 11076                           
 11077                           ;segments.c: 201: break;
 11078  0014C0  D063               	goto	PL29	;call to abstracted procedure
 11079  0014C2                     i2l848:
 11080                           
 11081                           ; BSR set to: 1
 11082                           
 11083                           ;segments.c: 203: PORTBbits.RB4=0;PORTBbits.RB6=0;PORTBbits.RB5=1;
 11084  0014C2  D855               	call	PL24	;call to abstracted procedure
 11085  0014C4  8A81               	bsf	3969,5,c	;volatile
 11086                           
 11087                           ;segments.c: 204: break;
 11088  0014C6  0012               	return	
 11089  0014C8                     i2l850:
 11090                           
 11091                           ; BSR set to: 1
 11092                           ;segments.c: 209: PORTAbits.RA2=0;
 11093                           
 11094                           ;segments.c: 210: PORTBbits.RB7=0;
 11095                           
 11096                           ;segments.c: 211: PORTBbits.RB1=0;
 11097                           
 11098                           ;segments.c: 212: PORTBbits.RB2=0;
 11099                           
 11100                           ;segments.c: 213: PORTBbits.RB4=0;
 11101                           
 11102                           ;segments.c: 214: PORTBbits.RB6=0;
 11103  0014C8  D852               	call	PL24	;call to abstracted procedure
 11104                           
 11105                           ;segments.c: 215: PORTBbits.RB5=0;
 11106  0014CA  9A81               	bcf	3969,5,c	;volatile
 11107                           
 11108                           ;segments.c: 216: PORTBbits.RB3=0;
 11109  0014CC  9681               	bcf	3969,3,c	;volatile
 11110                           
 11111                           ;segments.c: 217: }
 11112  0014CE  0012               	return	
 11113  0014D0                     i2l5759:
 11114                           
 11115                           ; BSR set to: 1
 11116  0014D0  5013               	movf	char2pins@c,w,c
 11117                           
 11118                           ; Switch size 1, requested type "space"
 11119                           ; Number of cases is 34, Range of values is 32 to 121
 11120                           ; switch strategies available:
 11121                           ; Name         Instructions Cycles
 11122                           ; simple_byte          103    52 (average)
 11123                           ;	Chosen strategy is simple_byte
 11124  0014D2  0A20               	xorlw	32	; case 32
 11125  0014D4  E0F9               	bz	i2l850
 11126  0014D6  0A01               	xorlw	1	; case 33
 11127  0014D8  E0B4               	bz	i2l828
 11128  0014DA  0A0C               	xorlw	12	; case 45
 11129  0014DC  E0F2               	bz	i2l848
 11130  0014DE  0A1D               	xorlw	29	; case 48
 11131  0014E0  E101 D773          	bz	i2l815
 11132  0014E4  0A01               	xorlw	1	; case 49
 11133  0014E6  E101 D778          	bz	i2l817
 11134  0014EA  0A03               	xorlw	3	; case 50
 11135  0014EC  E101 D778          	bz	i2l818
 11136  0014F0  0A01               	xorlw	1	; case 51
 11137  0014F2  E101 D778          	bz	i2l819
 11138  0014F6  0A07               	xorlw	7	; case 52
 11139  0014F8  E101 D77D          	bz	i2l820
 11140  0014FC  0A01               	xorlw	1	; case 53
 11141  0014FE  E083               	bz	i2l821
 11142  001500  0A03               	xorlw	3	; case 54
 11143  001502  E084               	bz	i2l822
 11144  001504  0A01               	xorlw	1	; case 55
 11145  001506  E084               	bz	i2l823
 11146  001508  0A0F               	xorlw	15	; case 56
 11147  00150A  E08A               	bz	i2l824
 11148  00150C  0A01               	xorlw	1	; case 57
 11149  00150E  E08B               	bz	i2l825
 11150  001510  0A78               	xorlw	120	; case 65
 11151  001512  E09A               	bz	i2l829
 11152  001514  0A02               	xorlw	2	; case 67
 11153  001516  E09D               	bz	i2l831
 11154  001518  0A06               	xorlw	6	; case 69
 11155  00151A  E0A3               	bz	i2l834
 11156  00151C  0A03               	xorlw	3	; case 70
 11157  00151E  E0A6               	bz	i2l836
 11158  001520  0A0E               	xorlw	14	; case 72
 11159  001522  E0A7               	bz	i2l837
 11160  001524  0A04               	xorlw	4	; case 76
 11161  001526  E0A7               	bz	i2l839
 11162  001528  0A1C               	xorlw	28	; case 80
 11163  00152A  E0B2               	bz	i2l842
 11164  00152C  0A03               	xorlw	3	; case 83
 11165  00152E  E101 D76A          	bz	i2l821
 11166  001532  0A31               	xorlw	49	; case 98
 11167  001534  E08B               	bz	i2l830
 11168  001536  0A01               	xorlw	1	; case 99
 11169  001538  E08E               	bz	i2l832
 11170  00153A  0A07               	xorlw	7	; case 100
 11171  00153C  E08F               	bz	i2l833
 11172  00153E  0A01               	xorlw	1	; case 101
 11173  001540  E092               	bz	i2l835
 11174  001542  0A0C               	xorlw	12	; case 105
 11175  001544  E101 D77D          	bz	i2l828
 11176  001548  0A07               	xorlw	7	; case 110
 11177  00154A  E097               	bz	i2l840
 11178  00154C  0A01               	xorlw	1	; case 111
 11179  00154E  E09D               	bz	i2l841
 11180  001550  0A1D               	xorlw	29	; case 114
 11181  001552  E0A1               	bz	i2l843
 11182  001554  0A06               	xorlw	6	; case 116
 11183  001556  E0A7               	bz	i2l845
 11184  001558  0A01               	xorlw	1	; case 117
 11185  00155A  E0A8               	bz	i2l846
 11186  00155C  0A03               	xorlw	3	; case 118
 11187  00155E  E101 D76C          	bz	i2l827
 11188  001562  0A0E               	xorlw	14	; case 120
 11189  001564  E101 D761          	bz	i2l826
 11190  001568  0A01               	xorlw	1	; case 121
 11191  00156A  E0A8               	bz	i2l847
 11192  00156C  D7AD               	goto	i2l850
 11193  00156E                     __end_of_char2pins:
 11194                           	opt stack 0
 11195  00156E                     PL24:
 11196  00156E  9480               	bcf	3968,2,c	;volatile
 11197  001570  9E81               	bcf	3969,7,c	;volatile
 11198  001572  9281               	bcf	3969,1,c	;volatile
 11199  001574  9481               	bcf	3969,2,c	;volatile
 11200  001576  9881               	bcf	3969,4,c	;volatile
 11201  001578  9C81               	bcf	3969,6,c	;volatile
 11202  00157A  0012               	return	
 11203  00157C                     PL26:
 11204  00157C  8281               	bsf	3969,1,c	;volatile
 11205  00157E  8481               	bsf	3969,2,c	;volatile
 11206  001580  8881               	bsf	3969,4,c	;volatile
 11207  001582  8C81               	bsf	3969,6,c	;volatile
 11208  001584  8A81               	bsf	3969,5,c	;volatile
 11209  001586  0012               	return	
 11210  001588                     PL29:
 11211  001588  8281               	bsf	3969,1,c	;volatile
 11212  00158A  8481               	bsf	3969,2,c	;volatile
 11213  00158C  9881               	bcf	3969,4,c	;volatile
 11214  00158E  8C81               	bsf	3969,6,c	;volatile
 11215  001590  8A81               	bsf	3969,5,c	;volatile
 11216  001592  0012               	return	
 11217  001594                     PL32:
 11218  001594  8E81               	bsf	3969,7,c	;volatile
 11219  001596  8281               	bsf	3969,1,c	;volatile
 11220  001598  9481               	bcf	3969,2,c	;volatile
 11221  00159A  8881               	bsf	3969,4,c	;volatile
 11222  00159C  8C81               	bsf	3969,6,c	;volatile
 11223  00159E  8A81               	bsf	3969,5,c	;volatile
 11224  0015A0  0012               	return	
 11225  0015A2                     PL33:
 11226  0015A2  9E81               	bcf	3969,7,c	;volatile
 11227  0015A4  9281               	bcf	3969,1,c	;volatile
 11228  0015A6  8481               	bsf	3969,2,c	;volatile
 11229  0015A8  8881               	bsf	3969,4,c	;volatile
 11230  0015AA  8C81               	bsf	3969,6,c	;volatile
 11231  0015AC  9A81               	bcf	3969,5,c	;volatile
 11232  0015AE  0012               	return	
 11233  0015B0                     PL35:
 11234  0015B0  9281               	bcf	3969,1,c	;volatile
 11235  0015B2  8481               	bsf	3969,2,c	;volatile
 11236  0015B4  8881               	bsf	3969,4,c	;volatile
 11237  0015B6  9C81               	bcf	3969,6,c	;volatile
 11238  0015B8  8A81               	bsf	3969,5,c	;volatile
 11239  0015BA  0012               	return	
 11240  0015BC                     PL36:
 11241  0015BC  9281               	bcf	3969,1,c	;volatile
 11242  0015BE  9481               	bcf	3969,2,c	;volatile
 11243  0015C0  8881               	bsf	3969,4,c	;volatile
 11244  0015C2  8C81               	bsf	3969,6,c	;volatile
 11245  0015C4  8A81               	bsf	3969,5,c	;volatile
 11246  0015C6  0012               	return	
 11247  0015C8                     PL37:
 11248  0015C8  8281               	bsf	3969,1,c	;volatile
 11249  0015CA  8481               	bsf	3969,2,c	;volatile
 11250  0015CC  8881               	bsf	3969,4,c	;volatile
 11251  0015CE  9C81               	bcf	3969,6,c	;volatile
 11252  0015D0  8A81               	bsf	3969,5,c	;volatile
 11253  0015D2  0012               	return	
 11254  0015D4                     PL38:
 11255  0015D4  8281               	bsf	3969,1,c	;volatile
 11256  0015D6  9481               	bcf	3969,2,c	;volatile
 11257  0015D8  9881               	bcf	3969,4,c	;volatile
 11258  0015DA  9C81               	bcf	3969,6,c	;volatile
 11259  0015DC  9A81               	bcf	3969,5,c	;volatile
 11260  0015DE  0012               	return	
 11261  0015E0                     PL39:
 11262  0015E0  9281               	bcf	3969,1,c	;volatile
 11263  0015E2  8481               	bsf	3969,2,c	;volatile
 11264  0015E4  8881               	bsf	3969,4,c	;volatile
 11265  0015E6  8C81               	bsf	3969,6,c	;volatile
 11266  0015E8  8A81               	bsf	3969,5,c	;volatile
 11267  0015EA  0012               	return	
 11268                           pclatu	equ	0xFFB
 11269                           pclath	equ	0xFFA
 11270                           tblptru	equ	0xFF8
 11271                           tblptrh	equ	0xFF7
 11272                           tblptrl	equ	0xFF6
 11273                           tablat	equ	0xFF5
 11274                           prodh	equ	0xFF4
 11275                           prodl	equ	0xFF3
 11276                           intcon	equ	0xFF2
 11277                           intcon2	equ	0xFF1
 11278                           postinc0	equ	0xFEE
 11279                           fsr0h	equ	0xFEA
 11280                           fsr0l	equ	0xFE9
 11281                           wreg	equ	0xFE8
 11282                           indf1	equ	0xFE7
 11283                           postinc1	equ	0xFE6
 11284                           postdec1	equ	0xFE5
 11285                           fsr1h	equ	0xFE2
 11286                           fsr1l	equ	0xFE1
 11287                           bsr	equ	0xFE0
 11288                           indf2	equ	0xFDF
 11289                           postinc2	equ	0xFDE
 11290                           postdec2	equ	0xFDD
 11291                           plusw2	equ	0xFDB
 11292                           fsr2h	equ	0xFDA
 11293                           fsr2l	equ	0xFD9
 11294                           status	equ	0xFD8
 11295                           
 11296 ;; *************** function _fgetc *****************
 11297 ;; Defined at:
 11298 ;;		line 74 in file "C:\fgr\16gb\0000 interior\deVolt\sw\v3dig\stdio.c"
 11299 ;; Parameters:    Size  Location     Type
 11300 ;;  stream          2   18[COMRAM] PTR struct .
 11301 ;;		 -> muxFile(7), 
 11302 ;; Auto vars:     Size  Location     Type
 11303 ;;		None
 11304 ;; Return value:  Size  Location     Type
 11305 ;;                  1    wreg      unsigned char 
 11306 ;; Registers used:
 11307 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11308 ;; Tracked objects:
 11309 ;;		On entry : F/1
 11310 ;;		On exit  : F/1
 11311 ;;		Unchanged: FFFFFFF0/0
 11312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11313 ;;      Params:         2       0       0       0       0       0       0       0       0
 11314 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11315 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11316 ;;      Totals:         2       0       0       0       0       0       0       0       0
 11317 ;;Total ram usage:        2 bytes
 11318 ;; Hardware stack levels used:    1
 11319 ;; This function calls:
 11320 ;;		Nothing
 11321 ;; This function is called by:
 11322 ;;		_isr_timer0
 11323 ;; This function uses a non-reentrant model
 11324 ;;
 11325                           
 11326                           	psect	text37
 11327  00256C                     __ptext37:
 11328                           	opt stack 0
 11329  00256C                     _fgetc:
 11330                           	opt stack 21
 11331                           
 11332                           ; BSR set to: 1
 11333                           ;stdio.c: 75: if(stream->nr==0)
 11334                           
 11335                           ; BSR set to: 1
 11336  00256C  EE20 F004          	lfsr	2,4
 11337  002570  5013               	movf	fgetc@stream,w,c
 11338  002572  26D9               	addwf	fsr2l,f,c
 11339  002574  5014               	movf	fgetc@stream+1,w,c
 11340  002576  22DA               	addwfc	fsr2h,f,c
 11341  002578  50DF               	movf	indf2,w,c
 11342  00257A  E107               	bnz	i2l5753
 11343                           
 11344                           ; BSR set to: 1
 11345                           ;stdio.c: 76: {
 11346                           ;stdio.c: 77: stream->flg|=(1<<3);
 11347  00257C  C013  FFD9         	movff	fgetc@stream,fsr2l
 11348  002580  C014  FFDA         	movff	fgetc@stream+1,fsr2h
 11349  002584  0E00               	movlw	0
 11350  002586  86DB               	bsf	plusw2,3,c
 11351                           
 11352                           ; BSR set to: 1
 11353                           ;stdio.c: 78: return (-1);
 11354  002588  0CFF               	retlw	255
 11355  00258A                     i2l5753:
 11356                           
 11357                           ; BSR set to: 1
 11358                           ;stdio.c: 80: else
 11359                           ;stdio.c: 81: {
 11360                           ;stdio.c: 82: --(stream->nr);
 11361  00258A  EE20 F004          	lfsr	2,4
 11362  00258E  5013               	movf	fgetc@stream,w,c
 11363  002590  26D9               	addwf	fsr2l,f,c
 11364  002592  5014               	movf	fgetc@stream+1,w,c
 11365  002594  22DA               	addwfc	fsr2h,f,c
 11366  002596  06DF               	decf	indf2,f,c
 11367                           
 11368                           ;stdio.c: 83: return *((stream->nxr)++);
 11369  002598  EE20 F001          	lfsr	2,1
 11370  00259C  5013               	movf	fgetc@stream,w,c
 11371  00259E  26D9               	addwf	fsr2l,f,c
 11372  0025A0  5014               	movf	fgetc@stream+1,w,c
 11373  0025A2  22DA               	addwfc	fsr2h,f,c
 11374  0025A4  50DF               	movf	indf2,w,c
 11375  0025A6  2ADF               	incf	indf2,f,c
 11376  0025A8  6ED9               	movwf	fsr2l,c
 11377  0025AA  6ADA               	clrf	fsr2h,c
 11378  0025AC  50DF               	movf	indf2,w,c
 11379                           
 11380                           ; BSR set to: 1
 11381  0025AE  0012               	return	
 11382  0025B0                     __end_of_fgetc:
 11383                           	opt stack 0
 11384  0000                     pclatu	equ	0xFFB
 11385                           pclath	equ	0xFFA
 11386                           tblptru	equ	0xFF8
 11387                           tblptrh	equ	0xFF7
 11388                           tblptrl	equ	0xFF6
 11389                           tablat	equ	0xFF5
 11390                           prodh	equ	0xFF4
 11391                           prodl	equ	0xFF3
 11392                           intcon	equ	0xFF2
 11393                           intcon2	equ	0xFF1
 11394                           postinc0	equ	0xFEE
 11395                           fsr0h	equ	0xFEA
 11396                           fsr0l	equ	0xFE9
 11397                           wreg	equ	0xFE8
 11398                           indf1	equ	0xFE7
 11399                           postinc1	equ	0xFE6
 11400                           postdec1	equ	0xFE5
 11401                           fsr1h	equ	0xFE2
 11402                           fsr1l	equ	0xFE1
 11403                           bsr	equ	0xFE0
 11404                           indf2	equ	0xFDF
 11405                           postinc2	equ	0xFDE
 11406                           postdec2	equ	0xFDD
 11407                           plusw2	equ	0xFDB
 11408                           fsr2h	equ	0xFDA
 11409                           fsr2l	equ	0xFD9
 11410                           status	equ	0xFD8
 11411                           pclatu	equ	0xFFB
 11412                           pclath	equ	0xFFA
 11413                           tblptru	equ	0xFF8
 11414                           tblptrh	equ	0xFF7
 11415                           tblptrl	equ	0xFF6
 11416                           tablat	equ	0xFF5
 11417                           prodh	equ	0xFF4
 11418                           prodl	equ	0xFF3
 11419                           intcon	equ	0xFF2
 11420                           intcon2	equ	0xFF1
 11421                           postinc0	equ	0xFEE
 11422                           fsr0h	equ	0xFEA
 11423                           fsr0l	equ	0xFE9
 11424                           wreg	equ	0xFE8
 11425                           indf1	equ	0xFE7
 11426                           postinc1	equ	0xFE6
 11427                           postdec1	equ	0xFE5
 11428                           fsr1h	equ	0xFE2
 11429                           fsr1l	equ	0xFE1
 11430                           bsr	equ	0xFE0
 11431                           indf2	equ	0xFDF
 11432                           postinc2	equ	0xFDE
 11433                           postdec2	equ	0xFDD
 11434                           plusw2	equ	0xFDB
 11435                           fsr2h	equ	0xFDA
 11436                           fsr2l	equ	0xFD9
 11437                           status	equ	0xFD8
 11438                           
 11439                           	psect	text38
 11440  000000                     __ptext38:
 11441                           	opt stack 0
 11442                           pclatu	equ	0xFFB
 11443                           pclath	equ	0xFFA
 11444                           tblptru	equ	0xFF8
 11445                           tblptrh	equ	0xFF7
 11446                           tblptrl	equ	0xFF6
 11447                           tablat	equ	0xFF5
 11448                           prodh	equ	0xFF4
 11449                           prodl	equ	0xFF3
 11450                           intcon	equ	0xFF2
 11451                           intcon2	equ	0xFF1
 11452                           postinc0	equ	0xFEE
 11453                           fsr0h	equ	0xFEA
 11454                           fsr0l	equ	0xFE9
 11455                           wreg	equ	0xFE8
 11456                           indf1	equ	0xFE7
 11457                           postinc1	equ	0xFE6
 11458                           postdec1	equ	0xFE5
 11459                           fsr1h	equ	0xFE2
 11460                           fsr1l	equ	0xFE1
 11461                           bsr	equ	0xFE0
 11462                           indf2	equ	0xFDF
 11463                           postinc2	equ	0xFDE
 11464                           postdec2	equ	0xFDD
 11465                           plusw2	equ	0xFDB
 11466                           fsr2h	equ	0xFDA
 11467                           fsr2l	equ	0xFD9
 11468                           status	equ	0xFD8
 11469                           
 11470                           	psect	rparam
 11471  0000                     pclatu	equ	0xFFB
 11472                           pclath	equ	0xFFA
 11473                           tblptru	equ	0xFF8
 11474                           tblptrh	equ	0xFF7
 11475                           tblptrl	equ	0xFF6
 11476                           tablat	equ	0xFF5
 11477                           prodh	equ	0xFF4
 11478                           prodl	equ	0xFF3
 11479                           intcon	equ	0xFF2
 11480                           intcon2	equ	0xFF1
 11481                           postinc0	equ	0xFEE
 11482                           fsr0h	equ	0xFEA
 11483                           fsr0l	equ	0xFE9
 11484                           wreg	equ	0xFE8
 11485                           indf1	equ	0xFE7
 11486                           postinc1	equ	0xFE6
 11487                           postdec1	equ	0xFE5
 11488                           fsr1h	equ	0xFE2
 11489                           fsr1l	equ	0xFE1
 11490                           bsr	equ	0xFE0
 11491                           indf2	equ	0xFDF
 11492                           postinc2	equ	0xFDE
 11493                           postdec2	equ	0xFDD
 11494                           plusw2	equ	0xFDB
 11495                           fsr2h	equ	0xFDA
 11496                           fsr2l	equ	0xFD9
 11497                           status	equ	0xFD8
 11498                           pclatu	equ	0xFFB
 11499                           pclath	equ	0xFFA
 11500                           tblptru	equ	0xFF8
 11501                           tblptrh	equ	0xFF7
 11502                           tblptrl	equ	0xFF6
 11503                           tablat	equ	0xFF5
 11504                           prodh	equ	0xFF4
 11505                           prodl	equ	0xFF3
 11506                           intcon	equ	0xFF2
 11507                           intcon2	equ	0xFF1
 11508                           postinc0	equ	0xFEE
 11509                           fsr0h	equ	0xFEA
 11510                           fsr0l	equ	0xFE9
 11511                           wreg	equ	0xFE8
 11512                           indf1	equ	0xFE7
 11513                           postinc1	equ	0xFE6
 11514                           postdec1	equ	0xFE5
 11515                           fsr1h	equ	0xFE2
 11516                           fsr1l	equ	0xFE1
 11517                           bsr	equ	0xFE0
 11518                           indf2	equ	0xFDF
 11519                           postinc2	equ	0xFDE
 11520                           postdec2	equ	0xFDD
 11521                           plusw2	equ	0xFDB
 11522                           fsr2h	equ	0xFDA
 11523                           fsr2l	equ	0xFD9
 11524                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        96
    BSS         109
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     39      76
    BANK0           160     77     110
    BANK1           256     65     200
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ?___ftpack	float  size(1) Largest target is 0

    ?___lwdiv	unsigned int  size(1) Largest target is 0

    ?___lwmod	unsigned int  size(1) Largest target is 0

    ?___asftdiv	float  size(1) Largest target is 0

    ?___asftadd	float  size(1) Largest target is 0

    ?___ftsub	float  size(1) Largest target is 0

    ?___ftmul	float  size(1) Largest target is 0

    ?_getConv	int  size(1) Largest target is 0

    ?___fttol	long  size(1) Largest target is 0

    ?___asftmul	float  size(1) Largest target is 0

    ?_iir	float  size(1) Largest target is 0

    ?___ftadd	float  size(1) Largest target is 0

    ?___ftdiv	float  size(1) Largest target is 0

    ?___awtoft	float  size(1) Largest target is 0

    __asftmul@f1p	PTR float  size(1) Largest target is 3
		 -> medicionFloat(BANK0[3]), 

    __asftdiv@f1p	PTR float  size(1) Largest target is 9
		 -> y(BANK0[9]), 

    __asftadd@f1p	PTR float  size(1) Largest target is 9
		 -> y(BANK0[9]), 

    S2040$p2port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTC(DATA[1]), 

    pulsPin.p2port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTC(DATA[1]), 

    uintToStr@str	PTR unsigned char  size(1) Largest target is 5
		 -> muxBuffer(BANK0[5]), 

    sp__intToStr	PTR unsigned char  size(1) Largest target is 12
		 -> fprintf@str(COMRAM[12]), 

    fseek@fp.bas	PTR unsigned char  size(1) Largest target is 5
		 -> muxBuffer(BANK0[5]), 

    fseek@fp.nxw	PTR unsigned char  size(1) Largest target is 5
		 -> muxBuffer(BANK0[5]), 

    fseek@fp.nxr	PTR unsigned char  size(1) Largest target is 5
		 -> muxBuffer(BANK0[5]), 

    fseek@fp	PTR struct . size(2) Largest target is 13
		 -> muxFile(BANK1[7]), 

    unget@stream.bas	PTR unsigned char  size(1) Largest target is 5
		 -> muxBuffer(BANK0[5]), 

    unget@stream.nxw	PTR unsigned char  size(1) Largest target is 5
		 -> muxBuffer(BANK0[5]), 

    unget@stream.nxr	PTR unsigned char  size(1) Largest target is 5
		 -> muxBuffer(BANK0[5]), 

    fgetc@stream.bas	PTR unsigned char  size(1) Largest target is 5
		 -> muxBuffer(BANK0[5]), 

    fgetc@stream.nxw	PTR unsigned char  size(1) Largest target is 5
		 -> muxBuffer(BANK0[5]), 

    fgetc@stream.nxr	PTR unsigned char  size(1) Largest target is 5
		 -> muxBuffer(BANK0[5]), 

    fgetc@stream	PTR struct . size(2) Largest target is 13
		 -> muxFile(BANK1[7]), 

    fputc@stream.bas	PTR unsigned char  size(1) Largest target is 5
		 -> muxBuffer(BANK0[5]), 

    fputc@stream.nxw	PTR unsigned char  size(1) Largest target is 5
		 -> muxBuffer(BANK0[5]), 

    fputc@stream.nxr	PTR unsigned char  size(1) Largest target is 5
		 -> muxBuffer(BANK0[5]), 

    S1392$bas	PTR unsigned char  size(1) Largest target is 5
		 -> muxBuffer(BANK0[5]), 

    muxFile.bas	PTR unsigned char  size(1) Largest target is 5
		 -> muxBuffer(BANK0[5]), 

    S1392$nxw	PTR unsigned char  size(1) Largest target is 5
		 -> muxBuffer(BANK0[5]), 

    muxFile.nxw	PTR unsigned char  size(1) Largest target is 5
		 -> muxBuffer(BANK0[5]), 

    S1392$nxr	PTR unsigned char  size(1) Largest target is 5
		 -> muxBuffer(BANK0[5]), 

    muxFile.nxr	PTR unsigned char  size(1) Largest target is 5
		 -> muxBuffer(BANK0[5]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _isr in COMRAM

    _isr_timer0->_fseek
    _isr2->_isr_timer3
    _isr_timer3->_pulsPinDriver

Critical Paths under _main in BANK0

    _main->_iir
    _incVar->___ftadd
    _decVar->___ftadd
    _uintToStr->___lwdiv
    _iir->___asftadd
    ___awtoft->___ftpack
    ___ftsub->___ftadd
    ___asftadd->___ftsub
    ___ftadd->___ftdiv
    ___asftdiv->___ftdiv
    ___asftmul->___ftmul
    ___ftdiv->___awtoft
    ___ftmul->___ftpack

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                67    67      0   17428
                                             75 BANK0      2     2      0
                                              0 BANK1     65    65      0
                        _pulsPinInit
                         _systemInit
                       _ee_read_byte
                           ___awtoft
                            ___ftdiv
                            ___ftadd
                        _timerDriver
          _actionsTimeoutShowSetting
                          _enterMenu
              _endTestDisplayActions
                          _adcDriver
                            _getConv
                                _iir
                          ___asftmul
                            ___fttol
                          _uintToStr
                             _incVar
                             _decVar
 ---------------------------------------------------------------------------------
 (1) _incVar                                               2     2      0    2776
                                             43 BANK0      2     2      0
                      _ee_write_byte
                           ___awtoft
                            ___ftdiv
                            ___ftadd
 ---------------------------------------------------------------------------------
 (1) _enterMenu                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ee_read_byte                                         1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _decVar                                               2     2      0    2776
                                             43 BANK0      2     2      0
                      _ee_write_byte
                           ___awtoft
                            ___ftdiv
                            ___ftadd
 ---------------------------------------------------------------------------------
 (2) _ee_write_byte                                        2     1      1      62
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (1) _endTestDisplayActions                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _actionsTimeoutShowSetting                            2     2      0      37
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _pulsPinInit                                          7     7      0     223
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (1) _systemInit                                           0     0      0       0
                           _adcSetup
 ---------------------------------------------------------------------------------
 (1) _timerDriver                                          4     4      0     248
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _uintToStr                                            5     1      4     674
                                              7 BANK0      5     1      4
                            ___lwmod
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (1) _adcDriver                                            9     9      0      96
                                              0 BANK0      9     9      0
 ---------------------------------------------------------------------------------
 (1) _getConv                                              2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _iir                                                 22    19      3    5408
                                             53 BANK0     22    19      3
                            ___ftmul
                            ___ftsub
                          ___asftadd
                          ___asftdiv
                           ___awtoft (ARG)
                            _getConv (ARG)
 ---------------------------------------------------------------------------------
 (2) _adcSetup                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             4     1      3     445
                                              8 BANK0      4     1      3
                           ___ftpack
                            _getConv (ARG)
 ---------------------------------------------------------------------------------
 (1) ___fttol                                             15    11      4     371
                                              0 BANK0     15    11      4
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    1602
                                             43 BANK0      6     0      6
                            ___ftadd
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     241
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     232
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (2) ___asftadd                                            4     1      3    1630
                                             49 BANK0      4     1      3
                            ___ftadd
                            ___ftsub (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftadd                                             14     8      6    1537
                                             29 BANK0     14     8      6
                           ___ftpack
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            _getConv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___asftdiv                                            4     1      3     825
                                             29 BANK0      4     1      3
                            ___ftdiv
 ---------------------------------------------------------------------------------
 (1) ___asftmul                                            4     1      3     893
                                             25 BANK0      4     1      3
                            ___ftmul
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5     312
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             17    11      6     732
                                             12 BANK0     17    11      6
                           ___ftpack
                           ___awtoft (ARG)
                            _getConv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             17    11      6     800
                                              8 BANK0     17    11      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5     312
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr2                                                 9     9      0    1248
                                              9 COMRAM     9     9      0
                         _isr_timer3
                            _isr_adc
 ---------------------------------------------------------------------------------
 (6) _isr_timer3                                           2     2      0    1248
                                              7 COMRAM     2     2      0
                      i1_timerDriver
                      _pulsPinDriver
 ---------------------------------------------------------------------------------
 (6) _isr_adc                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _pulsPinDriver                                        8     8      0     640
                                              0 COMRAM     7     7      0
 ---------------------------------------------------------------------------------
 (7) i1_timerDriver                                        4     4      0     584
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (8) _isr                                                 14    14      0     836
                                             25 COMRAM    14    14      0
                         _isr_timer0
 ---------------------------------------------------------------------------------
 (9) _isr_timer0                                           0     0      0     836
                              _fseek
                              _fgetc
                          _char2pins
 ---------------------------------------------------------------------------------
 (10) _fseek                                               7     1      6     726
                                             18 COMRAM     7     1      6
 ---------------------------------------------------------------------------------
 (10) _char2pins                                           1     1      0      22
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (10) _fgetc                                               2     0      2      88
                                             18 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _pulsPinInit
   _systemInit
     _adcSetup
   _ee_read_byte
   ___awtoft
     ___ftpack
     _getConv (ARG)
   ___ftdiv
     ___ftpack
     ___awtoft (ARG)
       ___ftpack
       _getConv (ARG)
     _getConv (ARG)
   ___ftadd
     ___ftpack
     ___awtoft (ARG)
       ___ftpack
       _getConv (ARG)
     ___ftdiv (ARG)
       ___ftpack
       ___awtoft (ARG)
         ___ftpack
         _getConv (ARG)
       _getConv (ARG)
     _getConv (ARG)
   _timerDriver
   _actionsTimeoutShowSetting
   _enterMenu
   _endTestDisplayActions
   _adcDriver
   _getConv
   _iir
     ___ftmul
       ___ftpack
     ___ftsub
       ___ftadd
         ___ftpack
         ___awtoft (ARG)
           ___ftpack
           _getConv (ARG)
         ___ftdiv (ARG)
           ___ftpack
           ___awtoft (ARG)
             ___ftpack
             _getConv (ARG)
           _getConv (ARG)
         _getConv (ARG)
       ___ftmul (ARG)
         ___ftpack
     ___asftadd
       ___ftadd
         ___ftpack
         ___awtoft (ARG)
           ___ftpack
           _getConv (ARG)
         ___ftdiv (ARG)
           ___ftpack
           ___awtoft (ARG)
             ___ftpack
             _getConv (ARG)
           _getConv (ARG)
         _getConv (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___ftpack
           ___awtoft (ARG)
             ___ftpack
             _getConv (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___awtoft (ARG)
               ___ftpack
               _getConv (ARG)
             _getConv (ARG)
           _getConv (ARG)
         ___ftmul (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___ftpack
     ___asftdiv
       ___ftdiv
         ___ftpack
         ___awtoft (ARG)
           ___ftpack
           _getConv (ARG)
         _getConv (ARG)
     ___awtoft (ARG)
       ___ftpack
       _getConv (ARG)
     _getConv (ARG)
   ___asftmul
     ___ftmul
       ___ftpack
   ___fttol
   _uintToStr
     ___lwmod
     ___lwdiv
   _incVar
     _ee_write_byte
     ___awtoft
       ___ftpack
       _getConv (ARG)
     ___ftdiv
       ___ftpack
       ___awtoft (ARG)
         ___ftpack
         _getConv (ARG)
       _getConv (ARG)
     ___ftadd
       ___ftpack
       ___awtoft (ARG)
         ___ftpack
         _getConv (ARG)
       ___ftdiv (ARG)
         ___ftpack
         ___awtoft (ARG)
           ___ftpack
           _getConv (ARG)
         _getConv (ARG)
       _getConv (ARG)
   _decVar
     _ee_write_byte
     ___awtoft
       ___ftpack
       _getConv (ARG)
     ___ftdiv
       ___ftpack
       ___awtoft (ARG)
         ___ftpack
         _getConv (ARG)
       _getConv (ARG)
     ___ftadd
       ___ftpack
       ___awtoft (ARG)
         ___ftpack
         _getConv (ARG)
       ___ftdiv (ARG)
         ___ftpack
         ___awtoft (ARG)
           ___ftpack
           _getConv (ARG)
         _getConv (ARG)
       _getConv (ARG)

 _isr2 (ROOT)
   _isr_timer3
     i1_timerDriver
     _pulsPinDriver
   _isr_adc

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     41      C8       7       78.1%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     4D      6E       5       68.8%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     27      4C       1       80.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0      16       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     182      20        0.0%
DATA                 0      0     198       3        0.0%
CODE                 0      0       0       0        0.0%


HI-TECH Software PICC-18 Macro Assembler V9.80 build 11162 
Symbol Table                                                                                   Wed Apr 02 12:41:09 2025

                      ___asftadd@f2 0091           _actionsTimeoutShowSetting 215A  
                                 _x 01BF                                   _y 00BD  
                __end_of_systemInit 23F0                       ___asftadd@f1p 0094  
                       __CFG_CP0$ON 000000                        ___asftdiv@f2 007D  
                       __CFG_CP1$ON 000000                         __CFG_CP2$ON 000000  
                       __CFG_CP3$ON 000000                                  l41 272A  
                                l42 2728                         __CFG_CPB$ON 000000  
                       __CFG_CPD$ON 000000                         __CFG_BOR$ON 000000  
                                bsr 000FE0                         __CFG_BORV$1 000000  
                      ___asftmul@f2 0079                       ___asftdiv@f1p 0080  
                      ___ftadd@exp1 008A                        ___ftadd@exp2 0089  
                      ___ftadd@sign 0088                                 l110 1084  
                               l112 10BA                                 l201 03B8  
                               l114 10F0                                 l106 1018  
                               l131 12BE                                 l108 104E  
                               l133 12F2                                 l135 1326  
                               l400 0A46                                 l137 135A  
                               l129 128A                                 l501 0CA0  
                               l405 0A60                                 l333 085E  
                               l502 0CBC                                 l414 0A9E  
                               l342 08BC                                 l328 0844  
                               l433 0B10                                 l514 0CF8  
                               l442 0B4E                                 l419 0AB8  
                               l363 0942                                 l347 08D6  
                               l524 0D82                                 l508 0D6E  
                               l428 0AF6                                 l188 0332  
                               l517 0D5E                                 l461 0BC0  
                               l470 0BFE                                 l374 09A8  
                               l358 0928                                 l527 0DF0  
                               l447 0B68                                 l456 0BA6  
                               l475 0C18                                 l379 09C2  
                               l488 0C46                                 l489 0C62  
                               l694 203E                                 l695 204C  
             __end_ofi1_timerDriver 1DF6                                 _iir 18DA  
                               _isr 0008                        __CFG_IDLOC0$ 000000  
                      __CFG_IDLOC1$ 000000                        __CFG_IDLOC2$ 000000  
                      __CFG_IDLOC3$ 000000                        __CFG_IDLOC4$ 000000  
                      __CFG_IDLOC5$ 000000                        __CFG_IDLOC6$ 000000  
                      __CFG_IDLOC7$ 000000                                 wreg 000FE8  
                     ___asftmul@f1p 007C                __end_of_ee_read_byte 278A  
                      __CFG_LVP$OFF 000000                        ___ftdiv@cntr 0077  
                      ___ftdiv@sign 007C                        __CFG_WDT$OFF 000000  
                              l1200 187A                                l1201 1882  
                              l1211 1D10                                l1209 1CC6  
                              l1138 20D4                                l1180 17E0  
                              l1191 1868                                l1351 24D0  
                              l1176 17BC                                l1361 25E4  
                              l7011 07C8                                l7005 0782  
                              l7111 0972                                l7031 0822  
                              l7023 0800                                l7015 07DC  
                              l7007 07B0                      i1timerDriver@i 0004  
                              ?_iir 0095                                l6305 0FE2  
                              l7121 0996                                l7211 0AD4  
                              l7115 0986                                l7107 095A  
                              l7043 084C                                l7027 080E  
                              l7019 07F0                                l6261 2434  
                              l6253 2418                                l6245 23FC  
                              l7037 0832                                l6407 1256  
                              l7223 0AFE                                l7151 09FE  
                              l7143 09E8                                l7127 09B0  
                              l7063 08AA                                l7055 0890  
                              l6513 219C                                l6257 2428  
                              l6249 2408                                l6273 0EDE  
                              l7313 0C4C                                l7241 0B3C  
                              l7217 0AE4                                l7057 089A  
                              l6355 1126                                l7411 0CE8  
                              l7235 0B2C                                l7163 0A24  
                              l7155 0A0A                                l7147 09F4  
                              l7139 09DE                                l7083 08F2  
                              l7307 0C34                                l6285 0F54  
                              l7325 0C78                                l7093 0916  
                              l7069 08C4                                l6375 115C  
                              l7271 0BAE                                l7247 0B56  
                              l7175 0A4E                                l7159 0A18  
                              l7087 0906                                l6617 21A2  
                              l6457 138E                                l6297 0FCA  
                              l7417 0CFE                                l7409 0CE4  
                              l7265 0B94                                l7193 0A8C  
                              l7169 0A34                                l6721 0288  
                              l6713 0226                                _ADFM 007E07  
                              l6387 11CE                                l7451 0D88  
                              l7339 0C7E                                l7283 0BDC  
                              l7259 0B84                                l7187 0A7C  
                              l7099 0930                                l6731 02B6  
                              ?_isr 0001                                l7701 2112  
                              l6485 2164                                l7365 0CA6  
                              l7357 0C8A                                l6821 0412  
                              l6813 03FE                                l6805 03C6  
                              l6725 02A8                                l6717 027E  
                              l6709 021E                                l7703 211C  
                              l6399 1240                                l7391 0CD8  
                              l7359 0C8E                                l7295 0C06  
                              l7199 0AA6                                l6911 0620  
                              l7617 204E                                l6489 2186  
                              l7377 0CD2                                l7289 0BEC  
                              l6921 064C                                l6905 0606  
                              l6833 044C                                l6817 0408  
                              l6825 0438                                l7651 1994  
                              l6755 0316                                l6763 0324  
                              l7725 26B6                                l7637 1902  
                              l6933 0678                                l6861 0554  
                              l6853 0526                                l6837 046C  
                              l6757 031A                                l7815 1CEC  
                              l7743 17EE                                l7911 1F46  
                              l7903 1F2E                                l7487 21EC  
                              l6943 0698                                l6927 0660  
                              l6871 0580                                l6863 0558  
                              l6855 053C                                l6791 039C  
                              l6767 033C                                l6759 031E  
                              l7833 1B9E                                l7737 17CA  
                              l6961 06CE                                l6881 05AC  
                              l6873 0584                                l6857 0540  
                              l6793 03A0                                l7851 1BF2  
                              l7691 20DC                                l7771 183C  
                              l7915 1F5A                                l7907 1F36  
                              l7667 244A                                l7675 2486  
                              l6971 06FA                                l6947 06A2  
                              l6883 05B0                                l6867 056C  
                              l6795 03A4                                l7861 1C12  
                              l7837 1BCC                                l7693 20E0  
                              l7765 1824                                l7925 24A0  
                              l7909 1F42                                l6957 06C4  
                              l6877 0598                                l7855 1BFA  
                              l7695 20F4                                l7767 182E  
                              l7759 1808                                l7927 24A8  
                              l6983 0728                                l6967 06E4  
                              l6799 03AA                                l7865 1C1A  
                              l7777 1858                                l7769 1836  
                              l7953 25DA                                l7945 25BC  
                              l7937 24C6                                l7929 24AC  
                              l7881 1EEC                                l6993 0754  
                              l6889 05CA                                l7699 2100  
                              l7779 1862                                l7947 25C4  
                              l7883 1EF6                                l6899 05F2  
                              l7797 1C98                                l7789 189C  
                              l7949 25C8                                l6989 073E  
                              l7899 1F1E                      ?_pulsPinDriver 0001  
                              _TMR0 000FD6                                _TMR3 000FB2  
                      __CFG_PWRT$ON 000000                        __CFG_WRT0$ON 000000  
                      __CFG_WRT1$ON 000000                        __CFG_WRT2$ON 000000  
                      __CFG_WRT3$ON 000000                        __CFG_WRTB$ON 000000  
                      __CFG_WRTC$ON 000000                                _isr2 0018  
                              _main 0090                        ___ftpack@arg 0060  
                      ___ftpack@exp 0063                                fsr0h 000FEA  
                              fsr1h 000FE2                                fsr0l 000FE9  
                              fsr2h 000FDA                                indf1 000FE7  
                              iir@n 00AA                                fsr1l 000FE1  
                              indf2 000FDF                                fsr2l 000FD9  
                              pclat 000FFA                                prodh 000FF4  
                              prodl 000FF3                                start 008C  
                      ___ftmul@cntr 0077                        ___ftmul@sign 0078  
                      ___fttol@exp1 006E                               ??_iir 0098  
                      ___fttol@lval 006A                               ??_isr 001A  
                     __CFG_PLLDIV$5 000000                               ?_isr2 0001  
                             ?_main 0001                               _ADRES 000FC3  
                             _EEADR 000FA9                     __end_of___ftadd 18C2  
                   __end_of___ftdiv 1D42                               u11010 1BB6  
                             u11015 1BB4                               u11050 1F88  
                   __end_of___ftmul 1C54                               u11055 1F80  
                             u10601 18E4                               u10611 18F6  
                             u10515 1E52                               u10730 177E  
                             u10570 2068                               u10474 2220  
                   __end_of___ftsub 2708                               u10475 221C  
                             u10740 179E                     __end_of___fttol 1F6C  
                             u10735 177C                               u10575 205E  
                             u10745 179C                               u10594 20AC  
                             u10595 20A6                               u10940 1C82  
                             u10960 1CB0                               u10945 1C80  
                             u10965 1CAE                               u10990 1B88  
                             u10995 1B86                      __CFG_DEBUG$OFF 000000  
                   __end_of___lwdiv 24DA                         fseek@offset 0015  
                   __end_of___lwmod 25EE                               i1l650 0052  
                             i1l653 0066                               i2l820 13F6  
                             i2l660 1FE6                               i2l821 1406  
                             i2l830 144C                               i2l822 140C  
                             i2l662 1FEA                               i2l831 1452  
                             i2l823 1410                               i2l815 13CA  
                             i2l663 1FF0                               i2l647 2340  
                             i2l840 147A                               i2l832 1456  
                             i2l824 1420                               i2l664 1FF4  
                             i2l841 148A                               i2l833 145C  
                             i2l825 1426                               i2l817 13DA  
                             i2l753 1AE4                               i2l850 14C8  
                             i2l842 1490                               i2l834 1462  
                             i2l826 142A                               i2l818 13E0  
                             i2l843 1496                               i2l835 1466  
                             i2l827 143A                               i2l819 13E6  
                             i2l836 146C                               i2l828 1442  
                             i2l845 14A6                               i2l837 1472  
                             i2l829 1448                               i2l846 14AC  
                             i2l847 14BC                               i2l839 1476  
                             i2l848 14C2                               _PORTC 000F82  
                   __end_of_getConv 27BA                      __CFG_EBTR0$OFF 000000  
                    __CFG_EBTR1$OFF 000000                      __CFG_EBTR2$OFF 000000  
                    __CFG_EBTR3$OFF 000000                      __CFG_EBTRB$OFF 000000  
                     ___awtoft@sign 006B                               _fgetc 256C  
                   _isr_timer3$1607 0008                               _fseek 1A4C  
                   adcDriver@ch2Cnv 0068                       ___ftpack@sign 0064  
                   __end_of_isr_adc 27AC                               _state 003A  
                     _medicionFloat 00C6                        uintToStr@num 0067  
                      uintToStr@str 0069                               tablat 000FF5  
                             plusw2 000FDB                        pulsPinInit@i 0066  
                             status 000FD8                      __CFG_MCLRE$OFF 000000  
                      __end_of_isr2 008C                        __end_of_main 0EC6  
                            ??_isr2 000A                              ??_main 00AB  
                     ___fttol@sign1 0069                       __activetblptr 000000  
                _timerDelayConstant 0100                              ?_fgetc 0013  
                   ??_pulsPinDriver 0001                              ?_fseek 0013  
                            _EEDATA 000FA8                              _EECON2 000FA7  
                  __end_of_adcSetup 2778                    __end_of___awtoft 26DA  
                  __end_of___ftpack 2150                              i1l6141 005A  
                            i1l6127 2546                              i1l6143 0062  
                            i1l6135 003C                              i1l6137 0044  
                            i1l6139 004C                              i1l5803 16DA  
                            i1l5805 16E0                              i1l5813 16E6  
                            i1l5815 1702                              i1l5819 170C  
                            i1l5781 1694                              i1l5783 169A  
                            i1l5791 16A0                              i1l5767 15EE  
                            i2l5703 202E                              i2l5731 1AC6  
                            i2l5723 1AB2                              i2l5661 232C  
                            i2l5719 1A88                              i2l5663 2334  
                            i2l5753 258A                              i2l5737 1AD6  
                            i2l5681 1FD0                              i2l5665 233C  
                            i2l5759 14D0                              i2l5687 1FF8  
                            i2l5679 1FCE                              i2l5689 200C  
                            _TRISA0 007C90                              _TRISA1 007C91  
                            _TRISA2 007C92                              _TRISB1 007C99  
                            _TRISA3 007C93                              _TRISB2 007C9A  
                            _TRISA4 007C94                              _TRISB3 007C9B  
                            _TRISA5 007C95                              _TRISB4 007C9C  
                            _TRISB5 007C9D                              _TRISB6 007C9E  
                            _TRISB7 007C9F                              _TRISC6 007CA6  
                            _eLoMem 0028               __end_of_ee_write_byte 2734  
                            _eUpMem 002A                              _decVar 1146  
                         ??___ftadd 0083                           ??___ftdiv 0072  
                         ??___ftmul 006E                           ??___ftsub 0091  
                         ??___fttol 0064                           ??___lwdiv 0064  
                            _vLoMem 0030                           ??___lwmod 0064  
                            _xLoMem 0034                              _incVar 0EC6  
                            _escala 00B2                              _vUpMem 0032  
                            _xUpMem 0036                              clear_0 227A  
                            clear_1 2286                              clear_2 2292  
                            _setInc 003C                           ??_getConv 0062  
             __size_of_ee_read_byte 0012               ___ftmul@f3_as_product 0074  
                      ?_timerDriver 0001                        __pdataCOMRAM 003C  
__size_of_actionsTimeoutShowSetting 008E                           ??_isr_adc 0001  
                            tblptrh 000FF7                              tblptrl 000FF6  
                            tblptru 000FF8             ??_endTestDisplayActions 0060  
                __size_of_adcDriver 0096                  __size_of___asftadd 003C  
                __size_of___asftdiv 003C                  __size_of___asftmul 003C  
                        __accesstop 0060                     __CFG_PBADEN$OFF 000000  
                        ___ftadd@f1 007D                          ___ftadd@f2 0080  
                        ___ftdiv@f1 006C                          ___ftdiv@f2 006F  
                        ___ftdiv@f3 0078                        ?_pulsPinInit 0001  
                        ___awtoft@c 0068                          ___ftmul@f1 0068  
                        ___ftmul@f2 006B                  __size_of_char2pins 01AA  
                        ___ftsub@f1 008B                          ___ftsub@f2 008E  
                        ___fttol@f1 0060                      __pcstackCOMRAM 0001  
                      _ee_read_byte 2778                        __pidataBANK0 27BA  
                      __pidataBANK1 24DA                       __end_of_fgetc 25B0  
                     __end_of_fseek 1AF2                          _advModeMem 0038  
 __end_of_actionsTimeoutShowSetting 21E8                             ??_fgetc 0015  
                           ??_fseek 0019                          __pbssBANK0 00AD  
                        __pbssBANK1 018B                  __size_of_enterMenu 0052  
                           ?_decVar 0001                             ?_incVar 0001  
                 __end_of_adcDriver 20C8                   __end_of___asftadd 262A  
                 __end_of___asftdiv 2666                   __end_of___asftmul 26A2  
                         ?_adcSetup 0001                           ?___awtoft 0068  
                         ?___ftpack 0060                  __size_of_uintToStr 004E  
                        _brilloToff 0139                   __end_of_char2pins 156E  
                        char2pins@c 0013                             __Hparam 0000  
            __size_ofi1_timerDriver 00AA                             __Lparam 0000  
                           ___ftadd 1766                             ___ftdiv 1C6A  
                   __size_of_decVar 025E                             ___ftmul 1B70  
                           ___ftsub 26DA                             ___fttol 1EE0  
                           ___lwdiv 2490                             ___lwmod 25B0  
                   __size_of_incVar 0276                     __CFG_STVREN$OFF 000000  
                           __pcinit 2274                   __end_of_enterMenu 2442  
                        ??_adcSetup 0060                          ??___awtoft 006B  
                        ??___ftpack 0065                             __ramtop 0800  
                           _getConv 27AC                             _tOnFlag 003B  
                           __ptext0 0090                             __ptext1 0EC6  
                           __ptext2 23F0                             __ptext3 2778  
                           __ptext4 1146                             __ptext5 2708  
                           __ptext6 2734                             __ptext7 215A  
                           __ptext8 21E8                             __ptext9 237A  
                           _display 00B5                           _T0CONbits 000FD5  
                      __size_of_iir 015E                        __size_of_isr 2372  
                         _T3CONbits 000FB1                             _isr_adc 279C  
                           _muxFile 0143                __size_of_timerDriver 00A8  
                           _pulsPin 003D                          _isr_timer0 1F90  
                        _isr_timer3 2524                      __pintcode_body 22FE  
                           fseek@fp 0013                end_of_initialization 22F8  
                           int_func 22FE                 ee_read_byte@address 0060  
                 __end_of_uintToStr 2490                      pulsPinDriver@i 0007  
              __size_of_pulsPinInit 007E                             postdec1 000FE5  
                           postdec2 000FDD                             postinc0 000FEE  
                           postinc1 000FE6                             postinc2 000FDE  
                         _PORTAbits 000F80                           _PORTBbits 000F81  
                         _PORTCbits 000F82                       i1_timerDriver 1D4C  
             __end_of_pulsPinDriver 1716      __size_of_endTestDisplayActions 002A  
     __end_of_endTestDisplayActions 275E                         ___ftdiv@exp 007B  
                       ___ftmul@exp 0073                      __end_of_decVar 13A4  
                     __pidataCOMRAM 278A                      __end_of_incVar 113C  
                    ?i1_timerDriver 0001                 start_initialization 2274  
                        _systemInit 237A                         __end_of_iir 1A38  
                       __end_of_isr 237A              __size_of_ee_write_byte 002C  
                       ?_isr_timer0 0001                         ?_isr_timer3 0001  
                      _ignoreNextFp 00BB                            ??_decVar 008B  
                          ??_incVar 008B                         __pdataBANK0 00C9  
                       __pdataBANK1 0100                    __CFG_LPT1OSC$OFF 000000  
                 __size_of_adcSetup 001A                   __size_of___awtoft 0038  
                 __size_of___ftpack 0088                           _adcDriver 2032  
                         ___asftadd 25EE                ee_write_byte@address 0061  
                         ___asftdiv 262A                           ___asftmul 2666  
                       __pbssCOMRAM 0028                       __pcstackBANK0 0060  
                     __pcstackBANK1 014A                           _adcStruct 00AD  
        ?_actionsTimeoutShowSetting 0001                           _char2pins 13C4  
                ee_write_byte@_data 0060                           _main$2642 014A  
                  ___lwdiv@dividend 0060                           _escDecMem 002C  
                         __pintcode 0008                           _escEntMem 002E  
                     _ee_write_byte 2708                            ?___ftadd 007D  
                          ?___ftdiv 006C                            ?___ftmul 0068  
                          ?___ftsub 008B                            ?___fttol 0060  
                          ?___lwdiv 0060                            ?___lwmod 0060  
               __size_of_isr_timer0 00A2                 __size_of_isr_timer3 0048  
                       __pintcodelo 0018                           _brilloMem 0039  
                          ?_getConv 0060                           _brilloTon 013E  
                   ??i1_timerDriver 0001                          ?_adcDriver 0001  
                        ?___asftadd 0091                          ?___asftdiv 007D  
                        ?___asftmul 0079                           _enterMenu 23F0  
                          ?_isr_adc 0001                         ?_systemInit 0001  
                  ___lwdiv@quotient 0065                      __size_of_fgetc 0044  
                    __size_of_fseek 00A6                          ?_char2pins 0001  
                          _IPR1bits 000F9F                            _IPR2bits 000FA2  
                          _PIE1bits 000F9D                            _PIE2bits 000FA0  
                          _PIR1bits 000F9E                            i1u770_20 004C  
                          i1u770_21 004A                            i1u771_20 005A  
                          i1u771_21 0058                            _PIR2bits 000FA1  
                          i1u772_20 0062                            i1u772_21 0060  
                          i1u764_25 1D94                            i1u694_24 1622  
                          i1u694_25 161E                           _muxBuffer 00C9  
                          i1u769_20 0044                            i1u769_21 0042  
                          i2u681_40 2334                            i2u681_41 2332  
                          i2u682_40 233C                            i2u682_41 233A  
                    ?_ee_write_byte 0060                            _UCFGbits 000F6F  
                          _RCONbits 000FD0                           _uintToStr 2442  
                        _ADCON0bits 000FC2                          _ADCON1bits 000FC1  
                        _ADCON2bits 000FC0                       ??_timerDriver 0060  
                        ?_enterMenu 0001                           fseek@mode 0017  
                       _INTCON2bits 000FF1                           copy_data0 22AC  
                         copy_data1 22CC                           copy_data2 22EC  
                        uintToStr@i 006B                          _EECON1bits 000FA6  
                     ??_pulsPinInit 0060                            __Hrparam 0000  
                          __Lrparam 0000                       ?_ee_read_byte 0001  
               __size_of_systemInit 0076       _actionsTimeoutShowSetting$438 0060  
                       _measurement 00B7                    __size_of___ftadd 015C  
                  __size_of___ftdiv 00D8                    __size_of___ftmul 00E4  
                  __size_of___ftsub 002E                    __size_of___fttol 008C  
                  __size_of___lwdiv 004A                    __size_of___lwmod 003E  
                        ?_uintToStr 0067                            _adcSetup 275E  
                          ___awtoft 26A2                            ___ftpack 20C8  
                  __size_of_getConv 000E                         ??_adcDriver 0060  
                       ??___asftadd 0094                         ??___asftdiv 0080  
                       ??___asftmul 007C                            _main$441 014D  
                          _main$450 015F                            _main$442 014F  
                          _main$451 0161                            _main$443 0151  
                          _main$460 0173                            _main$452 0163  
                          _main$444 0153                            _main$461 0175  
                          _main$453 0165                            _main$445 0155  
                          _main$470 0187                            _main$462 0177  
                          _main$454 0167                            _main$446 0157  
                          _main$471 0189                            _main$463 0179  
                          _main$455 0169                            _main$447 0159  
                          _main$464 017B                            _main$456 016B  
                          _main$448 015B                            _main$465 017D  
                          _main$457 016D                            _main$449 015D  
                          _main$466 017F                            _main$458 016F  
                          _main$467 0181                            _main$459 0171  
                          _main$468 0183                            _main$469 0185  
                  __size_of_isr_adc 0010                     ___lwdiv@divisor 0062  
                   ___lwdiv@counter 0064                            __ptext10 1E1E  
                          __ptext11 2442                            __ptext20 25B0  
                          __ptext12 2032                            __ptext21 25EE  
                          __ptext13 27AC                            __ptext30 279C  
                          __ptext22 1766                            __ptext14 18DA  
                          __ptext31 15EC                            __ptext23 262A  
                          __ptext15 275E                            __ptext32 1D4C  
                          __ptext24 2666                            __ptext16 26A2  
                          __ptext25 20C8                            __ptext17 1EE0  
                          __ptext34 1F90                            __ptext26 1C6A  
                          __ptext18 26DA                            __ptext35 1A4C  
                          __ptext27 1B70                            __ptext19 2490  
                          __ptext36 13C4                            __ptext37 256C  
                          __ptext29 2524                            __ptext38 0000  
                      ??_isr_timer0 001A                        ??_isr_timer3 0008  
               __end_of_timerDriver 1EC6                         ??_char2pins 0013  
                     __size_of_isr2 0074                       __size_of_main 0E36  
                          iir@F4235 0127                            iir@F4237 0130  
             _endTestDisplayActions 2734                            iir@ACoef 0098  
                          iir@BCoef 00A1                     ??_ee_write_byte 0061  
                          _segments 00B9                      ??_ee_read_byte 0060  
                          _timerMem 018B                 __end_of_pulsPinInit 2266  
                __end_of_isr_timer0 2032                  __end_of_isr_timer3 256C  
            __size_of_pulsPinDriver 012A               __CFG_CPUDIV$OSC1_PLL2 000000  
                       ??_enterMenu 0060                          _INTCONbits 000FF2  
                      iir@NewSample 0095         ??_actionsTimeoutShowSetting 0060  
                   uintToStr@strLen 006A                            intlevel1 0000  
                          intlevel2 0000                    ___lwmod@dividend 0060  
                        _OSCCONbits 000FD3                         fgetc@stream 0013  
                       ??_uintToStr 006B                         _timerDriver 1E1E  
                   ___lwmod@divisor 0062                     ___lwmod@counter 0064  
                      ??_systemInit 0060                        timerDriver@i 0063  
                __CFG_FOSC$HSPLL_HS 000000                       _pulsPinBuffer 00BC  
                     _pulsPinDriver 15EC              ?_endTestDisplayActions 0001  
                       _pulsPinInit 21E8  
