

HI-TECH Software PIC18 PRO Macro Assembler V9.80 build 11162 
                                                                                               Tue Apr 29 13:17:40 2025

HI-TECH Software Omniscient Code Generator (PRO mode) build 11162
     1                           	processor	18F2550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	eeprom_data,global,class=EEDATA,delta=1
     6                           	psect	idataCOMRAM,global,class=CODE,delta=1
     7                           	psect	idataBANK0,global,class=CODE,delta=1
     8                           	psect	idataBANK1,global,class=CODE,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1
    52                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    53                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    54                           	psect	text34,global,reloc=2,class=CODE,delta=1
    55                           	psect	text35,global,reloc=2,class=CODE,delta=1
    56                           	psect	text36,global,reloc=2,class=CODE,delta=1
    57                           	psect	text37,global,reloc=2,class=CODE,delta=1
    58                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    59                           	psect	text38,global,reloc=2,class=CODE,delta=1
    60                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    61                           	psect	pa_nodes,global,class=CODE,delta=1
    62  0000                     prodl	equ	0xFF3
    63                           intcon	equ	0xFF2
    64                           intcon2	equ	0xFF1
    65                           wreg	equ	0xFE8
    66                           indf1	equ	0xFE7
    67                           postinc1	equ	0xFE6
    68                           postdec1	equ	0xFE5
    69                           fsr1h	equ	0xFE2
    70                           fsr1l	equ	0xFE1
    71                           indf2	equ	0xFDF
    72                           postinc2	equ	0xFDE
    73                           postdec2	equ	0xFDD
    74                           plusw2	equ	0xFDB
    75                           fsr2h	equ	0xFDA
    76                           fsr2l	equ	0xFD9
    77                           status	equ	0xFD8
    78                           
    79                           	psect	eeprom_data
    80  F00000  00 00 00 00 00 00  	db	0,0,0,0,0,0,0,0	;# 
      +       00 00              
    81  F00008  00 00 00 00 00 00  	db	0,0,0,0,0,0,0,1	;# 
      +       00 01              
    82  F00010  00 00 00 00 00 00  	db	0,0,0,0,0,0,0,0	;# 
      +       00 00              
    83  0000                     prodl	equ	0xFF3
    84                           intcon	equ	0xFF2
    85                           intcon2	equ	0xFF1
    86                           wreg	equ	0xFE8
    87                           indf1	equ	0xFE7
    88                           postinc1	equ	0xFE6
    89                           postdec1	equ	0xFE5
    90                           fsr1h	equ	0xFE2
    91                           fsr1l	equ	0xFE1
    92                           indf2	equ	0xFDF
    93                           postinc2	equ	0xFDE
    94                           postdec2	equ	0xFDD
    95                           plusw2	equ	0xFDB
    96                           fsr2h	equ	0xFDA
    97                           fsr2l	equ	0xFD9
    98                           status	equ	0xFD8
    99                           
   100                           	psect	idataCOMRAM
   101  00278C                     __pidataCOMRAM:
   102                           	opt stack 0
   103                           
   104                           ;initializer for _setInc
   105  00278C  01                 	db	1
   106                           
   107                           ;initializer for _pulsPin
   108  00278D  0F82               	dw	3970	;volatile
   109  00278F  D8                 	db	216
   110  002790  00                 	db	0
   111  002791  0F82               	dw	3970	;volatile
   112  002793  D9                 	db	217
   113  002794  00                 	db	0
   114  002795  0F82               	dw	3970	;volatile
   115  002797  B8                 	db	184
   116  002798  00                 	db	0
   117  002799  0F82               	dw	3970	;volatile
   118  00279B  B9                 	db	185
   119  00279C  00                 	db	0
   120                           prodl	equ	0xFF3
   121                           intcon	equ	0xFF2
   122                           intcon2	equ	0xFF1
   123                           wreg	equ	0xFE8
   124                           indf1	equ	0xFE7
   125                           postinc1	equ	0xFE6
   126                           postdec1	equ	0xFE5
   127                           fsr1h	equ	0xFE2
   128                           fsr1l	equ	0xFE1
   129                           indf2	equ	0xFDF
   130                           postinc2	equ	0xFDE
   131                           postdec2	equ	0xFDD
   132                           plusw2	equ	0xFDB
   133                           fsr2h	equ	0xFDA
   134                           fsr2l	equ	0xFD9
   135                           status	equ	0xFD8
   136                           
   137                           	psect	idataBANK0
   138  0027BC                     __pidataBANK0:
   139                           	opt stack 0
   140                           
   141                           ;initializer for _muxBuffer
   142  0027BC  20                 	db	32
   143  0027BD  20                 	db	32
   144  0027BE  20                 	db	32
   145  0027BF  20                 	db	32
   146  0027C0  00                 	db	0
   147                           prodl	equ	0xFF3
   148                           intcon	equ	0xFF2
   149                           intcon2	equ	0xFF1
   150                           wreg	equ	0xFE8
   151                           indf1	equ	0xFE7
   152                           postinc1	equ	0xFE6
   153                           postdec1	equ	0xFE5
   154                           fsr1h	equ	0xFE2
   155                           fsr1l	equ	0xFE1
   156                           indf2	equ	0xFDF
   157                           postinc2	equ	0xFDE
   158                           postdec2	equ	0xFDD
   159                           plusw2	equ	0xFDB
   160                           fsr2h	equ	0xFDA
   161                           fsr2l	equ	0xFD9
   162                           status	equ	0xFD8
   163                           
   164                           	psect	idataBANK1
   165  002492                     __pidataBANK1:
   166                           	opt stack 0
   167                           
   168                           ;initializer for _timerDelayConstant
   169  002492  0C                 	db	12
   170  002493  00                 	db	0
   171  002494  00                 	db	0
   172  002495  0C                 	db	12
   173  002496  00                 	db	0
   174  002497  00                 	db	0
   175  002498  96                 	db	150
   176  002499  00                 	db	0
   177  00249A  00                 	db	0
   178  00249B  12                 	db	18
   179  00249C  00                 	db	0
   180  00249D  00                 	db	0
   181  00249E  FA                 	db	250
   182  00249F  00                 	db	0
   183  0024A0  00                 	db	0
   184  0024A1  12                 	db	18
   185  0024A2  00                 	db	0
   186  0024A3  00                 	db	0
   187  0024A4  02                 	db	2
   188  0024A5  00                 	db	0
   189  0024A6  00                 	db	0
   190  0024A7  01                 	db	1
   191  0024A8  00                 	db	0
   192  0024A9  00                 	db	0
   193  0024AA  06                 	db	6
   194  0024AB  00                 	db	0
   195  0024AC  00                 	db	0
   196  0024AD  02                 	db	2
   197  0024AE  00                 	db	0
   198  0024AF  00                 	db	0
   199  0024B0  0C                 	db	12
   200  0024B1  00                 	db	0
   201  0024B2  00                 	db	0
   202  0024B3  08                 	db	8
   203  0024B4  00                 	db	0
   204  0024B5  00                 	db	0
   205  0024B6  0A                 	db	10
   206  0024B7  00                 	db	0
   207  0024B8  00                 	db	0
   208                           
   209                           ;initializer for iir@F4235
   210  0024B9  DA                 	db	218
   211  0024BA  77                 	db	119
   212  0024BB  3A                 	db	58
   213  0024BC  DA                 	db	218
   214  0024BD  F7                 	db	247
   215  0024BE  3A                 	db	58
   216  0024BF  DA                 	db	218
   217  0024C0  77                 	db	119
   218  0024C1  3A                 	db	58
   219                           
   220                           ;initializer for iir@F4237
   221  0024C2  00                 	db	0
   222  0024C3  80                 	db	128
   223  0024C4  3F                 	db	63
   224  0024C5  A2                 	db	162
   225  0024C6  F4                 	db	244
   226  0024C7  BF                 	db	191
   227  0024C8  3C                 	db	60
   228  0024C9  6A                 	db	106
   229  0024CA  3F                 	db	63
   230                           
   231                           ;initializer for _brilloToff
   232  0024CB  E7                 	db	231
   233  0024CC  EC                 	db	236
   234  0024CD  F1                 	db	241
   235  0024CE  F6                 	db	246
   236  0024CF  FB                 	db	251
   237                           
   238                           ;initializer for _brilloTon
   239  0024D0  FB                 	db	251
   240  0024D1  F6                 	db	246
   241  0024D2  F1                 	db	241
   242  0024D3  EC                 	db	236
   243  0024D4  E7                 	db	231
   244                           
   245                           ;initializer for _muxFile
   246  0024D5  03                 	db	3
   247  0024D6  C9                 	db	low _muxBuffer
   248  0024D7  C9                 	db	low _muxBuffer
   249  0024D8  C9                 	db	low _muxBuffer
   250  0024D9  05                 	db	5
   251  0024DA  05                 	db	5
   252  0024DB  05                 	db	5
   253  0000                     _ADRES	set	4035
   254  0000                     _TMR0	set	4054
   255  0000                     _TMR3	set	4018
   256  0000                     _ADCON0bits	set	4034
   257  0000                     _ADCON1bits	set	4033
   258  0000                     _ADCON2bits	set	4032
   259  0000                     _EEADR	set	4009
   260  0000                     _EECON1bits	set	4006
   261  0000                     _EECON2	set	4007
   262  0000                     _EEDATA	set	4008
   263  0000                     _INTCON2bits	set	4081
   264  0000                     _INTCONbits	set	4082
   265  0000                     _IPR1bits	set	3999
   266  0000                     _IPR2bits	set	4002
   267  0000                     _OSCCONbits	set	4051
   268  0000                     _PIE1bits	set	3997
   269  0000                     _PIE2bits	set	4000
   270  0000                     _PIR1bits	set	3998
   271  0000                     _PIR2bits	set	4001
   272  0000                     _PORTAbits	set	3968
   273  0000                     _PORTBbits	set	3969
   274  0000                     _PORTCbits	set	3970
   275  0000                     _RCONbits	set	4048
   276  0000                     _T0CONbits	set	4053
   277  0000                     _T3CONbits	set	4017
   278  0000                     _UCFGbits	set	3951
   279  0000                     _ADFM	set	32263
   280  0000                     _TRISA0	set	31888
   281  0000                     _TRISA1	set	31889
   282  0000                     _TRISA2	set	31890
   283  0000                     _TRISA3	set	31891
   284  0000                     _TRISA4	set	31892
   285  0000                     _TRISA5	set	31893
   286  0000                     _TRISB1	set	31897
   287  0000                     _TRISB2	set	31898
   288  0000                     _TRISB3	set	31899
   289  0000                     _TRISB4	set	31900
   290  0000                     _TRISB5	set	31901
   291  0000                     _TRISB6	set	31902
   292  0000                     _TRISB7	set	31903
   293  0000                     _TRISC6	set	31910
   294  0000                     _PORTC	set	3970
   295                           
   296                           ; #config settings
   297  0000                     prodl	equ	0xFF3
   298                           intcon	equ	0xFF2
   299                           intcon2	equ	0xFF1
   300                           wreg	equ	0xFE8
   301                           indf1	equ	0xFE7
   302                           postinc1	equ	0xFE6
   303                           postdec1	equ	0xFE5
   304                           fsr1h	equ	0xFE2
   305                           fsr1l	equ	0xFE1
   306                           indf2	equ	0xFDF
   307                           postinc2	equ	0xFDE
   308                           postdec2	equ	0xFDD
   309                           plusw2	equ	0xFDB
   310                           fsr2h	equ	0xFDA
   311                           fsr2l	equ	0xFD9
   312                           status	equ	0xFD8
   313                           
   314                           	psect	cinit
   315  002276                     __pcinit:
   316                           	opt stack 0
   317  002276                     start_initialization:
   318                           	opt stack 0
   319                           
   320                           ; Clear objects allocated to BANK1 (61 bytes)
   321  002276  EE01  F08B         	lfsr	0,__pbssBANK1
   322  00227A  0E3D               	movlw	61
   323  00227C                     clear_0:
   324  00227C  6AEE               	clrf	postinc0,c
   325  00227E  06E8               	decf	wreg,f,c
   326  002280  E1FD               	bnz	clear_0
   327                           
   328                           ; Clear objects allocated to BANK0 (28 bytes)
   329  002282  EE00  F0AD         	lfsr	0,__pbssBANK0
   330  002286  0E1C               	movlw	28
   331  002288                     clear_1:
   332  002288  6AEE               	clrf	postinc0,c
   333  00228A  06E8               	decf	wreg,f,c
   334  00228C  E1FD               	bnz	clear_1
   335                           
   336                           ; Clear objects allocated to COMRAM (20 bytes)
   337  00228E  EE00  F028         	lfsr	0,__pbssCOMRAM
   338  002292  0E14               	movlw	20
   339  002294                     clear_2:
   340  002294  6AEE               	clrf	postinc0,c
   341  002296  06E8               	decf	wreg,f,c
   342  002298  E1FD               	bnz	clear_2
   343                           
   344                           ; Initialize objects allocated to BANK1 (74 bytes)
   345                           ; load TBLPTR registers with __pidataBANK1
   346  00229A  0E92               	movlw	low __pidataBANK1
   347  00229C  6EF6               	movwf	tblptrl,c
   348  00229E  0E24               	movlw	high __pidataBANK1
   349  0022A0  6EF7               	movwf	tblptrh,c
   350  0022A2  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   351  0022A4  6EF8               	movwf	tblptru,c
   352  0022A6  EE01  F000         	lfsr	0,__pdataBANK1
   353  0022AA  EE10 F04A          	lfsr	1,74
   354  0022AE                     copy_data0:
   355  0022AE  0009               	tblrd		*+
   356  0022B0  CFF5 FFEE          	movff	tablat,postinc0
   357  0022B4  50E5               	movf	postdec1,w,c
   358  0022B6  50E1               	movf	fsr1l,w,c
   359  0022B8  E1FA               	bnz	copy_data0
   360                           
   361                           ; Initialize objects allocated to BANK0 (5 bytes)
   362                           ; load TBLPTR registers with __pidataBANK0
   363  0022BA  0EBC               	movlw	low __pidataBANK0
   364  0022BC  6EF6               	movwf	tblptrl,c
   365  0022BE  0E27               	movlw	high __pidataBANK0
   366  0022C0  6EF7               	movwf	tblptrh,c
   367  0022C2  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   368  0022C4  6EF8               	movwf	tblptru,c
   369  0022C6  EE00  F0C9         	lfsr	0,__pdataBANK0
   370  0022CA  EE10 F005          	lfsr	1,5
   371  0022CE                     copy_data1:
   372  0022CE  0009               	tblrd		*+
   373  0022D0  CFF5 FFEE          	movff	tablat,postinc0
   374  0022D4  50E5               	movf	postdec1,w,c
   375  0022D6  50E1               	movf	fsr1l,w,c
   376  0022D8  E1FA               	bnz	copy_data1
   377                           
   378                           ; Initialize objects allocated to COMRAM (17 bytes)
   379                           ; load TBLPTR registers with __pidataCOMRAM
   380  0022DA  0E8C               	movlw	low __pidataCOMRAM
   381  0022DC  6EF6               	movwf	tblptrl,c
   382  0022DE  0E27               	movlw	high __pidataCOMRAM
   383  0022E0  6EF7               	movwf	tblptrh,c
   384  0022E2  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   385  0022E4  6EF8               	movwf	tblptru,c
   386  0022E6  EE00  F03C         	lfsr	0,__pdataCOMRAM
   387  0022EA  EE10 F011          	lfsr	1,17
   388  0022EE                     copy_data2:
   389  0022EE  0009               	tblrd		*+
   390  0022F0  CFF5 FFEE          	movff	tablat,postinc0
   391  0022F4  50E5               	movf	postdec1,w,c
   392  0022F6  50E1               	movf	fsr1l,w,c
   393  0022F8  E1FA               	bnz	copy_data2
   394  0022FA                     end_of_initialization:
   395                           	opt stack 0
   396  0022FA  0100               	movlb	0
   397  0022FC  EF48  F000         	goto	_main	;jump to C main() function
   398                           tblptru	equ	0xFF8
   399                           tblptrh	equ	0xFF7
   400                           tblptrl	equ	0xFF6
   401                           tablat	equ	0xFF5
   402                           prodl	equ	0xFF3
   403                           intcon	equ	0xFF2
   404                           intcon2	equ	0xFF1
   405                           postinc0	equ	0xFEE
   406                           wreg	equ	0xFE8
   407                           indf1	equ	0xFE7
   408                           postinc1	equ	0xFE6
   409                           postdec1	equ	0xFE5
   410                           fsr1h	equ	0xFE2
   411                           fsr1l	equ	0xFE1
   412                           indf2	equ	0xFDF
   413                           postinc2	equ	0xFDE
   414                           postdec2	equ	0xFDD
   415                           plusw2	equ	0xFDB
   416                           fsr2h	equ	0xFDA
   417                           fsr2l	equ	0xFD9
   418                           status	equ	0xFD8
   419                           
   420                           	psect	bssCOMRAM
   421  000028                     __pbssCOMRAM:
   422                           	opt stack 0
   423  000028                     _eLoMem:
   424                           	opt stack 0
   425  000028                     	ds	2
   426  00002A                     _eUpMem:
   427                           	opt stack 0
   428  00002A                     	ds	2
   429  00002C                     _escDecMem:
   430                           	opt stack 0
   431  00002C                     	ds	2
   432  00002E                     _escEntMem:
   433                           	opt stack 0
   434  00002E                     	ds	2
   435  000030                     _vLoMem:
   436                           	opt stack 0
   437  000030                     	ds	2
   438  000032                     _vUpMem:
   439                           	opt stack 0
   440  000032                     	ds	2
   441  000034                     _xLoMem:
   442                           	opt stack 0
   443  000034                     	ds	2
   444  000036                     _xUpMem:
   445                           	opt stack 0
   446  000036                     	ds	2
   447  000038                     _advModeMem:
   448                           	opt stack 0
   449  000038                     	ds	1
   450  000039                     _brilloMem:
   451                           	opt stack 0
   452  000039                     	ds	1
   453  00003A                     _state:
   454                           	opt stack 0
   455  00003A                     	ds	1
   456  00003B                     _tOnFlag:
   457                           	opt stack 0
   458  00003B                     	ds	1
   459                           tblptru	equ	0xFF8
   460                           tblptrh	equ	0xFF7
   461                           tblptrl	equ	0xFF6
   462                           tablat	equ	0xFF5
   463                           prodl	equ	0xFF3
   464                           intcon	equ	0xFF2
   465                           intcon2	equ	0xFF1
   466                           postinc0	equ	0xFEE
   467                           wreg	equ	0xFE8
   468                           indf1	equ	0xFE7
   469                           postinc1	equ	0xFE6
   470                           postdec1	equ	0xFE5
   471                           fsr1h	equ	0xFE2
   472                           fsr1l	equ	0xFE1
   473                           indf2	equ	0xFDF
   474                           postinc2	equ	0xFDE
   475                           postdec2	equ	0xFDD
   476                           plusw2	equ	0xFDB
   477                           fsr2h	equ	0xFDA
   478                           fsr2l	equ	0xFD9
   479                           status	equ	0xFD8
   480                           
   481                           	psect	dataCOMRAM
   482  00003C                     __pdataCOMRAM:
   483                           	opt stack 0
   484  00003C                     _setInc:
   485                           	opt stack 0
   486  00003C                     	ds	1
   487  00003D                     _pulsPin:
   488                           	opt stack 0
   489  00003D                     	ds	16
   490                           tblptru	equ	0xFF8
   491                           tblptrh	equ	0xFF7
   492                           tblptrl	equ	0xFF6
   493                           tablat	equ	0xFF5
   494                           prodl	equ	0xFF3
   495                           intcon	equ	0xFF2
   496                           intcon2	equ	0xFF1
   497                           postinc0	equ	0xFEE
   498                           wreg	equ	0xFE8
   499                           indf1	equ	0xFE7
   500                           postinc1	equ	0xFE6
   501                           postdec1	equ	0xFE5
   502                           fsr1h	equ	0xFE2
   503                           fsr1l	equ	0xFE1
   504                           indf2	equ	0xFDF
   505                           postinc2	equ	0xFDE
   506                           postdec2	equ	0xFDD
   507                           plusw2	equ	0xFDB
   508                           fsr2h	equ	0xFDA
   509                           fsr2l	equ	0xFD9
   510                           status	equ	0xFD8
   511                           
   512                           	psect	bssBANK0
   513  0000AD                     __pbssBANK0:
   514                           	opt stack 0
   515  0000AD                     _adcStruct:
   516                           	opt stack 0
   517  0000AD                     	ds	5
   518  0000B2                     _escala:
   519                           	opt stack 0
   520  0000B2                     	ds	3
   521  0000B5                     _display:
   522                           	opt stack 0
   523  0000B5                     	ds	2
   524  0000B7                     _measurement:
   525                           	opt stack 0
   526  0000B7                     	ds	2
   527  0000B9                     _segments:
   528                           	opt stack 0
   529  0000B9                     	ds	2
   530  0000BB                     _ignoreNextFp:
   531                           	opt stack 0
   532  0000BB                     	ds	1
   533  0000BC                     _pulsPinBuffer:
   534                           	opt stack 0
   535  0000BC                     	ds	1
   536  0000BD                     _y:
   537                           	opt stack 0
   538  0000BD                     	ds	9
   539  0000C6                     _medicionFloat:
   540                           	opt stack 0
   541  0000C6                     	ds	3
   542                           tblptru	equ	0xFF8
   543                           tblptrh	equ	0xFF7
   544                           tblptrl	equ	0xFF6
   545                           tablat	equ	0xFF5
   546                           prodl	equ	0xFF3
   547                           intcon	equ	0xFF2
   548                           intcon2	equ	0xFF1
   549                           postinc0	equ	0xFEE
   550                           wreg	equ	0xFE8
   551                           indf1	equ	0xFE7
   552                           postinc1	equ	0xFE6
   553                           postdec1	equ	0xFE5
   554                           fsr1h	equ	0xFE2
   555                           fsr1l	equ	0xFE1
   556                           indf2	equ	0xFDF
   557                           postinc2	equ	0xFDE
   558                           postdec2	equ	0xFDD
   559                           plusw2	equ	0xFDB
   560                           fsr2h	equ	0xFDA
   561                           fsr2l	equ	0xFD9
   562                           status	equ	0xFD8
   563                           
   564                           	psect	dataBANK0
   565  0000C9                     __pdataBANK0:
   566                           	opt stack 0
   567  0000C9                     _muxBuffer:
   568                           	opt stack 0
   569  0000C9                     	ds	5
   570                           tblptru	equ	0xFF8
   571                           tblptrh	equ	0xFF7
   572                           tblptrl	equ	0xFF6
   573                           tablat	equ	0xFF5
   574                           prodl	equ	0xFF3
   575                           intcon	equ	0xFF2
   576                           intcon2	equ	0xFF1
   577                           postinc0	equ	0xFEE
   578                           wreg	equ	0xFE8
   579                           indf1	equ	0xFE7
   580                           postinc1	equ	0xFE6
   581                           postdec1	equ	0xFE5
   582                           fsr1h	equ	0xFE2
   583                           fsr1l	equ	0xFE1
   584                           indf2	equ	0xFDF
   585                           postinc2	equ	0xFDE
   586                           postdec2	equ	0xFDD
   587                           plusw2	equ	0xFDB
   588                           fsr2h	equ	0xFDA
   589                           fsr2l	equ	0xFD9
   590                           status	equ	0xFD8
   591                           
   592                           	psect	bssBANK1
   593  00018B                     __pbssBANK1:
   594                           	opt stack 0
   595  00018B                     _timerMem:
   596                           	opt stack 0
   597  00018B                     	ds	52
   598  0001BF                     _x:
   599                           	opt stack 0
   600  0001BF                     	ds	9
   601                           tblptru	equ	0xFF8
   602                           tblptrh	equ	0xFF7
   603                           tblptrl	equ	0xFF6
   604                           tablat	equ	0xFF5
   605                           prodl	equ	0xFF3
   606                           intcon	equ	0xFF2
   607                           intcon2	equ	0xFF1
   608                           postinc0	equ	0xFEE
   609                           wreg	equ	0xFE8
   610                           indf1	equ	0xFE7
   611                           postinc1	equ	0xFE6
   612                           postdec1	equ	0xFE5
   613                           fsr1h	equ	0xFE2
   614                           fsr1l	equ	0xFE1
   615                           indf2	equ	0xFDF
   616                           postinc2	equ	0xFDE
   617                           postdec2	equ	0xFDD
   618                           plusw2	equ	0xFDB
   619                           fsr2h	equ	0xFDA
   620                           fsr2l	equ	0xFD9
   621                           status	equ	0xFD8
   622                           
   623                           	psect	dataBANK1
   624  000100                     __pdataBANK1:
   625                           	opt stack 0
   626  000100                     _timerDelayConstant:
   627                           	opt stack 0
   628  000100                     	ds	39
   629  000127                     iir@F4235:
   630                           	opt stack 0
   631  000127                     	ds	9
   632  000130                     iir@F4237:
   633                           	opt stack 0
   634  000130                     	ds	9
   635  000139                     _brilloToff:
   636                           	opt stack 0
   637  000139                     	ds	5
   638  00013E                     _brilloTon:
   639                           	opt stack 0
   640  00013E                     	ds	5
   641  000143                     _muxFile:
   642                           	opt stack 0
   643  000143                     	ds	7
   644                           tblptru	equ	0xFF8
   645                           tblptrh	equ	0xFF7
   646                           tblptrl	equ	0xFF6
   647                           tablat	equ	0xFF5
   648                           prodl	equ	0xFF3
   649                           intcon	equ	0xFF2
   650                           intcon2	equ	0xFF1
   651                           postinc0	equ	0xFEE
   652                           wreg	equ	0xFE8
   653                           indf1	equ	0xFE7
   654                           postinc1	equ	0xFE6
   655                           postdec1	equ	0xFE5
   656                           fsr1h	equ	0xFE2
   657                           fsr1l	equ	0xFE1
   658                           indf2	equ	0xFDF
   659                           postinc2	equ	0xFDE
   660                           postdec2	equ	0xFDD
   661                           plusw2	equ	0xFDB
   662                           fsr2h	equ	0xFDA
   663                           fsr2l	equ	0xFD9
   664                           status	equ	0xFD8
   665                           
   666                           	psect	cstackBANK1
   667  00014A                     __pcstackBANK1:
   668                           	opt stack 0
   669  00014A                     _main$2642:
   670                           	opt stack 0
   671                           
   672                           ; 3 bytes @ 0x0
   673  00014A                     	ds	3
   674  00014D                     _main$441:
   675                           	opt stack 0
   676                           
   677                           ; 2 bytes @ 0x3
   678  00014D                     	ds	2
   679  00014F                     _main$442:
   680                           	opt stack 0
   681                           
   682                           ; 2 bytes @ 0x5
   683  00014F                     	ds	2
   684  000151                     _main$443:
   685                           	opt stack 0
   686                           
   687                           ; 2 bytes @ 0x7
   688  000151                     	ds	2
   689  000153                     _main$444:
   690                           	opt stack 0
   691                           
   692                           ; 2 bytes @ 0x9
   693  000153                     	ds	2
   694  000155                     _main$445:
   695                           	opt stack 0
   696                           
   697                           ; 2 bytes @ 0xB
   698  000155                     	ds	2
   699  000157                     _main$446:
   700                           	opt stack 0
   701                           
   702                           ; 2 bytes @ 0xD
   703  000157                     	ds	2
   704  000159                     _main$447:
   705                           	opt stack 0
   706                           
   707                           ; 2 bytes @ 0xF
   708  000159                     	ds	2
   709  00015B                     _main$448:
   710                           	opt stack 0
   711                           
   712                           ; 2 bytes @ 0x11
   713  00015B                     	ds	2
   714  00015D                     _main$449:
   715                           	opt stack 0
   716                           
   717                           ; 2 bytes @ 0x13
   718  00015D                     	ds	2
   719  00015F                     _main$450:
   720                           	opt stack 0
   721                           
   722                           ; 2 bytes @ 0x15
   723  00015F                     	ds	2
   724  000161                     _main$451:
   725                           	opt stack 0
   726                           
   727                           ; 2 bytes @ 0x17
   728  000161                     	ds	2
   729  000163                     _main$452:
   730                           	opt stack 0
   731                           
   732                           ; 2 bytes @ 0x19
   733  000163                     	ds	2
   734  000165                     _main$453:
   735                           	opt stack 0
   736                           
   737                           ; 2 bytes @ 0x1B
   738  000165                     	ds	2
   739  000167                     _main$454:
   740                           	opt stack 0
   741                           
   742                           ; 2 bytes @ 0x1D
   743  000167                     	ds	2
   744  000169                     _main$455:
   745                           	opt stack 0
   746                           
   747                           ; 2 bytes @ 0x1F
   748  000169                     	ds	2
   749  00016B                     _main$456:
   750                           	opt stack 0
   751                           
   752                           ; 2 bytes @ 0x21
   753  00016B                     	ds	2
   754  00016D                     _main$457:
   755                           	opt stack 0
   756                           
   757                           ; 2 bytes @ 0x23
   758  00016D                     	ds	2
   759  00016F                     _main$458:
   760                           	opt stack 0
   761                           
   762                           ; 2 bytes @ 0x25
   763  00016F                     	ds	2
   764  000171                     _main$459:
   765                           	opt stack 0
   766                           
   767                           ; 2 bytes @ 0x27
   768  000171                     	ds	2
   769  000173                     _main$460:
   770                           	opt stack 0
   771                           
   772                           ; 2 bytes @ 0x29
   773  000173                     	ds	2
   774  000175                     _main$461:
   775                           	opt stack 0
   776                           
   777                           ; 2 bytes @ 0x2B
   778  000175                     	ds	2
   779  000177                     _main$462:
   780                           	opt stack 0
   781                           
   782                           ; 2 bytes @ 0x2D
   783  000177                     	ds	2
   784  000179                     _main$463:
   785                           	opt stack 0
   786                           
   787                           ; 2 bytes @ 0x2F
   788  000179                     	ds	2
   789  00017B                     _main$464:
   790                           	opt stack 0
   791                           
   792                           ; 2 bytes @ 0x31
   793  00017B                     	ds	2
   794  00017D                     _main$465:
   795                           	opt stack 0
   796                           
   797                           ; 2 bytes @ 0x33
   798  00017D                     	ds	2
   799  00017F                     _main$466:
   800                           	opt stack 0
   801                           
   802                           ; 2 bytes @ 0x35
   803  00017F                     	ds	2
   804  000181                     _main$467:
   805                           	opt stack 0
   806                           
   807                           ; 2 bytes @ 0x37
   808  000181                     	ds	2
   809  000183                     _main$468:
   810                           	opt stack 0
   811                           
   812                           ; 2 bytes @ 0x39
   813  000183                     	ds	2
   814  000185                     _main$469:
   815                           	opt stack 0
   816                           
   817                           ; 2 bytes @ 0x3B
   818  000185                     	ds	2
   819  000187                     _main$470:
   820                           	opt stack 0
   821                           
   822                           ; 2 bytes @ 0x3D
   823  000187                     	ds	2
   824  000189                     _main$471:
   825                           	opt stack 0
   826                           
   827                           ; 2 bytes @ 0x3F
   828  000189                     	ds	2
   829                           tblptru	equ	0xFF8
   830                           tblptrh	equ	0xFF7
   831                           tblptrl	equ	0xFF6
   832                           tablat	equ	0xFF5
   833                           prodl	equ	0xFF3
   834                           intcon	equ	0xFF2
   835                           intcon2	equ	0xFF1
   836                           postinc0	equ	0xFEE
   837                           wreg	equ	0xFE8
   838                           indf1	equ	0xFE7
   839                           postinc1	equ	0xFE6
   840                           postdec1	equ	0xFE5
   841                           fsr1h	equ	0xFE2
   842                           fsr1l	equ	0xFE1
   843                           indf2	equ	0xFDF
   844                           postinc2	equ	0xFDE
   845                           postdec2	equ	0xFDD
   846                           plusw2	equ	0xFDB
   847                           fsr2h	equ	0xFDA
   848                           fsr2l	equ	0xFD9
   849                           status	equ	0xFD8
   850                           
   851                           	psect	cstackBANK0
   852  000060                     __pcstackBANK0:
   853                           	opt stack 0
   854  000060                     ??_pulsPinInit:
   855                           	opt stack 0
   856  000060                     ??_systemInit:
   857                           	opt stack 0
   858  000060                     ??_timerDriver:
   859                           	opt stack 0
   860  000060                     ??_adcDriver:
   861                           	opt stack 0
   862  000060                     ??_adcSetup:
   863                           	opt stack 0
   864  000060                     ?_ee_write_byte:
   865                           	opt stack 0
   866  000060                     ??_ee_read_byte:
   867                           	opt stack 0
   868  000060                     ??_enterMenu:
   869                           	opt stack 0
   870  000060                     ??_endTestDisplayActions:
   871                           	opt stack 0
   872  000060                     ??_actionsTimeoutShowSetting:
   873                           	opt stack 0
   874  000060                     ?_getConv:
   875                           	opt stack 0
   876  000060                     ?___lwdiv:
   877                           	opt stack 0
   878  000060                     ?___lwmod:
   879                           	opt stack 0
   880  000060                     ?___ftpack:
   881                           	opt stack 0
   882  000060                     ?___fttol:
   883                           	opt stack 0
   884  000060                     ee_write_byte@_data:
   885                           	opt stack 0
   886  000060                     ee_read_byte@address:
   887                           	opt stack 0
   888  000060                     _actionsTimeoutShowSetting$438:
   889                           	opt stack 0
   890  000060                     ___lwdiv@dividend:
   891                           	opt stack 0
   892  000060                     ___lwmod@dividend:
   893                           	opt stack 0
   894  000060                     ___ftpack@arg:
   895                           	opt stack 0
   896  000060                     ___fttol@f1:
   897                           	opt stack 0
   898                           
   899                           ; 3 bytes @ 0x0
   900  000060                     	ds	1
   901  000061                     ??_ee_write_byte:
   902                           	opt stack 0
   903  000061                     ee_write_byte@address:
   904                           	opt stack 0
   905                           
   906                           ; 1 bytes @ 0x1
   907  000061                     	ds	1
   908  000062                     ??_getConv:
   909                           	opt stack 0
   910  000062                     ___lwdiv@divisor:
   911                           	opt stack 0
   912  000062                     ___lwmod@divisor:
   913                           	opt stack 0
   914                           
   915                           ; 2 bytes @ 0x2
   916  000062                     	ds	1
   917  000063                     timerDriver@i:
   918                           	opt stack 0
   919  000063                     ___ftpack@exp:
   920                           	opt stack 0
   921                           
   922                           ; 1 bytes @ 0x3
   923  000063                     	ds	1
   924  000064                     ??___fttol:
   925                           	opt stack 0
   926  000064                     ??___lwdiv:
   927                           	opt stack 0
   928  000064                     ??___lwmod:
   929                           	opt stack 0
   930  000064                     ___ftpack@sign:
   931                           	opt stack 0
   932  000064                     ___lwdiv@counter:
   933                           	opt stack 0
   934  000064                     ___lwmod@counter:
   935                           	opt stack 0
   936                           
   937                           ; 1 bytes @ 0x4
   938  000064                     	ds	1
   939  000065                     ??___ftpack:
   940                           	opt stack 0
   941  000065                     ___lwdiv@quotient:
   942                           	opt stack 0
   943                           
   944                           ; 2 bytes @ 0x5
   945  000065                     	ds	1
   946  000066                     pulsPinInit@i:
   947                           	opt stack 0
   948                           
   949                           ; 1 bytes @ 0x6
   950  000066                     	ds	1
   951  000067                     ?_uintToStr:
   952                           	opt stack 0
   953  000067                     uintToStr@num:
   954                           	opt stack 0
   955                           
   956                           ; 2 bytes @ 0x7
   957  000067                     	ds	1
   958  000068                     ?___awtoft:
   959                           	opt stack 0
   960  000068                     ?___ftmul:
   961                           	opt stack 0
   962  000068                     adcDriver@ch2Cnv:
   963                           	opt stack 0
   964  000068                     ___awtoft@c:
   965                           	opt stack 0
   966  000068                     ___ftmul@f1:
   967                           	opt stack 0
   968                           
   969                           ; 3 bytes @ 0x8
   970  000068                     	ds	1
   971  000069                     uintToStr@str:
   972                           	opt stack 0
   973  000069                     ___fttol@sign1:
   974                           	opt stack 0
   975                           
   976                           ; 1 bytes @ 0x9
   977  000069                     	ds	1
   978  00006A                     uintToStr@strLen:
   979                           	opt stack 0
   980  00006A                     ___fttol@lval:
   981                           	opt stack 0
   982                           
   983                           ; 4 bytes @ 0xA
   984  00006A                     	ds	1
   985  00006B                     ??_uintToStr:
   986                           	opt stack 0
   987  00006B                     ??___awtoft:
   988                           	opt stack 0
   989  00006B                     uintToStr@i:
   990                           	opt stack 0
   991  00006B                     ___awtoft@sign:
   992                           	opt stack 0
   993  00006B                     ___ftmul@f2:
   994                           	opt stack 0
   995                           
   996                           ; 3 bytes @ 0xB
   997  00006B                     	ds	1
   998  00006C                     ?___ftdiv:
   999                           	opt stack 0
  1000  00006C                     ___ftdiv@f1:
  1001                           	opt stack 0
  1002                           
  1003                           ; 3 bytes @ 0xC
  1004  00006C                     	ds	2
  1005  00006E                     ??___ftmul:
  1006                           	opt stack 0
  1007  00006E                     ___fttol@exp1:
  1008                           	opt stack 0
  1009                           
  1010                           ; 1 bytes @ 0xE
  1011  00006E                     	ds	1
  1012  00006F                     ___ftdiv@f2:
  1013                           	opt stack 0
  1014                           
  1015                           ; 3 bytes @ 0xF
  1016  00006F                     	ds	3
  1017  000072                     ??___ftdiv:
  1018                           	opt stack 0
  1019                           
  1020                           ; 0 bytes @ 0x12
  1021  000072                     	ds	1
  1022  000073                     ___ftmul@exp:
  1023                           	opt stack 0
  1024                           
  1025                           ; 1 bytes @ 0x13
  1026  000073                     	ds	1
  1027  000074                     ___ftmul@f3_as_product:
  1028                           	opt stack 0
  1029                           
  1030                           ; 3 bytes @ 0x14
  1031  000074                     	ds	3
  1032  000077                     ___ftdiv@cntr:
  1033                           	opt stack 0
  1034  000077                     ___ftmul@cntr:
  1035                           	opt stack 0
  1036                           
  1037                           ; 1 bytes @ 0x17
  1038  000077                     	ds	1
  1039  000078                     ___ftmul@sign:
  1040                           	opt stack 0
  1041  000078                     ___ftdiv@f3:
  1042                           	opt stack 0
  1043                           
  1044                           ; 3 bytes @ 0x18
  1045  000078                     	ds	1
  1046  000079                     ?___asftmul:
  1047                           	opt stack 0
  1048  000079                     ___asftmul@f2:
  1049                           	opt stack 0
  1050                           
  1051                           ; 3 bytes @ 0x19
  1052  000079                     	ds	2
  1053  00007B                     ___ftdiv@exp:
  1054                           	opt stack 0
  1055                           
  1056                           ; 1 bytes @ 0x1B
  1057  00007B                     	ds	1
  1058  00007C                     ??___asftmul:
  1059                           	opt stack 0
  1060  00007C                     ___ftdiv@sign:
  1061                           	opt stack 0
  1062  00007C                     ___asftmul@f1p:
  1063                           	opt stack 0
  1064                           
  1065                           ; 1 bytes @ 0x1C
  1066  00007C                     	ds	1
  1067  00007D                     ?___ftadd:
  1068                           	opt stack 0
  1069  00007D                     ?___asftdiv:
  1070                           	opt stack 0
  1071  00007D                     ___ftadd@f1:
  1072                           	opt stack 0
  1073  00007D                     ___asftdiv@f2:
  1074                           	opt stack 0
  1075                           
  1076                           ; 3 bytes @ 0x1D
  1077  00007D                     	ds	3
  1078  000080                     ??___asftdiv:
  1079                           	opt stack 0
  1080  000080                     ___asftdiv@f1p:
  1081                           	opt stack 0
  1082  000080                     ___ftadd@f2:
  1083                           	opt stack 0
  1084                           
  1085                           ; 3 bytes @ 0x20
  1086  000080                     	ds	3
  1087  000083                     ??___ftadd:
  1088                           	opt stack 0
  1089                           
  1090                           ; 0 bytes @ 0x23
  1091  000083                     	ds	5
  1092  000088                     ___ftadd@sign:
  1093                           	opt stack 0
  1094                           
  1095                           ; 1 bytes @ 0x28
  1096  000088                     	ds	1
  1097  000089                     ___ftadd@exp2:
  1098                           	opt stack 0
  1099                           
  1100                           ; 1 bytes @ 0x29
  1101  000089                     	ds	1
  1102  00008A                     ___ftadd@exp1:
  1103                           	opt stack 0
  1104                           
  1105                           ; 1 bytes @ 0x2A
  1106  00008A                     	ds	1
  1107  00008B                     ??_incVar:
  1108                           	opt stack 0
  1109  00008B                     ??_decVar:
  1110                           	opt stack 0
  1111  00008B                     ?___ftsub:
  1112                           	opt stack 0
  1113  00008B                     ___ftsub@f1:
  1114                           	opt stack 0
  1115                           
  1116                           ; 3 bytes @ 0x2B
  1117  00008B                     	ds	3
  1118  00008E                     ___ftsub@f2:
  1119                           	opt stack 0
  1120                           
  1121                           ; 3 bytes @ 0x2E
  1122  00008E                     	ds	3
  1123  000091                     ??___ftsub:
  1124                           	opt stack 0
  1125  000091                     ?___asftadd:
  1126                           	opt stack 0
  1127  000091                     ___asftadd@f2:
  1128                           	opt stack 0
  1129                           
  1130                           ; 3 bytes @ 0x31
  1131  000091                     	ds	3
  1132  000094                     ??___asftadd:
  1133                           	opt stack 0
  1134  000094                     ___asftadd@f1p:
  1135                           	opt stack 0
  1136                           
  1137                           ; 1 bytes @ 0x34
  1138  000094                     	ds	1
  1139  000095                     ?_iir:
  1140                           	opt stack 0
  1141  000095                     iir@NewSample:
  1142                           	opt stack 0
  1143                           
  1144                           ; 3 bytes @ 0x35
  1145  000095                     	ds	3
  1146  000098                     ??_iir:
  1147                           	opt stack 0
  1148  000098                     iir@ACoef:
  1149                           	opt stack 0
  1150                           
  1151                           ; 9 bytes @ 0x38
  1152  000098                     	ds	9
  1153  0000A1                     iir@BCoef:
  1154                           	opt stack 0
  1155                           
  1156                           ; 9 bytes @ 0x41
  1157  0000A1                     	ds	9
  1158  0000AA                     iir@n:
  1159                           	opt stack 0
  1160                           
  1161                           ; 1 bytes @ 0x4A
  1162  0000AA                     	ds	1
  1163  0000AB                     ??_main:
  1164                           	opt stack 0
  1165                           
  1166                           ; 0 bytes @ 0x4B
  1167  0000AB                     	ds	2
  1168                           tblptru	equ	0xFF8
  1169                           tblptrh	equ	0xFF7
  1170                           tblptrl	equ	0xFF6
  1171                           tablat	equ	0xFF5
  1172                           prodl	equ	0xFF3
  1173                           intcon	equ	0xFF2
  1174                           intcon2	equ	0xFF1
  1175                           postinc0	equ	0xFEE
  1176                           wreg	equ	0xFE8
  1177                           indf1	equ	0xFE7
  1178                           postinc1	equ	0xFE6
  1179                           postdec1	equ	0xFE5
  1180                           fsr1h	equ	0xFE2
  1181                           fsr1l	equ	0xFE1
  1182                           indf2	equ	0xFDF
  1183                           postinc2	equ	0xFDE
  1184                           postdec2	equ	0xFDD
  1185                           plusw2	equ	0xFDB
  1186                           fsr2h	equ	0xFDA
  1187                           fsr2l	equ	0xFD9
  1188                           status	equ	0xFD8
  1189                           
  1190                           	psect	cstackCOMRAM
  1191  000001                     __pcstackCOMRAM:
  1192                           	opt stack 0
  1193  000001                     ?_pulsPinInit:
  1194                           	opt stack 0
  1195  000001                     ?_systemInit:
  1196                           	opt stack 0
  1197  000001                     ?_timerDriver:
  1198                           	opt stack 0
  1199  000001                     ?_adcDriver:
  1200                           	opt stack 0
  1201  000001                     ?_adcSetup:
  1202                           	opt stack 0
  1203  000001                     ?_isr_timer0:
  1204                           	opt stack 0
  1205  000001                     ?_isr_timer3:
  1206                           	opt stack 0
  1207  000001                     ?_isr_adc:
  1208                           	opt stack 0
  1209  000001                     ??_isr_adc:
  1210                           	opt stack 0
  1211  000001                     ?_char2pins:
  1212                           	opt stack 0
  1213  000001                     ?_pulsPinDriver:
  1214                           	opt stack 0
  1215  000001                     ??_pulsPinDriver:
  1216                           	opt stack 0
  1217  000001                     ?_enterMenu:
  1218                           	opt stack 0
  1219  000001                     ?_incVar:
  1220                           	opt stack 0
  1221  000001                     ?_decVar:
  1222                           	opt stack 0
  1223  000001                     ?_endTestDisplayActions:
  1224                           	opt stack 0
  1225  000001                     ?_actionsTimeoutShowSetting:
  1226                           	opt stack 0
  1227  000001                     ?_main:
  1228                           	opt stack 0
  1229  000001                     ?_isr:
  1230                           	opt stack 0
  1231  000001                     ?_isr2:
  1232                           	opt stack 0
  1233  000001                     ?i1_timerDriver:
  1234                           	opt stack 0
  1235  000001                     ??i1_timerDriver:
  1236                           	opt stack 0
  1237  000001                     ?_ee_read_byte:
  1238                           	opt stack 0
  1239                           
  1240                           ; 1 bytes @ 0x0
  1241  000001                     	ds	3
  1242  000004                     i1timerDriver@i:
  1243                           	opt stack 0
  1244                           
  1245                           ; 1 bytes @ 0x3
  1246  000004                     	ds	3
  1247  000007                     pulsPinDriver@i:
  1248                           	opt stack 0
  1249                           
  1250                           ; 1 bytes @ 0x6
  1251  000007                     	ds	1
  1252  000008                     ??_isr_timer3:
  1253                           	opt stack 0
  1254  000008                     _isr_timer3$1607:
  1255                           	opt stack 0
  1256                           
  1257                           ; 2 bytes @ 0x7
  1258  000008                     	ds	2
  1259  00000A                     ??_isr2:
  1260                           	opt stack 0
  1261                           
  1262                           ; 0 bytes @ 0x9
  1263  00000A                     	ds	9
  1264  000013                     ?_fseek:
  1265                           	opt stack 0
  1266  000013                     ??_char2pins:
  1267                           	opt stack 0
  1268  000013                     ?_fgetc:
  1269                           	opt stack 0
  1270  000013                     char2pins@c:
  1271                           	opt stack 0
  1272  000013                     fgetc@stream:
  1273                           	opt stack 0
  1274  000013                     fseek@fp:
  1275                           	opt stack 0
  1276                           
  1277                           ; 2 bytes @ 0x12
  1278  000013                     	ds	2
  1279  000015                     ??_fgetc:
  1280                           	opt stack 0
  1281  000015                     fseek@offset:
  1282                           	opt stack 0
  1283                           
  1284                           ; 2 bytes @ 0x14
  1285  000015                     	ds	2
  1286  000017                     fseek@mode:
  1287                           	opt stack 0
  1288                           
  1289                           ; 2 bytes @ 0x16
  1290  000017                     	ds	2
  1291  000019                     ??_fseek:
  1292                           	opt stack 0
  1293                           
  1294                           ; 0 bytes @ 0x18
  1295  000019                     	ds	1
  1296  00001A                     ??_isr_timer0:
  1297                           	opt stack 0
  1298  00001A                     ??_isr:
  1299                           	opt stack 0
  1300                           
  1301                           ; 0 bytes @ 0x19
  1302  00001A                     	ds	14
  1303                           tblptru	equ	0xFF8
  1304                           tblptrh	equ	0xFF7
  1305                           tblptrl	equ	0xFF6
  1306                           tablat	equ	0xFF5
  1307                           prodl	equ	0xFF3
  1308                           intcon	equ	0xFF2
  1309                           intcon2	equ	0xFF1
  1310                           postinc0	equ	0xFEE
  1311                           wreg	equ	0xFE8
  1312                           indf1	equ	0xFE7
  1313                           postinc1	equ	0xFE6
  1314                           postdec1	equ	0xFE5
  1315                           fsr1h	equ	0xFE2
  1316                           fsr1l	equ	0xFE1
  1317                           indf2	equ	0xFDF
  1318                           postinc2	equ	0xFDE
  1319                           postdec2	equ	0xFDD
  1320                           plusw2	equ	0xFDB
  1321                           fsr2h	equ	0xFDA
  1322                           fsr2l	equ	0xFD9
  1323                           status	equ	0xFD8
  1324                           
  1325 ;;
  1326 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1327 ;;
  1328 ;; *************** function _main *****************
  1329 ;; Defined at:
  1330 ;;		line 388 in file "C:\fgr\16gb\0000 interior\deVolt\sw\main.c"
  1331 ;; Parameters:    Size  Location     Type
  1332 ;;		None
  1333 ;; Auto vars:     Size  Location     Type
  1334 ;;		None
  1335 ;; Return value:  Size  Location     Type
  1336 ;;		None               void
  1337 ;; Registers used:
  1338 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1339 ;; Tracked objects:
  1340 ;;		On entry : 0/0
  1341 ;;		On exit  : F/1
  1342 ;;		Unchanged: 0/0
  1343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1344 ;;      Params:         0       0       0       0       0       0       0       0       0
  1345 ;;      Locals:         0       0      65       0       0       0       0       0       0
  1346 ;;      Temps:          0       2       0       0       0       0       0       0       0
  1347 ;;      Totals:         0       2      65       0       0       0       0       0       0
  1348 ;;Total ram usage:       67 bytes
  1349 ;; Hardware stack levels required when called:   10
  1350 ;; This function calls:
  1351 ;;		_pulsPinInit
  1352 ;;		_systemInit
  1353 ;;		_ee_read_byte
  1354 ;;		___awtoft
  1355 ;;		___ftdiv
  1356 ;;		___ftadd
  1357 ;;		_timerDriver
  1358 ;;		_actionsTimeoutShowSetting
  1359 ;;		_enterMenu
  1360 ;;		_endTestDisplayActions
  1361 ;;		_adcDriver
  1362 ;;		_getConv
  1363 ;;		_iir
  1364 ;;		___asftmul
  1365 ;;		___fttol
  1366 ;;		_uintToStr
  1367 ;;		_incVar
  1368 ;;		_decVar
  1369 ;; This function is called by:
  1370 ;;		Startup code after reset
  1371 ;; This function uses a non-reentrant model
  1372 ;;
  1373                           
  1374                           	psect	text0
  1375  000090                     __ptext0:
  1376                           	opt stack 0
  1377  000090                     _main:
  1378                           	opt stack 21
  1379                           
  1380                           ;main.c: 389: pulsPinInit();
  1381                           
  1382                           ; BSR set to: 1
  1383  000090  ECF5  F010         	call	_pulsPinInit	;wreg free
  1384                           
  1385                           ; BSR set to: 0
  1386                           ;main.c: 390: systemInit();
  1387  000094  ECBE  F011         	call	_systemInit	;wreg free
  1388                           
  1389                           ; BSR set to: 0
  1390                           ;main.c: 391: segments.portState=0x01;
  1391  000098  0E01               	movlw	1
  1392  00009A  6FBA               	movwf	(_segments+1)& (0+255),b
  1393                           
  1394                           ; BSR set to: 0
  1395                           ;main.c: 393: { brilloMem=ee_read_byte(0); };
  1396  00009C  0E00               	movlw	0
  1397  00009E  ECBD  F013         	call	_ee_read_byte
  1398  0000A2  6E39               	movwf	_brilloMem,c
  1399                           
  1400                           ; BSR set to: 0
  1401                           ;main.c: 394: { advModeMem=ee_read_byte(1); };
  1402  0000A4  0E01               	movlw	1
  1403  0000A6  ECBD  F013         	call	_ee_read_byte
  1404  0000AA  6E38               	movwf	_advModeMem,c
  1405                           
  1406                           ; BSR set to: 0
  1407                           ;main.c: 396: { escEntMem=0x00; escEntMem|=ee_read_byte(14)<<8; escEntMem|=ee_read_byte(
      +                          14+1)<<0; };
  1408  0000AC  6A2E               	clrf	_escEntMem,c
  1409  0000AE  6A2F               	clrf	_escEntMem+1,c
  1410                           
  1411                           ; BSR set to: 0
  1412  0000B0  0E0E               	movlw	14
  1413  0000B2  ECBD  F013         	call	_ee_read_byte
  1414  0000B6  6FAC               	movwf	(??_main+1)& (0+255),b
  1415  0000B8  6BAB               	clrf	??_main& (0+255),b
  1416  0000BA  51AB               	movf	??_main& (0+255),w,b
  1417  0000BC  122E               	iorwf	_escEntMem,f,c
  1418  0000BE  51AC               	movf	(??_main+1)& (0+255),w,b
  1419  0000C0  122F               	iorwf	_escEntMem+1,f,c
  1420                           
  1421                           ; BSR set to: 0
  1422  0000C2  0E0F               	movlw	15
  1423  0000C4  ECBD  F013         	call	_ee_read_byte
  1424  0000C8  122E               	iorwf	_escEntMem,f,c
  1425                           
  1426                           ; BSR set to: 0
  1427                           ;main.c: 397: { escDecMem=0x00; escDecMem|=ee_read_byte(16)<<8; escDecMem|=ee_read_byte(
      +                          16+1)<<0; };
  1428  0000CA  6A2C               	clrf	_escDecMem,c
  1429  0000CC  6A2D               	clrf	_escDecMem+1,c
  1430                           
  1431                           ; BSR set to: 0
  1432  0000CE  0E10               	movlw	16
  1433  0000D0  ECBD  F013         	call	_ee_read_byte
  1434  0000D4  6FAC               	movwf	(??_main+1)& (0+255),b
  1435  0000D6  6BAB               	clrf	??_main& (0+255),b
  1436  0000D8  51AB               	movf	??_main& (0+255),w,b
  1437  0000DA  122C               	iorwf	_escDecMem,f,c
  1438  0000DC  51AC               	movf	(??_main+1)& (0+255),w,b
  1439  0000DE  122D               	iorwf	_escDecMem+1,f,c
  1440                           
  1441                           ; BSR set to: 0
  1442  0000E0  0E11               	movlw	17
  1443  0000E2  ECBD  F013         	call	_ee_read_byte
  1444  0000E6  122C               	iorwf	_escDecMem,f,c
  1445                           
  1446                           ; BSR set to: 0
  1447                           ;main.c: 398: escala=(float)escEntMem+(float)escDecMem/1000.0;
  1448  0000E8  C02E  F068         	movff	_escEntMem,?___awtoft
  1449  0000EC  C02F  F069         	movff	_escEntMem+1,?___awtoft+1
  1450  0000F0  EC52  F013         	call	___awtoft	;wreg free
  1451  0000F4  ECD2  F009         	call	PL3	;call to abstracted procedure
  1452  0000F8  EC52  F013         	call	___awtoft	;wreg free
  1453  0000FC  C068  F06C         	movff	?___awtoft,?___ftdiv
  1454  000100  C069  F06D         	movff	?___awtoft+1,?___ftdiv+1
  1455  000104  C06A  F06E         	movff	?___awtoft+2,?___ftdiv+2
  1456  000108  EC36  F00E         	call	___ftdiv	;wreg free
  1457  00010C  C06C  F080         	movff	?___ftdiv,?___ftadd+3
  1458  000110  C06D  F081         	movff	?___ftdiv+1,?___ftadd+4
  1459  000114  C06E  F082         	movff	?___ftdiv+2,?___ftadd+5
  1460  000118  ECB4  F00B         	call	___ftadd	;wreg free
  1461  00011C  C07D  F0B2         	movff	?___ftadd,_escala
  1462  000120  C07E  F0B3         	movff	?___ftadd+1,_escala+1
  1463  000124  C07F  F0B4         	movff	?___ftadd+2,_escala+2
  1464                           
  1465                           ; BSR set to: 0
  1466                           ;main.c: 400: { xLoMem=0x00; xLoMem|=ee_read_byte(2)<<8; xLoMem|=ee_read_byte(2+1)<<0; };
  1467  000128  6A34               	clrf	_xLoMem,c
  1468  00012A  6A35               	clrf	_xLoMem+1,c
  1469                           
  1470                           ; BSR set to: 0
  1471  00012C  0E02               	movlw	2
  1472  00012E  ECBD  F013         	call	_ee_read_byte
  1473  000132  6FAC               	movwf	(??_main+1)& (0+255),b
  1474  000134  6BAB               	clrf	??_main& (0+255),b
  1475  000136  51AB               	movf	??_main& (0+255),w,b
  1476  000138  1234               	iorwf	_xLoMem,f,c
  1477  00013A  51AC               	movf	(??_main+1)& (0+255),w,b
  1478  00013C  1235               	iorwf	_xLoMem+1,f,c
  1479                           
  1480                           ; BSR set to: 0
  1481  00013E  0E03               	movlw	3
  1482  000140  ECBD  F013         	call	_ee_read_byte
  1483  000144  1234               	iorwf	_xLoMem,f,c
  1484                           
  1485                           ; BSR set to: 0
  1486                           ;main.c: 401: { xUpMem=0x00; xUpMem|=ee_read_byte(4)<<8; xUpMem|=ee_read_byte(4+1)<<0; };
  1487  000146  6A36               	clrf	_xUpMem,c
  1488  000148  6A37               	clrf	_xUpMem+1,c
  1489                           
  1490                           ; BSR set to: 0
  1491  00014A  0E04               	movlw	4
  1492  00014C  ECBD  F013         	call	_ee_read_byte
  1493  000150  6FAC               	movwf	(??_main+1)& (0+255),b
  1494  000152  6BAB               	clrf	??_main& (0+255),b
  1495  000154  51AB               	movf	??_main& (0+255),w,b
  1496  000156  1236               	iorwf	_xUpMem,f,c
  1497  000158  51AC               	movf	(??_main+1)& (0+255),w,b
  1498  00015A  1237               	iorwf	_xUpMem+1,f,c
  1499                           
  1500                           ; BSR set to: 0
  1501  00015C  0E05               	movlw	5
  1502  00015E  ECBD  F013         	call	_ee_read_byte
  1503  000162  1236               	iorwf	_xUpMem,f,c
  1504                           
  1505                           ; BSR set to: 0
  1506                           ;main.c: 402: { eLoMem=0x00; eLoMem|=ee_read_byte(6)<<8; eLoMem|=ee_read_byte(6+1)<<0; };
  1507  000164  6A28               	clrf	_eLoMem,c
  1508  000166  6A29               	clrf	_eLoMem+1,c
  1509                           
  1510                           ; BSR set to: 0
  1511  000168  0E06               	movlw	6
  1512  00016A  ECBD  F013         	call	_ee_read_byte
  1513  00016E  6FAC               	movwf	(??_main+1)& (0+255),b
  1514  000170  6BAB               	clrf	??_main& (0+255),b
  1515  000172  51AB               	movf	??_main& (0+255),w,b
  1516  000174  1228               	iorwf	_eLoMem,f,c
  1517  000176  51AC               	movf	(??_main+1)& (0+255),w,b
  1518  000178  1229               	iorwf	_eLoMem+1,f,c
  1519                           
  1520                           ; BSR set to: 0
  1521  00017A  0E07               	movlw	7
  1522  00017C  ECBD  F013         	call	_ee_read_byte
  1523  000180  1228               	iorwf	_eLoMem,f,c
  1524                           
  1525                           ; BSR set to: 0
  1526                           ;main.c: 403: { eUpMem=0x00; eUpMem|=ee_read_byte(8)<<8; eUpMem|=ee_read_byte(8+1)<<0; };
  1527  000182  6A2A               	clrf	_eUpMem,c
  1528  000184  6A2B               	clrf	_eUpMem+1,c
  1529                           
  1530                           ; BSR set to: 0
  1531  000186  0E08               	movlw	8
  1532  000188  ECBD  F013         	call	_ee_read_byte
  1533  00018C  6FAC               	movwf	(??_main+1)& (0+255),b
  1534  00018E  6BAB               	clrf	??_main& (0+255),b
  1535  000190  51AB               	movf	??_main& (0+255),w,b
  1536  000192  122A               	iorwf	_eUpMem,f,c
  1537  000194  51AC               	movf	(??_main+1)& (0+255),w,b
  1538  000196  122B               	iorwf	_eUpMem+1,f,c
  1539                           
  1540                           ; BSR set to: 0
  1541  000198  0E09               	movlw	9
  1542  00019A  ECBD  F013         	call	_ee_read_byte
  1543  00019E  122A               	iorwf	_eUpMem,f,c
  1544                           
  1545                           ; BSR set to: 0
  1546                           ;main.c: 404: { vLoMem=0x00; vLoMem|=ee_read_byte(10)<<8; vLoMem|=ee_read_byte(10+1)<<0;
      +                           };
  1547  0001A0  6A30               	clrf	_vLoMem,c
  1548  0001A2  6A31               	clrf	_vLoMem+1,c
  1549                           
  1550                           ; BSR set to: 0
  1551  0001A4  0E0A               	movlw	10
  1552  0001A6  ECBD  F013         	call	_ee_read_byte
  1553  0001AA  6FAC               	movwf	(??_main+1)& (0+255),b
  1554  0001AC  6BAB               	clrf	??_main& (0+255),b
  1555  0001AE  51AB               	movf	??_main& (0+255),w,b
  1556  0001B0  1230               	iorwf	_vLoMem,f,c
  1557  0001B2  51AC               	movf	(??_main+1)& (0+255),w,b
  1558  0001B4  1231               	iorwf	_vLoMem+1,f,c
  1559                           
  1560                           ; BSR set to: 0
  1561  0001B6  0E0B               	movlw	11
  1562  0001B8  ECBD  F013         	call	_ee_read_byte
  1563  0001BC  1230               	iorwf	_vLoMem,f,c
  1564                           
  1565                           ; BSR set to: 0
  1566                           ;main.c: 405: { vUpMem=0x00; vUpMem|=ee_read_byte(12)<<8; vUpMem|=ee_read_byte(12+1)<<0;
      +                           };
  1567  0001BE  6A32               	clrf	_vUpMem,c
  1568  0001C0  6A33               	clrf	_vUpMem+1,c
  1569                           
  1570                           ; BSR set to: 0
  1571  0001C2  0E0C               	movlw	12
  1572  0001C4  ECBD  F013         	call	_ee_read_byte
  1573  0001C8  6FAC               	movwf	(??_main+1)& (0+255),b
  1574  0001CA  6BAB               	clrf	??_main& (0+255),b
  1575  0001CC  51AB               	movf	??_main& (0+255),w,b
  1576  0001CE  1232               	iorwf	_vUpMem,f,c
  1577  0001D0  51AC               	movf	(??_main+1)& (0+255),w,b
  1578  0001D2  1233               	iorwf	_vUpMem+1,f,c
  1579                           
  1580                           ; BSR set to: 0
  1581  0001D4  0E0D               	movlw	13
  1582  0001D6  ECBD  F013         	call	_ee_read_byte
  1583  0001DA  1232               	iorwf	_vUpMem,f,c
  1584                           
  1585                           ; BSR set to: 0
  1586                           ;main.c: 407: PORTCbits.RC6=1;
  1587  0001DC  8C82               	bsf	3970,6,c	;volatile
  1588                           
  1589                           ; BSR set to: 0
  1590                           ;main.c: 408: muxBuffer[0]='8';
  1591  0001DE  0E38               	movlw	56
  1592  0001E0  6FC9               	movwf	_muxBuffer& (0+255),b
  1593                           
  1594                           ; BSR set to: 0
  1595                           ;main.c: 409: muxBuffer[1]='8';
  1596  0001E2  6FCA               	movwf	(_muxBuffer+1)& (0+255),b
  1597                           
  1598                           ; BSR set to: 0
  1599                           ;main.c: 410: muxBuffer[2]='8';
  1600  0001E4  6FCB               	movwf	(_muxBuffer+2)& (0+255),b
  1601                           
  1602                           ; BSR set to: 0
  1603                           ;main.c: 411: muxBuffer[ADV]='x';
  1604  0001E6  0E78               	movlw	120
  1605  0001E8  6FCC               	movwf	(_muxBuffer+3)& (0+255),b
  1606                           
  1607                           ; BSR set to: 0
  1608                           ;main.c: 413: { timerMem[TMR_250MS].flag=0; timerMem[TMR_250MS].prescaler=timerDelayCons
      +                          tant[TMR_250MS]; timerMem[TMR_250MS].pause=0; timerMem[TMR_250MS].loop=1; };
  1609  0001EA  0101               	movlb	1	; () banked
  1610  0001EC  939E               	bcf	(_timerMem+19)& (0+255),1,b
  1611                           
  1612                           ; BSR set to: 1
  1613  0001EE  C10C  F19B         	movff	_timerDelayConstant+12,_timerMem+16
  1614  0001F2  C10D  F19C         	movff	_timerDelayConstant+13,_timerMem+17
  1615  0001F6  C10E  F19D         	movff	_timerDelayConstant+14,_timerMem+18
  1616                           
  1617                           ; BSR set to: 1
  1618  0001FA  959E               	bcf	(_timerMem+19)& (0+255),2,b
  1619                           
  1620                           ; BSR set to: 1
  1621  0001FC  819E               	bsf	(_timerMem+19)& (0+255),0,b
  1622                           
  1623                           ; BSR set to: 1
  1624                           ;main.c: 416: { timerMem[TMR_TEST_DISPLAYS].flag=0; timerMem[TMR_TEST_DISPLAYS].prescale
      +                          r=timerDelayConstant[TMR_TEST_DISPLAYS]; timerMem[TMR_TEST_DISPLAYS].pause=0; };
  1625  0001FE  93AE               	bcf	(_timerMem+35)& (0+255),1,b
  1626                           
  1627                           ; BSR set to: 1
  1628  000200  C118  F1AB         	movff	_timerDelayConstant+24,_timerMem+32
  1629  000204  C119  F1AC         	movff	_timerDelayConstant+25,_timerMem+33
  1630  000208  C11A  F1AD         	movff	_timerDelayConstant+26,_timerMem+34
  1631                           
  1632                           ; BSR set to: 1
  1633  00020C  95AE               	bcf	(_timerMem+35)& (0+255),2,b
  1634                           
  1635                           ; BSR set to: 1
  1636                           ;main.c: 417: { timerMem[TMR_TEST_ADVERTENCIA].flag=0; timerMem[TMR_TEST_ADVERTENCIA].pr
      +                          escaler=timerDelayConstant[TMR_TEST_ADVERTENCIA]; timerMem[TMR_TEST_ADVERTENCIA].pause=0
      +                          ; };
  1637  00020E  93B2               	bcf	(_timerMem+39)& (0+255),1,b
  1638                           
  1639                           ; BSR set to: 1
  1640  000210  C11B  F1AF         	movff	_timerDelayConstant+27,_timerMem+36
  1641  000214  C11C  F1B0         	movff	_timerDelayConstant+28,_timerMem+37
  1642  000218  C11D  F1B1         	movff	_timerDelayConstant+29,_timerMem+38
  1643                           
  1644                           ; BSR set to: 1
  1645  00021C  95B2               	bcf	(_timerMem+39)& (0+255),2,b
  1646  00021E                     l6709:
  1647                           
  1648                           ; BSR set to: 1
  1649                           ;main.c: 420: {
  1650                           ;main.c: 421: if((timerMem[TMR_250MS].flag?!(timerMem[TMR_250MS].flag=0):0))
  1651  00021E  B39E               	btfsc	(_timerMem+19)& (0+255),1,b
  1652  000220  D002               	goto	l6713
  1653                           
  1654                           ; BSR set to: 1
  1655  000222  6B4D               	clrf	_main$441& (0+255),b
  1656  000224  D00A               	goto	L1
  1657  000226                     l6713:
  1658                           
  1659                           ; BSR set to: 1
  1660  000226  519E               	movf	(_timerMem+19)& (0+255),w,b
  1661  000228  0BFD               	andlw	-3
  1662  00022A  6F9E               	movwf	(_timerMem+19)& (0+255),b
  1663  00022C  0101               	movlb	1	; () banked
  1664  00022E  319E               	rrcf	(_timerMem+19)& (0+255),w,b
  1665  000230  0B01               	andlw	1
  1666  000232  0E00               	movlw	0
  1667  000234  B4D8               	btfsc	status,2,c
  1668  000236  0E01               	movlw	1
  1669  000238  6F4D               	movwf	_main$441& (0+255),b
  1670  00023A                     L1:
  1671  00023A  6B4E               	clrf	(_main$441+1)& (0+255),b
  1672                           
  1673                           ; BSR set to: 1
  1674  00023C  514E               	movf	(_main$441+1)& (0+255),w,b
  1675  00023E  114D               	iorwf	_main$441& (0+255),w,b
  1676  000240  E01E               	bz	l6717
  1677                           
  1678                           ; BSR set to: 1
  1679                           ;main.c: 422: {
  1680                           ;main.c: 423: timerDriver(TMR_LONG_PULS_UP);
  1681  000242  0E00               	movlw	0
  1682  000244  EC10  F00F         	call	_timerDriver
  1683                           
  1684                           ;main.c: 424: timerDriver(TMR_LONG_PULS_DWN);
  1685  000248  0E01               	movlw	1
  1686  00024A  EC10  F00F         	call	_timerDriver
  1687                           
  1688                           ;main.c: 425: timerDriver(TMR_TEST_DISPLAYS);
  1689  00024E  0E08               	movlw	8
  1690  000250  EC10  F00F         	call	_timerDriver
  1691                           
  1692                           ;main.c: 426: timerDriver(TMR_TEST_ADVERTENCIA);
  1693  000254  0E09               	movlw	9
  1694  000256  EC10  F00F         	call	_timerDriver
  1695                           
  1696                           ;main.c: 427: timerDriver(TMR_SHOW_MENU);
  1697  00025A  0E03               	movlw	3
  1698  00025C  EC10  F00F         	call	_timerDriver
  1699                           
  1700                           ;main.c: 428: timerDriver(TMR_SHOW_SETTING);
  1701  000260  0E05               	movlw	5
  1702  000262  EC10  F00F         	call	_timerDriver
  1703                           
  1704                           ;main.c: 429: timerDriver(TMR_SHOW_SETTING_OFF);
  1705  000266  0E07               	movlw	7
  1706  000268  EC10  F00F         	call	_timerDriver
  1707                           
  1708                           ;main.c: 430: timerDriver(TMR_SHOW_SETTING_ON);
  1709  00026C  0E06               	movlw	6
  1710  00026E  EC10  F00F         	call	_timerDriver
  1711                           
  1712                           ;main.c: 431: timerDriver(TMR_SHOW_DESCRIPTION);
  1713  000272  0E0A               	movlw	10
  1714  000274  EC10  F00F         	call	_timerDriver
  1715                           
  1716                           ;main.c: 432: timerDriver(TMR_SPACE);
  1717  000278  0E0B               	movlw	11
  1718  00027A  EC10  F00F         	call	_timerDriver
  1719  00027E                     l6717:
  1720                           
  1721                           ;main.c: 433: }
  1722                           ;main.c: 435: if((timerMem[TMR_SHOW_MENU].flag?!(timerMem[TMR_SHOW_MENU].flag=0):0)) sta
      +                          te=E_IDLE;
  1723  00027E  0101               	movlb	1	; () banked
  1724  000280  B39A               	btfsc	(_timerMem+15)& (0+255),1,b
  1725  000282  D002               	goto	l6721
  1726                           
  1727                           ; BSR set to: 1
  1728  000284  6B4F               	clrf	_main$442& (0+255),b
  1729  000286  D00A               	goto	L2
  1730  000288                     l6721:
  1731                           
  1732                           ; BSR set to: 1
  1733  000288  519A               	movf	(_timerMem+15)& (0+255),w,b
  1734  00028A  0BFD               	andlw	-3
  1735  00028C  6F9A               	movwf	(_timerMem+15)& (0+255),b
  1736  00028E  0101               	movlb	1	; () banked
  1737  000290  319A               	rrcf	(_timerMem+15)& (0+255),w,b
  1738  000292  0B01               	andlw	1
  1739  000294  0E00               	movlw	0
  1740  000296  B4D8               	btfsc	status,2,c
  1741  000298  0E01               	movlw	1
  1742  00029A  6F4F               	movwf	_main$442& (0+255),b
  1743  00029C                     L2:
  1744  00029C  6B50               	clrf	(_main$442+1)& (0+255),b
  1745                           
  1746                           ; BSR set to: 1
  1747  00029E  5150               	movf	(_main$442+1)& (0+255),w,b
  1748  0002A0  114F               	iorwf	_main$442& (0+255),w,b
  1749  0002A2  E002               	bz	l6725
  1750                           
  1751                           ; BSR set to: 1
  1752  0002A4  0E01               	movlw	1
  1753  0002A6  6E3A               	movwf	_state,c
  1754  0002A8                     l6725:
  1755                           
  1756                           ; BSR set to: 1
  1757                           ;main.c: 438: actionsTimeoutShowSetting();
  1758  0002A8  ECAE  F010         	call	_actionsTimeoutShowSetting	;wreg free
  1759                           
  1760                           ;main.c: 440: if((timerMem[TMR_LONG_PULS_UP].flag?!(timerMem[TMR_LONG_PULS_UP].flag=0):0
      +                          ))
  1761  0002AC  0101               	movlb	1	; () banked
  1762  0002AE  B38E               	btfsc	(_timerMem+3)& (0+255),1,b
  1763  0002B0  D002               	goto	l6731
  1764                           
  1765                           ; BSR set to: 1
  1766  0002B2  6B51               	clrf	_main$443& (0+255),b
  1767  0002B4  D00A               	goto	L3
  1768  0002B6                     l6731:
  1769                           
  1770                           ; BSR set to: 1
  1771  0002B6  518E               	movf	(_timerMem+3)& (0+255),w,b
  1772  0002B8  0BFD               	andlw	-3
  1773  0002BA  6F8E               	movwf	(_timerMem+3)& (0+255),b
  1774  0002BC  0101               	movlb	1	; () banked
  1775  0002BE  318E               	rrcf	(_timerMem+3)& (0+255),w,b
  1776  0002C0  0B01               	andlw	1
  1777  0002C2  0E00               	movlw	0
  1778  0002C4  B4D8               	btfsc	status,2,c
  1779  0002C6  0E01               	movlw	1
  1780  0002C8  6F51               	movwf	_main$443& (0+255),b
  1781  0002CA                     L3:
  1782  0002CA  6B52               	clrf	(_main$443+1)& (0+255),b
  1783                           
  1784                           ; BSR set to: 1
  1785  0002CC  5152               	movf	(_main$443+1)& (0+255),w,b
  1786  0002CE  1151               	iorwf	_main$443& (0+255),w,b
  1787  0002D0  E030               	bz	l188
  1788                           
  1789                           ; BSR set to: 1
  1790                           ;main.c: 441: {
  1791                           ;main.c: 442: { timerMem[TMR_SHOW_MENU].prescaler=0; timerMem[TMR_SHOW_MENU].pause=1; };
  1792                           
  1793                           ;main.c: 443: PORTCbits.RC6=1;
  1794                           
  1795                           ;main.c: 444: { timerMem[TMR_BEEP].flag=0; timerMem[TMR_BEEP].prescaler=timerDelayConsta
      +                          nt[TMR_BEEP]; timerMem[TMR_BEEP].pause=0; };
  1796                           
  1797                           ;main.c: 445: { timerMem[TMR_SHOW_SETTING].flag=0; timerMem[TMR_SHOW_SETTING].prescaler=
      +                          timerDelayConstant[TMR_SHOW_SETTING]; timerMem[TMR_SHOW_SETTING].pause=0; };
  1798  0002D2  EC22  F007         	call	PL9	;call to abstracted procedure
  1799                           
  1800                           ;main.c: 446: { timerMem[TMR_SHOW_SETTING_ON].flag=0; timerMem[TMR_SHOW_SETTING_ON].pres
      +                          caler=timerDelayConstant[TMR_SHOW_SETTING_ON]; timerMem[TMR_SHOW_SETTING_ON].pause=0; };
  1801  0002D6  EC02  F007         	call	PL2	;call to abstracted procedure
  1802                           
  1803                           ; BSR set to: 1
  1804                           ;main.c: 447: enterMenu();
  1805  0002DA  ECF9  F011         	call	_enterMenu	;wreg free
  1806                           
  1807                           ; BSR set to: 1
  1808                           ;main.c: 448: ignoreNextFp=1;
  1809  0002DE  0E01               	movlw	1
  1810  0002E0  0100               	movlb	0	; () banked
  1811  0002E2  6FBB               	movwf	_ignoreNextFp& (0+255),b
  1812                           
  1813                           ; BSR set to: 0
  1814                           ;main.c: 449: if( state==E_SET_ADV_XLO || state==E_SET_ADV_XUP
  1815                           ;main.c: 450: || state==E_SET_ADV_ELO || state==E_SET_ADV_EUP
  1816                           ;main.c: 451: || state==E_SET_ADV_VLO || state==E_SET_ADV_VUP
  1817                           ;main.c: 452: || state==E_SET_ESCALA_ENT || state==E_SET_ESCALA_DEC)
  1818  0002E4  503A               	movf	_state,w,c
  1819  0002E6  0A0F               	xorlw	15
  1820  0002E8  E01D               	bz	l6763
  1821                           
  1822                           ; BSR set to: 0
  1823  0002EA  503A               	movf	_state,w,c
  1824  0002EC  0A11               	xorlw	17
  1825  0002EE  E01A               	bz	l6763
  1826                           
  1827                           ; BSR set to: 0
  1828  0002F0  503A               	movf	_state,w,c
  1829  0002F2  0A13               	xorlw	19
  1830  0002F4  E017               	bz	l6763
  1831                           
  1832                           ; BSR set to: 0
  1833  0002F6  503A               	movf	_state,w,c
  1834  0002F8  0A15               	xorlw	21
  1835  0002FA  E014               	bz	l6763
  1836                           
  1837                           ; BSR set to: 0
  1838  0002FC  503A               	movf	_state,w,c
  1839  0002FE  0A17               	xorlw	23
  1840  000300  E011               	bz	l6763
  1841                           
  1842                           ; BSR set to: 0
  1843  000302  503A               	movf	_state,w,c
  1844  000304  0A19               	xorlw	25
  1845  000306  E00E               	bz	l6763
  1846                           
  1847                           ; BSR set to: 0
  1848  000308  503A               	movf	_state,w,c
  1849  00030A  0A0A               	xorlw	10
  1850  00030C  E00B               	bz	l6763
  1851                           
  1852                           ; BSR set to: 0
  1853  00030E  503A               	movf	_state,w,c
  1854  000310  0A0C               	xorlw	12
  1855  000312  E008               	bz	l6763
  1856  000314  D00E               	goto	l188
  1857  000316                     l6755:
  1858                           
  1859                           ; BSR set to: 0
  1860  000316  0E0A               	movlw	10
  1861  000318  D003               	goto	L5
  1862  00031A                     l6757:
  1863                           
  1864                           ; BSR set to: 0
  1865  00031A  0E64               	movlw	100
  1866  00031C  D001               	goto	L5
  1867  00031E                     l6759:
  1868                           
  1869                           ; BSR set to: 0
  1870  00031E  0E01               	movlw	1
  1871  000320                     L5:
  1872  000320  6E3C               	movwf	_setInc,c
  1873  000322  D007               	goto	l188
  1874  000324                     l6763:
  1875                           
  1876                           ; BSR set to: 0
  1877  000324  503C               	movf	_setInc,w,c
  1878                           
  1879                           ; Switch size 1, requested type "space"
  1880                           ; Number of cases is 3, Range of values is 1 to 100
  1881                           ; switch strategies available:
  1882                           ; Name         Instructions Cycles
  1883                           ; simple_byte           10     6 (average)
  1884                           ;	Chosen strategy is simple_byte
  1885  000326  0A01               	xorlw	1	; case 1
  1886  000328  E0F6               	bz	l6755
  1887  00032A  0A0B               	xorlw	11	; case 10
  1888  00032C  E0F6               	bz	l6757
  1889  00032E  0A6E               	xorlw	110	; case 100
  1890  000330  E0F6               	bz	l6759
  1891  000332                     l188:
  1892                           
  1893                           ;main.c: 459: }
  1894                           ;main.c: 461: if((timerMem[TMR_LONG_PULS_DWN].flag?!(timerMem[TMR_LONG_PULS_DWN].flag=0)
      +                          :0))
  1895  000332  0101               	movlb	1	; () banked
  1896  000334  B392               	btfsc	(_timerMem+7)& (0+255),1,b
  1897  000336  D002               	goto	l6767
  1898                           
  1899                           ; BSR set to: 1
  1900  000338  6B53               	clrf	_main$444& (0+255),b
  1901  00033A  D00A               	goto	L6
  1902  00033C                     l6767:
  1903                           
  1904                           ; BSR set to: 1
  1905  00033C  5192               	movf	(_timerMem+7)& (0+255),w,b
  1906  00033E  0BFD               	andlw	-3
  1907  000340  6F92               	movwf	(_timerMem+7)& (0+255),b
  1908  000342  0101               	movlb	1	; () banked
  1909  000344  3192               	rrcf	(_timerMem+7)& (0+255),w,b
  1910  000346  0B01               	andlw	1
  1911  000348  0E00               	movlw	0
  1912  00034A  B4D8               	btfsc	status,2,c
  1913  00034C  0E01               	movlw	1
  1914  00034E  6F53               	movwf	_main$444& (0+255),b
  1915  000350                     L6:
  1916  000350  6B54               	clrf	(_main$444+1)& (0+255),b
  1917                           
  1918                           ; BSR set to: 1
  1919  000352  5154               	movf	(_main$444+1)& (0+255),w,b
  1920  000354  1153               	iorwf	_main$444& (0+255),w,b
  1921  000356  E030               	bz	l201
  1922                           
  1923                           ; BSR set to: 1
  1924                           ;main.c: 462: {
  1925                           ;main.c: 463: { timerMem[TMR_SHOW_MENU].prescaler=0; timerMem[TMR_SHOW_MENU].pause=1; };
  1926                           
  1927                           ;main.c: 464: PORTCbits.RC6=1;
  1928                           
  1929                           ;main.c: 465: { timerMem[TMR_BEEP].flag=0; timerMem[TMR_BEEP].prescaler=timerDelayConsta
      +                          nt[TMR_BEEP]; timerMem[TMR_BEEP].pause=0; };
  1930                           
  1931                           ;main.c: 466: { timerMem[TMR_SHOW_SETTING].flag=0; timerMem[TMR_SHOW_SETTING].prescaler=
      +                          timerDelayConstant[TMR_SHOW_SETTING]; timerMem[TMR_SHOW_SETTING].pause=0; };
  1932  000358  EC22  F007         	call	PL9	;call to abstracted procedure
  1933                           
  1934                           ;main.c: 467: { timerMem[TMR_SHOW_SETTING_ON].flag=0; timerMem[TMR_SHOW_SETTING_ON].pres
      +                          caler=timerDelayConstant[TMR_SHOW_SETTING_ON]; timerMem[TMR_SHOW_SETTING_ON].pause=0; };
  1935  00035C  EC02  F007         	call	PL2	;call to abstracted procedure
  1936                           
  1937                           ; BSR set to: 1
  1938                           ;main.c: 468: enterMenu();
  1939  000360  ECF9  F011         	call	_enterMenu	;wreg free
  1940                           
  1941                           ; BSR set to: 1
  1942                           ;main.c: 469: ignoreNextFp=1;
  1943  000364  0E01               	movlw	1
  1944  000366  0100               	movlb	0	; () banked
  1945  000368  6FBB               	movwf	_ignoreNextFp& (0+255),b
  1946                           
  1947                           ; BSR set to: 0
  1948                           ;main.c: 470: if( state==E_SET_ADV_XLO || state==E_SET_ADV_XUP
  1949                           ;main.c: 471: || state==E_SET_ADV_ELO || state==E_SET_ADV_EUP
  1950                           ;main.c: 472: || state==E_SET_ADV_VLO || state==E_SET_ADV_VUP
  1951                           ;main.c: 473: || state==E_SET_ESCALA_ENT || state==E_SET_ESCALA_DEC)
  1952  00036A  503A               	movf	_state,w,c
  1953  00036C  0A0F               	xorlw	15
  1954  00036E  E01D               	bz	l6799
  1955                           
  1956                           ; BSR set to: 0
  1957  000370  503A               	movf	_state,w,c
  1958  000372  0A11               	xorlw	17
  1959  000374  E01A               	bz	l6799
  1960                           
  1961                           ; BSR set to: 0
  1962  000376  503A               	movf	_state,w,c
  1963  000378  0A13               	xorlw	19
  1964  00037A  E017               	bz	l6799
  1965                           
  1966                           ; BSR set to: 0
  1967  00037C  503A               	movf	_state,w,c
  1968  00037E  0A15               	xorlw	21
  1969  000380  E014               	bz	l6799
  1970                           
  1971                           ; BSR set to: 0
  1972  000382  503A               	movf	_state,w,c
  1973  000384  0A17               	xorlw	23
  1974  000386  E011               	bz	l6799
  1975                           
  1976                           ; BSR set to: 0
  1977  000388  503A               	movf	_state,w,c
  1978  00038A  0A19               	xorlw	25
  1979  00038C  E00E               	bz	l6799
  1980                           
  1981                           ; BSR set to: 0
  1982  00038E  503A               	movf	_state,w,c
  1983  000390  0A0A               	xorlw	10
  1984  000392  E00B               	bz	l6799
  1985                           
  1986                           ; BSR set to: 0
  1987  000394  503A               	movf	_state,w,c
  1988  000396  0A0C               	xorlw	12
  1989  000398  E008               	bz	l6799
  1990  00039A  D00E               	goto	l201
  1991  00039C                     l6791:
  1992                           
  1993                           ; BSR set to: 0
  1994  00039C  0E64               	movlw	100
  1995  00039E  D003               	goto	L8
  1996  0003A0                     l6793:
  1997                           
  1998                           ; BSR set to: 0
  1999  0003A0  0E01               	movlw	1
  2000  0003A2  D001               	goto	L8
  2001  0003A4                     l6795:
  2002                           
  2003                           ; BSR set to: 0
  2004  0003A4  0E0A               	movlw	10
  2005  0003A6                     L8:
  2006  0003A6  6E3C               	movwf	_setInc,c
  2007  0003A8  D007               	goto	l201
  2008  0003AA                     l6799:
  2009                           
  2010                           ; BSR set to: 0
  2011  0003AA  503C               	movf	_setInc,w,c
  2012                           
  2013                           ; Switch size 1, requested type "space"
  2014                           ; Number of cases is 3, Range of values is 1 to 100
  2015                           ; switch strategies available:
  2016                           ; Name         Instructions Cycles
  2017                           ; simple_byte           10     6 (average)
  2018                           ;	Chosen strategy is simple_byte
  2019  0003AC  0A01               	xorlw	1	; case 1
  2020  0003AE  E0F6               	bz	l6791
  2021  0003B0  0A0B               	xorlw	11	; case 10
  2022  0003B2  E0F6               	bz	l6793
  2023  0003B4  0A6E               	xorlw	110	; case 100
  2024  0003B6  E0F6               	bz	l6795
  2025  0003B8                     l201:
  2026                           
  2027                           ;main.c: 480: }
  2028                           ;main.c: 484: if(state==E_TEST_DISPLAYS)
  2029  0003B8  663A               	tstfsz	_state,c
  2030  0003BA  D03E               	goto	l6825
  2031                           
  2032                           ;main.c: 485: {
  2033                           ;main.c: 486: if((timerMem[TMR_TEST_ADVERTENCIA].flag?!(timerMem[TMR_TEST_ADVERTENCIA].f
      +                          lag=0):0))
  2034  0003BC  0101               	movlb	1	; () banked
  2035  0003BE  B3B2               	btfsc	(_timerMem+39)& (0+255),1,b
  2036  0003C0  D002               	goto	l6805
  2037                           
  2038                           ; BSR set to: 1
  2039  0003C2  6B55               	clrf	_main$445& (0+255),b
  2040  0003C4  D00A               	goto	L9
  2041  0003C6                     l6805:
  2042                           
  2043                           ; BSR set to: 1
  2044  0003C6  51B2               	movf	(_timerMem+39)& (0+255),w,b
  2045  0003C8  0BFD               	andlw	-3
  2046  0003CA  6FB2               	movwf	(_timerMem+39)& (0+255),b
  2047  0003CC  0101               	movlb	1	; () banked
  2048  0003CE  31B2               	rrcf	(_timerMem+39)& (0+255),w,b
  2049  0003D0  0B01               	andlw	1
  2050  0003D2  0E00               	movlw	0
  2051  0003D4  B4D8               	btfsc	status,2,c
  2052  0003D6  0E01               	movlw	1
  2053  0003D8  6F55               	movwf	_main$445& (0+255),b
  2054  0003DA                     L9:
  2055  0003DA  6B56               	clrf	(_main$445+1)& (0+255),b
  2056                           
  2057                           ; BSR set to: 1
  2058  0003DC  5156               	movf	(_main$445+1)& (0+255),w,b
  2059  0003DE  1155               	iorwf	_main$445& (0+255),w,b
  2060  0003E0  E013               	bz	l6817
  2061                           
  2062                           ; BSR set to: 1
  2063                           ;main.c: 487: {
  2064                           ;main.c: 488: { timerMem[TMR_TEST_ADVERTENCIA].flag=0; timerMem[TMR_TEST_ADVERTENCIA].pr
      +                          escaler=timerDelayConstant[TMR_TEST_ADVERTENCIA]; timerMem[TMR_TEST_ADVERTENCIA].pause=0
      +                          ; };
  2065  0003E2  93B2               	bcf	(_timerMem+39)& (0+255),1,b
  2066  0003E4  C11B  F1AF         	movff	_timerDelayConstant+27,_timerMem+36
  2067  0003E8  C11C  F1B0         	movff	_timerDelayConstant+28,_timerMem+37
  2068  0003EC  C11D  F1B1         	movff	_timerDelayConstant+29,_timerMem+38
  2069  0003F0  95B2               	bcf	(_timerMem+39)& (0+255),2,b
  2070                           
  2071                           ; BSR set to: 1
  2072                           ;main.c: 489: if(muxBuffer[ADV]=='x') muxBuffer[ADV]='!';
  2073  0003F2  0100               	movlb	0	; () banked
  2074  0003F4  51CC               	movf	(_muxBuffer+3)& (0+255),w,b
  2075  0003F6  0A78               	xorlw	120
  2076  0003F8  E102               	bnz	l6813
  2077                           
  2078                           ; BSR set to: 0
  2079  0003FA  0E21               	movlw	33
  2080  0003FC  D004               	goto	L10
  2081  0003FE                     l6813:
  2082                           
  2083                           ; BSR set to: 0
  2084                           ;main.c: 490: else if(muxBuffer[ADV]=='!') muxBuffer[ADV]='v';
  2085  0003FE  51CC               	movf	(_muxBuffer+3)& (0+255),w,b
  2086  000400  0A21               	xorlw	33
  2087  000402  E102               	bnz	l6817
  2088                           
  2089                           ; BSR set to: 0
  2090  000404  0E76               	movlw	118
  2091  000406                     L10:
  2092  000406  6FCC               	movwf	(_muxBuffer+3)& (0+255),b
  2093  000408                     l6817:
  2094                           
  2095                           ;main.c: 491: }
  2096                           ;main.c: 492: if((timerMem[TMR_TEST_DISPLAYS].flag?!(timerMem[TMR_TEST_DISPLAYS].flag=0)
      +                          :0)) endTestDisplayActions();
  2097  000408  0101               	movlb	1	; () banked
  2098  00040A  B3AE               	btfsc	(_timerMem+35)& (0+255),1,b
  2099  00040C  D002               	goto	l6821
  2100                           
  2101                           ; BSR set to: 1
  2102  00040E  6B57               	clrf	_main$446& (0+255),b
  2103  000410  D00A               	goto	L11
  2104  000412                     l6821:
  2105                           
  2106                           ; BSR set to: 1
  2107  000412  51AE               	movf	(_timerMem+35)& (0+255),w,b
  2108  000414  0BFD               	andlw	-3
  2109  000416  6FAE               	movwf	(_timerMem+35)& (0+255),b
  2110  000418  0101               	movlb	1	; () banked
  2111  00041A  31AE               	rrcf	(_timerMem+35)& (0+255),w,b
  2112  00041C  0B01               	andlw	1
  2113  00041E  0E00               	movlw	0
  2114  000420  B4D8               	btfsc	status,2,c
  2115  000422  0E01               	movlw	1
  2116  000424  6F57               	movwf	_main$446& (0+255),b
  2117  000426                     L11:
  2118  000426  6B58               	clrf	(_main$446+1)& (0+255),b
  2119                           
  2120                           ; BSR set to: 1
  2121  000428  5158               	movf	(_main$446+1)& (0+255),w,b
  2122  00042A  1157               	iorwf	_main$446& (0+255),w,b
  2123  00042C  E102 EF1A  F006    	bz	l7307
  2124                           
  2125                           ; BSR set to: 1
  2126  000432  EC9B  F013         	call	_endTestDisplayActions	;wreg free
  2127                           
  2128                           ;main.c: 493: }
  2129  000436  D3FE               	goto	l7307
  2130  000438                     l6825:
  2131                           
  2132                           ;main.c: 494: else if(state==E_IDLE)
  2133  000438  043A               	decf	_state,w,c
  2134  00043A  E001 D1B9          	bnz	l7007
  2135                           
  2136                           ;main.c: 495: {
  2137                           ;main.c: 496: adcDriver();
  2138  00043E  EC1A  F010         	call	_adcDriver	;wreg free
  2139                           
  2140                           ; BSR set to: 0
  2141                           ;main.c: 497: if((timerMem[TMR_ADCSAMPLE].flag?!(timerMem[TMR_ADCSAMPLE].flag=0):0)) ((a
      +                          dcStruct.flgs2convert) |= 1UL << (12));
  2142  000442  0101               	movlb	1	; () banked
  2143  000444  B3BE               	btfsc	(_timerMem+51)& (0+255),1,b
  2144  000446  D002               	goto	l6833
  2145                           
  2146                           ; BSR set to: 1
  2147  000448  6B59               	clrf	_main$447& (0+255),b
  2148  00044A  D00A               	goto	L12
  2149  00044C                     l6833:
  2150                           
  2151                           ; BSR set to: 1
  2152  00044C  51BE               	movf	(_timerMem+51)& (0+255),w,b
  2153  00044E  0BFD               	andlw	-3
  2154  000450  6FBE               	movwf	(_timerMem+51)& (0+255),b
  2155  000452  0101               	movlb	1	; () banked
  2156  000454  31BE               	rrcf	(_timerMem+51)& (0+255),w,b
  2157  000456  0B01               	andlw	1
  2158  000458  0E00               	movlw	0
  2159  00045A  B4D8               	btfsc	status,2,c
  2160  00045C  0E01               	movlw	1
  2161  00045E  6F59               	movwf	_main$447& (0+255),b
  2162  000460                     L12:
  2163  000460  6B5A               	clrf	(_main$447+1)& (0+255),b
  2164                           
  2165                           ; BSR set to: 1
  2166  000462  515A               	movf	(_main$447+1)& (0+255),w,b
  2167  000464  1159               	iorwf	_main$447& (0+255),w,b
  2168  000466  E002               	bz	l6837
  2169                           
  2170                           ; BSR set to: 1
  2171  000468  0100               	movlb	0	; () banked
  2172  00046A  89B0               	bsf	(_adcStruct+3)& (0+255),4,b
  2173  00046C                     l6837:
  2174                           
  2175                           ;main.c: 498: if((adcStruct.completeFlg && adcStruct.chComp==12))
  2176  00046C  0100               	movlb	0	; () banked
  2177  00046E  A1AD               	btfss	_adcStruct& (0+255),0,b
  2178  000470  D3E1               	goto	l7307
  2179                           
  2180                           ; BSR set to: 0
  2181  000472  51AE               	movf	(_adcStruct+1)& (0+255),w,b
  2182  000474  0A0C               	xorlw	12
  2183  000476  E001 D3DD          	bnz	l7307
  2184                           
  2185                           ; BSR set to: 0
  2186                           ;main.c: 499: {
  2187                           ;main.c: 502: medicionFloat=iir((getConv()-21.8)/2.327);
  2188  00047A  0E66               	movlw	102
  2189  00047C  6F80               	movwf	(?___ftadd+3)& (0+255),b
  2190  00047E  0EAE               	movlw	174
  2191  000480  6F81               	movwf	(?___ftadd+4)& (0+255),b
  2192  000482  0EC1               	movlw	193
  2193  000484  6F82               	movwf	(?___ftadd+5)& (0+255),b
  2194  000486  ECD7  F013         	call	_getConv	;wreg free
  2195  00048A  C060  F068         	movff	?_getConv,?___awtoft
  2196  00048E  C061  F069         	movff	?_getConv+1,?___awtoft+1
  2197  000492  EC52  F013         	call	___awtoft	;wreg free
  2198  000496  C068  F07D         	movff	?___awtoft,?___ftadd
  2199  00049A  C069  F07E         	movff	?___awtoft+1,?___ftadd+1
  2200  00049E  C06A  F07F         	movff	?___awtoft+2,?___ftadd+2
  2201  0004A2  ECB4  F00B         	call	___ftadd	;wreg free
  2202  0004A6  C07D  F06C         	movff	?___ftadd,?___ftdiv
  2203  0004AA  C07E  F06D         	movff	?___ftadd+1,?___ftdiv+1
  2204  0004AE  C07F  F06E         	movff	?___ftadd+2,?___ftdiv+2
  2205  0004B2  0EEE               	movlw	238
  2206  0004B4  6F6F               	movwf	(?___ftdiv+3)& (0+255),b
  2207  0004B6  0E14               	movlw	20
  2208  0004B8  6F70               	movwf	(?___ftdiv+4)& (0+255),b
  2209  0004BA  0E40               	movlw	64
  2210  0004BC  6F71               	movwf	(?___ftdiv+5)& (0+255),b
  2211  0004BE  EC36  F00E         	call	___ftdiv	;wreg free
  2212  0004C2  C06C  F14A         	movff	?___ftdiv,_main$2642
  2213  0004C6  C06D  F14B         	movff	?___ftdiv+1,_main$2642+1
  2214  0004CA  C06E  F14C         	movff	?___ftdiv+2,_main$2642+2
  2215                           
  2216                           ; BSR set to: 0
  2217                           ;main.c: 499: {
  2218                           ;main.c: 502: medicionFloat=iir((getConv()-21.8)/2.327);
  2219  0004CE  C14A  F095         	movff	_main$2642,?_iir
  2220  0004D2  C14B  F096         	movff	_main$2642+1,?_iir+1
  2221  0004D6  C14C  F097         	movff	_main$2642+2,?_iir+2
  2222  0004DA  EC6E  F00C         	call	_iir	;wreg free
  2223  0004DE  C095  F0C6         	movff	?_iir,_medicionFloat
  2224  0004E2  C096  F0C7         	movff	?_iir+1,_medicionFloat+1
  2225  0004E6  C097  F0C8         	movff	?_iir+2,_medicionFloat+2
  2226                           
  2227                           ; BSR set to: 0
  2228                           ;main.c: 503: medicionFloat=medicionFloat*escala;
  2229  0004EA  C0B2  F079         	movff	_escala,?___asftmul
  2230  0004EE  C0B3  F07A         	movff	_escala+1,?___asftmul+1
  2231  0004F2  C0B4  F07B         	movff	_escala+2,?___asftmul+2
  2232  0004F6  0EC6               	movlw	_medicionFloat& (0+255)
  2233  0004F8  ECF8  F012         	call	___asftmul
  2234                           
  2235                           ; BSR set to: 0
  2236                           ;main.c: 505: measurement=medicionFloat;
  2237  0004FC  C0C6  F060         	movff	_medicionFloat,?___fttol
  2238  000500  C0C7  F061         	movff	_medicionFloat+1,?___fttol+1
  2239  000504  C0C8  F062         	movff	_medicionFloat+2,?___fttol+2
  2240  000508  EC71  F00F         	call	___fttol	;wreg free
  2241  00050C  C060  F0B7         	movff	?___fttol,_measurement
  2242  000510  C061  F0B8         	movff	?___fttol+1,_measurement+1
  2243                           
  2244                           ; BSR set to: 0
  2245                           ;main.c: 509: if(measurement>999) measurement=999;
  2246  000514  0EE8               	movlw	232
  2247  000516  5DB7               	subwf	_measurement& (0+255),w,b
  2248  000518  0E03               	movlw	3
  2249  00051A  59B8               	subwfb	(_measurement+1)& (0+255),w,b
  2250  00051C  E304               	bnc	l6853
  2251                           
  2252                           ; BSR set to: 0
  2253  00051E  0E03               	movlw	3
  2254  000520  6FB8               	movwf	(_measurement+1)& (0+255),b
  2255  000522  0EE7               	movlw	231
  2256  000524  6FB7               	movwf	_measurement& (0+255),b
  2257  000526                     l6853:
  2258                           
  2259                           ; BSR set to: 0
  2260                           ;main.c: 510: uintToStr(measurement,&muxBuffer[0],3);
  2261  000526  C0B7  F067         	movff	_measurement,?_uintToStr
  2262  00052A  C0B8  F068         	movff	_measurement+1,?_uintToStr+1
  2263  00052E  0EC9               	movlw	low _muxBuffer
  2264  000530  6F69               	movwf	(?_uintToStr+2)& (0+255),b
  2265  000532  0E03               	movlw	3
  2266  000534  6F6A               	movwf	(?_uintToStr+3)& (0+255),b
  2267  000536  EC22  F012         	call	_uintToStr	;wreg free
  2268                           
  2269                           ;main.c: 512: switch(advModeMem)
  2270  00053A  D123               	goto	l7005
  2271  00053C                     l6855:
  2272                           
  2273                           ; BSR set to: 0
  2274  00053C  0E20               	movlw	32
  2275  00053E  D142               	goto	L17
  2276  000540                     l6857:
  2277                           
  2278                           ; BSR set to: 0
  2279                           ;main.c: 516: if(measurement<=xLoMem || measurement>=xUpMem) muxBuffer[3]='-';
  2280  000540  51B7               	movf	_measurement& (0+255),w,b
  2281  000542  5C34               	subwf	_xLoMem,w,c
  2282  000544  51B8               	movf	(_measurement+1)& (0+255),w,b
  2283  000546  5835               	subwfb	_xLoMem+1,w,c
  2284  000548  E205               	bc	l6861
  2285                           
  2286                           ; BSR set to: 0
  2287  00054A  5036               	movf	_xUpMem,w,c
  2288  00054C  5DB7               	subwf	_measurement& (0+255),w,b
  2289  00054E  5037               	movf	_xUpMem+1,w,c
  2290  000550  59B8               	subwfb	(_measurement+1)& (0+255),w,b
  2291  000552  E302               	bnc	l6863
  2292  000554                     l6861:
  2293                           
  2294                           ; BSR set to: 0
  2295  000554  0E2D               	movlw	45
  2296  000556  D136               	goto	L17
  2297  000558                     l6863:
  2298                           
  2299                           ; BSR set to: 0
  2300                           ;main.c: 517: else if(measurement>xLoMem && measurement < eLoMem
  2301                           ;main.c: 518: || measurement>eUpMem && measurement<xUpMem) muxBuffer[3]='x';
  2302  000558  51B7               	movf	_measurement& (0+255),w,b
  2303  00055A  5C34               	subwf	_xLoMem,w,c
  2304  00055C  51B8               	movf	(_measurement+1)& (0+255),w,b
  2305  00055E  5835               	subwfb	_xLoMem+1,w,c
  2306  000560  E205               	bc	l6867
  2307                           
  2308                           ; BSR set to: 0
  2309  000562  5028               	movf	_eLoMem,w,c
  2310  000564  5DB7               	subwf	_measurement& (0+255),w,b
  2311  000566  5029               	movf	_eLoMem+1,w,c
  2312  000568  59B8               	subwfb	(_measurement+1)& (0+255),w,b
  2313  00056A  E30A               	bnc	l6871
  2314  00056C                     l6867:
  2315                           
  2316                           ; BSR set to: 0
  2317  00056C  51B7               	movf	_measurement& (0+255),w,b
  2318  00056E  5C2A               	subwf	_eUpMem,w,c
  2319  000570  51B8               	movf	(_measurement+1)& (0+255),w,b
  2320  000572  582B               	subwfb	_eUpMem+1,w,c
  2321  000574  E207               	bc	l6873
  2322                           
  2323                           ; BSR set to: 0
  2324  000576  5036               	movf	_xUpMem,w,c
  2325  000578  5DB7               	subwf	_measurement& (0+255),w,b
  2326  00057A  5037               	movf	_xUpMem+1,w,c
  2327  00057C  59B8               	subwfb	(_measurement+1)& (0+255),w,b
  2328  00057E  E202               	bc	l6873
  2329  000580                     l6871:
  2330                           
  2331                           ; BSR set to: 0
  2332  000580  0E78               	movlw	120
  2333  000582  D120               	goto	L17
  2334  000584                     l6873:
  2335                           
  2336                           ; BSR set to: 0
  2337                           ;main.c: 519: else if(measurement>eLoMem && measurement < vLoMem
  2338                           ;main.c: 520: || measurement>vUpMem && measurement<eUpMem) muxBuffer[3]='!';
  2339  000584  51B7               	movf	_measurement& (0+255),w,b
  2340  000586  5C28               	subwf	_eLoMem,w,c
  2341  000588  51B8               	movf	(_measurement+1)& (0+255),w,b
  2342  00058A  5829               	subwfb	_eLoMem+1,w,c
  2343  00058C  E205               	bc	l6877
  2344                           
  2345                           ; BSR set to: 0
  2346  00058E  5030               	movf	_vLoMem,w,c
  2347  000590  5DB7               	subwf	_measurement& (0+255),w,b
  2348  000592  5031               	movf	_vLoMem+1,w,c
  2349  000594  59B8               	subwfb	(_measurement+1)& (0+255),w,b
  2350  000596  E30A               	bnc	l6881
  2351  000598                     l6877:
  2352                           
  2353                           ; BSR set to: 0
  2354  000598  51B7               	movf	_measurement& (0+255),w,b
  2355  00059A  5C32               	subwf	_vUpMem,w,c
  2356  00059C  51B8               	movf	(_measurement+1)& (0+255),w,b
  2357  00059E  5833               	subwfb	_vUpMem+1,w,c
  2358  0005A0  E207               	bc	l6883
  2359                           
  2360                           ; BSR set to: 0
  2361  0005A2  502A               	movf	_eUpMem,w,c
  2362  0005A4  5DB7               	subwf	_measurement& (0+255),w,b
  2363  0005A6  502B               	movf	_eUpMem+1,w,c
  2364  0005A8  59B8               	subwfb	(_measurement+1)& (0+255),w,b
  2365  0005AA  E202               	bc	l6883
  2366  0005AC                     l6881:
  2367                           
  2368                           ; BSR set to: 0
  2369  0005AC  0E21               	movlw	33
  2370  0005AE  D10A               	goto	L17
  2371  0005B0                     l6883:
  2372                           
  2373                           ; BSR set to: 0
  2374                           ;main.c: 521: else if(measurement>=vLoMem && measurement<=vUpMem) muxBuffer[3]='v';
  2375  0005B0  5030               	movf	_vLoMem,w,c
  2376  0005B2  5DB7               	subwf	_measurement& (0+255),w,b
  2377  0005B4  5031               	movf	_vLoMem+1,w,c
  2378  0005B6  59B8               	subwfb	(_measurement+1)& (0+255),w,b
  2379  0005B8  E201 D33C          	bnc	l7307
  2380                           
  2381                           ; BSR set to: 0
  2382  0005BC  51B7               	movf	_measurement& (0+255),w,b
  2383  0005BE  5C32               	subwf	_vUpMem,w,c
  2384  0005C0  51B8               	movf	(_measurement+1)& (0+255),w,b
  2385  0005C2  5833               	subwfb	_vUpMem+1,w,c
  2386  0005C4  E201 D336          	bnc	l7307
  2387  0005C8  D225               	goto	L46
  2388  0005CA                     l6889:
  2389                           
  2390                           ; BSR set to: 0
  2391                           ;main.c: 524: if(measurement<=xLoMem || measurement>=xUpMem) muxBuffer[3]='x';
  2392  0005CA  51B7               	movf	_measurement& (0+255),w,b
  2393  0005CC  5C34               	subwf	_xLoMem,w,c
  2394  0005CE  51B8               	movf	(_measurement+1)& (0+255),w,b
  2395  0005D0  5835               	subwfb	_xLoMem+1,w,c
  2396  0005D2  E2D6               	bc	l6871
  2397                           
  2398                           ; BSR set to: 0
  2399  0005D4  5036               	movf	_xUpMem,w,c
  2400  0005D6  5DB7               	subwf	_measurement& (0+255),w,b
  2401  0005D8  5037               	movf	_xUpMem+1,w,c
  2402  0005DA  59B8               	subwfb	(_measurement+1)& (0+255),w,b
  2403  0005DC  E2D1               	bc	l6871
  2404                           
  2405                           ; BSR set to: 0
  2406                           ;main.c: 525: else if(measurement>xLoMem && measurement < vLoMem
  2407                           ;main.c: 526: || measurement>vUpMem && measurement<xUpMem) muxBuffer[3]='!';
  2408  0005DE  51B7               	movf	_measurement& (0+255),w,b
  2409  0005E0  5C34               	subwf	_xLoMem,w,c
  2410  0005E2  51B8               	movf	(_measurement+1)& (0+255),w,b
  2411  0005E4  5835               	subwfb	_xLoMem+1,w,c
  2412  0005E6  E205               	bc	l6899
  2413                           
  2414                           ; BSR set to: 0
  2415  0005E8  5030               	movf	_vLoMem,w,c
  2416  0005EA  5DB7               	subwf	_measurement& (0+255),w,b
  2417  0005EC  5031               	movf	_vLoMem+1,w,c
  2418  0005EE  59B8               	subwfb	(_measurement+1)& (0+255),w,b
  2419  0005F0  E3DD               	bnc	l6881
  2420  0005F2                     l6899:
  2421                           
  2422                           ; BSR set to: 0
  2423  0005F2  51B7               	movf	_measurement& (0+255),w,b
  2424  0005F4  5C32               	subwf	_vUpMem,w,c
  2425  0005F6  51B8               	movf	(_measurement+1)& (0+255),w,b
  2426  0005F8  5833               	subwfb	_vUpMem+1,w,c
  2427  0005FA  E205               	bc	l6905
  2428                           
  2429                           ; BSR set to: 0
  2430  0005FC  5036               	movf	_xUpMem,w,c
  2431  0005FE  5DB7               	subwf	_measurement& (0+255),w,b
  2432  000600  5037               	movf	_xUpMem+1,w,c
  2433  000602  59B8               	subwfb	(_measurement+1)& (0+255),w,b
  2434  000604  E3D3               	bnc	l6881
  2435  000606                     l6905:
  2436                           
  2437                           ; BSR set to: 0
  2438                           ;main.c: 527: else if(measurement>=vLoMem && measurement<=vUpMem) muxBuffer[3]='v';
  2439  000606  5030               	movf	_vLoMem,w,c
  2440  000608  5DB7               	subwf	_measurement& (0+255),w,b
  2441  00060A  5031               	movf	_vLoMem+1,w,c
  2442  00060C  59B8               	subwfb	(_measurement+1)& (0+255),w,b
  2443  00060E  E201 D311          	bnc	l7307
  2444                           
  2445                           ; BSR set to: 0
  2446  000612  51B7               	movf	_measurement& (0+255),w,b
  2447  000614  5C32               	subwf	_vUpMem,w,c
  2448  000616  51B8               	movf	(_measurement+1)& (0+255),w,b
  2449  000618  5833               	subwfb	_vUpMem+1,w,c
  2450  00061A                     L18:
  2451  00061A  E301 D1FB          	bc	L46
  2452  00061E  D30A               	goto	l7307
  2453  000620                     l6911:
  2454                           
  2455                           ; BSR set to: 0
  2456                           ;main.c: 530: if(measurement<=xLoMem || measurement>=xUpMem) muxBuffer[3]='v';
  2457  000620  51B7               	movf	_measurement& (0+255),w,b
  2458  000622  5C34               	subwf	_xLoMem,w,c
  2459  000624  51B8               	movf	(_measurement+1)& (0+255),w,b
  2460  000626  5835               	subwfb	_xLoMem+1,w,c
  2461  000628  E301 D1F4          	bc	L46
  2462                           
  2463                           ; BSR set to: 0
  2464  00062C  5036               	movf	_xUpMem,w,c
  2465  00062E  5DB7               	subwf	_measurement& (0+255),w,b
  2466  000630  5037               	movf	_xUpMem+1,w,c
  2467  000632  59B8               	subwfb	(_measurement+1)& (0+255),w,b
  2468  000634  E301 D1EE          	bc	L46
  2469                           
  2470                           ; BSR set to: 0
  2471                           ;main.c: 531: else if(measurement>xLoMem && measurement < vLoMem
  2472                           ;main.c: 532: || measurement>vUpMem && measurement<xUpMem) muxBuffer[3]='!';
  2473  000638  51B7               	movf	_measurement& (0+255),w,b
  2474  00063A  5C34               	subwf	_xLoMem,w,c
  2475  00063C  51B8               	movf	(_measurement+1)& (0+255),w,b
  2476  00063E  5835               	subwfb	_xLoMem+1,w,c
  2477  000640  E205               	bc	l6921
  2478                           
  2479                           ; BSR set to: 0
  2480  000642  5030               	movf	_vLoMem,w,c
  2481  000644  5DB7               	subwf	_measurement& (0+255),w,b
  2482  000646  5031               	movf	_vLoMem+1,w,c
  2483  000648  59B8               	subwfb	(_measurement+1)& (0+255),w,b
  2484  00064A  E3B0               	bnc	l6881
  2485  00064C                     l6921:
  2486                           
  2487                           ; BSR set to: 0
  2488  00064C  51B7               	movf	_measurement& (0+255),w,b
  2489  00064E  5C32               	subwf	_vUpMem,w,c
  2490  000650  51B8               	movf	(_measurement+1)& (0+255),w,b
  2491  000652  5833               	subwfb	_vUpMem+1,w,c
  2492  000654  E205               	bc	l6927
  2493                           
  2494                           ; BSR set to: 0
  2495  000656  5036               	movf	_xUpMem,w,c
  2496  000658  5DB7               	subwf	_measurement& (0+255),w,b
  2497  00065A  5037               	movf	_xUpMem+1,w,c
  2498  00065C  59B8               	subwfb	(_measurement+1)& (0+255),w,b
  2499  00065E  E3A6               	bnc	l6881
  2500  000660                     l6927:
  2501                           
  2502                           ; BSR set to: 0
  2503                           ;main.c: 533: else if(measurement>=vLoMem && measurement<=vUpMem) muxBuffer[3]='x';
  2504  000660  5030               	movf	_vLoMem,w,c
  2505  000662  5DB7               	subwf	_measurement& (0+255),w,b
  2506  000664  5031               	movf	_vLoMem+1,w,c
  2507  000666  59B8               	subwfb	(_measurement+1)& (0+255),w,b
  2508  000668  E201 D2E4          	bnc	l7307
  2509                           
  2510                           ; BSR set to: 0
  2511  00066C  51B7               	movf	_measurement& (0+255),w,b
  2512  00066E  5C32               	subwf	_vUpMem,w,c
  2513  000670  51B8               	movf	(_measurement+1)& (0+255),w,b
  2514  000672  5833               	subwfb	_vUpMem+1,w,c
  2515  000674                     L19:
  2516  000674  E285               	bc	l6871
  2517  000676  D2DE               	goto	l7307
  2518  000678                     l6933:
  2519                           
  2520                           ; BSR set to: 0
  2521                           ;main.c: 536: if(measurement<=xUpMem) muxBuffer[3]='x';
  2522  000678  51B7               	movf	_measurement& (0+255),w,b
  2523  00067A  5C36               	subwf	_xUpMem,w,c
  2524  00067C  51B8               	movf	(_measurement+1)& (0+255),w,b
  2525  00067E  5837               	subwfb	_xUpMem+1,w,c
  2526  000680  E301 D77E          	bc	l6871
  2527                           
  2528                           ; BSR set to: 0
  2529                           ;main.c: 537: else if(measurement>xUpMem && measurement < vLoMem) muxBuffer[3]='!';
  2530  000684  51B7               	movf	_measurement& (0+255),w,b
  2531  000686  5C36               	subwf	_xUpMem,w,c
  2532  000688  51B8               	movf	(_measurement+1)& (0+255),w,b
  2533  00068A  5837               	subwfb	_xUpMem+1,w,c
  2534  00068C  E205               	bc	l6943
  2535                           
  2536                           ; BSR set to: 0
  2537  00068E  5030               	movf	_vLoMem,w,c
  2538  000690  5DB7               	subwf	_measurement& (0+255),w,b
  2539  000692  5031               	movf	_vLoMem+1,w,c
  2540  000694  59B8               	subwfb	(_measurement+1)& (0+255),w,b
  2541  000696  E38A               	bnc	l6881
  2542  000698                     l6943:
  2543                           
  2544                           ; BSR set to: 0
  2545                           ;main.c: 538: else if(measurement>=vLoMem) muxBuffer[3]='v';
  2546  000698  5030               	movf	_vLoMem,w,c
  2547  00069A  5DB7               	subwf	_measurement& (0+255),w,b
  2548  00069C  5031               	movf	_vLoMem+1,w,c
  2549  00069E  59B8               	subwfb	(_measurement+1)& (0+255),w,b
  2550  0006A0  D7BC               	goto	L18
  2551  0006A2                     l6947:
  2552                           
  2553                           ; BSR set to: 0
  2554                           ;main.c: 541: if(measurement<=vUpMem) muxBuffer[3]='v';
  2555  0006A2  51B7               	movf	_measurement& (0+255),w,b
  2556  0006A4  5C32               	subwf	_vUpMem,w,c
  2557  0006A6  51B8               	movf	(_measurement+1)& (0+255),w,b
  2558  0006A8  5833               	subwfb	_vUpMem+1,w,c
  2559  0006AA  E301 D1B3          	bc	L46
  2560                           
  2561                           ; BSR set to: 0
  2562                           ;main.c: 542: else if(measurement>vUpMem && measurement < vLoMem) muxBuffer[3]='!';
  2563  0006AE  51B7               	movf	_measurement& (0+255),w,b
  2564  0006B0  5C32               	subwf	_vUpMem,w,c
  2565  0006B2  51B8               	movf	(_measurement+1)& (0+255),w,b
  2566  0006B4  5833               	subwfb	_vUpMem+1,w,c
  2567  0006B6  E206               	bc	l6957
  2568                           
  2569                           ; BSR set to: 0
  2570  0006B8  5030               	movf	_vLoMem,w,c
  2571  0006BA  5DB7               	subwf	_measurement& (0+255),w,b
  2572  0006BC  5031               	movf	_vLoMem+1,w,c
  2573  0006BE  59B8               	subwfb	(_measurement+1)& (0+255),w,b
  2574  0006C0  E201 D774          	bnc	l6881
  2575  0006C4                     l6957:
  2576                           
  2577                           ; BSR set to: 0
  2578                           ;main.c: 543: else if(measurement>=vLoMem) muxBuffer[3]='x';
  2579  0006C4  5030               	movf	_vLoMem,w,c
  2580  0006C6  5DB7               	subwf	_measurement& (0+255),w,b
  2581  0006C8  5031               	movf	_vLoMem+1,w,c
  2582  0006CA  59B8               	subwfb	(_measurement+1)& (0+255),w,b
  2583  0006CC  D7D3               	goto	L19
  2584  0006CE                     l6961:
  2585                           
  2586                           ; BSR set to: 0
  2587                           ;main.c: 546: if(measurement<=xUpMem && measurement>=eLoMem) muxBuffer[3]='x';
  2588  0006CE  51B7               	movf	_measurement& (0+255),w,b
  2589  0006D0  5C36               	subwf	_xUpMem,w,c
  2590  0006D2  51B8               	movf	(_measurement+1)& (0+255),w,b
  2591  0006D4  5837               	subwfb	_xUpMem+1,w,c
  2592  0006D6  E306               	bnc	l6967
  2593                           
  2594                           ; BSR set to: 0
  2595  0006D8  5028               	movf	_eLoMem,w,c
  2596  0006DA  5DB7               	subwf	_measurement& (0+255),w,b
  2597  0006DC  5029               	movf	_eLoMem+1,w,c
  2598  0006DE  59B8               	subwfb	(_measurement+1)& (0+255),w,b
  2599  0006E0  E301 D74E          	bc	l6871
  2600  0006E4                     l6967:
  2601                           
  2602                           ; BSR set to: 0
  2603                           ;main.c: 547: else if(measurement>xUpMem && measurement < vLoMem
  2604                           ;main.c: 548: || measurement<eLoMem
  2605                           ;main.c: 549: || measurement>eUpMem) muxBuffer[3]='!';
  2606  0006E4  51B7               	movf	_measurement& (0+255),w,b
  2607  0006E6  5C36               	subwf	_xUpMem,w,c
  2608  0006E8  51B8               	movf	(_measurement+1)& (0+255),w,b
  2609  0006EA  5837               	subwfb	_xUpMem+1,w,c
  2610  0006EC  E206               	bc	l6971
  2611                           
  2612                           ; BSR set to: 0
  2613  0006EE  5030               	movf	_vLoMem,w,c
  2614  0006F0  5DB7               	subwf	_measurement& (0+255),w,b
  2615  0006F2  5031               	movf	_vLoMem+1,w,c
  2616  0006F4  59B8               	subwfb	(_measurement+1)& (0+255),w,b
  2617  0006F6  E201 D759          	bnc	l6881
  2618  0006FA                     l6971:
  2619                           
  2620                           ; BSR set to: 0
  2621  0006FA  5028               	movf	_eLoMem,w,c
  2622  0006FC  5DB7               	subwf	_measurement& (0+255),w,b
  2623  0006FE  5029               	movf	_eLoMem+1,w,c
  2624  000700  59B8               	subwfb	(_measurement+1)& (0+255),w,b
  2625  000702  E201 D753          	bnc	l6881
  2626                           
  2627                           ; BSR set to: 0
  2628  000706  51B7               	movf	_measurement& (0+255),w,b
  2629  000708  5C2A               	subwf	_eUpMem,w,c
  2630  00070A  51B8               	movf	(_measurement+1)& (0+255),w,b
  2631  00070C  582B               	subwfb	_eUpMem+1,w,c
  2632  00070E  E201 D74D          	bnc	l6881
  2633                           
  2634                           ; BSR set to: 0
  2635                           ;main.c: 550: else if(measurement>=vLoMem && measurement<=eUpMem) muxBuffer[3]='v';
  2636  000712  5030               	movf	_vLoMem,w,c
  2637  000714  5DB7               	subwf	_measurement& (0+255),w,b
  2638  000716  5031               	movf	_vLoMem+1,w,c
  2639  000718  59B8               	subwfb	(_measurement+1)& (0+255),w,b
  2640  00071A  E201 D28B          	bnc	l7307
  2641                           
  2642                           ; BSR set to: 0
  2643  00071E  51B7               	movf	_measurement& (0+255),w,b
  2644  000720  5C2A               	subwf	_eUpMem,w,c
  2645  000722  51B8               	movf	(_measurement+1)& (0+255),w,b
  2646  000724  582B               	subwfb	_eUpMem+1,w,c
  2647  000726  D779               	goto	L18
  2648  000728                     l6983:
  2649                           
  2650                           ; BSR set to: 0
  2651                           ;main.c: 553: if(measurement<=vUpMem && measurement>=eLoMem) muxBuffer[3]='v';
  2652  000728  51B7               	movf	_measurement& (0+255),w,b
  2653  00072A  5C32               	subwf	_vUpMem,w,c
  2654  00072C  51B8               	movf	(_measurement+1)& (0+255),w,b
  2655  00072E  5833               	subwfb	_vUpMem+1,w,c
  2656  000730  E306               	bnc	l6989
  2657                           
  2658                           ; BSR set to: 0
  2659  000732  5028               	movf	_eLoMem,w,c
  2660  000734  5DB7               	subwf	_measurement& (0+255),w,b
  2661  000736  5029               	movf	_eLoMem+1,w,c
  2662  000738  59B8               	subwfb	(_measurement+1)& (0+255),w,b
  2663  00073A  E301 D16B          	bc	L46
  2664  00073E                     l6989:
  2665                           
  2666                           ; BSR set to: 0
  2667                           ;main.c: 554: else if(measurement>vUpMem && measurement < xLoMem
  2668                           ;main.c: 555: || measurement<eLoMem
  2669                           ;main.c: 556: || measurement>eUpMem) muxBuffer[3]='!';
  2670  00073E  51B7               	movf	_measurement& (0+255),w,b
  2671  000740  5C32               	subwf	_vUpMem,w,c
  2672  000742  51B8               	movf	(_measurement+1)& (0+255),w,b
  2673  000744  5833               	subwfb	_vUpMem+1,w,c
  2674  000746  E206               	bc	l6993
  2675                           
  2676                           ; BSR set to: 0
  2677  000748  5034               	movf	_xLoMem,w,c
  2678  00074A  5DB7               	subwf	_measurement& (0+255),w,b
  2679  00074C  5035               	movf	_xLoMem+1,w,c
  2680  00074E  59B8               	subwfb	(_measurement+1)& (0+255),w,b
  2681  000750  E201 D72C          	bnc	l6881
  2682  000754                     l6993:
  2683                           
  2684                           ; BSR set to: 0
  2685  000754  5028               	movf	_eLoMem,w,c
  2686  000756  5DB7               	subwf	_measurement& (0+255),w,b
  2687  000758  5029               	movf	_eLoMem+1,w,c
  2688  00075A  59B8               	subwfb	(_measurement+1)& (0+255),w,b
  2689  00075C  E201 D726          	bnc	l6881
  2690                           
  2691                           ; BSR set to: 0
  2692  000760  51B7               	movf	_measurement& (0+255),w,b
  2693  000762  5C2A               	subwf	_eUpMem,w,c
  2694  000764  51B8               	movf	(_measurement+1)& (0+255),w,b
  2695  000766  582B               	subwfb	_eUpMem+1,w,c
  2696  000768  E201 D720          	bnc	l6881
  2697                           
  2698                           ; BSR set to: 0
  2699                           ;main.c: 557: else if(measurement>=xLoMem && measurement<=eUpMem) muxBuffer[3]='x';
  2700  00076C  5034               	movf	_xLoMem,w,c
  2701  00076E  5DB7               	subwf	_measurement& (0+255),w,b
  2702  000770  5035               	movf	_xLoMem+1,w,c
  2703  000772  59B8               	subwfb	(_measurement+1)& (0+255),w,b
  2704  000774  E201 D25E          	bnc	l7307
  2705                           
  2706                           ; BSR set to: 0
  2707  000778  51B7               	movf	_measurement& (0+255),w,b
  2708  00077A  5C2A               	subwf	_eUpMem,w,c
  2709  00077C  51B8               	movf	(_measurement+1)& (0+255),w,b
  2710  00077E  582B               	subwfb	_eUpMem+1,w,c
  2711  000780  D779               	goto	L19
  2712  000782                     l7005:
  2713                           
  2714                           ; BSR set to: 0
  2715  000782  5038               	movf	_advModeMem,w,c
  2716                           
  2717                           ; Switch size 1, requested type "space"
  2718                           ; Number of cases is 8, Range of values is 0 to 7
  2719                           ; switch strategies available:
  2720                           ; Name         Instructions Cycles
  2721                           ; simple_byte           25    13 (average)
  2722                           ;	Chosen strategy is simple_byte
  2723  000784  E101 D6DA          	bz	l6855
  2724  000788  0A01               	xorlw	1	; case 1
  2725  00078A  E101 D6D9          	bz	l6857
  2726  00078E  0A03               	xorlw	3	; case 2
  2727  000790  E101 D71B          	bz	l6889
  2728  000794  0A01               	xorlw	1	; case 3
  2729  000796  E101 D743          	bz	l6911
  2730  00079A  0A07               	xorlw	7	; case 4
  2731  00079C  E101 D76C          	bz	l6933
  2732  0007A0  0A01               	xorlw	1	; case 5
  2733  0007A2  E101 D77E          	bz	l6947
  2734  0007A6  0A03               	xorlw	3	; case 6
  2735  0007A8  E092               	bz	l6961
  2736  0007AA  0A01               	xorlw	1	; case 7
  2737  0007AC  E0BD               	bz	l6983
  2738  0007AE  D242               	goto	l7307
  2739  0007B0                     l7007:
  2740                           
  2741                           ;main.c: 561: else if(state==E_MENU_BRILLO)
  2742  0007B0  503A               	movf	_state,w,c
  2743  0007B2  0A02               	xorlw	2
  2744  0007B4  E109               	bnz	l7011
  2745                           
  2746                           ;main.c: 562: {
  2747                           ;main.c: 563: muxBuffer[0]='b';
  2748  0007B6  0E62               	movlw	98
  2749  0007B8  0100               	movlb	0	; () banked
  2750  0007BA  6FC9               	movwf	_muxBuffer& (0+255),b
  2751                           
  2752                           ;main.c: 564: muxBuffer[1]='r';
  2753  0007BC  0E72               	movlw	114
  2754  0007BE  6FCA               	movwf	(_muxBuffer+1)& (0+255),b
  2755                           
  2756                           ;main.c: 565: muxBuffer[2]='i';
  2757  0007C0  0E69               	movlw	105
  2758  0007C2  D023               	goto	L49
  2759  0007C4                     L17:
  2760  0007C4  6FCC               	movwf	(_muxBuffer+3)& (0+255),b
  2761                           
  2762                           ;main.c: 567: }
  2763  0007C6  D236               	goto	l7307
  2764  0007C8                     l7011:
  2765                           
  2766                           ;main.c: 568: else if(state==E_MENU_ADV_MODE)
  2767  0007C8  503A               	movf	_state,w,c
  2768  0007CA  0A03               	xorlw	3
  2769  0007CC  E107               	bnz	l7015
  2770                           
  2771                           ;main.c: 569: {
  2772                           ;main.c: 570: muxBuffer[0]='n';
  2773  0007CE  0E6E               	movlw	110
  2774  0007D0  0100               	movlb	0	; () banked
  2775  0007D2  6FC9               	movwf	_muxBuffer& (0+255),b
  2776                           
  2777                           ;main.c: 571: muxBuffer[1]='o';
  2778  0007D4  0E6F               	movlw	111
  2779  0007D6  6FCA               	movwf	(_muxBuffer+1)& (0+255),b
  2780                           
  2781                           ;main.c: 572: muxBuffer[2]='d';
  2782  0007D8  0E64               	movlw	100
  2783  0007DA  D017               	goto	L49
  2784  0007DC                     l7015:
  2785                           
  2786                           ;main.c: 575: else if(state==E_MENU_LIMITS)
  2787  0007DC  503A               	movf	_state,w,c
  2788  0007DE  0A04               	xorlw	4
  2789  0007E0  E107               	bnz	l7019
  2790                           
  2791                           ;main.c: 576: {
  2792                           ;main.c: 577: muxBuffer[0]='L';
  2793  0007E2  0E4C               	movlw	76
  2794  0007E4  0100               	movlb	0	; () banked
  2795  0007E6  6FC9               	movwf	_muxBuffer& (0+255),b
  2796                           
  2797                           ;main.c: 578: muxBuffer[1]='i';
  2798  0007E8  0E69               	movlw	105
  2799  0007EA  6FCA               	movwf	(_muxBuffer+1)& (0+255),b
  2800                           
  2801                           ;main.c: 579: muxBuffer[2]='n';
  2802  0007EC  0E6E               	movlw	110
  2803  0007EE  D00D               	goto	L49
  2804  0007F0                     l7019:
  2805                           
  2806                           ;main.c: 582: else if(state==E_MENU_ESCALA)
  2807  0007F0  503A               	movf	_state,w,c
  2808  0007F2  0A05               	xorlw	5
  2809  0007F4  E105               	bnz	l7023
  2810                           
  2811                           ;main.c: 583: {
  2812                           ;main.c: 584: muxBuffer[0]='E';
  2813  0007F6  0E45               	movlw	69
  2814  0007F8  0100               	movlb	0	; () banked
  2815  0007FA  6FC9               	movwf	_muxBuffer& (0+255),b
  2816                           
  2817                           ;main.c: 585: muxBuffer[1]='S';
  2818  0007FC  0E53               	movlw	83
  2819  0007FE  D0C0               	goto	L53
  2820  000800                     l7023:
  2821                           
  2822                           ;main.c: 589: else if(state==E_MENU_USER_CAL)
  2823  000800  503A               	movf	_state,w,c
  2824  000802  0A06               	xorlw	6
  2825  000804  E104               	bnz	l7027
  2826                           
  2827                           ;main.c: 590: {
  2828                           ;main.c: 591: muxBuffer[0]='u';
  2829  000806  0E75               	movlw	117
  2830  000808  D006               	goto	L50
  2831  00080A                     L49:
  2832  00080A  6FCB               	movwf	(_muxBuffer+2)& (0+255),b
  2833  00080C  D697               	goto	l6855
  2834  00080E                     l7027:
  2835                           
  2836                           ;main.c: 596: else if(state==E_MENU_FACTORY_CAL)
  2837  00080E  503A               	movf	_state,w,c
  2838  000810  0A07               	xorlw	7
  2839  000812  E107               	bnz	l7031
  2840                           
  2841                           ;main.c: 597: {
  2842                           ;main.c: 598: muxBuffer[0]='F';
  2843  000814  0E46               	movlw	70
  2844  000816                     L50:
  2845  000816  0100               	movlb	0	; () banked
  2846  000818  6FC9               	movwf	_muxBuffer& (0+255),b
  2847                           
  2848                           ;main.c: 599: muxBuffer[1]='C';
  2849  00081A  0E43               	movlw	67
  2850  00081C  6FCA               	movwf	(_muxBuffer+1)& (0+255),b
  2851                           
  2852                           ;main.c: 600: muxBuffer[2]='A';
  2853  00081E  0E41               	movlw	65
  2854  000820  D7F4               	goto	L49
  2855  000822                     l7031:
  2856                           
  2857                           ;main.c: 603: else if(state==E_SET_BRILLO)
  2858  000822  503A               	movf	_state,w,c
  2859  000824  0A08               	xorlw	8
  2860  000826  E139               	bnz	l7057
  2861                           
  2862                           ;main.c: 604: {
  2863                           ;main.c: 605: if((timerMem[TMR_SHOW_SETTING_OFF].flag?!(timerMem[TMR_SHOW_SETTING_OFF].f
      +                          lag=0):0)) {{ timerMem[TMR_SHOW_SETTING_ON].flag=0; timerMem[TMR_SHOW_SETTING_ON].presca
      +                          ler=timerDelayConstant[TMR_SHOW_SETTING_ON]; timerMem[TMR_SHOW_SETTING_ON].pause=0; };}
  2864  000828  0101               	movlb	1	; () banked
  2865  00082A  B3AA               	btfsc	(_timerMem+31)& (0+255),1,b
  2866  00082C  D002               	goto	l7037
  2867                           
  2868                           ; BSR set to: 1
  2869  00082E  6B5B               	clrf	_main$448& (0+255),b
  2870  000830  D004               	goto	L21
  2871  000832                     l7037:
  2872                           
  2873                           ; BSR set to: 1
  2874  000832  DB01               	call	PL6	;call to abstracted procedure
  2875  000834  B4D8               	btfsc	status,2,c
  2876  000836  0E01               	movlw	1
  2877  000838  6F5B               	movwf	_main$448& (0+255),b
  2878  00083A                     L21:
  2879  00083A  6B5C               	clrf	(_main$448+1)& (0+255),b
  2880                           
  2881                           ; BSR set to: 1
  2882  00083C  515C               	movf	(_main$448+1)& (0+255),w,b
  2883  00083E  115B               	iorwf	_main$448& (0+255),w,b
  2884  000840  E001               	bz	l328
  2885                           
  2886                           ; BSR set to: 1
  2887  000842  DAE0               	call	PL2	;call to abstracted procedure
  2888  000844                     l328:
  2889                           
  2890                           ; BSR set to: 1
  2891                           ;main.c: 606: if((timerMem[TMR_SHOW_SETTING_ON].flag?!(timerMem[TMR_SHOW_SETTING_ON].fla
      +                          g=0):0)) {{ timerMem[TMR_SHOW_SETTING_OFF].flag=0; timerMem[TMR_SHOW_SETTING_OFF].presca
      +                          ler=timerDelayConstant[TMR_SHOW_SETTING_OFF]; timerMem[TMR_SHOW_SETTING_OFF].pause=0; };
  2892  000844  B3A6               	btfsc	(_timerMem+27)& (0+255),1,b
  2893  000846  D002               	goto	l7043
  2894                           
  2895                           ; BSR set to: 1
  2896  000848  6B5D               	clrf	_main$449& (0+255),b
  2897  00084A  D004               	goto	L22
  2898  00084C                     l7043:
  2899                           
  2900                           ; BSR set to: 1
  2901  00084C  DAED               	call	PL5	;call to abstracted procedure
  2902  00084E  B4D8               	btfsc	status,2,c
  2903  000850  0E01               	movlw	1
  2904  000852  6F5D               	movwf	_main$449& (0+255),b
  2905  000854                     L22:
  2906  000854  6B5E               	clrf	(_main$449+1)& (0+255),b
  2907                           
  2908                           ; BSR set to: 1
  2909  000856  515E               	movf	(_main$449+1)& (0+255),w,b
  2910  000858  115D               	iorwf	_main$449& (0+255),w,b
  2911  00085A  E001               	bz	l333
  2912                           
  2913                           ; BSR set to: 1
  2914  00085C  DADC               	call	PL4	;call to abstracted procedure
  2915  00085E                     l333:
  2916                           
  2917                           ; BSR set to: 1
  2918                           ;main.c: 608: if((!timerMem[TMR_SHOW_SETTING_ON].pause && timerMem[TMR_SHOW_SETTING_ON].
      +                          prescaler!=0))
  2919  00085E  B5A6               	btfsc	(_timerMem+27)& (0+255),2,b
  2920  000860  D017               	goto	l7055
  2921                           
  2922                           ; BSR set to: 1
  2923  000862  EE21  F0A3         	lfsr	2,_timerMem+24
  2924  000866  50DE               	movf	postinc2,w,c
  2925  000868  10DE               	iorwf	postinc2,w,c
  2926  00086A  10DD               	iorwf	postdec2,w,c
  2927  00086C  E011               	bz	l7055
  2928                           
  2929                           ; BSR set to: 1
  2930                           ;main.c: 609: {
  2931                           ;main.c: 610: muxBuffer[ADV]=' ';
  2932  00086E  0E20               	movlw	32
  2933  000870  0100               	movlb	0	; () banked
  2934  000872  6FCC               	movwf	(_muxBuffer+3)& (0+255),b
  2935                           
  2936                           ; BSR set to: 0
  2937                           ;main.c: 611: display=brilloMem;
  2938  000874  C039  F0B5         	movff	_brilloMem,_display
  2939  000878  6BB6               	clrf	(_display+1)& (0+255),b
  2940                           
  2941                           ; BSR set to: 0
  2942                           ;main.c: 612: uintToStr(display,&muxBuffer[2],1);
  2943  00087A  C0B5  F067         	movff	_display,?_uintToStr
  2944  00087E  C0B6  F068         	movff	_display+1,?_uintToStr+1
  2945  000882  0ECB               	movlw	low (_muxBuffer+2)
  2946  000884  6F69               	movwf	(?_uintToStr+2)& (0+255),b
  2947  000886  0E01               	movlw	1
  2948  000888  6F6A               	movwf	(?_uintToStr+3)& (0+255),b
  2949  00088A  EC22  F012         	call	_uintToStr	;wreg free
  2950                           
  2951                           ;main.c: 613: }
  2952  00088E  D1D2               	goto	l7307
  2953  000890                     l7055:
  2954                           
  2955                           ; BSR set to: 1
  2956                           ;main.c: 614: else
  2957                           ;main.c: 615: { muxBuffer[0]=' '; muxBuffer[1]=' '; muxBuffer[2]=' '; muxBuffer[3]=' '; 
      +                          };
  2958  000890  0E20               	movlw	32
  2959  000892  0100               	movlb	0	; () banked
  2960  000894  6FC9               	movwf	_muxBuffer& (0+255),b
  2961  000896  6FCA               	movwf	(_muxBuffer+1)& (0+255),b
  2962  000898  D7B8               	goto	L49
  2963  00089A                     l7057:
  2964                           
  2965                           ;main.c: 617: else if(state==E_SET_ADV_MODE)
  2966  00089A  503A               	movf	_state,w,c
  2967  00089C  0A0D               	xorlw	13
  2968  00089E  E129               	bnz	l7083
  2969                           
  2970                           ;main.c: 618: {
  2971                           ;main.c: 619: if((timerMem[TMR_SHOW_SETTING_OFF].flag?!(timerMem[TMR_SHOW_SETTING_OFF].f
      +                          lag=0):0)) {{ timerMem[TMR_SHOW_SETTING_ON].flag=0; timerMem[TMR_SHOW_SETTING_ON].presca
      +                          ler=timerDelayConstant[TMR_SHOW_SETTING_ON]; timerMem[TMR_SHOW_SETTING_ON].pause=0; };}
  2972  0008A0  0101               	movlb	1	; () banked
  2973  0008A2  B3AA               	btfsc	(_timerMem+31)& (0+255),1,b
  2974  0008A4  D002               	goto	l7063
  2975                           
  2976                           ; BSR set to: 1
  2977  0008A6  6B5F               	clrf	_main$450& (0+255),b
  2978  0008A8  D004               	goto	L23
  2979  0008AA                     l7063:
  2980                           
  2981                           ; BSR set to: 1
  2982  0008AA  DAC5               	call	PL6	;call to abstracted procedure
  2983  0008AC  B4D8               	btfsc	status,2,c
  2984  0008AE  0E01               	movlw	1
  2985  0008B0  6F5F               	movwf	_main$450& (0+255),b
  2986  0008B2                     L23:
  2987  0008B2  6B60               	clrf	(_main$450+1)& (0+255),b
  2988                           
  2989                           ; BSR set to: 1
  2990  0008B4  5160               	movf	(_main$450+1)& (0+255),w,b
  2991  0008B6  115F               	iorwf	_main$450& (0+255),w,b
  2992  0008B8  E001               	bz	l342
  2993                           
  2994                           ; BSR set to: 1
  2995  0008BA  DAA4               	call	PL2	;call to abstracted procedure
  2996  0008BC                     l342:
  2997                           
  2998                           ; BSR set to: 1
  2999                           ;main.c: 620: if((timerMem[TMR_SHOW_SETTING_ON].flag?!(timerMem[TMR_SHOW_SETTING_ON].fla
      +                          g=0):0)) {{ timerMem[TMR_SHOW_SETTING_OFF].flag=0; timerMem[TMR_SHOW_SETTING_OFF].presca
      +                          ler=timerDelayConstant[TMR_SHOW_SETTING_OFF]; timerMem[TMR_SHOW_SETTING_OFF].pause=0; };
  3000  0008BC  B3A6               	btfsc	(_timerMem+27)& (0+255),1,b
  3001  0008BE  D002               	goto	l7069
  3002                           
  3003                           ; BSR set to: 1
  3004  0008C0  6B61               	clrf	_main$451& (0+255),b
  3005  0008C2  D004               	goto	L24
  3006  0008C4                     l7069:
  3007                           
  3008                           ; BSR set to: 1
  3009  0008C4  DAB1               	call	PL5	;call to abstracted procedure
  3010  0008C6  B4D8               	btfsc	status,2,c
  3011  0008C8  0E01               	movlw	1
  3012  0008CA  6F61               	movwf	_main$451& (0+255),b
  3013  0008CC                     L24:
  3014  0008CC  6B62               	clrf	(_main$451+1)& (0+255),b
  3015                           
  3016                           ; BSR set to: 1
  3017  0008CE  5162               	movf	(_main$451+1)& (0+255),w,b
  3018  0008D0  1161               	iorwf	_main$451& (0+255),w,b
  3019  0008D2  E001               	bz	l347
  3020                           
  3021                           ; BSR set to: 1
  3022  0008D4  DAA0               	call	PL4	;call to abstracted procedure
  3023  0008D6                     l347:
  3024                           
  3025                           ; BSR set to: 1
  3026                           ;main.c: 622: if((!timerMem[TMR_SHOW_SETTING_ON].pause && timerMem[TMR_SHOW_SETTING_ON].
      +                          prescaler!=0))
  3027  0008D6  B5A6               	btfsc	(_timerMem+27)& (0+255),2,b
  3028  0008D8  D7DB               	goto	l7055
  3029                           
  3030                           ; BSR set to: 1
  3031  0008DA  EE21  F0A3         	lfsr	2,_timerMem+24
  3032  0008DE  50DE               	movf	postinc2,w,c
  3033  0008E0  10DE               	iorwf	postinc2,w,c
  3034  0008E2  10DD               	iorwf	postdec2,w,c
  3035  0008E4  E0D5               	bz	l7055
  3036                           
  3037                           ; BSR set to: 1
  3038                           ;main.c: 623: {
  3039                           ;main.c: 624: muxBuffer[ADV]=' ';
  3040  0008E6  0E20               	movlw	32
  3041  0008E8  0100               	movlb	0	; () banked
  3042  0008EA  6FCC               	movwf	(_muxBuffer+3)& (0+255),b
  3043                           
  3044                           ; BSR set to: 0
  3045                           ;main.c: 625: display=advModeMem;
  3046  0008EC  C038  F0B5         	movff	_advModeMem,_display
  3047  0008F0  D7C3               	goto	L25
  3048  0008F2                     l7083:
  3049                           
  3050                           ;main.c: 631: else if(state==E_SET_ESCALA_ENT_DESCRIPTION)
  3051  0008F2  503A               	movf	_state,w,c
  3052  0008F4  0A09               	xorlw	9
  3053  0008F6  E107               	bnz	l7087
  3054                           
  3055                           ;main.c: 632: {
  3056                           ;main.c: 633: muxBuffer[0]='E';
  3057  0008F8  0E45               	movlw	69
  3058  0008FA  0100               	movlb	0	; () banked
  3059  0008FC  6FC9               	movwf	_muxBuffer& (0+255),b
  3060                           
  3061                           ;main.c: 634: muxBuffer[1]='n';
  3062  0008FE  0E6E               	movlw	110
  3063  000900  6FCA               	movwf	(_muxBuffer+1)& (0+255),b
  3064                           
  3065                           ;main.c: 635: muxBuffer[2]='t';
  3066  000902  0E74               	movlw	116
  3067  000904  D782               	goto	L49
  3068  000906                     l7087:
  3069                           
  3070                           ;main.c: 638: else if(state==E_SET_ESCALA_ENT)
  3071  000906  503A               	movf	_state,w,c
  3072  000908  0A0A               	xorlw	10
  3073  00090A  E133               	bnz	l7111
  3074                           
  3075                           ;main.c: 639: {
  3076                           ;main.c: 640: if((timerMem[TMR_SHOW_SETTING_OFF].flag?!(timerMem[TMR_SHOW_SETTING_OFF].f
      +                          lag=0):0)) {{ timerMem[TMR_SHOW_SETTING_ON].flag=0; timerMem[TMR_SHOW_SETTING_ON].presca
      +                          ler=timerDelayConstant[TMR_SHOW_SETTING_ON]; timerMem[TMR_SHOW_SETTING_ON].pause=0; };}
  3077  00090C  0101               	movlb	1	; () banked
  3078  00090E  B3AA               	btfsc	(_timerMem+31)& (0+255),1,b
  3079  000910  D002               	goto	l7093
  3080                           
  3081                           ; BSR set to: 1
  3082  000912  6B63               	clrf	_main$452& (0+255),b
  3083  000914  D004               	goto	L26
  3084  000916                     l7093:
  3085                           
  3086                           ; BSR set to: 1
  3087  000916  DA8F               	call	PL6	;call to abstracted procedure
  3088  000918  B4D8               	btfsc	status,2,c
  3089  00091A  0E01               	movlw	1
  3090  00091C  6F63               	movwf	_main$452& (0+255),b
  3091  00091E                     L26:
  3092  00091E  6B64               	clrf	(_main$452+1)& (0+255),b
  3093                           
  3094                           ; BSR set to: 1
  3095  000920  5164               	movf	(_main$452+1)& (0+255),w,b
  3096  000922  1163               	iorwf	_main$452& (0+255),w,b
  3097  000924  E001               	bz	l358
  3098                           
  3099                           ; BSR set to: 1
  3100  000926  DA6E               	call	PL2	;call to abstracted procedure
  3101  000928                     l358:
  3102                           
  3103                           ; BSR set to: 1
  3104                           ;main.c: 641: if((timerMem[TMR_SHOW_SETTING_ON].flag?!(timerMem[TMR_SHOW_SETTING_ON].fla
      +                          g=0):0)) {{ timerMem[TMR_SHOW_SETTING_OFF].flag=0; timerMem[TMR_SHOW_SETTING_OFF].presca
      +                          ler=timerDelayConstant[TMR_SHOW_SETTING_OFF]; timerMem[TMR_SHOW_SETTING_OFF].pause=0; };
  3105  000928  B3A6               	btfsc	(_timerMem+27)& (0+255),1,b
  3106  00092A  D002               	goto	l7099
  3107                           
  3108                           ; BSR set to: 1
  3109  00092C  6B65               	clrf	_main$453& (0+255),b
  3110  00092E  D004               	goto	L27
  3111  000930                     l7099:
  3112                           
  3113                           ; BSR set to: 1
  3114  000930  DA7B               	call	PL5	;call to abstracted procedure
  3115  000932  B4D8               	btfsc	status,2,c
  3116  000934  0E01               	movlw	1
  3117  000936  6F65               	movwf	_main$453& (0+255),b
  3118  000938                     L27:
  3119  000938  6B66               	clrf	(_main$453+1)& (0+255),b
  3120                           
  3121                           ; BSR set to: 1
  3122  00093A  5166               	movf	(_main$453+1)& (0+255),w,b
  3123  00093C  1165               	iorwf	_main$453& (0+255),w,b
  3124  00093E  E001               	bz	l363
  3125                           
  3126                           ; BSR set to: 1
  3127  000940  DA6A               	call	PL4	;call to abstracted procedure
  3128  000942                     l363:
  3129                           
  3130                           ; BSR set to: 1
  3131                           ;main.c: 643: if((!timerMem[TMR_SHOW_SETTING_ON].pause && timerMem[TMR_SHOW_SETTING_ON].
      +                          prescaler!=0))
  3132  000942  B5A6               	btfsc	(_timerMem+27)& (0+255),2,b
  3133  000944  D7A5               	goto	l7055
  3134                           
  3135                           ; BSR set to: 1
  3136  000946  EE21  F0A3         	lfsr	2,_timerMem+24
  3137  00094A  50DE               	movf	postinc2,w,c
  3138  00094C  10DE               	iorwf	postinc2,w,c
  3139  00094E  10DD               	iorwf	postdec2,w,c
  3140  000950  E09F               	bz	l7055
  3141                           
  3142                           ; BSR set to: 1
  3143                           ;main.c: 644: {
  3144                           ;main.c: 645: display=escEntMem;
  3145  000952  C02E  F0B5         	movff	_escEntMem,_display
  3146  000956  C02F  F0B6         	movff	_escEntMem+1,_display+1
  3147  00095A                     l7107:
  3148                           
  3149                           ; BSR set to: 1
  3150                           ;main.c: 646: uintToStr(display,&muxBuffer[0],3);
  3151  00095A  C0B5  F067         	movff	_display,?_uintToStr
  3152  00095E  C0B6  F068         	movff	_display+1,?_uintToStr+1
  3153  000962  0100               	movlb	0	; () banked
  3154  000964  0EC9               	movlw	low _muxBuffer
  3155  000966  6F69               	movwf	(?_uintToStr+2)& (0+255),b
  3156  000968  0E03               	movlw	3
  3157  00096A  6F6A               	movwf	(?_uintToStr+3)& (0+255),b
  3158  00096C  EC22  F012         	call	_uintToStr	;wreg free
  3159                           
  3160                           ;main.c: 647: }
  3161  000970  D161               	goto	l7307
  3162  000972                     l7111:
  3163                           
  3164                           ;main.c: 651: else if(state==E_SET_ESCALA_DEC_DESCRIPTION)
  3165  000972  503A               	movf	_state,w,c
  3166  000974  0A0B               	xorlw	11
  3167  000976  E107               	bnz	l7115
  3168                           
  3169                           ;main.c: 652: {
  3170                           ;main.c: 653: muxBuffer[0]='d';
  3171  000978  0E64               	movlw	100
  3172  00097A  0100               	movlb	0	; () banked
  3173  00097C  6FC9               	movwf	_muxBuffer& (0+255),b
  3174                           
  3175                           ;main.c: 654: muxBuffer[1]='E';
  3176  00097E  0E45               	movlw	69
  3177  000980                     L53:
  3178  000980  6FCA               	movwf	(_muxBuffer+1)& (0+255),b
  3179                           
  3180                           ;main.c: 655: muxBuffer[2]='c';
  3181  000982  0E63               	movlw	99
  3182  000984  D742               	goto	L49
  3183  000986                     l7115:
  3184                           
  3185                           ;main.c: 658: else if(state==E_SET_ESCALA_DEC)
  3186  000986  503A               	movf	_state,w,c
  3187  000988  0A0C               	xorlw	12
  3188  00098A  E129               	bnz	l7139
  3189                           
  3190                           ;main.c: 659: {
  3191                           ;main.c: 660: if((timerMem[TMR_SHOW_SETTING_OFF].flag?!(timerMem[TMR_SHOW_SETTING_OFF].f
      +                          lag=0):0)) {{ timerMem[TMR_SHOW_SETTING_ON].flag=0; timerMem[TMR_SHOW_SETTING_ON].presca
      +                          ler=timerDelayConstant[TMR_SHOW_SETTING_ON]; timerMem[TMR_SHOW_SETTING_ON].pause=0; };}
  3192  00098C  0101               	movlb	1	; () banked
  3193  00098E  B3AA               	btfsc	(_timerMem+31)& (0+255),1,b
  3194  000990  D002               	goto	l7121
  3195                           
  3196                           ; BSR set to: 1
  3197  000992  6B67               	clrf	_main$454& (0+255),b
  3198  000994  D004               	goto	L28
  3199  000996                     l7121:
  3200                           
  3201                           ; BSR set to: 1
  3202  000996  DA4F               	call	PL6	;call to abstracted procedure
  3203  000998  B4D8               	btfsc	status,2,c
  3204  00099A  0E01               	movlw	1
  3205  00099C  6F67               	movwf	_main$454& (0+255),b
  3206  00099E                     L28:
  3207  00099E  6B68               	clrf	(_main$454+1)& (0+255),b
  3208                           
  3209                           ; BSR set to: 1
  3210  0009A0  5168               	movf	(_main$454+1)& (0+255),w,b
  3211  0009A2  1167               	iorwf	_main$454& (0+255),w,b
  3212  0009A4  E001               	bz	l374
  3213                           
  3214                           ; BSR set to: 1
  3215  0009A6  DA2E               	call	PL2	;call to abstracted procedure
  3216  0009A8                     l374:
  3217                           
  3218                           ; BSR set to: 1
  3219                           ;main.c: 661: if((timerMem[TMR_SHOW_SETTING_ON].flag?!(timerMem[TMR_SHOW_SETTING_ON].fla
      +                          g=0):0)) {{ timerMem[TMR_SHOW_SETTING_OFF].flag=0; timerMem[TMR_SHOW_SETTING_OFF].presca
      +                          ler=timerDelayConstant[TMR_SHOW_SETTING_OFF]; timerMem[TMR_SHOW_SETTING_OFF].pause=0; };
  3220  0009A8  B3A6               	btfsc	(_timerMem+27)& (0+255),1,b
  3221  0009AA  D002               	goto	l7127
  3222                           
  3223                           ; BSR set to: 1
  3224  0009AC  6B69               	clrf	_main$455& (0+255),b
  3225  0009AE  D004               	goto	L29
  3226  0009B0                     l7127:
  3227                           
  3228                           ; BSR set to: 1
  3229  0009B0  DA3B               	call	PL5	;call to abstracted procedure
  3230  0009B2  B4D8               	btfsc	status,2,c
  3231  0009B4  0E01               	movlw	1
  3232  0009B6  6F69               	movwf	_main$455& (0+255),b
  3233  0009B8                     L29:
  3234  0009B8  6B6A               	clrf	(_main$455+1)& (0+255),b
  3235                           
  3236                           ; BSR set to: 1
  3237  0009BA  516A               	movf	(_main$455+1)& (0+255),w,b
  3238  0009BC  1169               	iorwf	_main$455& (0+255),w,b
  3239  0009BE  E001               	bz	l379
  3240                           
  3241                           ; BSR set to: 1
  3242  0009C0  DA2A               	call	PL4	;call to abstracted procedure
  3243  0009C2                     l379:
  3244                           
  3245                           ; BSR set to: 1
  3246                           ;main.c: 663: if((!timerMem[TMR_SHOW_SETTING_ON].pause && timerMem[TMR_SHOW_SETTING_ON].
      +                          prescaler!=0))
  3247  0009C2  B5A6               	btfsc	(_timerMem+27)& (0+255),2,b
  3248  0009C4  D765               	goto	l7055
  3249                           
  3250                           ; BSR set to: 1
  3251  0009C6  EE21  F0A3         	lfsr	2,_timerMem+24
  3252  0009CA  50DE               	movf	postinc2,w,c
  3253  0009CC  10DE               	iorwf	postinc2,w,c
  3254  0009CE  10DD               	iorwf	postdec2,w,c
  3255  0009D0  E101 D75E          	bz	l7055
  3256                           
  3257                           ; BSR set to: 1
  3258                           ;main.c: 664: {
  3259                           ;main.c: 665: display=escDecMem;
  3260  0009D4  C02C  F0B5         	movff	_escDecMem,_display
  3261  0009D8  C02D  F0B6         	movff	_escDecMem+1,_display+1
  3262  0009DC  D7BE               	goto	l7107
  3263  0009DE                     l7139:
  3264                           
  3265                           ;main.c: 671: else if(state==E_SET_ADV_XLO_DESCRIPTION)
  3266  0009DE  503A               	movf	_state,w,c
  3267  0009E0  0A0E               	xorlw	14
  3268  0009E2  E102               	bnz	l7143
  3269                           
  3270                           ;main.c: 672: {
  3271                           ;main.c: 673: muxBuffer[0]=' ';
  3272                           
  3273                           ;main.c: 674: muxBuffer[1]='L';
  3274                           
  3275                           ;main.c: 675: muxBuffer[2]='o';
  3276  0009E4  DA64               	call	PL28	;call to abstracted procedure
  3277  0009E6  D004               	goto	L51
  3278  0009E8                     l7143:
  3279                           
  3280                           ;main.c: 678: else if(state==E_SET_ADV_XUP_DESCRIPTION)
  3281  0009E8  503A               	movf	_state,w,c
  3282  0009EA  0A10               	xorlw	16
  3283  0009EC  E103               	bnz	l7147
  3284                           
  3285                           ;main.c: 679: {
  3286                           ;main.c: 680: muxBuffer[0]=' ';
  3287                           
  3288                           ;main.c: 681: muxBuffer[1]='H';
  3289                           
  3290                           ;main.c: 682: muxBuffer[2]='i';
  3291  0009EE  DA65               	call	PL29	;call to abstracted procedure
  3292  0009F0                     L51:
  3293  0009F0  6FCB               	movwf	(_muxBuffer+2)& (0+255),b
  3294  0009F2  D5C6               	goto	l6871
  3295  0009F4                     l7147:
  3296                           
  3297                           ;main.c: 685: else if(state==E_SET_ADV_ELO_DESCRIPTION)
  3298  0009F4  503A               	movf	_state,w,c
  3299  0009F6  0A12               	xorlw	18
  3300  0009F8  E102               	bnz	l7151
  3301                           
  3302                           ;main.c: 686: {
  3303                           ;main.c: 687: muxBuffer[0]=' ';
  3304                           
  3305                           ;main.c: 688: muxBuffer[1]='L';
  3306                           
  3307                           ;main.c: 689: muxBuffer[2]='o';
  3308  0009FA  DA59               	call	PL28	;call to abstracted procedure
  3309  0009FC  D004               	goto	L54
  3310  0009FE                     l7151:
  3311                           
  3312                           ;main.c: 692: else if(state==E_SET_ADV_EUP_DESCRIPTION)
  3313  0009FE  503A               	movf	_state,w,c
  3314  000A00  0A14               	xorlw	20
  3315  000A02  E103               	bnz	l7155
  3316                           
  3317                           ;main.c: 693: {
  3318                           ;main.c: 694: muxBuffer[0]=' ';
  3319                           
  3320                           ;main.c: 695: muxBuffer[1]='H';
  3321                           
  3322                           ;main.c: 696: muxBuffer[2]='i';
  3323  000A04  DA5A               	call	PL29	;call to abstracted procedure
  3324  000A06                     L54:
  3325  000A06  6FCB               	movwf	(_muxBuffer+2)& (0+255),b
  3326  000A08  D5D1               	goto	l6881
  3327  000A0A                     l7155:
  3328                           
  3329                           ;main.c: 699: else if(state==E_SET_ADV_VLO_DESCRIPTION)
  3330  000A0A  503A               	movf	_state,w,c
  3331  000A0C  0A16               	xorlw	22
  3332  000A0E  E104               	bnz	l7159
  3333                           
  3334                           ;main.c: 700: {
  3335                           ;main.c: 701: muxBuffer[0]=' ';
  3336                           
  3337                           ;main.c: 702: muxBuffer[1]='L';
  3338                           
  3339                           ;main.c: 703: muxBuffer[2]='o';
  3340  000A10  DA4E               	call	PL28	;call to abstracted procedure
  3341  000A12  D006               	goto	L52
  3342  000A14                     L46:
  3343                           
  3344                           ;main.c: 704: muxBuffer[ADV]='v';
  3345  000A14  0E76               	movlw	118
  3346  000A16  D6D6               	goto	L17
  3347  000A18                     l7159:
  3348                           
  3349                           ;main.c: 706: else if(state==E_SET_ADV_VUP_DESCRIPTION)
  3350  000A18  503A               	movf	_state,w,c
  3351  000A1A  0A18               	xorlw	24
  3352  000A1C  E103               	bnz	l7163
  3353                           
  3354                           ;main.c: 707: {
  3355                           ;main.c: 708: muxBuffer[0]=' ';
  3356                           
  3357                           ;main.c: 709: muxBuffer[1]='H';
  3358                           
  3359                           ;main.c: 710: muxBuffer[2]='i';
  3360  000A1E  DA4D               	call	PL29	;call to abstracted procedure
  3361  000A20                     L52:
  3362  000A20  6FCB               	movwf	(_muxBuffer+2)& (0+255),b
  3363  000A22  D7F8               	goto	L46
  3364  000A24                     l7163:
  3365                           
  3366                           ;main.c: 713: else if(state==E_SET_ADV_XLO)
  3367  000A24  503A               	movf	_state,w,c
  3368  000A26  0A0F               	xorlw	15
  3369  000A28  E129               	bnz	l7187
  3370                           
  3371                           ;main.c: 714: {
  3372                           ;main.c: 715: if((timerMem[TMR_SHOW_SETTING_OFF].flag?!(timerMem[TMR_SHOW_SETTING_OFF].f
      +                          lag=0):0)) {{ timerMem[TMR_SHOW_SETTING_ON].flag=0; timerMem[TMR_SHOW_SETTING_ON].presca
      +                          ler=timerDelayConstant[TMR_SHOW_SETTING_ON]; timerMem[TMR_SHOW_SETTING_ON].pause=0; };}
  3373  000A2A  0101               	movlb	1	; () banked
  3374  000A2C  B3AA               	btfsc	(_timerMem+31)& (0+255),1,b
  3375  000A2E  D002               	goto	l7169
  3376                           
  3377                           ; BSR set to: 1
  3378  000A30  6B6B               	clrf	_main$456& (0+255),b
  3379  000A32  D004               	goto	L30
  3380  000A34                     l7169:
  3381                           
  3382                           ; BSR set to: 1
  3383  000A34  DA00               	call	PL6	;call to abstracted procedure
  3384  000A36  B4D8               	btfsc	status,2,c
  3385  000A38  0E01               	movlw	1
  3386  000A3A  6F6B               	movwf	_main$456& (0+255),b
  3387  000A3C                     L30:
  3388  000A3C  6B6C               	clrf	(_main$456+1)& (0+255),b
  3389                           
  3390                           ; BSR set to: 1
  3391  000A3E  516C               	movf	(_main$456+1)& (0+255),w,b
  3392  000A40  116B               	iorwf	_main$456& (0+255),w,b
  3393  000A42  E001               	bz	l400
  3394                           
  3395                           ; BSR set to: 1
  3396  000A44  D9DF               	call	PL2	;call to abstracted procedure
  3397  000A46                     l400:
  3398                           
  3399                           ; BSR set to: 1
  3400                           ;main.c: 716: if((timerMem[TMR_SHOW_SETTING_ON].flag?!(timerMem[TMR_SHOW_SETTING_ON].fla
      +                          g=0):0)) {{ timerMem[TMR_SHOW_SETTING_OFF].flag=0; timerMem[TMR_SHOW_SETTING_OFF].presca
      +                          ler=timerDelayConstant[TMR_SHOW_SETTING_OFF]; timerMem[TMR_SHOW_SETTING_OFF].pause=0; };
  3401  000A46  B3A6               	btfsc	(_timerMem+27)& (0+255),1,b
  3402  000A48  D002               	goto	l7175
  3403                           
  3404                           ; BSR set to: 1
  3405  000A4A  6B6D               	clrf	_main$457& (0+255),b
  3406  000A4C  D004               	goto	L31
  3407  000A4E                     l7175:
  3408                           
  3409                           ; BSR set to: 1
  3410  000A4E  D9EC               	call	PL5	;call to abstracted procedure
  3411  000A50  B4D8               	btfsc	status,2,c
  3412  000A52  0E01               	movlw	1
  3413  000A54  6F6D               	movwf	_main$457& (0+255),b
  3414  000A56                     L31:
  3415  000A56  6B6E               	clrf	(_main$457+1)& (0+255),b
  3416                           
  3417                           ; BSR set to: 1
  3418  000A58  516E               	movf	(_main$457+1)& (0+255),w,b
  3419  000A5A  116D               	iorwf	_main$457& (0+255),w,b
  3420  000A5C  E001               	bz	l405
  3421                           
  3422                           ; BSR set to: 1
  3423  000A5E  D9DB               	call	PL4	;call to abstracted procedure
  3424  000A60                     l405:
  3425                           
  3426                           ; BSR set to: 1
  3427                           ;main.c: 718: if((!timerMem[TMR_SHOW_SETTING_ON].pause && timerMem[TMR_SHOW_SETTING_ON].
      +                          prescaler!=0))
  3428  000A60  B5A6               	btfsc	(_timerMem+27)& (0+255),2,b
  3429  000A62  D716               	goto	l7055
  3430                           
  3431                           ; BSR set to: 1
  3432  000A64  EE21  F0A3         	lfsr	2,_timerMem+24
  3433  000A68  50DE               	movf	postinc2,w,c
  3434  000A6A  10DE               	iorwf	postinc2,w,c
  3435  000A6C  10DD               	iorwf	postdec2,w,c
  3436  000A6E  E101 D70F          	bz	l7055
  3437                           
  3438                           ; BSR set to: 1
  3439                           ;main.c: 719: {
  3440                           ;main.c: 720: display=xLoMem;
  3441  000A72  C034  F0B5         	movff	_xLoMem,_display
  3442  000A76  C035  F0B6         	movff	_xLoMem+1,_display+1
  3443  000A7A  D76F               	goto	l7107
  3444  000A7C                     l7187:
  3445                           
  3446                           ;main.c: 726: else if(state==E_SET_ADV_XUP)
  3447  000A7C  503A               	movf	_state,w,c
  3448  000A7E  0A11               	xorlw	17
  3449  000A80  E129               	bnz	l7211
  3450                           
  3451                           ;main.c: 727: {
  3452                           ;main.c: 728: if((timerMem[TMR_SHOW_SETTING_OFF].flag?!(timerMem[TMR_SHOW_SETTING_OFF].f
      +                          lag=0):0)) {{ timerMem[TMR_SHOW_SETTING_ON].flag=0; timerMem[TMR_SHOW_SETTING_ON].presca
      +                          ler=timerDelayConstant[TMR_SHOW_SETTING_ON]; timerMem[TMR_SHOW_SETTING_ON].pause=0; };}
  3453  000A82  0101               	movlb	1	; () banked
  3454  000A84  B3AA               	btfsc	(_timerMem+31)& (0+255),1,b
  3455  000A86  D002               	goto	l7193
  3456                           
  3457                           ; BSR set to: 1
  3458  000A88  6B6F               	clrf	_main$458& (0+255),b
  3459  000A8A  D004               	goto	L32
  3460  000A8C                     l7193:
  3461                           
  3462                           ; BSR set to: 1
  3463  000A8C  D9D4               	call	PL6	;call to abstracted procedure
  3464  000A8E  B4D8               	btfsc	status,2,c
  3465  000A90  0E01               	movlw	1
  3466  000A92  6F6F               	movwf	_main$458& (0+255),b
  3467  000A94                     L32:
  3468  000A94  6B70               	clrf	(_main$458+1)& (0+255),b
  3469                           
  3470                           ; BSR set to: 1
  3471  000A96  5170               	movf	(_main$458+1)& (0+255),w,b
  3472  000A98  116F               	iorwf	_main$458& (0+255),w,b
  3473  000A9A  E001               	bz	l414
  3474                           
  3475                           ; BSR set to: 1
  3476  000A9C  D9B3               	call	PL2	;call to abstracted procedure
  3477  000A9E                     l414:
  3478                           
  3479                           ; BSR set to: 1
  3480                           ;main.c: 729: if((timerMem[TMR_SHOW_SETTING_ON].flag?!(timerMem[TMR_SHOW_SETTING_ON].fla
      +                          g=0):0)) {{ timerMem[TMR_SHOW_SETTING_OFF].flag=0; timerMem[TMR_SHOW_SETTING_OFF].presca
      +                          ler=timerDelayConstant[TMR_SHOW_SETTING_OFF]; timerMem[TMR_SHOW_SETTING_OFF].pause=0; };
  3481  000A9E  B3A6               	btfsc	(_timerMem+27)& (0+255),1,b
  3482  000AA0  D002               	goto	l7199
  3483                           
  3484                           ; BSR set to: 1
  3485  000AA2  6B71               	clrf	_main$459& (0+255),b
  3486  000AA4  D004               	goto	L33
  3487  000AA6                     l7199:
  3488                           
  3489                           ; BSR set to: 1
  3490  000AA6  D9C0               	call	PL5	;call to abstracted procedure
  3491  000AA8  B4D8               	btfsc	status,2,c
  3492  000AAA  0E01               	movlw	1
  3493  000AAC  6F71               	movwf	_main$459& (0+255),b
  3494  000AAE                     L33:
  3495  000AAE  6B72               	clrf	(_main$459+1)& (0+255),b
  3496                           
  3497                           ; BSR set to: 1
  3498  000AB0  5172               	movf	(_main$459+1)& (0+255),w,b
  3499  000AB2  1171               	iorwf	_main$459& (0+255),w,b
  3500  000AB4  E001               	bz	l419
  3501                           
  3502                           ; BSR set to: 1
  3503  000AB6  D9AF               	call	PL4	;call to abstracted procedure
  3504  000AB8                     l419:
  3505                           
  3506                           ; BSR set to: 1
  3507                           ;main.c: 731: if((!timerMem[TMR_SHOW_SETTING_ON].pause && timerMem[TMR_SHOW_SETTING_ON].
      +                          prescaler!=0))
  3508  000AB8  B5A6               	btfsc	(_timerMem+27)& (0+255),2,b
  3509  000ABA  D6EA               	goto	l7055
  3510                           
  3511                           ; BSR set to: 1
  3512  000ABC  EE21  F0A3         	lfsr	2,_timerMem+24
  3513  000AC0  50DE               	movf	postinc2,w,c
  3514  000AC2  10DE               	iorwf	postinc2,w,c
  3515  000AC4  10DD               	iorwf	postdec2,w,c
  3516  000AC6  E101 D6E3          	bz	l7055
  3517                           
  3518                           ; BSR set to: 1
  3519                           ;main.c: 732: {
  3520                           ;main.c: 733: display=xUpMem;
  3521  000ACA  C036  F0B5         	movff	_xUpMem,_display
  3522  000ACE  C037  F0B6         	movff	_xUpMem+1,_display+1
  3523  000AD2  D743               	goto	l7107
  3524  000AD4                     l7211:
  3525                           
  3526                           ;main.c: 739: else if(state==E_SET_ADV_ELO)
  3527  000AD4  503A               	movf	_state,w,c
  3528  000AD6  0A13               	xorlw	19
  3529  000AD8  E129               	bnz	l7235
  3530                           
  3531                           ;main.c: 740: {
  3532                           ;main.c: 741: if((timerMem[TMR_SHOW_SETTING_OFF].flag?!(timerMem[TMR_SHOW_SETTING_OFF].f
      +                          lag=0):0)) {{ timerMem[TMR_SHOW_SETTING_ON].flag=0; timerMem[TMR_SHOW_SETTING_ON].presca
      +                          ler=timerDelayConstant[TMR_SHOW_SETTING_ON]; timerMem[TMR_SHOW_SETTING_ON].pause=0; };}
  3533  000ADA  0101               	movlb	1	; () banked
  3534  000ADC  B3AA               	btfsc	(_timerMem+31)& (0+255),1,b
  3535  000ADE  D002               	goto	l7217
  3536                           
  3537                           ; BSR set to: 1
  3538  000AE0  6B73               	clrf	_main$460& (0+255),b
  3539  000AE2  D004               	goto	L34
  3540  000AE4                     l7217:
  3541                           
  3542                           ; BSR set to: 1
  3543  000AE4  D9A8               	call	PL6	;call to abstracted procedure
  3544  000AE6  B4D8               	btfsc	status,2,c
  3545  000AE8  0E01               	movlw	1
  3546  000AEA  6F73               	movwf	_main$460& (0+255),b
  3547  000AEC                     L34:
  3548  000AEC  6B74               	clrf	(_main$460+1)& (0+255),b
  3549                           
  3550                           ; BSR set to: 1
  3551  000AEE  5174               	movf	(_main$460+1)& (0+255),w,b
  3552  000AF0  1173               	iorwf	_main$460& (0+255),w,b
  3553  000AF2  E001               	bz	l428
  3554                           
  3555                           ; BSR set to: 1
  3556  000AF4  D987               	call	PL2	;call to abstracted procedure
  3557  000AF6                     l428:
  3558                           
  3559                           ; BSR set to: 1
  3560                           ;main.c: 742: if((timerMem[TMR_SHOW_SETTING_ON].flag?!(timerMem[TMR_SHOW_SETTING_ON].fla
      +                          g=0):0)) {{ timerMem[TMR_SHOW_SETTING_OFF].flag=0; timerMem[TMR_SHOW_SETTING_OFF].presca
      +                          ler=timerDelayConstant[TMR_SHOW_SETTING_OFF]; timerMem[TMR_SHOW_SETTING_OFF].pause=0; };
  3561  000AF6  B3A6               	btfsc	(_timerMem+27)& (0+255),1,b
  3562  000AF8  D002               	goto	l7223
  3563                           
  3564                           ; BSR set to: 1
  3565  000AFA  6B75               	clrf	_main$461& (0+255),b
  3566  000AFC  D004               	goto	L35
  3567  000AFE                     l7223:
  3568                           
  3569                           ; BSR set to: 1
  3570  000AFE  D994               	call	PL5	;call to abstracted procedure
  3571  000B00  B4D8               	btfsc	status,2,c
  3572  000B02  0E01               	movlw	1
  3573  000B04  6F75               	movwf	_main$461& (0+255),b
  3574  000B06                     L35:
  3575  000B06  6B76               	clrf	(_main$461+1)& (0+255),b
  3576                           
  3577                           ; BSR set to: 1
  3578  000B08  5176               	movf	(_main$461+1)& (0+255),w,b
  3579  000B0A  1175               	iorwf	_main$461& (0+255),w,b
  3580  000B0C  E001               	bz	l433
  3581                           
  3582                           ; BSR set to: 1
  3583  000B0E  D983               	call	PL4	;call to abstracted procedure
  3584  000B10                     l433:
  3585                           
  3586                           ; BSR set to: 1
  3587                           ;main.c: 744: if((!timerMem[TMR_SHOW_SETTING_ON].pause && timerMem[TMR_SHOW_SETTING_ON].
      +                          prescaler!=0))
  3588  000B10  B5A6               	btfsc	(_timerMem+27)& (0+255),2,b
  3589  000B12  D6BE               	goto	l7055
  3590                           
  3591                           ; BSR set to: 1
  3592  000B14  EE21  F0A3         	lfsr	2,_timerMem+24
  3593  000B18  50DE               	movf	postinc2,w,c
  3594  000B1A  10DE               	iorwf	postinc2,w,c
  3595  000B1C  10DD               	iorwf	postdec2,w,c
  3596  000B1E  E101 D6B7          	bz	l7055
  3597                           
  3598                           ; BSR set to: 1
  3599                           ;main.c: 745: {
  3600                           ;main.c: 746: display=eLoMem;
  3601  000B22  C028  F0B5         	movff	_eLoMem,_display
  3602  000B26  C029  F0B6         	movff	_eLoMem+1,_display+1
  3603  000B2A  D717               	goto	l7107
  3604  000B2C                     l7235:
  3605                           
  3606                           ;main.c: 752: else if(state==E_SET_ADV_EUP)
  3607  000B2C  503A               	movf	_state,w,c
  3608  000B2E  0A15               	xorlw	21
  3609  000B30  E129               	bnz	l7259
  3610                           
  3611                           ;main.c: 753: {
  3612                           ;main.c: 754: if((timerMem[TMR_SHOW_SETTING_OFF].flag?!(timerMem[TMR_SHOW_SETTING_OFF].f
      +                          lag=0):0)) {{ timerMem[TMR_SHOW_SETTING_ON].flag=0; timerMem[TMR_SHOW_SETTING_ON].presca
      +                          ler=timerDelayConstant[TMR_SHOW_SETTING_ON]; timerMem[TMR_SHOW_SETTING_ON].pause=0; };}
  3613  000B32  0101               	movlb	1	; () banked
  3614  000B34  B3AA               	btfsc	(_timerMem+31)& (0+255),1,b
  3615  000B36  D002               	goto	l7241
  3616                           
  3617                           ; BSR set to: 1
  3618  000B38  6B77               	clrf	_main$462& (0+255),b
  3619  000B3A  D004               	goto	L36
  3620  000B3C                     l7241:
  3621                           
  3622                           ; BSR set to: 1
  3623  000B3C  D97C               	call	PL6	;call to abstracted procedure
  3624  000B3E  B4D8               	btfsc	status,2,c
  3625  000B40  0E01               	movlw	1
  3626  000B42  6F77               	movwf	_main$462& (0+255),b
  3627  000B44                     L36:
  3628  000B44  6B78               	clrf	(_main$462+1)& (0+255),b
  3629                           
  3630                           ; BSR set to: 1
  3631  000B46  5178               	movf	(_main$462+1)& (0+255),w,b
  3632  000B48  1177               	iorwf	_main$462& (0+255),w,b
  3633  000B4A  E001               	bz	l442
  3634                           
  3635                           ; BSR set to: 1
  3636  000B4C  D95B               	call	PL2	;call to abstracted procedure
  3637  000B4E                     l442:
  3638                           
  3639                           ; BSR set to: 1
  3640                           ;main.c: 755: if((timerMem[TMR_SHOW_SETTING_ON].flag?!(timerMem[TMR_SHOW_SETTING_ON].fla
      +                          g=0):0)) {{ timerMem[TMR_SHOW_SETTING_OFF].flag=0; timerMem[TMR_SHOW_SETTING_OFF].presca
      +                          ler=timerDelayConstant[TMR_SHOW_SETTING_OFF]; timerMem[TMR_SHOW_SETTING_OFF].pause=0; };
  3641  000B4E  B3A6               	btfsc	(_timerMem+27)& (0+255),1,b
  3642  000B50  D002               	goto	l7247
  3643                           
  3644                           ; BSR set to: 1
  3645  000B52  6B79               	clrf	_main$463& (0+255),b
  3646  000B54  D004               	goto	L37
  3647  000B56                     l7247:
  3648                           
  3649                           ; BSR set to: 1
  3650  000B56  D968               	call	PL5	;call to abstracted procedure
  3651  000B58  B4D8               	btfsc	status,2,c
  3652  000B5A  0E01               	movlw	1
  3653  000B5C  6F79               	movwf	_main$463& (0+255),b
  3654  000B5E                     L37:
  3655  000B5E  6B7A               	clrf	(_main$463+1)& (0+255),b
  3656                           
  3657                           ; BSR set to: 1
  3658  000B60  517A               	movf	(_main$463+1)& (0+255),w,b
  3659  000B62  1179               	iorwf	_main$463& (0+255),w,b
  3660  000B64  E001               	bz	l447
  3661                           
  3662                           ; BSR set to: 1
  3663  000B66  D957               	call	PL4	;call to abstracted procedure
  3664  000B68                     l447:
  3665                           
  3666                           ; BSR set to: 1
  3667                           ;main.c: 757: if((!timerMem[TMR_SHOW_SETTING_ON].pause && timerMem[TMR_SHOW_SETTING_ON].
      +                          prescaler!=0))
  3668  000B68  B5A6               	btfsc	(_timerMem+27)& (0+255),2,b
  3669  000B6A  D692               	goto	l7055
  3670                           
  3671                           ; BSR set to: 1
  3672  000B6C  EE21  F0A3         	lfsr	2,_timerMem+24
  3673  000B70  50DE               	movf	postinc2,w,c
  3674  000B72  10DE               	iorwf	postinc2,w,c
  3675  000B74  10DD               	iorwf	postdec2,w,c
  3676  000B76  E101 D68B          	bz	l7055
  3677                           
  3678                           ; BSR set to: 1
  3679                           ;main.c: 758: {
  3680                           ;main.c: 759: display=eUpMem;
  3681  000B7A  C02A  F0B5         	movff	_eUpMem,_display
  3682  000B7E  C02B  F0B6         	movff	_eUpMem+1,_display+1
  3683  000B82  D6EB               	goto	l7107
  3684  000B84                     l7259:
  3685                           
  3686                           ;main.c: 765: else if(state==E_SET_ADV_VLO)
  3687  000B84  503A               	movf	_state,w,c
  3688  000B86  0A17               	xorlw	23
  3689  000B88  E129               	bnz	l7283
  3690                           
  3691                           ;main.c: 766: {
  3692                           ;main.c: 767: if((timerMem[TMR_SHOW_SETTING_OFF].flag?!(timerMem[TMR_SHOW_SETTING_OFF].f
      +                          lag=0):0)) {{ timerMem[TMR_SHOW_SETTING_ON].flag=0; timerMem[TMR_SHOW_SETTING_ON].presca
      +                          ler=timerDelayConstant[TMR_SHOW_SETTING_ON]; timerMem[TMR_SHOW_SETTING_ON].pause=0; };}
  3693  000B8A  0101               	movlb	1	; () banked
  3694  000B8C  B3AA               	btfsc	(_timerMem+31)& (0+255),1,b
  3695  000B8E  D002               	goto	l7265
  3696                           
  3697                           ; BSR set to: 1
  3698  000B90  6B7B               	clrf	_main$464& (0+255),b
  3699  000B92  D004               	goto	L38
  3700  000B94                     l7265:
  3701                           
  3702                           ; BSR set to: 1
  3703  000B94  D950               	call	PL6	;call to abstracted procedure
  3704  000B96  B4D8               	btfsc	status,2,c
  3705  000B98  0E01               	movlw	1
  3706  000B9A  6F7B               	movwf	_main$464& (0+255),b
  3707  000B9C                     L38:
  3708  000B9C  6B7C               	clrf	(_main$464+1)& (0+255),b
  3709                           
  3710                           ; BSR set to: 1
  3711  000B9E  517C               	movf	(_main$464+1)& (0+255),w,b
  3712  000BA0  117B               	iorwf	_main$464& (0+255),w,b
  3713  000BA2  E001               	bz	l456
  3714                           
  3715                           ; BSR set to: 1
  3716  000BA4  D92F               	call	PL2	;call to abstracted procedure
  3717  000BA6                     l456:
  3718                           
  3719                           ; BSR set to: 1
  3720                           ;main.c: 768: if((timerMem[TMR_SHOW_SETTING_ON].flag?!(timerMem[TMR_SHOW_SETTING_ON].fla
      +                          g=0):0)) {{ timerMem[TMR_SHOW_SETTING_OFF].flag=0; timerMem[TMR_SHOW_SETTING_OFF].presca
      +                          ler=timerDelayConstant[TMR_SHOW_SETTING_OFF]; timerMem[TMR_SHOW_SETTING_OFF].pause=0; };
  3721  000BA6  B3A6               	btfsc	(_timerMem+27)& (0+255),1,b
  3722  000BA8  D002               	goto	l7271
  3723                           
  3724                           ; BSR set to: 1
  3725  000BAA  6B7D               	clrf	_main$465& (0+255),b
  3726  000BAC  D004               	goto	L39
  3727  000BAE                     l7271:
  3728                           
  3729                           ; BSR set to: 1
  3730  000BAE  D93C               	call	PL5	;call to abstracted procedure
  3731  000BB0  B4D8               	btfsc	status,2,c
  3732  000BB2  0E01               	movlw	1
  3733  000BB4  6F7D               	movwf	_main$465& (0+255),b
  3734  000BB6                     L39:
  3735  000BB6  6B7E               	clrf	(_main$465+1)& (0+255),b
  3736                           
  3737                           ; BSR set to: 1
  3738  000BB8  517E               	movf	(_main$465+1)& (0+255),w,b
  3739  000BBA  117D               	iorwf	_main$465& (0+255),w,b
  3740  000BBC  E001               	bz	l461
  3741                           
  3742                           ; BSR set to: 1
  3743  000BBE  D92B               	call	PL4	;call to abstracted procedure
  3744  000BC0                     l461:
  3745                           
  3746                           ; BSR set to: 1
  3747                           ;main.c: 770: if((!timerMem[TMR_SHOW_SETTING_ON].pause && timerMem[TMR_SHOW_SETTING_ON].
      +                          prescaler!=0))
  3748  000BC0  B5A6               	btfsc	(_timerMem+27)& (0+255),2,b
  3749  000BC2  D666               	goto	l7055
  3750                           
  3751                           ; BSR set to: 1
  3752  000BC4  EE21  F0A3         	lfsr	2,_timerMem+24
  3753  000BC8  50DE               	movf	postinc2,w,c
  3754  000BCA  10DE               	iorwf	postinc2,w,c
  3755  000BCC  10DD               	iorwf	postdec2,w,c
  3756  000BCE  E101 D65F          	bz	l7055
  3757                           
  3758                           ; BSR set to: 1
  3759                           ;main.c: 771: {
  3760                           ;main.c: 772: display=vLoMem;
  3761  000BD2  C030  F0B5         	movff	_vLoMem,_display
  3762  000BD6  C031  F0B6         	movff	_vLoMem+1,_display+1
  3763  000BDA  D6BF               	goto	l7107
  3764  000BDC                     l7283:
  3765                           
  3766                           ;main.c: 778: else if(state==E_SET_ADV_VUP)
  3767  000BDC  503A               	movf	_state,w,c
  3768  000BDE  0A19               	xorlw	25
  3769  000BE0  E129               	bnz	l7307
  3770                           
  3771                           ;main.c: 779: {
  3772                           ;main.c: 780: if((timerMem[TMR_SHOW_SETTING_OFF].flag?!(timerMem[TMR_SHOW_SETTING_OFF].f
      +                          lag=0):0)) {{ timerMem[TMR_SHOW_SETTING_ON].flag=0; timerMem[TMR_SHOW_SETTING_ON].presca
      +                          ler=timerDelayConstant[TMR_SHOW_SETTING_ON]; timerMem[TMR_SHOW_SETTING_ON].pause=0; };}
  3773  000BE2  0101               	movlb	1	; () banked
  3774  000BE4  B3AA               	btfsc	(_timerMem+31)& (0+255),1,b
  3775  000BE6  D002               	goto	l7289
  3776                           
  3777                           ; BSR set to: 1
  3778  000BE8  6B7F               	clrf	_main$466& (0+255),b
  3779  000BEA  D004               	goto	L40
  3780  000BEC                     l7289:
  3781                           
  3782                           ; BSR set to: 1
  3783  000BEC  D924               	call	PL6	;call to abstracted procedure
  3784  000BEE  B4D8               	btfsc	status,2,c
  3785  000BF0  0E01               	movlw	1
  3786  000BF2  6F7F               	movwf	_main$466& (0+255),b
  3787  000BF4                     L40:
  3788  000BF4  6B80               	clrf	(_main$466+1)& (0+255),b
  3789                           
  3790                           ; BSR set to: 1
  3791  000BF6  5180               	movf	(_main$466+1)& (0+255),w,b
  3792  000BF8  117F               	iorwf	_main$466& (0+255),w,b
  3793  000BFA  E001               	bz	l470
  3794                           
  3795                           ; BSR set to: 1
  3796  000BFC  D903               	call	PL2	;call to abstracted procedure
  3797  000BFE                     l470:
  3798                           
  3799                           ; BSR set to: 1
  3800                           ;main.c: 781: if((timerMem[TMR_SHOW_SETTING_ON].flag?!(timerMem[TMR_SHOW_SETTING_ON].fla
      +                          g=0):0)) {{ timerMem[TMR_SHOW_SETTING_OFF].flag=0; timerMem[TMR_SHOW_SETTING_OFF].presca
      +                          ler=timerDelayConstant[TMR_SHOW_SETTING_OFF]; timerMem[TMR_SHOW_SETTING_OFF].pause=0; };
  3801  000BFE  B3A6               	btfsc	(_timerMem+27)& (0+255),1,b
  3802  000C00  D002               	goto	l7295
  3803                           
  3804                           ; BSR set to: 1
  3805  000C02  6B81               	clrf	_main$467& (0+255),b
  3806  000C04  D004               	goto	L41
  3807  000C06                     l7295:
  3808                           
  3809                           ; BSR set to: 1
  3810  000C06  D910               	call	PL5	;call to abstracted procedure
  3811  000C08  B4D8               	btfsc	status,2,c
  3812  000C0A  0E01               	movlw	1
  3813  000C0C  6F81               	movwf	_main$467& (0+255),b
  3814  000C0E                     L41:
  3815  000C0E  6B82               	clrf	(_main$467+1)& (0+255),b
  3816                           
  3817                           ; BSR set to: 1
  3818  000C10  5182               	movf	(_main$467+1)& (0+255),w,b
  3819  000C12  1181               	iorwf	_main$467& (0+255),w,b
  3820  000C14  E001               	bz	l475
  3821                           
  3822                           ; BSR set to: 1
  3823  000C16  D8FF               	call	PL4	;call to abstracted procedure
  3824  000C18                     l475:
  3825                           
  3826                           ; BSR set to: 1
  3827                           ;main.c: 783: if((!timerMem[TMR_SHOW_SETTING_ON].pause && timerMem[TMR_SHOW_SETTING_ON].
      +                          prescaler!=0))
  3828  000C18  B5A6               	btfsc	(_timerMem+27)& (0+255),2,b
  3829  000C1A  D63A               	goto	l7055
  3830                           
  3831                           ; BSR set to: 1
  3832  000C1C  EE21  F0A3         	lfsr	2,_timerMem+24
  3833  000C20  50DE               	movf	postinc2,w,c
  3834  000C22  10DE               	iorwf	postinc2,w,c
  3835  000C24  10DD               	iorwf	postdec2,w,c
  3836  000C26  E101 D633          	bz	l7055
  3837                           
  3838                           ; BSR set to: 1
  3839                           ;main.c: 784: {
  3840                           ;main.c: 785: display=vUpMem;
  3841  000C2A  C032  F0B5         	movff	_vUpMem,_display
  3842  000C2E  C033  F0B6         	movff	_vUpMem+1,_display+1
  3843  000C32  D693               	goto	l7107
  3844  000C34                     l7307:
  3845                           
  3846                           ;main.c: 790: }
  3847                           ;main.c: 793: if((pulsPinBuffer.flag && pulsPinBuffer.pulsId==UP_FP && pulsPinBuffer.fp=
      +                          =1 ?!(pulsPinBuffer.flag=0):0))
  3848  000C34  0100               	movlb	0	; () banked
  3849  000C36  ABBC               	btfss	_pulsPinBuffer& (0+255),5,b
  3850  000C38  D006               	goto	l488
  3851                           
  3852                           ; BSR set to: 0
  3853  000C3A  51BC               	movf	_pulsPinBuffer& (0+255),w,b
  3854  000C3C  0B1F               	andlw	31
  3855  000C3E  0A02               	xorlw	2
  3856  000C40  E102               	bnz	l488
  3857                           
  3858                           ; BSR set to: 0
  3859  000C42  BDBC               	btfsc	_pulsPinBuffer& (0+255),6,b
  3860  000C44  D003               	goto	l7313
  3861  000C46                     l488:
  3862                           
  3863                           ; BSR set to: 0
  3864  000C46  0101               	movlb	1	; () banked
  3865  000C48  6B83               	clrf	_main$468& (0+255),b
  3866  000C4A  D002               	goto	L42
  3867  000C4C                     l7313:
  3868                           
  3869                           ; BSR set to: 0
  3870  000C4C  D911               	call	PL11	;call to abstracted procedure
  3871  000C4E  6F83               	movwf	_main$468& (0+255),b
  3872  000C50                     L42:
  3873  000C50  6B84               	clrf	(_main$468+1)& (0+255),b
  3874                           
  3875                           ; BSR set to: 1
  3876  000C52  5184               	movf	(_main$468+1)& (0+255),w,b
  3877  000C54  1183               	iorwf	_main$468& (0+255),w,b
  3878  000C56  E01B               	bz	l7359
  3879                           
  3880                           ; BSR set to: 1
  3881                           ;main.c: 794: {
  3882                           ;main.c: 795: if(ignoreNextFp) ignoreNextFp=0;
  3883  000C58  0100               	movlb	0	; () banked
  3884  000C5A  51BB               	movf	_ignoreNextFp& (0+255),w,b
  3885  000C5C  E002               	bz	l489
  3886                           
  3887                           ; BSR set to: 0
  3888  000C5E  6BBB               	clrf	_ignoreNextFp& (0+255),b
  3889  000C60  D016               	goto	l7359
  3890  000C62                     l489:
  3891                           
  3892                           ; BSR set to: 0
  3893                           ;main.c: 796: else
  3894                           ;main.c: 797: {
  3895                           ;main.c: 798: { timerMem[TMR_LONG_PULS_UP].prescaler=0; timerMem[TMR_LONG_PULS_UP].pause
      +                          =1; };
  3896  000C62  0101               	movlb	1	; () banked
  3897  000C64  6B8B               	clrf	_timerMem& (0+255),b
  3898  000C66  6B8C               	clrf	(_timerMem+1)& (0+255),b
  3899  000C68  6B8D               	clrf	(_timerMem+2)& (0+255),b
  3900  000C6A  858E               	bsf	(_timerMem+3)& (0+255),2,b
  3901                           
  3902                           ; BSR set to: 1
  3903                           ;main.c: 801: if(state>=E_IDLE && state<E_MENU_FACTORY_CAL)
  3904  000C6C  503A               	movf	_state,w,c
  3905  000C6E  E007               	bz	l7339
  3906                           
  3907                           ; BSR set to: 1
  3908  000C70  0E07               	movlw	7
  3909  000C72  603A               	cpfslt	_state,c
  3910  000C74  D004               	goto	l7339
  3911                           
  3912                           ; BSR set to: 1
  3913                           ;main.c: 802: {
  3914                           ;main.c: 803: state++;
  3915  000C76  2A3A               	incf	_state,f,c
  3916  000C78                     l7325:
  3917                           
  3918                           ; BSR set to: 1
  3919                           ;main.c: 804: PORTCbits.RC6=1;
  3920                           
  3921                           ; BSR set to: 1
  3922                           ;main.c: 805: { timerMem[TMR_SHOW_MENU].flag=0; timerMem[TMR_SHOW_MENU].prescaler=timerD
      +                          elayConstant[TMR_SHOW_MENU]; timerMem[TMR_SHOW_MENU].pause=0; };
  3923                           
  3924                           ; BSR set to: 1
  3925                           
  3926                           ; BSR set to: 1
  3927  000C78  D910               	call	PL19	;call to abstracted procedure
  3928                           
  3929                           ; BSR set to: 1
  3930                           ;main.c: 806: { timerMem[TMR_BEEP].flag=0; timerMem[TMR_BEEP].prescaler=timerDelayConsta
      +                          nt[TMR_BEEP]; timerMem[TMR_BEEP].pause=0; };
  3931                           
  3932                           ; BSR set to: 1
  3933                           
  3934                           ; BSR set to: 1
  3935  000C7A  D906               	call	PL17	;call to abstracted procedure
  3936                           
  3937                           ;main.c: 807: }
  3938  000C7C  D008               	goto	l7359
  3939  000C7E                     l7339:
  3940                           
  3941                           ; BSR set to: 1
  3942                           ;main.c: 808: else if(state==E_MENU_FACTORY_CAL)
  3943  000C7E  503A               	movf	_state,w,c
  3944  000C80  0A07               	xorlw	7
  3945  000C82  E103               	bnz	l7357
  3946                           
  3947                           ; BSR set to: 1
  3948                           ;main.c: 809: {
  3949                           ;main.c: 810: state=E_MENU_BRILLO;
  3950  000C84  0E02               	movlw	2
  3951  000C86  6E3A               	movwf	_state,c
  3952  000C88  D7F7               	goto	l7325
  3953  000C8A                     l7357:
  3954                           
  3955                           ; BSR set to: 1
  3956                           ;main.c: 815: else incVar();
  3957  000C8A  EC63  F007         	call	_incVar	;wreg free
  3958  000C8E                     l7359:
  3959                           
  3960                           ;main.c: 816: }
  3961                           ;main.c: 817: }
  3962                           ;main.c: 820: if((pulsPinBuffer.flag && pulsPinBuffer.pulsId==DWN_FP && pulsPinBuffer.fp
      +                          ==1 ?!(pulsPinBuffer.flag=0):0))
  3963  000C8E  0100               	movlb	0	; () banked
  3964  000C90  ABBC               	btfss	_pulsPinBuffer& (0+255),5,b
  3965  000C92  D006               	goto	l501
  3966                           
  3967                           ; BSR set to: 0
  3968  000C94  51BC               	movf	_pulsPinBuffer& (0+255),w,b
  3969  000C96  0B1F               	andlw	31
  3970  000C98  0A03               	xorlw	3
  3971  000C9A  E102               	bnz	l501
  3972                           
  3973                           ; BSR set to: 0
  3974  000C9C  BDBC               	btfsc	_pulsPinBuffer& (0+255),6,b
  3975  000C9E  D003               	goto	l7365
  3976  000CA0                     l501:
  3977                           
  3978                           ; BSR set to: 0
  3979  000CA0  0101               	movlb	1	; () banked
  3980  000CA2  6B85               	clrf	_main$469& (0+255),b
  3981  000CA4  D002               	goto	L43
  3982  000CA6                     l7365:
  3983                           
  3984                           ; BSR set to: 0
  3985  000CA6  D8E4               	call	PL11	;call to abstracted procedure
  3986  000CA8  6F85               	movwf	_main$469& (0+255),b
  3987  000CAA                     L43:
  3988  000CAA  6B86               	clrf	(_main$469+1)& (0+255),b
  3989                           
  3990                           ; BSR set to: 1
  3991  000CAC  5186               	movf	(_main$469+1)& (0+255),w,b
  3992  000CAE  1185               	iorwf	_main$469& (0+255),w,b
  3993  000CB0  E01B               	bz	l7411
  3994                           
  3995                           ; BSR set to: 1
  3996                           ;main.c: 821: {
  3997                           ;main.c: 822: if(ignoreNextFp) ignoreNextFp=0;
  3998  000CB2  0100               	movlb	0	; () banked
  3999  000CB4  51BB               	movf	_ignoreNextFp& (0+255),w,b
  4000  000CB6  E002               	bz	l502
  4001                           
  4002                           ; BSR set to: 0
  4003  000CB8  6BBB               	clrf	_ignoreNextFp& (0+255),b
  4004  000CBA  D016               	goto	l7411
  4005  000CBC                     l502:
  4006                           
  4007                           ; BSR set to: 0
  4008                           ;main.c: 823: else
  4009                           ;main.c: 824: {
  4010                           ;main.c: 825: { timerMem[TMR_LONG_PULS_DWN].prescaler=0; timerMem[TMR_LONG_PULS_DWN].pau
      +                          se=1; };
  4011  000CBC  0101               	movlb	1	; () banked
  4012  000CBE  6B8F               	clrf	(_timerMem+4)& (0+255),b
  4013  000CC0  6B90               	clrf	(_timerMem+5)& (0+255),b
  4014  000CC2  6B91               	clrf	(_timerMem+6)& (0+255),b
  4015  000CC4  8592               	bsf	(_timerMem+7)& (0+255),2,b
  4016                           
  4017                           ; BSR set to: 1
  4018                           ;main.c: 828: if(state>=E_IDLE && state<E_MENU_FACTORY_CAL)
  4019  000CC6  503A               	movf	_state,w,c
  4020  000CC8  E007               	bz	l7391
  4021                           
  4022                           ; BSR set to: 1
  4023  000CCA  0E07               	movlw	7
  4024  000CCC  603A               	cpfslt	_state,c
  4025  000CCE  D004               	goto	l7391
  4026                           
  4027                           ; BSR set to: 1
  4028                           ;main.c: 829: {
  4029                           ;main.c: 830: state++;
  4030  000CD0  2A3A               	incf	_state,f,c
  4031  000CD2                     l7377:
  4032                           
  4033                           ; BSR set to: 1
  4034                           ;main.c: 831: PORTCbits.RC6=1;
  4035                           
  4036                           ; BSR set to: 1
  4037                           ;main.c: 832: { timerMem[TMR_SHOW_MENU].flag=0; timerMem[TMR_SHOW_MENU].prescaler=timerD
      +                          elayConstant[TMR_SHOW_MENU]; timerMem[TMR_SHOW_MENU].pause=0; };
  4038                           
  4039                           ; BSR set to: 1
  4040                           
  4041                           ; BSR set to: 1
  4042  000CD2  D8E3               	call	PL19	;call to abstracted procedure
  4043                           
  4044                           ; BSR set to: 1
  4045                           ;main.c: 833: { timerMem[TMR_BEEP].flag=0; timerMem[TMR_BEEP].prescaler=timerDelayConsta
      +                          nt[TMR_BEEP]; timerMem[TMR_BEEP].pause=0; };
  4046                           
  4047                           ; BSR set to: 1
  4048                           
  4049                           ; BSR set to: 1
  4050  000CD4  D8D9               	call	PL17	;call to abstracted procedure
  4051                           
  4052                           ;main.c: 834: }
  4053  000CD6  D008               	goto	l7411
  4054  000CD8                     l7391:
  4055                           
  4056                           ; BSR set to: 1
  4057                           ;main.c: 835: else if(state==E_MENU_FACTORY_CAL)
  4058  000CD8  503A               	movf	_state,w,c
  4059  000CDA  0A07               	xorlw	7
  4060  000CDC  E103               	bnz	l7409
  4061                           
  4062                           ; BSR set to: 1
  4063                           ;main.c: 836: {
  4064                           ;main.c: 837: state=E_MENU_BRILLO;
  4065  000CDE  0E02               	movlw	2
  4066  000CE0  6E3A               	movwf	_state,c
  4067  000CE2  D7F7               	goto	l7377
  4068  000CE4                     l7409:
  4069                           
  4070                           ; BSR set to: 1
  4071                           ;main.c: 842: else decVar();
  4072  000CE4  ECA3  F008         	call	_decVar	;wreg free
  4073  000CE8                     l7411:
  4074                           
  4075                           ;main.c: 843: }
  4076                           ;main.c: 844: }
  4077                           ;main.c: 847: if((pulsPinBuffer.flag && pulsPinBuffer.pulsId==UP_FN && pulsPinBuffer.fp=
      +                          =0?!(pulsPinBuffer.flag=0):0))
  4078  000CE8  0100               	movlb	0	; () banked
  4079  000CEA  ABBC               	btfss	_pulsPinBuffer& (0+255),5,b
  4080  000CEC  D005               	goto	l514
  4081                           
  4082                           ; BSR set to: 0
  4083  000CEE  51BC               	movf	_pulsPinBuffer& (0+255),w,b
  4084  000CF0  0B1F               	andlw	31
  4085  000CF2  E102               	bnz	l514
  4086                           
  4087                           ; BSR set to: 0
  4088  000CF4  ADBC               	btfss	_pulsPinBuffer& (0+255),6,b
  4089  000CF6  D003               	goto	l7417
  4090  000CF8                     l514:
  4091                           
  4092                           ; BSR set to: 0
  4093  000CF8  0101               	movlb	1	; () banked
  4094  000CFA  6B87               	clrf	_main$470& (0+255),b
  4095  000CFC  D002               	goto	L44
  4096  000CFE                     l7417:
  4097                           
  4098                           ; BSR set to: 0
  4099  000CFE  D8B8               	call	PL11	;call to abstracted procedure
  4100  000D00  6F87               	movwf	_main$470& (0+255),b
  4101  000D02                     L44:
  4102  000D02  6B88               	clrf	(_main$470+1)& (0+255),b
  4103                           
  4104                           ; BSR set to: 1
  4105  000D04  5188               	movf	(_main$470+1)& (0+255),w,b
  4106  000D06  1187               	iorwf	_main$470& (0+255),w,b
  4107  000D08  E032               	bz	l508
  4108                           
  4109                           ; BSR set to: 1
  4110                           ;main.c: 848: {
  4111                           ;main.c: 849: if(state==E_MENU_BRILLO || state==E_MENU_ADV_MODE || state==E_MENU_LIMITS
  4112                           ;main.c: 850: || state==E_MENU_ESCALA || state==E_SET_ESCALA_ENT || state==E_SET_ESCALA_
      +                          DEC
  4113                           ;main.c: 851: || state==E_MENU_USER_CAL || state==E_MENU_FACTORY_CAL
  4114                           ;main.c: 852: || state==E_SET_ADV_XLO || state==E_SET_ADV_XUP
  4115                           ;main.c: 853: || state==E_SET_ADV_ELO || state==E_SET_ADV_EUP
  4116                           ;main.c: 854: || state==E_SET_ADV_VLO || state==E_SET_ADV_VUP)
  4117  000D0A  503A               	movf	_state,w,c
  4118  000D0C  0A02               	xorlw	2
  4119  000D0E  E027               	bz	l517
  4120                           
  4121                           ; BSR set to: 1
  4122  000D10  503A               	movf	_state,w,c
  4123  000D12  0A03               	xorlw	3
  4124  000D14  E024               	bz	l517
  4125                           
  4126                           ; BSR set to: 1
  4127  000D16  503A               	movf	_state,w,c
  4128  000D18  0A04               	xorlw	4
  4129  000D1A  E021               	bz	l517
  4130                           
  4131                           ; BSR set to: 1
  4132  000D1C  503A               	movf	_state,w,c
  4133  000D1E  0A05               	xorlw	5
  4134  000D20  E01E               	bz	l517
  4135                           
  4136                           ; BSR set to: 1
  4137  000D22  503A               	movf	_state,w,c
  4138  000D24  0A0A               	xorlw	10
  4139  000D26  E01B               	bz	l517
  4140                           
  4141                           ; BSR set to: 1
  4142  000D28  503A               	movf	_state,w,c
  4143  000D2A  0A0C               	xorlw	12
  4144  000D2C  E018               	bz	l517
  4145                           
  4146                           ; BSR set to: 1
  4147  000D2E  503A               	movf	_state,w,c
  4148  000D30  0A06               	xorlw	6
  4149  000D32  E015               	bz	l517
  4150                           
  4151                           ; BSR set to: 1
  4152  000D34  503A               	movf	_state,w,c
  4153  000D36  0A07               	xorlw	7
  4154  000D38  E012               	bz	l517
  4155                           
  4156                           ; BSR set to: 1
  4157  000D3A  503A               	movf	_state,w,c
  4158  000D3C  0A0F               	xorlw	15
  4159  000D3E  E00F               	bz	l517
  4160                           
  4161                           ; BSR set to: 1
  4162  000D40  503A               	movf	_state,w,c
  4163  000D42  0A11               	xorlw	17
  4164  000D44  E00C               	bz	l517
  4165                           
  4166                           ; BSR set to: 1
  4167  000D46  503A               	movf	_state,w,c
  4168  000D48  0A13               	xorlw	19
  4169  000D4A  E009               	bz	l517
  4170                           
  4171                           ; BSR set to: 1
  4172  000D4C  503A               	movf	_state,w,c
  4173  000D4E  0A15               	xorlw	21
  4174  000D50  E006               	bz	l517
  4175                           
  4176                           ; BSR set to: 1
  4177  000D52  503A               	movf	_state,w,c
  4178  000D54  0A17               	xorlw	23
  4179  000D56  E003               	bz	l517
  4180                           
  4181                           ; BSR set to: 1
  4182  000D58  503A               	movf	_state,w,c
  4183  000D5A  0A19               	xorlw	25
  4184  000D5C  E108               	bnz	l508
  4185  000D5E                     l517:
  4186                           
  4187                           ; BSR set to: 1
  4188                           ;main.c: 855: { timerMem[TMR_LONG_PULS_UP].flag=0; timerMem[TMR_LONG_PULS_UP].prescaler=
      +                          timerDelayConstant[TMR_LONG_PULS_UP]; timerMem[TMR_LONG_PULS_UP].pause=0; };
  4189  000D5E  938E               	bcf	(_timerMem+3)& (0+255),1,b
  4190  000D60  C100  F18B         	movff	_timerDelayConstant,_timerMem
  4191  000D64  C101  F18C         	movff	_timerDelayConstant+1,_timerMem+1
  4192  000D68  C102  F18D         	movff	_timerDelayConstant+2,_timerMem+2
  4193  000D6C  958E               	bcf	(_timerMem+3)& (0+255),2,b
  4194  000D6E                     l508:
  4195                           
  4196                           ; BSR set to: 1
  4197                           ;main.c: 856: }
  4198                           ;main.c: 859: if((pulsPinBuffer.flag && pulsPinBuffer.pulsId==DWN_FN && pulsPinBuffer.fp
      +                          ==0?!(pulsPinBuffer.flag=0):0))
  4199  000D6E  0100               	movlb	0	; () banked
  4200  000D70  ABBC               	btfss	_pulsPinBuffer& (0+255),5,b
  4201  000D72  D007               	goto	l524
  4202                           
  4203                           ; BSR set to: 0
  4204  000D74  51BC               	movf	_pulsPinBuffer& (0+255),w,b
  4205  000D76  0B1F               	andlw	31
  4206  000D78  6FAB               	movwf	??_main& (0+255),b
  4207  000D7A  05AB               	decf	??_main& (0+255),w,b
  4208  000D7C  E102               	bnz	l524
  4209                           
  4210                           ; BSR set to: 0
  4211  000D7E  ADBC               	btfss	_pulsPinBuffer& (0+255),6,b
  4212  000D80  D003               	goto	l7451
  4213  000D82                     l524:
  4214                           
  4215                           ; BSR set to: 0
  4216  000D82  0101               	movlb	1	; () banked
  4217  000D84  6B89               	clrf	_main$471& (0+255),b
  4218  000D86  D002               	goto	L45
  4219  000D88                     l7451:
  4220                           
  4221                           ; BSR set to: 0
  4222  000D88  D873               	call	PL11	;call to abstracted procedure
  4223  000D8A  6F89               	movwf	_main$471& (0+255),b
  4224  000D8C                     L45:
  4225  000D8C  6B8A               	clrf	(_main$471+1)& (0+255),b
  4226                           
  4227                           ; BSR set to: 1
  4228  000D8E  518A               	movf	(_main$471+1)& (0+255),w,b
  4229  000D90  1189               	iorwf	_main$471& (0+255),w,b
  4230  000D92  E102 EF0F  F001    	bz	l6709
  4231                           
  4232                           ; BSR set to: 1
  4233                           ;main.c: 860: {
  4234                           ;main.c: 861: if(state==E_MENU_BRILLO || state==E_MENU_ADV_MODE || state==E_MENU_LIMITS
  4235                           ;main.c: 862: || state==E_MENU_ESCALA || state==E_SET_ESCALA_ENT || state==E_SET_ESCALA_
      +                          DEC
  4236                           ;main.c: 863: || state==E_MENU_USER_CAL || state==E_MENU_FACTORY_CAL
  4237                           ;main.c: 864: || state==E_SET_ADV_XLO || state==E_SET_ADV_XUP
  4238                           ;main.c: 865: || state==E_SET_ADV_ELO || state==E_SET_ADV_EUP
  4239                           ;main.c: 866: || state==E_SET_ADV_VLO || state==E_SET_ADV_VUP)
  4240  000D98  503A               	movf	_state,w,c
  4241  000D9A  0A02               	xorlw	2
  4242  000D9C  E029               	bz	l527
  4243                           
  4244                           ; BSR set to: 1
  4245  000D9E  503A               	movf	_state,w,c
  4246  000DA0  0A03               	xorlw	3
  4247  000DA2  E026               	bz	l527
  4248                           
  4249                           ; BSR set to: 1
  4250  000DA4  503A               	movf	_state,w,c
  4251  000DA6  0A04               	xorlw	4
  4252  000DA8  E023               	bz	l527
  4253                           
  4254                           ; BSR set to: 1
  4255  000DAA  503A               	movf	_state,w,c
  4256  000DAC  0A05               	xorlw	5
  4257  000DAE  E020               	bz	l527
  4258                           
  4259                           ; BSR set to: 1
  4260  000DB0  503A               	movf	_state,w,c
  4261  000DB2  0A0A               	xorlw	10
  4262  000DB4  E01D               	bz	l527
  4263                           
  4264                           ; BSR set to: 1
  4265  000DB6  503A               	movf	_state,w,c
  4266  000DB8  0A0C               	xorlw	12
  4267  000DBA  E01A               	bz	l527
  4268                           
  4269                           ; BSR set to: 1
  4270  000DBC  503A               	movf	_state,w,c
  4271  000DBE  0A06               	xorlw	6
  4272  000DC0  E017               	bz	l527
  4273                           
  4274                           ; BSR set to: 1
  4275  000DC2  503A               	movf	_state,w,c
  4276  000DC4  0A07               	xorlw	7
  4277  000DC6  E014               	bz	l527
  4278                           
  4279                           ; BSR set to: 1
  4280  000DC8  503A               	movf	_state,w,c
  4281  000DCA  0A0F               	xorlw	15
  4282  000DCC  E011               	bz	l527
  4283                           
  4284                           ; BSR set to: 1
  4285  000DCE  503A               	movf	_state,w,c
  4286  000DD0  0A11               	xorlw	17
  4287  000DD2  E00E               	bz	l527
  4288                           
  4289                           ; BSR set to: 1
  4290  000DD4  503A               	movf	_state,w,c
  4291  000DD6  0A13               	xorlw	19
  4292  000DD8  E00B               	bz	l527
  4293                           
  4294                           ; BSR set to: 1
  4295  000DDA  503A               	movf	_state,w,c
  4296  000DDC  0A15               	xorlw	21
  4297  000DDE  E008               	bz	l527
  4298                           
  4299                           ; BSR set to: 1
  4300  000DE0  503A               	movf	_state,w,c
  4301  000DE2  0A17               	xorlw	23
  4302  000DE4  E005               	bz	l527
  4303                           
  4304                           ; BSR set to: 1
  4305  000DE6  503A               	movf	_state,w,c
  4306  000DE8  0A19               	xorlw	25
  4307  000DEA  E002 EF0F  F001    	bnz	l6709
  4308  000DF0                     l527:
  4309                           
  4310                           ; BSR set to: 1
  4311                           ;main.c: 867: { timerMem[TMR_LONG_PULS_DWN].flag=0; timerMem[TMR_LONG_PULS_DWN].prescale
      +                          r=timerDelayConstant[TMR_LONG_PULS_DWN]; timerMem[TMR_LONG_PULS_DWN].pause=0; };
  4312  000DF0  9392               	bcf	(_timerMem+7)& (0+255),1,b
  4313  000DF2  C103  F18F         	movff	_timerDelayConstant+3,_timerMem+4
  4314  000DF6  C104  F190         	movff	_timerDelayConstant+4,_timerMem+5
  4315  000DFA  C105  F191         	movff	_timerDelayConstant+5,_timerMem+6
  4316  000DFE  9592               	bcf	(_timerMem+7)& (0+255),2,b
  4317  000E00  EF0F  F001         	goto	l6709
  4318  000E04                     PL2:
  4319  000E04  93A6               	bcf	(_timerMem+27)& (0+255),1,b
  4320  000E06  C112  F1A3         	movff	_timerDelayConstant+18,_timerMem+24
  4321  000E0A  C113  F1A4         	movff	_timerDelayConstant+19,_timerMem+25
  4322  000E0E  C114  F1A5         	movff	_timerDelayConstant+20,_timerMem+26
  4323  000E12  95A6               	bcf	(_timerMem+27)& (0+255),2,b
  4324  000E14  0012               	return	
  4325  000E16                     PL4:
  4326  000E16  93AA               	bcf	(_timerMem+31)& (0+255),1,b
  4327  000E18  C115  F1A7         	movff	_timerDelayConstant+21,_timerMem+28
  4328  000E1C  C116  F1A8         	movff	_timerDelayConstant+22,_timerMem+29
  4329  000E20  C117  F1A9         	movff	_timerDelayConstant+23,_timerMem+30
  4330  000E24  95AA               	bcf	(_timerMem+31)& (0+255),2,b
  4331  000E26  0012               	return	
  4332  000E28                     PL5:
  4333  000E28  51A6               	movf	(_timerMem+27)& (0+255),w,b
  4334  000E2A  0BFD               	andlw	-3
  4335  000E2C  6FA6               	movwf	(_timerMem+27)& (0+255),b
  4336  000E2E  0101               	movlb	1	; () banked
  4337  000E30  31A6               	rrcf	(_timerMem+27)& (0+255),w,b
  4338  000E32  0B01               	andlw	1
  4339  000E34  0C00               	retlw	0
  4340  000E36                     PL6:
  4341  000E36  51AA               	movf	(_timerMem+31)& (0+255),w,b
  4342  000E38  0BFD               	andlw	-3
  4343  000E3A  6FAA               	movwf	(_timerMem+31)& (0+255),b
  4344  000E3C  0101               	movlb	1	; () banked
  4345  000E3E  31AA               	rrcf	(_timerMem+31)& (0+255),w,b
  4346  000E40  0B01               	andlw	1
  4347  000E42  0C00               	retlw	0
  4348  000E44                     PL9:
  4349  000E44  6B97               	clrf	(_timerMem+12)& (0+255),b
  4350  000E46  6B98               	clrf	(_timerMem+13)& (0+255),b
  4351  000E48  6B99               	clrf	(_timerMem+14)& (0+255),b
  4352  000E4A  859A               	bsf	(_timerMem+15)& (0+255),2,b
  4353  000E4C  8C82               	bsf	3970,6,c	;volatile
  4354  000E4E  9396               	bcf	(_timerMem+11)& (0+255),1,b
  4355  000E50  C106  F193         	movff	_timerDelayConstant+6,_timerMem+8
  4356  000E54  C107  F194         	movff	_timerDelayConstant+7,_timerMem+9
  4357  000E58  C108  F195         	movff	_timerDelayConstant+8,_timerMem+10
  4358  000E5C  9596               	bcf	(_timerMem+11)& (0+255),2,b
  4359  000E5E  93A2               	bcf	(_timerMem+23)& (0+255),1,b
  4360  000E60  C10F  F19F         	movff	_timerDelayConstant+15,_timerMem+20
  4361  000E64  C110  F1A0         	movff	_timerDelayConstant+16,_timerMem+21
  4362  000E68  C111  F1A1         	movff	_timerDelayConstant+17,_timerMem+22
  4363  000E6C  95A2               	bcf	(_timerMem+23)& (0+255),2,b
  4364  000E6E  0012               	return	
  4365  000E70                     PL11:
  4366  000E70  51BC               	movf	_pulsPinBuffer& (0+255),w,b
  4367  000E72  0BDF               	andlw	-33
  4368  000E74  6FBC               	movwf	_pulsPinBuffer& (0+255),b
  4369  000E76  0100               	movlb	0	; () banked
  4370  000E78  39BC               	swapf	_pulsPinBuffer& (0+255),w,b
  4371  000E7A  32E8               	rrcf	wreg,f,c
  4372  000E7C  0B01               	andlw	1
  4373  000E7E  0E00               	movlw	0
  4374  000E80  B4D8               	btfsc	status,2,c
  4375  000E82  0E01               	movlw	1
  4376  000E84  0101               	movlb	1	; () banked
  4377  000E86  0012               	return	
  4378  000E88                     PL17:
  4379  000E88  9396               	bcf	(_timerMem+11)& (0+255),1,b
  4380  000E8A  C106  F193         	movff	_timerDelayConstant+6,_timerMem+8
  4381  000E8E  C107  F194         	movff	_timerDelayConstant+7,_timerMem+9
  4382  000E92  C108  F195         	movff	_timerDelayConstant+8,_timerMem+10
  4383  000E96  9596               	bcf	(_timerMem+11)& (0+255),2,b
  4384  000E98  0012               	return	
  4385  000E9A                     PL19:
  4386  000E9A  8C82               	bsf	3970,6,c	;volatile
  4387  000E9C  939A               	bcf	(_timerMem+15)& (0+255),1,b
  4388  000E9E  C109  F197         	movff	_timerDelayConstant+9,_timerMem+12
  4389  000EA2  C10A  F198         	movff	_timerDelayConstant+10,_timerMem+13
  4390  000EA6  C10B  F199         	movff	_timerDelayConstant+11,_timerMem+14
  4391  000EAA  959A               	bcf	(_timerMem+15)& (0+255),2,b
  4392  000EAC  0012               	return	
  4393  000EAE                     PL28:
  4394  000EAE  0E20               	movlw	32
  4395  000EB0  0100               	movlb	0	; () banked
  4396  000EB2  6FC9               	movwf	_muxBuffer& (0+255),b
  4397  000EB4  0E4C               	movlw	76
  4398  000EB6  6FCA               	movwf	(_muxBuffer+1)& (0+255),b
  4399  000EB8  0C6F               	retlw	111
  4400  000EBA                     PL29:
  4401  000EBA  0E20               	movlw	32
  4402  000EBC  0100               	movlb	0	; () banked
  4403  000EBE  6FC9               	movwf	_muxBuffer& (0+255),b
  4404  000EC0  0E48               	movlw	72
  4405  000EC2  6FCA               	movwf	(_muxBuffer+1)& (0+255),b
  4406  000EC4  0C69               	retlw	105
  4407                           tblptru	equ	0xFF8
  4408                           tblptrh	equ	0xFF7
  4409                           tblptrl	equ	0xFF6
  4410                           tablat	equ	0xFF5
  4411                           prodl	equ	0xFF3
  4412                           intcon	equ	0xFF2
  4413                           intcon2	equ	0xFF1
  4414                           postinc0	equ	0xFEE
  4415                           wreg	equ	0xFE8
  4416                           indf1	equ	0xFE7
  4417                           postinc1	equ	0xFE6
  4418                           postdec1	equ	0xFE5
  4419                           fsr1h	equ	0xFE2
  4420                           fsr1l	equ	0xFE1
  4421                           indf2	equ	0xFDF
  4422                           postinc2	equ	0xFDE
  4423                           postdec2	equ	0xFDD
  4424                           plusw2	equ	0xFDB
  4425                           fsr2h	equ	0xFDA
  4426                           fsr2l	equ	0xFD9
  4427                           status	equ	0xFD8
  4428                           
  4429 ;; *************** function _enterMenu *****************
  4430 ;; Defined at:
  4431 ;;		line 89 in file "C:\fgr\16gb\0000 interior\deVolt\sw\main.c"
  4432 ;; Parameters:    Size  Location     Type
  4433 ;;		None
  4434 ;; Auto vars:     Size  Location     Type
  4435 ;;		None
  4436 ;; Return value:  Size  Location     Type
  4437 ;;		None               void
  4438 ;; Registers used:
  4439 ;;		wreg, status,2, status,0
  4440 ;; Tracked objects:
  4441 ;;		On entry : F/1
  4442 ;;		On exit  : F/1
  4443 ;;		Unchanged: FFFFFFF0/0
  4444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4445 ;;      Params:         0       0       0       0       0       0       0       0       0
  4446 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4447 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4448 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4449 ;;Total ram usage:        0 bytes
  4450 ;; Hardware stack levels used:    1
  4451 ;; Hardware stack levels required when called:    6
  4452 ;; This function calls:
  4453 ;;		Nothing
  4454 ;; This function is called by:
  4455 ;;		_main
  4456 ;; This function uses a non-reentrant model
  4457 ;;
  4458                           
  4459                           	psect	text1
  4460  0023F2                     __ptext1:
  4461                           	opt stack 0
  4462  0023F2                     __end_of_main:
  4463                           	opt stack 0
  4464  0023F2                     _enterMenu:
  4465                           	opt stack 24
  4466                           
  4467                           ; BSR set to: 1
  4468                           ;main.c: 90: if(state==E_MENU_BRILLO) state=E_SET_BRILLO;
  4469                           
  4470                           ; BSR set to: 1
  4471  0023F2  503A               	movf	_state,w,c
  4472  0023F4  0A02               	xorlw	2
  4473  0023F6  E103               	bnz	l6245
  4474                           
  4475                           ; BSR set to: 1
  4476  0023F8  0E08               	movlw	8
  4477  0023FA  6E3A               	movwf	_state,c
  4478  0023FC  0C08               	retlw	8
  4479  0023FE                     l6245:
  4480                           
  4481                           ; BSR set to: 1
  4482                           ;main.c: 91: else if(state==E_MENU_ADV_MODE) state=E_SET_ADV_MODE;
  4483  0023FE  503A               	movf	_state,w,c
  4484  002400  0A03               	xorlw	3
  4485  002402  E103               	bnz	l6249
  4486                           
  4487                           ; BSR set to: 1
  4488  002404  0E0D               	movlw	13
  4489  002406  6E3A               	movwf	_state,c
  4490  002408  0C0D               	retlw	13
  4491  00240A                     l6249:
  4492                           
  4493                           ; BSR set to: 1
  4494                           ;main.c: 92: else if(state==E_MENU_LIMITS)
  4495  00240A  503A               	movf	_state,w,c
  4496  00240C  0A04               	xorlw	4
  4497  00240E  E105               	bnz	l6253
  4498                           
  4499                           ; BSR set to: 1
  4500                           ;main.c: 93: {
  4501                           ;main.c: 94: setInc=1;
  4502  002410  0E01               	movlw	1
  4503  002412  6E3C               	movwf	_setInc,c
  4504                           
  4505                           ;main.c: 95: state=E_SET_ADV_XLO_DESCRIPTION;
  4506  002414  0E0E               	movlw	14
  4507  002416  6E3A               	movwf	_state,c
  4508                           
  4509                           ;main.c: 96: }
  4510  002418  0C0E               	retlw	14
  4511  00241A                     l6253:
  4512                           
  4513                           ; BSR set to: 1
  4514                           ;main.c: 97: else if(state==E_MENU_ESCALA)
  4515  00241A  503A               	movf	_state,w,c
  4516  00241C  0A05               	xorlw	5
  4517  00241E  E105               	bnz	l6257
  4518                           
  4519                           ; BSR set to: 1
  4520                           ;main.c: 98: {
  4521                           ;main.c: 99: setInc=1;
  4522  002420  0E01               	movlw	1
  4523  002422  6E3C               	movwf	_setInc,c
  4524                           
  4525                           ;main.c: 100: state=E_SET_ESCALA_ENT_DESCRIPTION;
  4526  002424  0E09               	movlw	9
  4527  002426  6E3A               	movwf	_state,c
  4528                           
  4529                           ;main.c: 101: }
  4530  002428  0C09               	retlw	9
  4531  00242A                     l6257:
  4532                           
  4533                           ; BSR set to: 1
  4534                           ;main.c: 102: else if(state==E_MENU_USER_CAL) state=E_SET_CAL_DESCRIPTION;
  4535  00242A  503A               	movf	_state,w,c
  4536  00242C  0A06               	xorlw	6
  4537  00242E  E103               	bnz	l6261
  4538                           
  4539                           ; BSR set to: 1
  4540  002430  0E1A               	movlw	26
  4541  002432  6E3A               	movwf	_state,c
  4542  002434  0C1A               	retlw	26
  4543  002436                     l6261:
  4544                           
  4545                           ; BSR set to: 1
  4546                           ;main.c: 103: else if(state==E_MENU_FACTORY_CAL) state=E_SET_RST_DESCRIPTION;
  4547  002436  503A               	movf	_state,w,c
  4548  002438  0A07               	xorlw	7
  4549  00243A  A4D8               	btfss	status,2,c
  4550  00243C  0012               	return	
  4551                           
  4552                           ; BSR set to: 1
  4553  00243E  0E22               	movlw	34
  4554  002440  6E3A               	movwf	_state,c
  4555  002442  0C22               	retlw	34
  4556  002444                     __end_of_enterMenu:
  4557                           	opt stack 0
  4558                           tblptru	equ	0xFF8
  4559                           tblptrh	equ	0xFF7
  4560                           tblptrl	equ	0xFF6
  4561                           tablat	equ	0xFF5
  4562                           prodl	equ	0xFF3
  4563                           intcon	equ	0xFF2
  4564                           intcon2	equ	0xFF1
  4565                           postinc0	equ	0xFEE
  4566                           wreg	equ	0xFE8
  4567                           indf1	equ	0xFE7
  4568                           postinc1	equ	0xFE6
  4569                           postdec1	equ	0xFE5
  4570                           fsr1h	equ	0xFE2
  4571                           fsr1l	equ	0xFE1
  4572                           indf2	equ	0xFDF
  4573                           postinc2	equ	0xFDE
  4574                           postdec2	equ	0xFDD
  4575                           plusw2	equ	0xFDB
  4576                           fsr2h	equ	0xFDA
  4577                           fsr2l	equ	0xFD9
  4578                           status	equ	0xFD8
  4579                           
  4580 ;; *************** function _ee_read_byte *****************
  4581 ;; Defined at:
  4582 ;;		line 69 in file "C:\fgr\16gb\0000 interior\deVolt\sw\main.c"
  4583 ;; Parameters:    Size  Location     Type
  4584 ;;  address         1    wreg     unsigned char 
  4585 ;; Auto vars:     Size  Location     Type
  4586 ;;  address         1    0[BANK0 ] unsigned char 
  4587 ;; Return value:  Size  Location     Type
  4588 ;;                  1    wreg      unsigned char 
  4589 ;; Registers used:
  4590 ;;		wreg, status,2
  4591 ;; Tracked objects:
  4592 ;;		On entry : F/0
  4593 ;;		On exit  : F/0
  4594 ;;		Unchanged: FFFFFFF0/0
  4595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4596 ;;      Params:         0       0       0       0       0       0       0       0       0
  4597 ;;      Locals:         0       1       0       0       0       0       0       0       0
  4598 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4599 ;;      Totals:         0       1       0       0       0       0       0       0       0
  4600 ;;Total ram usage:        1 bytes
  4601 ;; Hardware stack levels used:    1
  4602 ;; Hardware stack levels required when called:    6
  4603 ;; This function calls:
  4604 ;;		Nothing
  4605 ;; This function is called by:
  4606 ;;		_main
  4607 ;; This function uses a non-reentrant model
  4608 ;;
  4609                           
  4610                           	psect	text2
  4611  00277A                     __ptext2:
  4612                           	opt stack 0
  4613  00277A                     _ee_read_byte:
  4614                           	opt stack 24
  4615                           
  4616                           ; BSR set to: 1
  4617                           ;ee_read_byte@address stored from wreg
  4618  00277A  CFE8 F060          	movff	wreg,ee_read_byte@address
  4619                           
  4620                           ; BSR set to: 0
  4621                           ;main.c: 70: EEADR = address;
  4622  00277E  C060  FFA9         	movff	ee_read_byte@address,4009	;volatile
  4623                           
  4624                           ; BSR set to: 0
  4625                           ;main.c: 71: EECON1bits.CFGS = 0;
  4626  002782  9CA6               	bcf	4006,6,c	;volatile
  4627                           
  4628                           ; BSR set to: 0
  4629                           ;main.c: 72: EECON1bits.EEPGD = 0;
  4630  002784  9EA6               	bcf	4006,7,c	;volatile
  4631                           
  4632                           ; BSR set to: 0
  4633                           ;main.c: 73: EECON1bits.RD = 1;
  4634  002786  80A6               	bsf	4006,0,c	;volatile
  4635                           
  4636                           ; BSR set to: 0
  4637                           ;main.c: 74: return EEDATA;
  4638  002788  50A8               	movf	4008,w,c	;volatile
  4639                           
  4640                           ; BSR set to: 0
  4641  00278A  0012               	return	
  4642  00278C                     __end_of_ee_read_byte:
  4643                           	opt stack 0
  4644                           tblptru	equ	0xFF8
  4645                           tblptrh	equ	0xFF7
  4646                           tblptrl	equ	0xFF6
  4647                           tablat	equ	0xFF5
  4648                           prodl	equ	0xFF3
  4649                           intcon	equ	0xFF2
  4650                           intcon2	equ	0xFF1
  4651                           postinc0	equ	0xFEE
  4652                           wreg	equ	0xFE8
  4653                           indf1	equ	0xFE7
  4654                           postinc1	equ	0xFE6
  4655                           postdec1	equ	0xFE5
  4656                           fsr1h	equ	0xFE2
  4657                           fsr1l	equ	0xFE1
  4658                           indf2	equ	0xFDF
  4659                           postinc2	equ	0xFDE
  4660                           postdec2	equ	0xFDD
  4661                           plusw2	equ	0xFDB
  4662                           fsr2h	equ	0xFDA
  4663                           fsr2l	equ	0xFD9
  4664                           status	equ	0xFD8
  4665                           
  4666 ;; *************** function _incVar *****************
  4667 ;; Defined at:
  4668 ;;		line 106 in file "C:\fgr\16gb\0000 interior\deVolt\sw\main.c"
  4669 ;; Parameters:    Size  Location     Type
  4670 ;;		None
  4671 ;; Auto vars:     Size  Location     Type
  4672 ;;		None
  4673 ;; Return value:  Size  Location     Type
  4674 ;;		None               void
  4675 ;; Registers used:
  4676 ;;		wreg, status,2, status,0, cstack
  4677 ;; Tracked objects:
  4678 ;;		On entry : F/1
  4679 ;;		On exit  : F/1
  4680 ;;		Unchanged: 0/0
  4681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4682 ;;      Params:         0       0       0       0       0       0       0       0       0
  4683 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4684 ;;      Temps:          0       2       0       0       0       0       0       0       0
  4685 ;;      Totals:         0       2       0       0       0       0       0       0       0
  4686 ;;Total ram usage:        2 bytes
  4687 ;; Hardware stack levels used:    1
  4688 ;; Hardware stack levels required when called:    8
  4689 ;; This function calls:
  4690 ;;		_ee_write_byte
  4691 ;;		___awtoft
  4692 ;;		___ftdiv
  4693 ;;		___ftadd
  4694 ;; This function is called by:
  4695 ;;		_main
  4696 ;; This function uses a non-reentrant model
  4697 ;;
  4698                           
  4699                           	psect	text3
  4700  000EC6                     __ptext3:
  4701                           	opt stack 0
  4702  000EC6                     _incVar:
  4703                           	opt stack 22
  4704                           
  4705                           ; BSR set to: 1
  4706                           ;main.c: 110: if(state==E_SET_BRILLO)
  4707                           
  4708                           ; BSR set to: 0
  4709  000EC6  503A               	movf	_state,w,c
  4710  000EC8  0A08               	xorlw	8
  4711  000ECA  E109               	bnz	l6273
  4712                           
  4713                           ; BSR set to: 1
  4714                           ;main.c: 111: {
  4715                           ;main.c: 112: if(brilloMem<4)
  4716  000ECC  0E04               	movlw	4
  4717  000ECE  6039               	cpfslt	_brilloMem,c
  4718  000ED0  D006               	goto	l6273
  4719                           
  4720                           ; BSR set to: 1
  4721                           ;main.c: 113: {
  4722                           ;main.c: 114: brilloMem++;
  4723  000ED2  2A39               	incf	_brilloMem,f,c
  4724                           
  4725                           ; BSR set to: 1
  4726                           ;main.c: 115: { ee_write_byte(0,brilloMem); };
  4727  000ED4  C039  F060         	movff	_brilloMem,?_ee_write_byte
  4728  000ED8  0E00               	movlw	0
  4729  000EDA  EC85  F013         	call	_ee_write_byte
  4730  000EDE                     l6273:
  4731                           
  4732                           ;main.c: 116: }
  4733                           ;main.c: 117: }
  4734                           ;main.c: 118: if(state==E_SET_ESCALA_ENT)
  4735  000EDE  503A               	movf	_state,w,c
  4736  000EE0  0A0A               	xorlw	10
  4737  000EE2  E138               	bnz	l6285
  4738                           
  4739                           ;main.c: 119: {
  4740                           ;main.c: 120: if((escEntMem+setInc)<=999)
  4741  000EE4  503C               	movf	_setInc,w,c
  4742  000EE6  242E               	addwf	_escEntMem,w,c
  4743  000EE8  0100               	movlb	0	; () banked
  4744  000EEA  6F8B               	movwf	??_incVar& (0+255),b
  4745  000EEC  0E00               	movlw	0
  4746  000EEE  202F               	addwfc	_escEntMem+1,w,c
  4747  000EF0  D925               	call	PL14	;call to abstracted procedure
  4748  000EF2  B4D8               	btfsc	status,2,c
  4749  000EF4  5D8B               	subwf	??_incVar& (0+255),w,b
  4750  000EF6  E22E               	bc	l6285
  4751                           
  4752                           ; BSR set to: 0
  4753                           ;main.c: 121: {
  4754                           ;main.c: 122: escEntMem=escEntMem+setInc;
  4755  000EF8  503C               	movf	_setInc,w,c
  4756  000EFA  262E               	addwf	_escEntMem,f,c
  4757  000EFC  0E00               	movlw	0
  4758  000EFE  222F               	addwfc	_escEntMem+1,f,c
  4759                           
  4760                           ; BSR set to: 0
  4761                           ;main.c: 123: { ee_write_byte(14,((unsigned char)(((escEntMem)>>8)&0xFF))); ee_write_byt
      +                          e(14+1,((unsigned char)((escEntMem)&0xFF))); };
  4762  000F00  502F               	movf	_escEntMem+1,w,c
  4763  000F02  6F60               	movwf	?_ee_write_byte& (0+255),b
  4764  000F04  0E0E               	movlw	14
  4765  000F06  EC85  F013         	call	_ee_write_byte
  4766  000F0A  C02E  F060         	movff	_escEntMem,?_ee_write_byte
  4767  000F0E  0E0F               	movlw	15
  4768  000F10  EC85  F013         	call	_ee_write_byte
  4769                           
  4770                           ;main.c: 124: escala=(float)escEntMem+(float)escDecMem/1000.0;
  4771  000F14  C02E  F068         	movff	_escEntMem,?___awtoft
  4772  000F18  C02F  F069         	movff	_escEntMem+1,?___awtoft+1
  4773  000F1C  EC52  F013         	call	___awtoft	;wreg free
  4774  000F20  ECD2  F009         	call	PL3	;call to abstracted procedure
  4775  000F24  EC52  F013         	call	___awtoft	;wreg free
  4776  000F28  C068  F06C         	movff	?___awtoft,?___ftdiv
  4777  000F2C  C069  F06D         	movff	?___awtoft+1,?___ftdiv+1
  4778  000F30  C06A  F06E         	movff	?___awtoft+2,?___ftdiv+2
  4779  000F34  EC36  F00E         	call	___ftdiv	;wreg free
  4780  000F38  C06C  F080         	movff	?___ftdiv,?___ftadd+3
  4781  000F3C  C06D  F081         	movff	?___ftdiv+1,?___ftadd+4
  4782  000F40  C06E  F082         	movff	?___ftdiv+2,?___ftadd+5
  4783  000F44  ECB4  F00B         	call	___ftadd	;wreg free
  4784  000F48  C07D  F0B2         	movff	?___ftadd,_escala
  4785  000F4C  C07E  F0B3         	movff	?___ftadd+1,_escala+1
  4786  000F50  C07F  F0B4         	movff	?___ftadd+2,_escala+2
  4787  000F54                     l6285:
  4788                           
  4789                           ;main.c: 125: }
  4790                           ;main.c: 126: }
  4791                           ;main.c: 127: if(state==E_SET_ESCALA_DEC)
  4792  000F54  503A               	movf	_state,w,c
  4793  000F56  0A0C               	xorlw	12
  4794  000F58  E138               	bnz	l6297
  4795                           
  4796                           ;main.c: 128: {
  4797                           ;main.c: 129: if((escDecMem+setInc)<=999)
  4798  000F5A  503C               	movf	_setInc,w,c
  4799  000F5C  242C               	addwf	_escDecMem,w,c
  4800  000F5E  0100               	movlb	0	; () banked
  4801  000F60  6F8B               	movwf	??_incVar& (0+255),b
  4802  000F62  0E00               	movlw	0
  4803  000F64  202D               	addwfc	_escDecMem+1,w,c
  4804  000F66  D8EA               	call	PL14	;call to abstracted procedure
  4805  000F68  B4D8               	btfsc	status,2,c
  4806  000F6A  5D8B               	subwf	??_incVar& (0+255),w,b
  4807  000F6C  E22E               	bc	l6297
  4808                           
  4809                           ; BSR set to: 0
  4810                           ;main.c: 130: {
  4811                           ;main.c: 131: escDecMem=escDecMem+setInc;
  4812  000F6E  503C               	movf	_setInc,w,c
  4813  000F70  262C               	addwf	_escDecMem,f,c
  4814  000F72  0E00               	movlw	0
  4815  000F74  222D               	addwfc	_escDecMem+1,f,c
  4816                           
  4817                           ; BSR set to: 0
  4818                           ;main.c: 132: { ee_write_byte(16,((unsigned char)(((escDecMem)>>8)&0xFF))); ee_write_byt
      +                          e(16+1,((unsigned char)((escDecMem)&0xFF))); };
  4819  000F76  502D               	movf	_escDecMem+1,w,c
  4820  000F78  6F60               	movwf	?_ee_write_byte& (0+255),b
  4821  000F7A  0E10               	movlw	16
  4822  000F7C  EC85  F013         	call	_ee_write_byte
  4823  000F80  C02C  F060         	movff	_escDecMem,?_ee_write_byte
  4824  000F84  0E11               	movlw	17
  4825  000F86  EC85  F013         	call	_ee_write_byte
  4826                           
  4827                           ;main.c: 133: escala=(float)escEntMem+(float)escDecMem/1000.0;
  4828  000F8A  C02E  F068         	movff	_escEntMem,?___awtoft
  4829  000F8E  C02F  F069         	movff	_escEntMem+1,?___awtoft+1
  4830  000F92  EC52  F013         	call	___awtoft	;wreg free
  4831  000F96  ECD2  F009         	call	PL3	;call to abstracted procedure
  4832  000F9A  EC52  F013         	call	___awtoft	;wreg free
  4833  000F9E  C068  F06C         	movff	?___awtoft,?___ftdiv
  4834  000FA2  C069  F06D         	movff	?___awtoft+1,?___ftdiv+1
  4835  000FA6  C06A  F06E         	movff	?___awtoft+2,?___ftdiv+2
  4836  000FAA  EC36  F00E         	call	___ftdiv	;wreg free
  4837  000FAE  C06C  F080         	movff	?___ftdiv,?___ftadd+3
  4838  000FB2  C06D  F081         	movff	?___ftdiv+1,?___ftadd+4
  4839  000FB6  C06E  F082         	movff	?___ftdiv+2,?___ftadd+5
  4840  000FBA  ECB4  F00B         	call	___ftadd	;wreg free
  4841  000FBE  C07D  F0B2         	movff	?___ftadd,_escala
  4842  000FC2  C07E  F0B3         	movff	?___ftadd+1,_escala+1
  4843  000FC6  C07F  F0B4         	movff	?___ftadd+2,_escala+2
  4844  000FCA                     l6297:
  4845                           
  4846                           ;main.c: 134: }
  4847                           ;main.c: 135: }
  4848                           ;main.c: 136: if(state==E_SET_ADV_MODE)
  4849  000FCA  503A               	movf	_state,w,c
  4850  000FCC  0A0D               	xorlw	13
  4851  000FCE  E109               	bnz	l6305
  4852                           
  4853                           ;main.c: 137: {
  4854                           ;main.c: 138: if(advModeMem<CANT_ADV_MODES-1)
  4855  000FD0  0E07               	movlw	7
  4856  000FD2  6038               	cpfslt	_advModeMem,c
  4857  000FD4  D006               	goto	l6305
  4858                           
  4859                           ;main.c: 139: {
  4860                           ;main.c: 140: advModeMem++;
  4861  000FD6  2A38               	incf	_advModeMem,f,c
  4862                           
  4863                           ;main.c: 141: { ee_write_byte(1,advModeMem); };
  4864  000FD8  C038  F060         	movff	_advModeMem,?_ee_write_byte
  4865  000FDC  0E01               	movlw	1
  4866  000FDE  EC85  F013         	call	_ee_write_byte
  4867  000FE2                     l6305:
  4868                           
  4869                           ;main.c: 142: }
  4870                           ;main.c: 143: }
  4871                           ;main.c: 144: if(state==E_SET_ADV_XLO)
  4872  000FE2  503A               	movf	_state,w,c
  4873  000FE4  0A0F               	xorlw	15
  4874  000FE6  E118               	bnz	l106
  4875                           
  4876                           ;main.c: 145: {
  4877                           ;main.c: 146: if((xLoMem+setInc)<=999)
  4878  000FE8  503C               	movf	_setInc,w,c
  4879  000FEA  2434               	addwf	_xLoMem,w,c
  4880  000FEC  0100               	movlb	0	; () banked
  4881  000FEE  6F8B               	movwf	??_incVar& (0+255),b
  4882  000FF0  0E00               	movlw	0
  4883  000FF2  2035               	addwfc	_xLoMem+1,w,c
  4884  000FF4  D8A3               	call	PL14	;call to abstracted procedure
  4885  000FF6  B4D8               	btfsc	status,2,c
  4886  000FF8  5D8B               	subwf	??_incVar& (0+255),w,b
  4887  000FFA  E20E               	bc	l106
  4888                           
  4889                           ; BSR set to: 0
  4890                           ;main.c: 147: {
  4891                           ;main.c: 148: xLoMem=xLoMem+setInc;
  4892  000FFC  503C               	movf	_setInc,w,c
  4893  000FFE  2634               	addwf	_xLoMem,f,c
  4894  001000  0E00               	movlw	0
  4895  001002  2235               	addwfc	_xLoMem+1,f,c
  4896                           
  4897                           ; BSR set to: 0
  4898                           ;main.c: 149: { ee_write_byte(2,((unsigned char)(((xLoMem)>>8)&0xFF))); ee_write_byte(2+
      +                          1,((unsigned char)((xLoMem)&0xFF))); };
  4899  001004  5035               	movf	_xLoMem+1,w,c
  4900  001006  6F60               	movwf	?_ee_write_byte& (0+255),b
  4901  001008  0E02               	movlw	2
  4902  00100A  EC85  F013         	call	_ee_write_byte
  4903  00100E  C034  F060         	movff	_xLoMem,?_ee_write_byte
  4904  001012  0E03               	movlw	3
  4905  001014  EC85  F013         	call	_ee_write_byte
  4906  001018                     l106:
  4907                           
  4908                           ;main.c: 150: }
  4909                           ;main.c: 151: }
  4910                           ;main.c: 152: if(state==E_SET_ADV_XUP)
  4911  001018  503A               	movf	_state,w,c
  4912  00101A  0A11               	xorlw	17
  4913  00101C  E118               	bnz	l108
  4914                           
  4915                           ;main.c: 153: {
  4916                           ;main.c: 154: if((xUpMem+setInc)<=999)
  4917  00101E  503C               	movf	_setInc,w,c
  4918  001020  2436               	addwf	_xUpMem,w,c
  4919  001022  0100               	movlb	0	; () banked
  4920  001024  6F8B               	movwf	??_incVar& (0+255),b
  4921  001026  0E00               	movlw	0
  4922  001028  2037               	addwfc	_xUpMem+1,w,c
  4923  00102A  D888               	call	PL14	;call to abstracted procedure
  4924  00102C  B4D8               	btfsc	status,2,c
  4925  00102E  5D8B               	subwf	??_incVar& (0+255),w,b
  4926  001030  E20E               	bc	l108
  4927                           
  4928                           ; BSR set to: 0
  4929                           ;main.c: 155: {
  4930                           ;main.c: 156: xUpMem=xUpMem+setInc;
  4931  001032  503C               	movf	_setInc,w,c
  4932  001034  2636               	addwf	_xUpMem,f,c
  4933  001036  0E00               	movlw	0
  4934  001038  2237               	addwfc	_xUpMem+1,f,c
  4935                           
  4936                           ; BSR set to: 0
  4937                           ;main.c: 157: { ee_write_byte(4,((unsigned char)(((xUpMem)>>8)&0xFF))); ee_write_byte(4+
      +                          1,((unsigned char)((xUpMem)&0xFF))); };
  4938  00103A  5037               	movf	_xUpMem+1,w,c
  4939  00103C  6F60               	movwf	?_ee_write_byte& (0+255),b
  4940  00103E  0E04               	movlw	4
  4941  001040  EC85  F013         	call	_ee_write_byte
  4942  001044  C036  F060         	movff	_xUpMem,?_ee_write_byte
  4943  001048  0E05               	movlw	5
  4944  00104A  EC85  F013         	call	_ee_write_byte
  4945  00104E                     l108:
  4946                           
  4947                           ;main.c: 158: }
  4948                           ;main.c: 159: }
  4949                           ;main.c: 160: if(state==E_SET_ADV_ELO)
  4950  00104E  503A               	movf	_state,w,c
  4951  001050  0A13               	xorlw	19
  4952  001052  E118               	bnz	l110
  4953                           
  4954                           ;main.c: 161: {
  4955                           ;main.c: 162: if((eLoMem+setInc)<=999)
  4956  001054  503C               	movf	_setInc,w,c
  4957  001056  2428               	addwf	_eLoMem,w,c
  4958  001058  0100               	movlb	0	; () banked
  4959  00105A  6F8B               	movwf	??_incVar& (0+255),b
  4960  00105C  0E00               	movlw	0
  4961  00105E  2029               	addwfc	_eLoMem+1,w,c
  4962  001060  D86D               	call	PL14	;call to abstracted procedure
  4963  001062  B4D8               	btfsc	status,2,c
  4964  001064  5D8B               	subwf	??_incVar& (0+255),w,b
  4965  001066  E20E               	bc	l110
  4966                           
  4967                           ; BSR set to: 0
  4968                           ;main.c: 163: {
  4969                           ;main.c: 164: eLoMem=eLoMem+setInc;
  4970  001068  503C               	movf	_setInc,w,c
  4971  00106A  2628               	addwf	_eLoMem,f,c
  4972  00106C  0E00               	movlw	0
  4973  00106E  2229               	addwfc	_eLoMem+1,f,c
  4974                           
  4975                           ; BSR set to: 0
  4976                           ;main.c: 165: { ee_write_byte(6,((unsigned char)(((eLoMem)>>8)&0xFF))); ee_write_byte(6+
      +                          1,((unsigned char)((eLoMem)&0xFF))); };
  4977  001070  5029               	movf	_eLoMem+1,w,c
  4978  001072  6F60               	movwf	?_ee_write_byte& (0+255),b
  4979  001074  0E06               	movlw	6
  4980  001076  EC85  F013         	call	_ee_write_byte
  4981  00107A  C028  F060         	movff	_eLoMem,?_ee_write_byte
  4982  00107E  0E07               	movlw	7
  4983  001080  EC85  F013         	call	_ee_write_byte
  4984  001084                     l110:
  4985                           
  4986                           ;main.c: 166: }
  4987                           ;main.c: 167: }
  4988                           ;main.c: 168: if(state==E_SET_ADV_EUP)
  4989  001084  503A               	movf	_state,w,c
  4990  001086  0A15               	xorlw	21
  4991  001088  E118               	bnz	l112
  4992                           
  4993                           ;main.c: 169: {
  4994                           ;main.c: 170: if((eUpMem+setInc)<=999)
  4995  00108A  503C               	movf	_setInc,w,c
  4996  00108C  242A               	addwf	_eUpMem,w,c
  4997  00108E  0100               	movlb	0	; () banked
  4998  001090  6F8B               	movwf	??_incVar& (0+255),b
  4999  001092  0E00               	movlw	0
  5000  001094  202B               	addwfc	_eUpMem+1,w,c
  5001  001096  D852               	call	PL14	;call to abstracted procedure
  5002  001098  B4D8               	btfsc	status,2,c
  5003  00109A  5D8B               	subwf	??_incVar& (0+255),w,b
  5004  00109C  E20E               	bc	l112
  5005                           
  5006                           ; BSR set to: 0
  5007                           ;main.c: 171: {
  5008                           ;main.c: 172: eUpMem=eUpMem+setInc;
  5009  00109E  503C               	movf	_setInc,w,c
  5010  0010A0  262A               	addwf	_eUpMem,f,c
  5011  0010A2  0E00               	movlw	0
  5012  0010A4  222B               	addwfc	_eUpMem+1,f,c
  5013                           
  5014                           ; BSR set to: 0
  5015                           ;main.c: 173: { ee_write_byte(8,((unsigned char)(((eUpMem)>>8)&0xFF))); ee_write_byte(8+
      +                          1,((unsigned char)((eUpMem)&0xFF))); };
  5016  0010A6  502B               	movf	_eUpMem+1,w,c
  5017  0010A8  6F60               	movwf	?_ee_write_byte& (0+255),b
  5018  0010AA  0E08               	movlw	8
  5019  0010AC  EC85  F013         	call	_ee_write_byte
  5020  0010B0  C02A  F060         	movff	_eUpMem,?_ee_write_byte
  5021  0010B4  0E09               	movlw	9
  5022  0010B6  EC85  F013         	call	_ee_write_byte
  5023  0010BA                     l112:
  5024                           
  5025                           ;main.c: 174: }
  5026                           ;main.c: 175: }
  5027                           ;main.c: 176: if(state==E_SET_ADV_VLO)
  5028  0010BA  503A               	movf	_state,w,c
  5029  0010BC  0A17               	xorlw	23
  5030  0010BE  E118               	bnz	l114
  5031                           
  5032                           ;main.c: 177: {
  5033                           ;main.c: 178: if((vLoMem+setInc)<=999)
  5034  0010C0  503C               	movf	_setInc,w,c
  5035  0010C2  2430               	addwf	_vLoMem,w,c
  5036  0010C4  0100               	movlb	0	; () banked
  5037  0010C6  6F8B               	movwf	??_incVar& (0+255),b
  5038  0010C8  0E00               	movlw	0
  5039  0010CA  2031               	addwfc	_vLoMem+1,w,c
  5040  0010CC  D837               	call	PL14	;call to abstracted procedure
  5041  0010CE  B4D8               	btfsc	status,2,c
  5042  0010D0  5D8B               	subwf	??_incVar& (0+255),w,b
  5043  0010D2  E20E               	bc	l114
  5044                           
  5045                           ; BSR set to: 0
  5046                           ;main.c: 179: {
  5047                           ;main.c: 180: vLoMem=vLoMem+setInc;
  5048  0010D4  503C               	movf	_setInc,w,c
  5049  0010D6  2630               	addwf	_vLoMem,f,c
  5050  0010D8  0E00               	movlw	0
  5051  0010DA  2231               	addwfc	_vLoMem+1,f,c
  5052                           
  5053                           ; BSR set to: 0
  5054                           ;main.c: 181: { ee_write_byte(10,((unsigned char)(((vLoMem)>>8)&0xFF))); ee_write_byte(1
      +                          0+1,((unsigned char)((vLoMem)&0xFF))); };
  5055  0010DC  5031               	movf	_vLoMem+1,w,c
  5056  0010DE  6F60               	movwf	?_ee_write_byte& (0+255),b
  5057  0010E0  0E0A               	movlw	10
  5058  0010E2  EC85  F013         	call	_ee_write_byte
  5059  0010E6  C030  F060         	movff	_vLoMem,?_ee_write_byte
  5060  0010EA  0E0B               	movlw	11
  5061  0010EC  EC85  F013         	call	_ee_write_byte
  5062  0010F0                     l114:
  5063                           
  5064                           ;main.c: 182: }
  5065                           ;main.c: 183: }
  5066                           ;main.c: 184: if(state==E_SET_ADV_VUP)
  5067  0010F0  503A               	movf	_state,w,c
  5068  0010F2  0A19               	xorlw	25
  5069  0010F4  E118               	bnz	l6355
  5070                           
  5071                           ;main.c: 185: {
  5072                           ;main.c: 186: if((vUpMem+setInc)<=999)
  5073  0010F6  503C               	movf	_setInc,w,c
  5074  0010F8  2432               	addwf	_vUpMem,w,c
  5075  0010FA  0100               	movlb	0	; () banked
  5076  0010FC  6F8B               	movwf	??_incVar& (0+255),b
  5077  0010FE  0E00               	movlw	0
  5078  001100  2033               	addwfc	_vUpMem+1,w,c
  5079  001102  D81C               	call	PL14	;call to abstracted procedure
  5080  001104  B4D8               	btfsc	status,2,c
  5081  001106  5D8B               	subwf	??_incVar& (0+255),w,b
  5082  001108  E20E               	bc	l6355
  5083                           
  5084                           ; BSR set to: 0
  5085                           ;main.c: 187: {
  5086                           ;main.c: 188: vUpMem=vUpMem+setInc;
  5087  00110A  503C               	movf	_setInc,w,c
  5088  00110C  2632               	addwf	_vUpMem,f,c
  5089  00110E  0E00               	movlw	0
  5090  001110  2233               	addwfc	_vUpMem+1,f,c
  5091                           
  5092                           ; BSR set to: 0
  5093                           ;main.c: 189: { ee_write_byte(12,((unsigned char)(((vUpMem)>>8)&0xFF))); ee_write_byte(1
      +                          2+1,((unsigned char)((vUpMem)&0xFF))); };
  5094  001112  5033               	movf	_vUpMem+1,w,c
  5095  001114  6F60               	movwf	?_ee_write_byte& (0+255),b
  5096  001116  0E0C               	movlw	12
  5097  001118  EC85  F013         	call	_ee_write_byte
  5098  00111C  C032  F060         	movff	_vUpMem,?_ee_write_byte
  5099  001120  0E0D               	movlw	13
  5100  001122  EC85  F013         	call	_ee_write_byte
  5101  001126                     l6355:
  5102                           
  5103                           ;main.c: 190: }
  5104                           ;main.c: 191: }
  5105                           ;main.c: 193: { timerMem[TMR_SHOW_SETTING].flag=0; timerMem[TMR_SHOW_SETTING].prescaler=
      +                          timerDelayConstant[TMR_SHOW_SETTING]; timerMem[TMR_SHOW_SETTING].pause=0; };
  5106  001126  0101               	movlb	1	; () banked
  5107  001128  93A2               	bcf	(_timerMem+23)& (0+255),1,b
  5108                           
  5109                           ; BSR set to: 1
  5110  00112A  C10F  F19F         	movff	_timerDelayConstant+15,_timerMem+20
  5111  00112E  C110  F1A0         	movff	_timerDelayConstant+16,_timerMem+21
  5112  001132  C111  F1A1         	movff	_timerDelayConstant+17,_timerMem+22
  5113                           
  5114                           ; BSR set to: 1
  5115  001136  95A2               	bcf	(_timerMem+23)& (0+255),2,b
  5116                           
  5117                           ; BSR set to: 1
  5118                           ;main.c: 194: { timerMem[TMR_SHOW_SETTING_ON].flag=0; timerMem[TMR_SHOW_SETTING_ON].pres
      +                          caler=timerDelayConstant[TMR_SHOW_SETTING_ON]; timerMem[TMR_SHOW_SETTING_ON].pause=0; };
  5119                           
  5120                           ; BSR set to: 1
  5121                           
  5122                           ; BSR set to: 1
  5123  001138  EF02  F007         	goto	PL2	;call to abstracted procedure
  5124  00113C                     __end_of_incVar:
  5125                           	opt stack 0
  5126  00113C                     PL14:
  5127  00113C  6F8C               	movwf	(??_incVar+1)& (0+255),b
  5128  00113E  518C               	movf	(??_incVar+1)& (0+255),w,b
  5129  001140  0A80               	xorlw	128
  5130  001142  0F7D               	addlw	-131
  5131  001144  0CE8               	retlw	232
  5132                           tblptru	equ	0xFF8
  5133                           tblptrh	equ	0xFF7
  5134                           tblptrl	equ	0xFF6
  5135                           tablat	equ	0xFF5
  5136                           prodl	equ	0xFF3
  5137                           intcon	equ	0xFF2
  5138                           intcon2	equ	0xFF1
  5139                           postinc0	equ	0xFEE
  5140                           wreg	equ	0xFE8
  5141                           indf1	equ	0xFE7
  5142                           postinc1	equ	0xFE6
  5143                           postdec1	equ	0xFE5
  5144                           fsr1h	equ	0xFE2
  5145                           fsr1l	equ	0xFE1
  5146                           indf2	equ	0xFDF
  5147                           postinc2	equ	0xFDE
  5148                           postdec2	equ	0xFDD
  5149                           plusw2	equ	0xFDB
  5150                           fsr2h	equ	0xFDA
  5151                           fsr2l	equ	0xFD9
  5152                           status	equ	0xFD8
  5153                           
  5154 ;; *************** function _endTestDisplayActions *****************
  5155 ;; Defined at:
  5156 ;;		line 290 in file "C:\fgr\16gb\0000 interior\deVolt\sw\main.c"
  5157 ;; Parameters:    Size  Location     Type
  5158 ;;		None
  5159 ;; Auto vars:     Size  Location     Type
  5160 ;;		None
  5161 ;; Return value:  Size  Location     Type
  5162 ;;		None               void
  5163 ;; Registers used:
  5164 ;;		wreg, status,2
  5165 ;; Tracked objects:
  5166 ;;		On entry : F/1
  5167 ;;		On exit  : F/1
  5168 ;;		Unchanged: FFFFFFF0/0
  5169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5170 ;;      Params:         0       0       0       0       0       0       0       0       0
  5171 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5172 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5173 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5174 ;;Total ram usage:        0 bytes
  5175 ;; Hardware stack levels used:    1
  5176 ;; Hardware stack levels required when called:    6
  5177 ;; This function calls:
  5178 ;;		Nothing
  5179 ;; This function is called by:
  5180 ;;		_main
  5181 ;; This function uses a non-reentrant model
  5182 ;;
  5183                           
  5184                           	psect	text4
  5185  002736                     __ptext4:
  5186                           	opt stack 0
  5187  002736                     _endTestDisplayActions:
  5188                           	opt stack 24
  5189                           
  5190                           ; BSR set to: 1
  5191                           ;main.c: 291: state=E_IDLE;
  5192                           
  5193                           ; BSR set to: 1
  5194  002736  0E01               	movlw	1
  5195  002738  6E3A               	movwf	_state,c
  5196                           
  5197                           ; BSR set to: 1
  5198                           ;main.c: 293: PORTCbits.RC6=0;
  5199  00273A  9C82               	bcf	3970,6,c	;volatile
  5200                           
  5201                           ;main.c: 294: muxBuffer[0]='0';
  5202  00273C  0E30               	movlw	48
  5203  00273E  0100               	movlb	0	; () banked
  5204  002740  6FC9               	movwf	_muxBuffer& (0+255),b
  5205                           
  5206                           ;main.c: 295: muxBuffer[1]='0';
  5207  002742  6FCA               	movwf	(_muxBuffer+1)& (0+255),b
  5208                           
  5209                           ;main.c: 296: muxBuffer[2]='0';
  5210  002744  6FCB               	movwf	(_muxBuffer+2)& (0+255),b
  5211                           
  5212                           ;main.c: 297: muxBuffer[ADV]=' ';
  5213  002746  0E20               	movlw	32
  5214  002748  6FCC               	movwf	(_muxBuffer+3)& (0+255),b
  5215                           
  5216                           ; BSR set to: 0
  5217                           ;main.c: 298: { timerMem[TMR_ADCSAMPLE].flag=0; timerMem[TMR_ADCSAMPLE].prescaler=timerD
      +                          elayConstant[TMR_ADCSAMPLE]; timerMem[TMR_ADCSAMPLE].pause=0; timerMem[TMR_ADCSAMPLE].lo
      +                          op=1; };
  5218  00274A  0101               	movlb	1	; () banked
  5219  00274C  93BE               	bcf	(_timerMem+51)& (0+255),1,b
  5220                           
  5221                           ; BSR set to: 1
  5222  00274E  C124  F1BB         	movff	_timerDelayConstant+36,_timerMem+48
  5223  002752  C125  F1BC         	movff	_timerDelayConstant+37,_timerMem+49
  5224  002756  C126  F1BD         	movff	_timerDelayConstant+38,_timerMem+50
  5225                           
  5226                           ; BSR set to: 1
  5227  00275A  95BE               	bcf	(_timerMem+51)& (0+255),2,b
  5228                           
  5229                           ; BSR set to: 1
  5230  00275C  81BE               	bsf	(_timerMem+51)& (0+255),0,b
  5231                           
  5232                           ; BSR set to: 1
  5233  00275E  0C20               	retlw	32
  5234  002760                     __end_of_endTestDisplayActions:
  5235                           	opt stack 0
  5236                           tblptru	equ	0xFF8
  5237                           tblptrh	equ	0xFF7
  5238                           tblptrl	equ	0xFF6
  5239                           tablat	equ	0xFF5
  5240                           prodl	equ	0xFF3
  5241                           intcon	equ	0xFF2
  5242                           intcon2	equ	0xFF1
  5243                           postinc0	equ	0xFEE
  5244                           wreg	equ	0xFE8
  5245                           indf1	equ	0xFE7
  5246                           postinc1	equ	0xFE6
  5247                           postdec1	equ	0xFE5
  5248                           fsr1h	equ	0xFE2
  5249                           fsr1l	equ	0xFE1
  5250                           indf2	equ	0xFDF
  5251                           postinc2	equ	0xFDE
  5252                           postdec2	equ	0xFDD
  5253                           plusw2	equ	0xFDB
  5254                           fsr2h	equ	0xFDA
  5255                           fsr2l	equ	0xFD9
  5256                           status	equ	0xFD8
  5257                           
  5258 ;; *************** function _decVar *****************
  5259 ;; Defined at:
  5260 ;;		line 198 in file "C:\fgr\16gb\0000 interior\deVolt\sw\main.c"
  5261 ;; Parameters:    Size  Location     Type
  5262 ;;		None
  5263 ;; Auto vars:     Size  Location     Type
  5264 ;;		None
  5265 ;; Return value:  Size  Location     Type
  5266 ;;		None               void
  5267 ;; Registers used:
  5268 ;;		wreg, status,2, status,0, cstack
  5269 ;; Tracked objects:
  5270 ;;		On entry : F/1
  5271 ;;		On exit  : F/1
  5272 ;;		Unchanged: 0/0
  5273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5274 ;;      Params:         0       0       0       0       0       0       0       0       0
  5275 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5276 ;;      Temps:          0       2       0       0       0       0       0       0       0
  5277 ;;      Totals:         0       2       0       0       0       0       0       0       0
  5278 ;;Total ram usage:        2 bytes
  5279 ;; Hardware stack levels used:    1
  5280 ;; Hardware stack levels required when called:    8
  5281 ;; This function calls:
  5282 ;;		_ee_write_byte
  5283 ;;		___awtoft
  5284 ;;		___ftdiv
  5285 ;;		___ftadd
  5286 ;; This function is called by:
  5287 ;;		_main
  5288 ;; This function uses a non-reentrant model
  5289 ;;
  5290                           
  5291                           	psect	text5
  5292  001146                     __ptext5:
  5293                           	opt stack 0
  5294  001146                     _decVar:
  5295                           	opt stack 22
  5296                           
  5297                           ; BSR set to: 1
  5298                           ;main.c: 202: if(state==E_SET_BRILLO)
  5299                           
  5300                           ; BSR set to: 1
  5301  001146  503A               	movf	_state,w,c
  5302  001148  0A08               	xorlw	8
  5303  00114A  E108               	bnz	l6375
  5304                           
  5305                           ; BSR set to: 1
  5306                           ;main.c: 203: {
  5307                           ;main.c: 204: if(brilloMem>0)
  5308  00114C  5039               	movf	_brilloMem,w,c
  5309  00114E  E006               	bz	l6375
  5310                           
  5311                           ; BSR set to: 1
  5312                           ;main.c: 205: {
  5313                           ;main.c: 206: brilloMem--;
  5314  001150  0639               	decf	_brilloMem,f,c
  5315                           
  5316                           ; BSR set to: 1
  5317                           ;main.c: 207: { ee_write_byte(0,brilloMem); };
  5318  001152  C039  F060         	movff	_brilloMem,?_ee_write_byte
  5319  001156  0E00               	movlw	0
  5320  001158  EC85  F013         	call	_ee_write_byte
  5321  00115C                     l6375:
  5322                           
  5323                           ;main.c: 208: }
  5324                           ;main.c: 209: }
  5325                           ;main.c: 210: if(state==E_SET_ESCALA_ENT)
  5326  00115C  503A               	movf	_state,w,c
  5327  00115E  0A0A               	xorlw	10
  5328  001160  E136               	bnz	l6387
  5329                           
  5330                           ;main.c: 211: {
  5331                           ;main.c: 212: if((escEntMem-setInc)>=0)
  5332  001162  503C               	movf	_setInc,w,c
  5333  001164  5C2E               	subwf	_escEntMem,w,c
  5334  001166  0100               	movlb	0	; () banked
  5335  001168  6F8B               	movwf	??_decVar& (0+255),b
  5336  00116A  0E00               	movlw	0
  5337  00116C  582F               	subwfb	_escEntMem+1,w,c
  5338  00116E  6F8C               	movwf	(??_decVar+1)& (0+255),b
  5339  001170  BF8C               	btfsc	(??_decVar+1)& (0+255),7,b
  5340  001172  D02D               	goto	l6387
  5341                           
  5342                           ; BSR set to: 0
  5343                           ;main.c: 213: {
  5344                           ;main.c: 214: escEntMem=escEntMem-setInc;
  5345  001174  503C               	movf	_setInc,w,c
  5346  001176  5E2E               	subwf	_escEntMem,f,c
  5347  001178  0E00               	movlw	0
  5348  00117A  5A2F               	subwfb	_escEntMem+1,f,c
  5349                           
  5350                           ; BSR set to: 0
  5351                           ;main.c: 215: { ee_write_byte(14,((unsigned char)(((escEntMem)>>8)&0xFF))); ee_write_byt
      +                          e(14+1,((unsigned char)((escEntMem)&0xFF))); };
  5352  00117C  502F               	movf	_escEntMem+1,w,c
  5353  00117E  6F60               	movwf	?_ee_write_byte& (0+255),b
  5354  001180  0E0E               	movlw	14
  5355  001182  EC85  F013         	call	_ee_write_byte
  5356  001186  C02E  F060         	movff	_escEntMem,?_ee_write_byte
  5357  00118A  0E0F               	movlw	15
  5358  00118C  EC85  F013         	call	_ee_write_byte
  5359                           
  5360                           ;main.c: 216: escala=(float)escEntMem+(float)escDecMem/1000.0;
  5361  001190  C02E  F068         	movff	_escEntMem,?___awtoft
  5362  001194  C02F  F069         	movff	_escEntMem+1,?___awtoft+1
  5363  001198  EC52  F013         	call	___awtoft	;wreg free
  5364  00119C  D903               	call	PL3	;call to abstracted procedure
  5365  00119E  EC52  F013         	call	___awtoft	;wreg free
  5366  0011A2  C068  F06C         	movff	?___awtoft,?___ftdiv
  5367  0011A6  C069  F06D         	movff	?___awtoft+1,?___ftdiv+1
  5368  0011AA  C06A  F06E         	movff	?___awtoft+2,?___ftdiv+2
  5369  0011AE  EC36  F00E         	call	___ftdiv	;wreg free
  5370  0011B2  C06C  F080         	movff	?___ftdiv,?___ftadd+3
  5371  0011B6  C06D  F081         	movff	?___ftdiv+1,?___ftadd+4
  5372  0011BA  C06E  F082         	movff	?___ftdiv+2,?___ftadd+5
  5373  0011BE  ECB4  F00B         	call	___ftadd	;wreg free
  5374  0011C2  C07D  F0B2         	movff	?___ftadd,_escala
  5375  0011C6  C07E  F0B3         	movff	?___ftadd+1,_escala+1
  5376  0011CA  C07F  F0B4         	movff	?___ftadd+2,_escala+2
  5377  0011CE                     l6387:
  5378                           
  5379                           ;main.c: 217: }
  5380                           ;main.c: 218: }
  5381                           ;main.c: 219: if(state==E_SET_ESCALA_DEC)
  5382  0011CE  503A               	movf	_state,w,c
  5383  0011D0  0A0C               	xorlw	12
  5384  0011D2  E136               	bnz	l6399
  5385                           
  5386                           ;main.c: 220: {
  5387                           ;main.c: 221: if((escDecMem-setInc)>=0)
  5388  0011D4  503C               	movf	_setInc,w,c
  5389  0011D6  5C2C               	subwf	_escDecMem,w,c
  5390  0011D8  0100               	movlb	0	; () banked
  5391  0011DA  6F8B               	movwf	??_decVar& (0+255),b
  5392  0011DC  0E00               	movlw	0
  5393  0011DE  582D               	subwfb	_escDecMem+1,w,c
  5394  0011E0  6F8C               	movwf	(??_decVar+1)& (0+255),b
  5395  0011E2  BF8C               	btfsc	(??_decVar+1)& (0+255),7,b
  5396  0011E4  D02D               	goto	l6399
  5397                           
  5398                           ; BSR set to: 0
  5399                           ;main.c: 222: {
  5400                           ;main.c: 223: escDecMem=escDecMem-setInc;
  5401  0011E6  503C               	movf	_setInc,w,c
  5402  0011E8  5E2C               	subwf	_escDecMem,f,c
  5403  0011EA  0E00               	movlw	0
  5404  0011EC  5A2D               	subwfb	_escDecMem+1,f,c
  5405                           
  5406                           ; BSR set to: 0
  5407                           ;main.c: 224: { ee_write_byte(16,((unsigned char)(((escDecMem)>>8)&0xFF))); ee_write_byt
      +                          e(16+1,((unsigned char)((escDecMem)&0xFF))); };
  5408  0011EE  502D               	movf	_escDecMem+1,w,c
  5409  0011F0  6F60               	movwf	?_ee_write_byte& (0+255),b
  5410  0011F2  0E10               	movlw	16
  5411  0011F4  EC85  F013         	call	_ee_write_byte
  5412  0011F8  C02C  F060         	movff	_escDecMem,?_ee_write_byte
  5413  0011FC  0E11               	movlw	17
  5414  0011FE  EC85  F013         	call	_ee_write_byte
  5415                           
  5416                           ;main.c: 225: escala=(float)escEntMem+(float)escDecMem/1000.0;
  5417  001202  C02E  F068         	movff	_escEntMem,?___awtoft
  5418  001206  C02F  F069         	movff	_escEntMem+1,?___awtoft+1
  5419  00120A  EC52  F013         	call	___awtoft	;wreg free
  5420  00120E  D8CA               	call	PL3	;call to abstracted procedure
  5421  001210  EC52  F013         	call	___awtoft	;wreg free
  5422  001214  C068  F06C         	movff	?___awtoft,?___ftdiv
  5423  001218  C069  F06D         	movff	?___awtoft+1,?___ftdiv+1
  5424  00121C  C06A  F06E         	movff	?___awtoft+2,?___ftdiv+2
  5425  001220  EC36  F00E         	call	___ftdiv	;wreg free
  5426  001224  C06C  F080         	movff	?___ftdiv,?___ftadd+3
  5427  001228  C06D  F081         	movff	?___ftdiv+1,?___ftadd+4
  5428  00122C  C06E  F082         	movff	?___ftdiv+2,?___ftadd+5
  5429  001230  ECB4  F00B         	call	___ftadd	;wreg free
  5430  001234  C07D  F0B2         	movff	?___ftadd,_escala
  5431  001238  C07E  F0B3         	movff	?___ftadd+1,_escala+1
  5432  00123C  C07F  F0B4         	movff	?___ftadd+2,_escala+2
  5433  001240                     l6399:
  5434                           
  5435                           ;main.c: 226: }
  5436                           ;main.c: 227: }
  5437                           ;main.c: 228: if(state==E_SET_ADV_MODE)
  5438  001240  503A               	movf	_state,w,c
  5439  001242  0A0D               	xorlw	13
  5440  001244  E108               	bnz	l6407
  5441                           
  5442                           ;main.c: 229: {
  5443                           ;main.c: 230: if(advModeMem>0)
  5444  001246  5038               	movf	_advModeMem,w,c
  5445  001248  E006               	bz	l6407
  5446                           
  5447                           ;main.c: 231: {
  5448                           ;main.c: 232: advModeMem--;
  5449  00124A  0638               	decf	_advModeMem,f,c
  5450                           
  5451                           ;main.c: 233: { ee_write_byte(1,advModeMem); };
  5452  00124C  C038  F060         	movff	_advModeMem,?_ee_write_byte
  5453  001250  0E01               	movlw	1
  5454  001252  EC85  F013         	call	_ee_write_byte
  5455  001256                     l6407:
  5456                           
  5457                           ;main.c: 234: }
  5458                           ;main.c: 235: }
  5459                           ;main.c: 236: if(state==E_SET_ADV_XLO)
  5460  001256  503A               	movf	_state,w,c
  5461  001258  0A0F               	xorlw	15
  5462  00125A  E117               	bnz	l129
  5463                           
  5464                           ;main.c: 237: {
  5465                           ;main.c: 238: if((xLoMem-setInc)>=0)
  5466  00125C  503C               	movf	_setInc,w,c
  5467  00125E  5C34               	subwf	_xLoMem,w,c
  5468  001260  0100               	movlb	0	; () banked
  5469  001262  6F8B               	movwf	??_decVar& (0+255),b
  5470  001264  0E00               	movlw	0
  5471  001266  5835               	subwfb	_xLoMem+1,w,c
  5472  001268  6F8C               	movwf	(??_decVar+1)& (0+255),b
  5473  00126A  BF8C               	btfsc	(??_decVar+1)& (0+255),7,b
  5474  00126C  D00E               	goto	l129
  5475                           
  5476                           ; BSR set to: 0
  5477                           ;main.c: 239: {
  5478                           ;main.c: 240: xLoMem=xLoMem-setInc;
  5479  00126E  503C               	movf	_setInc,w,c
  5480  001270  5E34               	subwf	_xLoMem,f,c
  5481  001272  0E00               	movlw	0
  5482  001274  5A35               	subwfb	_xLoMem+1,f,c
  5483                           
  5484                           ; BSR set to: 0
  5485                           ;main.c: 241: { ee_write_byte(2,((unsigned char)(((xLoMem)>>8)&0xFF))); ee_write_byte(2+
      +                          1,((unsigned char)((xLoMem)&0xFF))); };
  5486  001276  5035               	movf	_xLoMem+1,w,c
  5487  001278  6F60               	movwf	?_ee_write_byte& (0+255),b
  5488  00127A  0E02               	movlw	2
  5489  00127C  EC85  F013         	call	_ee_write_byte
  5490  001280  C034  F060         	movff	_xLoMem,?_ee_write_byte
  5491  001284  0E03               	movlw	3
  5492  001286  EC85  F013         	call	_ee_write_byte
  5493  00128A                     l129:
  5494                           
  5495                           ;main.c: 242: }
  5496                           ;main.c: 243: }
  5497                           ;main.c: 244: if(state==E_SET_ADV_XUP)
  5498  00128A  503A               	movf	_state,w,c
  5499  00128C  0A11               	xorlw	17
  5500  00128E  E117               	bnz	l131
  5501                           
  5502                           ;main.c: 245: {
  5503                           ;main.c: 246: if((xUpMem-setInc)>=0)
  5504  001290  503C               	movf	_setInc,w,c
  5505  001292  5C36               	subwf	_xUpMem,w,c
  5506  001294  0100               	movlb	0	; () banked
  5507  001296  6F8B               	movwf	??_decVar& (0+255),b
  5508  001298  0E00               	movlw	0
  5509  00129A  5837               	subwfb	_xUpMem+1,w,c
  5510  00129C  6F8C               	movwf	(??_decVar+1)& (0+255),b
  5511  00129E  BF8C               	btfsc	(??_decVar+1)& (0+255),7,b
  5512  0012A0  D00E               	goto	l131
  5513                           
  5514                           ; BSR set to: 0
  5515                           ;main.c: 247: {
  5516                           ;main.c: 248: xUpMem=xUpMem-setInc;
  5517  0012A2  503C               	movf	_setInc,w,c
  5518  0012A4  5E36               	subwf	_xUpMem,f,c
  5519  0012A6  0E00               	movlw	0
  5520  0012A8  5A37               	subwfb	_xUpMem+1,f,c
  5521                           
  5522                           ; BSR set to: 0
  5523                           ;main.c: 249: { ee_write_byte(4,((unsigned char)(((xUpMem)>>8)&0xFF))); ee_write_byte(4+
      +                          1,((unsigned char)((xUpMem)&0xFF))); };
  5524  0012AA  5037               	movf	_xUpMem+1,w,c
  5525  0012AC  6F60               	movwf	?_ee_write_byte& (0+255),b
  5526  0012AE  0E04               	movlw	4
  5527  0012B0  EC85  F013         	call	_ee_write_byte
  5528  0012B4  C036  F060         	movff	_xUpMem,?_ee_write_byte
  5529  0012B8  0E05               	movlw	5
  5530  0012BA  EC85  F013         	call	_ee_write_byte
  5531  0012BE                     l131:
  5532                           
  5533                           ;main.c: 250: }
  5534                           ;main.c: 251: }
  5535                           ;main.c: 252: if(state==E_SET_ADV_ELO)
  5536  0012BE  503A               	movf	_state,w,c
  5537  0012C0  0A13               	xorlw	19
  5538  0012C2  E117               	bnz	l133
  5539                           
  5540                           ;main.c: 253: {
  5541                           ;main.c: 254: if((eLoMem-setInc)>=0)
  5542  0012C4  503C               	movf	_setInc,w,c
  5543  0012C6  5C28               	subwf	_eLoMem,w,c
  5544  0012C8  0100               	movlb	0	; () banked
  5545  0012CA  6F8B               	movwf	??_decVar& (0+255),b
  5546  0012CC  0E00               	movlw	0
  5547  0012CE  5829               	subwfb	_eLoMem+1,w,c
  5548  0012D0  6F8C               	movwf	(??_decVar+1)& (0+255),b
  5549  0012D2  BF8C               	btfsc	(??_decVar+1)& (0+255),7,b
  5550  0012D4  D00E               	goto	l133
  5551                           
  5552                           ; BSR set to: 0
  5553                           ;main.c: 255: {
  5554                           ;main.c: 256: eLoMem=eLoMem-setInc;
  5555  0012D6  503C               	movf	_setInc,w,c
  5556  0012D8  5E28               	subwf	_eLoMem,f,c
  5557  0012DA  0E00               	movlw	0
  5558  0012DC  5A29               	subwfb	_eLoMem+1,f,c
  5559                           
  5560                           ; BSR set to: 0
  5561                           ;main.c: 257: { ee_write_byte(6,((unsigned char)(((eLoMem)>>8)&0xFF))); ee_write_byte(6+
      +                          1,((unsigned char)((eLoMem)&0xFF))); };
  5562  0012DE  5029               	movf	_eLoMem+1,w,c
  5563  0012E0  6F60               	movwf	?_ee_write_byte& (0+255),b
  5564  0012E2  0E06               	movlw	6
  5565  0012E4  EC85  F013         	call	_ee_write_byte
  5566  0012E8  C028  F060         	movff	_eLoMem,?_ee_write_byte
  5567  0012EC  0E07               	movlw	7
  5568  0012EE  EC85  F013         	call	_ee_write_byte
  5569  0012F2                     l133:
  5570                           
  5571                           ;main.c: 258: }
  5572                           ;main.c: 259: }
  5573                           ;main.c: 260: if(state==E_SET_ADV_EUP)
  5574  0012F2  503A               	movf	_state,w,c
  5575  0012F4  0A15               	xorlw	21
  5576  0012F6  E117               	bnz	l135
  5577                           
  5578                           ;main.c: 261: {
  5579                           ;main.c: 262: if((eUpMem-setInc)>=0)
  5580  0012F8  503C               	movf	_setInc,w,c
  5581  0012FA  5C2A               	subwf	_eUpMem,w,c
  5582  0012FC  0100               	movlb	0	; () banked
  5583  0012FE  6F8B               	movwf	??_decVar& (0+255),b
  5584  001300  0E00               	movlw	0
  5585  001302  582B               	subwfb	_eUpMem+1,w,c
  5586  001304  6F8C               	movwf	(??_decVar+1)& (0+255),b
  5587  001306  BF8C               	btfsc	(??_decVar+1)& (0+255),7,b
  5588  001308  D00E               	goto	l135
  5589                           
  5590                           ; BSR set to: 0
  5591                           ;main.c: 263: {
  5592                           ;main.c: 264: eUpMem=eUpMem-setInc;
  5593  00130A  503C               	movf	_setInc,w,c
  5594  00130C  5E2A               	subwf	_eUpMem,f,c
  5595  00130E  0E00               	movlw	0
  5596  001310  5A2B               	subwfb	_eUpMem+1,f,c
  5597                           
  5598                           ; BSR set to: 0
  5599                           ;main.c: 265: { ee_write_byte(8,((unsigned char)(((eUpMem)>>8)&0xFF))); ee_write_byte(8+
      +                          1,((unsigned char)((eUpMem)&0xFF))); };
  5600  001312  502B               	movf	_eUpMem+1,w,c
  5601  001314  6F60               	movwf	?_ee_write_byte& (0+255),b
  5602  001316  0E08               	movlw	8
  5603  001318  EC85  F013         	call	_ee_write_byte
  5604  00131C  C02A  F060         	movff	_eUpMem,?_ee_write_byte
  5605  001320  0E09               	movlw	9
  5606  001322  EC85  F013         	call	_ee_write_byte
  5607  001326                     l135:
  5608                           
  5609                           ;main.c: 266: }
  5610                           ;main.c: 267: }
  5611                           ;main.c: 268: if(state==E_SET_ADV_VLO)
  5612  001326  503A               	movf	_state,w,c
  5613  001328  0A17               	xorlw	23
  5614  00132A  E117               	bnz	l137
  5615                           
  5616                           ;main.c: 269: {
  5617                           ;main.c: 270: if((vLoMem-setInc)>=0)
  5618  00132C  503C               	movf	_setInc,w,c
  5619  00132E  5C30               	subwf	_vLoMem,w,c
  5620  001330  0100               	movlb	0	; () banked
  5621  001332  6F8B               	movwf	??_decVar& (0+255),b
  5622  001334  0E00               	movlw	0
  5623  001336  5831               	subwfb	_vLoMem+1,w,c
  5624  001338  6F8C               	movwf	(??_decVar+1)& (0+255),b
  5625  00133A  BF8C               	btfsc	(??_decVar+1)& (0+255),7,b
  5626  00133C  D00E               	goto	l137
  5627                           
  5628                           ; BSR set to: 0
  5629                           ;main.c: 271: {
  5630                           ;main.c: 272: vLoMem=vLoMem-setInc;
  5631  00133E  503C               	movf	_setInc,w,c
  5632  001340  5E30               	subwf	_vLoMem,f,c
  5633  001342  0E00               	movlw	0
  5634  001344  5A31               	subwfb	_vLoMem+1,f,c
  5635                           
  5636                           ; BSR set to: 0
  5637                           ;main.c: 273: { ee_write_byte(10,((unsigned char)(((vLoMem)>>8)&0xFF))); ee_write_byte(1
      +                          0+1,((unsigned char)((vLoMem)&0xFF))); };
  5638  001346  5031               	movf	_vLoMem+1,w,c
  5639  001348  6F60               	movwf	?_ee_write_byte& (0+255),b
  5640  00134A  0E0A               	movlw	10
  5641  00134C  EC85  F013         	call	_ee_write_byte
  5642  001350  C030  F060         	movff	_vLoMem,?_ee_write_byte
  5643  001354  0E0B               	movlw	11
  5644  001356  EC85  F013         	call	_ee_write_byte
  5645  00135A                     l137:
  5646                           
  5647                           ;main.c: 274: }
  5648                           ;main.c: 275: }
  5649                           ;main.c: 276: if(state==E_SET_ADV_VUP)
  5650  00135A  503A               	movf	_state,w,c
  5651  00135C  0A19               	xorlw	25
  5652  00135E  E117               	bnz	l6457
  5653                           
  5654                           ;main.c: 277: {
  5655                           ;main.c: 278: if((vUpMem-setInc)>=0)
  5656  001360  503C               	movf	_setInc,w,c
  5657  001362  5C32               	subwf	_vUpMem,w,c
  5658  001364  0100               	movlb	0	; () banked
  5659  001366  6F8B               	movwf	??_decVar& (0+255),b
  5660  001368  0E00               	movlw	0
  5661  00136A  5833               	subwfb	_vUpMem+1,w,c
  5662  00136C  6F8C               	movwf	(??_decVar+1)& (0+255),b
  5663  00136E  BF8C               	btfsc	(??_decVar+1)& (0+255),7,b
  5664  001370  D00E               	goto	l6457
  5665                           
  5666                           ; BSR set to: 0
  5667                           ;main.c: 279: {
  5668                           ;main.c: 280: vUpMem=vUpMem-setInc;
  5669  001372  503C               	movf	_setInc,w,c
  5670  001374  5E32               	subwf	_vUpMem,f,c
  5671  001376  0E00               	movlw	0
  5672  001378  5A33               	subwfb	_vUpMem+1,f,c
  5673                           
  5674                           ; BSR set to: 0
  5675                           ;main.c: 281: { ee_write_byte(12,((unsigned char)(((vUpMem)>>8)&0xFF))); ee_write_byte(1
      +                          2+1,((unsigned char)((vUpMem)&0xFF))); };
  5676  00137A  5033               	movf	_vUpMem+1,w,c
  5677  00137C  6F60               	movwf	?_ee_write_byte& (0+255),b
  5678  00137E  0E0C               	movlw	12
  5679  001380  EC85  F013         	call	_ee_write_byte
  5680  001384  C032  F060         	movff	_vUpMem,?_ee_write_byte
  5681  001388  0E0D               	movlw	13
  5682  00138A  EC85  F013         	call	_ee_write_byte
  5683  00138E                     l6457:
  5684                           
  5685                           ;main.c: 282: }
  5686                           ;main.c: 283: }
  5687                           ;main.c: 285: { timerMem[TMR_SHOW_SETTING].flag=0; timerMem[TMR_SHOW_SETTING].prescaler=
      +                          timerDelayConstant[TMR_SHOW_SETTING]; timerMem[TMR_SHOW_SETTING].pause=0; };
  5688  00138E  0101               	movlb	1	; () banked
  5689  001390  93A2               	bcf	(_timerMem+23)& (0+255),1,b
  5690                           
  5691                           ; BSR set to: 1
  5692  001392  C10F  F19F         	movff	_timerDelayConstant+15,_timerMem+20
  5693  001396  C110  F1A0         	movff	_timerDelayConstant+16,_timerMem+21
  5694  00139A  C111  F1A1         	movff	_timerDelayConstant+17,_timerMem+22
  5695                           
  5696                           ; BSR set to: 1
  5697  00139E  95A2               	bcf	(_timerMem+23)& (0+255),2,b
  5698                           
  5699                           ; BSR set to: 1
  5700                           ;main.c: 286: { timerMem[TMR_SHOW_SETTING_ON].flag=0; timerMem[TMR_SHOW_SETTING_ON].pres
      +                          caler=timerDelayConstant[TMR_SHOW_SETTING_ON]; timerMem[TMR_SHOW_SETTING_ON].pause=0; };
  5701                           
  5702                           ; BSR set to: 1
  5703                           
  5704                           ; BSR set to: 1
  5705  0013A0  EF02  F007         	goto	PL2	;call to abstracted procedure
  5706  0013A4                     __end_of_decVar:
  5707                           	opt stack 0
  5708  0013A4                     PL3:
  5709  0013A4  C068  F07D         	movff	?___awtoft,?___ftadd
  5710  0013A8  C069  F07E         	movff	?___awtoft+1,?___ftadd+1
  5711  0013AC  C06A  F07F         	movff	?___awtoft+2,?___ftadd+2
  5712  0013B0  6B6F               	clrf	(?___ftdiv+3)& (0+255),b
  5713  0013B2  0E7A               	movlw	122
  5714  0013B4  6F70               	movwf	(?___ftdiv+4)& (0+255),b
  5715  0013B6  0E44               	movlw	68
  5716  0013B8  6F71               	movwf	(?___ftdiv+5)& (0+255),b
  5717  0013BA  C02C  F068         	movff	_escDecMem,?___awtoft
  5718  0013BE  C02D  F069         	movff	_escDecMem+1,?___awtoft+1
  5719  0013C2  0C44               	retlw	68
  5720                           tblptru	equ	0xFF8
  5721                           tblptrh	equ	0xFF7
  5722                           tblptrl	equ	0xFF6
  5723                           tablat	equ	0xFF5
  5724                           prodl	equ	0xFF3
  5725                           intcon	equ	0xFF2
  5726                           intcon2	equ	0xFF1
  5727                           postinc0	equ	0xFEE
  5728                           wreg	equ	0xFE8
  5729                           indf1	equ	0xFE7
  5730                           postinc1	equ	0xFE6
  5731                           postdec1	equ	0xFE5
  5732                           fsr1h	equ	0xFE2
  5733                           fsr1l	equ	0xFE1
  5734                           indf2	equ	0xFDF
  5735                           postinc2	equ	0xFDE
  5736                           postdec2	equ	0xFDD
  5737                           plusw2	equ	0xFDB
  5738                           fsr2h	equ	0xFDA
  5739                           fsr2l	equ	0xFD9
  5740                           status	equ	0xFD8
  5741                           
  5742 ;; *************** function _ee_write_byte *****************
  5743 ;; Defined at:
  5744 ;;		line 49 in file "C:\fgr\16gb\0000 interior\deVolt\sw\main.c"
  5745 ;; Parameters:    Size  Location     Type
  5746 ;;  address         1    wreg     unsigned char 
  5747 ;;  _data           1    0[BANK0 ] unsigned char 
  5748 ;; Auto vars:     Size  Location     Type
  5749 ;;  address         1    1[BANK0 ] unsigned char 
  5750 ;; Return value:  Size  Location     Type
  5751 ;;		None               void
  5752 ;; Registers used:
  5753 ;;		wreg, status,2
  5754 ;; Tracked objects:
  5755 ;;		On entry : 0/1
  5756 ;;		On exit  : 0/0
  5757 ;;		Unchanged: 0/0
  5758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5759 ;;      Params:         0       1       0       0       0       0       0       0       0
  5760 ;;      Locals:         0       1       0       0       0       0       0       0       0
  5761 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5762 ;;      Totals:         0       2       0       0       0       0       0       0       0
  5763 ;;Total ram usage:        2 bytes
  5764 ;; Hardware stack levels used:    1
  5765 ;; Hardware stack levels required when called:    6
  5766 ;; This function calls:
  5767 ;;		Nothing
  5768 ;; This function is called by:
  5769 ;;		_incVar
  5770 ;;		_decVar
  5771 ;; This function uses a non-reentrant model
  5772 ;;
  5773                           
  5774                           	psect	text6
  5775  00270A                     __ptext6:
  5776                           	opt stack 0
  5777  00270A                     _ee_write_byte:
  5778                           	opt stack 23
  5779                           
  5780                           ; BSR set to: 1
  5781                           ;ee_write_byte@address stored from wreg
  5782  00270A  CFE8 F061          	movff	wreg,ee_write_byte@address
  5783                           
  5784                           ;main.c: 50: EEDATA = _data;
  5785  00270E  C060  FFA8         	movff	ee_write_byte@_data,4008	;volatile
  5786                           
  5787                           ;main.c: 51: EEADR = address;
  5788  002712  C061  FFA9         	movff	ee_write_byte@address,4009	;volatile
  5789                           
  5790                           ;main.c: 53: EECON1bits.EEPGD = 0;
  5791  002716  9EA6               	bcf	4006,7,c	;volatile
  5792                           
  5793                           ;main.c: 54: EECON1bits.CFGS = 0;
  5794  002718  9CA6               	bcf	4006,6,c	;volatile
  5795                           
  5796                           ;main.c: 55: EECON1bits.WREN = 1;
  5797  00271A  84A6               	bsf	4006,2,c	;volatile
  5798                           
  5799                           ;main.c: 56: INTCONbits.GIE = 0;
  5800  00271C  9EF2               	bcf	intcon,7,c	;volatile
  5801                           
  5802                           ;main.c: 57: EECON2 = 0x55;
  5803  00271E  0E55               	movlw	85
  5804  002720  6EA7               	movwf	4007,c	;volatile
  5805                           
  5806                           ;main.c: 58: EECON2 = 0x0AA;
  5807  002722  0EAA               	movlw	170
  5808  002724  6EA7               	movwf	4007,c	;volatile
  5809                           
  5810                           ;main.c: 59: EECON1bits.WR = 1;
  5811  002726  82A6               	bsf	4006,1,c	;volatile
  5812                           
  5813                           ;main.c: 60: while(EECON1bits.WR) asm("nop");
  5814  002728  D001               	goto	l41
  5815  00272A                     l42:
  5816  00272A  F000               	nop		;# 
  5817  00272C                     l41:
  5818  00272C  B2A6               	btfsc	4006,1,c	;volatile
  5819  00272E  D7FD               	goto	l42
  5820                           
  5821                           ;main.c: 62: EECON1bits.WREN = 0;
  5822  002730  94A6               	bcf	4006,2,c	;volatile
  5823                           
  5824                           ;main.c: 63: INTCONbits.GIE = 1;
  5825  002732  8EF2               	bsf	intcon,7,c	;volatile
  5826  002734  0012               	return	
  5827  002736                     __end_of_ee_write_byte:
  5828                           	opt stack 0
  5829                           tblptru	equ	0xFF8
  5830                           tblptrh	equ	0xFF7
  5831                           tblptrl	equ	0xFF6
  5832                           tablat	equ	0xFF5
  5833                           prodl	equ	0xFF3
  5834                           intcon	equ	0xFF2
  5835                           intcon2	equ	0xFF1
  5836                           postinc0	equ	0xFEE
  5837                           wreg	equ	0xFE8
  5838                           indf1	equ	0xFE7
  5839                           postinc1	equ	0xFE6
  5840                           postdec1	equ	0xFE5
  5841                           fsr1h	equ	0xFE2
  5842                           fsr1l	equ	0xFE1
  5843                           indf2	equ	0xFDF
  5844                           postinc2	equ	0xFDE
  5845                           postdec2	equ	0xFDD
  5846                           plusw2	equ	0xFDB
  5847                           fsr2h	equ	0xFDA
  5848                           fsr2l	equ	0xFD9
  5849                           status	equ	0xFD8
  5850                           
  5851 ;; *************** function _uintToStr *****************
  5852 ;; Defined at:
  5853 ;;		line 286 in file "C:\fgr\16gb\0000 interior\deVolt\sw\stdio.c"
  5854 ;; Parameters:    Size  Location     Type
  5855 ;;  num             2    7[BANK0 ] unsigned int 
  5856 ;;  str             1    9[BANK0 ] PTR unsigned char 
  5857 ;;		 -> muxBuffer(5), 
  5858 ;;  strLen          1   10[BANK0 ] unsigned char 
  5859 ;; Auto vars:     Size  Location     Type
  5860 ;;  i               1   11[BANK0 ] unsigned char 
  5861 ;; Return value:  Size  Location     Type
  5862 ;;		None               void
  5863 ;; Registers used:
  5864 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5865 ;; Tracked objects:
  5866 ;;		On entry : F/0
  5867 ;;		On exit  : F/0
  5868 ;;		Unchanged: FFFFFFF0/0
  5869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5870 ;;      Params:         0       4       0       0       0       0       0       0       0
  5871 ;;      Locals:         0       1       0       0       0       0       0       0       0
  5872 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5873 ;;      Totals:         0       5       0       0       0       0       0       0       0
  5874 ;;Total ram usage:        5 bytes
  5875 ;; Hardware stack levels used:    1
  5876 ;; Hardware stack levels required when called:    7
  5877 ;; This function calls:
  5878 ;;		___lwmod
  5879 ;;		___lwdiv
  5880 ;; This function is called by:
  5881 ;;		_main
  5882 ;; This function uses a non-reentrant model
  5883 ;;
  5884                           
  5885                           	psect	text7
  5886  002444                     __ptext7:
  5887                           	opt stack 0
  5888  002444                     _uintToStr:
  5889                           	opt stack 23
  5890                           
  5891                           ; BSR set to: 0
  5892                           ;stdio.c: 287: char i;
  5893                           ;stdio.c: 289: str+=strLen-1;
  5894  002444  056A               	decf	uintToStr@strLen& (0+255),w,b
  5895  002446  2769               	addwf	uintToStr@str& (0+255),f,b
  5896                           
  5897                           ; BSR set to: 0
  5898                           ;stdio.c: 290: for(i=0;i<strLen;i++)
  5899  002448  6B6B               	clrf	uintToStr@i& (0+255),b
  5900  00244A  D01E               	goto	l7675
  5901  00244C                     l7667:
  5902                           
  5903                           ; BSR set to: 0
  5904                           ;stdio.c: 291: {
  5905                           ;stdio.c: 292: *(str--)='0'+(num%10);
  5906  00244C  5169               	movf	uintToStr@str& (0+255),w,b
  5907  00244E  6ED9               	movwf	fsr2l,c
  5908  002450  6ADA               	clrf	fsr2h,c
  5909  002452  C067  F060         	movff	uintToStr@num,?___lwmod
  5910  002456  C068  F061         	movff	uintToStr@num+1,?___lwmod+1
  5911  00245A  6B63               	clrf	(?___lwmod+3)& (0+255),b
  5912  00245C  0E0A               	movlw	10
  5913  00245E  6F62               	movwf	(?___lwmod+2)& (0+255),b
  5914  002460  ECD9  F012         	call	___lwmod	;wreg free
  5915  002464  5160               	movf	?___lwmod& (0+255),w,b
  5916  002466  0F30               	addlw	48
  5917  002468  6EDF               	movwf	indf2,c
  5918                           
  5919                           ; BSR set to: 0
  5920  00246A  0769               	decf	uintToStr@str& (0+255),f,b
  5921                           
  5922                           ; BSR set to: 0
  5923                           ;stdio.c: 293: num/=10;
  5924  00246C  C067  F060         	movff	uintToStr@num,?___lwdiv
  5925  002470  C068  F061         	movff	uintToStr@num+1,?___lwdiv+1
  5926  002474  6B63               	clrf	(?___lwdiv+3)& (0+255),b
  5927  002476  0E0A               	movlw	10
  5928  002478  6F62               	movwf	(?___lwdiv+2)& (0+255),b
  5929  00247A  EC6E  F012         	call	___lwdiv	;wreg free
  5930  00247E  C060  F067         	movff	?___lwdiv,uintToStr@num
  5931  002482  C061  F068         	movff	?___lwdiv+1,uintToStr@num+1
  5932                           
  5933                           ; BSR set to: 0
  5934  002486  2B6B               	incf	uintToStr@i& (0+255),f,b
  5935  002488                     l7675:
  5936                           
  5937                           ; BSR set to: 0
  5938  002488  516A               	movf	uintToStr@strLen& (0+255),w,b
  5939  00248A  5D6B               	subwf	uintToStr@i& (0+255),w,b
  5940  00248C  B0D8               	btfsc	status,0,c
  5941  00248E  0012               	return	
  5942  002490  D7DD               	goto	l7667
  5943  002492                     __end_of_uintToStr:
  5944                           	opt stack 0
  5945                           tblptru	equ	0xFF8
  5946                           tblptrh	equ	0xFF7
  5947                           tblptrl	equ	0xFF6
  5948                           tablat	equ	0xFF5
  5949                           prodl	equ	0xFF3
  5950                           intcon	equ	0xFF2
  5951                           intcon2	equ	0xFF1
  5952                           postinc0	equ	0xFEE
  5953                           wreg	equ	0xFE8
  5954                           indf1	equ	0xFE7
  5955                           postinc1	equ	0xFE6
  5956                           postdec1	equ	0xFE5
  5957                           fsr1h	equ	0xFE2
  5958                           fsr1l	equ	0xFE1
  5959                           indf2	equ	0xFDF
  5960                           postinc2	equ	0xFDE
  5961                           postdec2	equ	0xFDD
  5962                           plusw2	equ	0xFDB
  5963                           fsr2h	equ	0xFDA
  5964                           fsr2l	equ	0xFD9
  5965                           status	equ	0xFD8
  5966                           
  5967 ;; *************** function _getConv *****************
  5968 ;; Defined at:
  5969 ;;		line 33 in file "C:\fgr\16gb\0000 interior\deVolt\sw\adc.c"
  5970 ;; Parameters:    Size  Location     Type
  5971 ;;		None
  5972 ;; Auto vars:     Size  Location     Type
  5973 ;;		None
  5974 ;; Return value:  Size  Location     Type
  5975 ;;                  2    0[BANK0 ] int 
  5976 ;; Registers used:
  5977 ;;		None
  5978 ;; Tracked objects:
  5979 ;;		On entry : F/0
  5980 ;;		On exit  : F/0
  5981 ;;		Unchanged: FFFFFFF0/0
  5982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5983 ;;      Params:         0       2       0       0       0       0       0       0       0
  5984 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5985 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5986 ;;      Totals:         0       2       0       0       0       0       0       0       0
  5987 ;;Total ram usage:        2 bytes
  5988 ;; Hardware stack levels used:    1
  5989 ;; Hardware stack levels required when called:    6
  5990 ;; This function calls:
  5991 ;;		Nothing
  5992 ;; This function is called by:
  5993 ;;		_main
  5994 ;; This function uses a non-reentrant model
  5995 ;;
  5996                           
  5997                           	psect	text8
  5998  0027AE                     __ptext8:
  5999                           	opt stack 0
  6000  0027AE                     _getConv:
  6001                           	opt stack 24
  6002                           
  6003                           ; BSR set to: 0
  6004                           ;adc.c: 34: adcStruct.inProcessFlg=0;
  6005                           
  6006                           ; BSR set to: 0
  6007  0027AE  93AD               	bcf	_adcStruct& (0+255),1,b
  6008                           
  6009                           ;adc.c: 35: adcStruct.completeFlg=0;
  6010  0027B0  91AD               	bcf	_adcStruct& (0+255),0,b
  6011                           
  6012                           ;adc.c: 36: return ADRES;
  6013  0027B2  CFC3 F060          	movff	4035,?_getConv	;volatile
  6014  0027B6  CFC4 F061          	movff	4036,?_getConv+1	;volatile
  6015                           
  6016                           ; BSR set to: 0
  6017  0027BA  0012               	return	
  6018  0027BC                     __end_of_getConv:
  6019                           	opt stack 0
  6020                           tblptru	equ	0xFF8
  6021                           tblptrh	equ	0xFF7
  6022                           tblptrl	equ	0xFF6
  6023                           tablat	equ	0xFF5
  6024                           prodl	equ	0xFF3
  6025                           intcon	equ	0xFF2
  6026                           intcon2	equ	0xFF1
  6027                           postinc0	equ	0xFEE
  6028                           wreg	equ	0xFE8
  6029                           indf1	equ	0xFE7
  6030                           postinc1	equ	0xFE6
  6031                           postdec1	equ	0xFE5
  6032                           fsr1h	equ	0xFE2
  6033                           fsr1l	equ	0xFE1
  6034                           indf2	equ	0xFDF
  6035                           postinc2	equ	0xFDE
  6036                           postdec2	equ	0xFDD
  6037                           plusw2	equ	0xFDB
  6038                           fsr2h	equ	0xFDA
  6039                           fsr2l	equ	0xFD9
  6040                           status	equ	0xFD8
  6041                           
  6042 ;; *************** function _iir *****************
  6043 ;; Defined at:
  6044 ;;		line 21 in file "C:\fgr\16gb\0000 interior\deVolt\sw\iir.c"
  6045 ;; Parameters:    Size  Location     Type
  6046 ;;  NewSample       3   53[BANK0 ] float 
  6047 ;; Auto vars:     Size  Location     Type
  6048 ;;  BCoef           9   65[BANK0 ] float [3]
  6049 ;;  ACoef           9   56[BANK0 ] float [3]
  6050 ;;  n               1   74[BANK0 ] unsigned char 
  6051 ;; Return value:  Size  Location     Type
  6052 ;;                  3   53[BANK0 ] float 
  6053 ;; Registers used:
  6054 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6055 ;; Tracked objects:
  6056 ;;		On entry : F/0
  6057 ;;		On exit  : F/0
  6058 ;;		Unchanged: FFFFFFF0/0
  6059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6060 ;;      Params:         0       3       0       0       0       0       0       0       0
  6061 ;;      Locals:         0      19       0       0       0       0       0       0       0
  6062 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6063 ;;      Totals:         0      22       0       0       0       0       0       0       0
  6064 ;;Total ram usage:       22 bytes
  6065 ;; Hardware stack levels used:    1
  6066 ;; Hardware stack levels required when called:    9
  6067 ;; This function calls:
  6068 ;;		___ftmul
  6069 ;;		___ftsub
  6070 ;;		___asftadd
  6071 ;;		___asftdiv
  6072 ;; This function is called by:
  6073 ;;		_main
  6074 ;; This function uses a non-reentrant model
  6075 ;;
  6076                           
  6077                           	psect	text9
  6078  0018DC                     __ptext9:
  6079                           	opt stack 0
  6080  0018DC                     _iir:
  6081                           	opt stack 21
  6082                           
  6083                           ; BSR set to: 0
  6084                           ;iir.c: 22: float ACoef[2+1]={ 0.00094547653094439164,0.00189095306188878330,0.000945476
      +                          53094439164};
  6085                           
  6086                           ; BSR set to: 0
  6087  0018DC  EE21  F027         	lfsr	2,iir@F4235
  6088  0018E0  EE10  F098         	lfsr	1,iir@ACoef
  6089  0018E4  0E09               	movlw	9
  6090  0018E6                     u10601:
  6091  0018E6  CFDE FFE6          	movff	postinc2,postinc1
  6092  0018EA  2EE8               	decfsz	wreg,f,c
  6093  0018EC  D7FC               	goto	u10601
  6094                           
  6095                           ;iir.c: 23: float BCoef[2+1]={1.00000000000000000000,-1.91119706742607360000,0.914975834
      +                          80143418000};
  6096  0018EE  EE21  F030         	lfsr	2,iir@F4237
  6097  0018F2  EE10  F0A1         	lfsr	1,iir@BCoef
  6098  0018F6  0E09               	movlw	9
  6099  0018F8                     u10611:
  6100  0018F8  CFDE FFE6          	movff	postinc2,postinc1
  6101  0018FC  2EE8               	decfsz	wreg,f,c
  6102  0018FE  D7FC               	goto	u10611
  6103                           
  6104                           ; BSR set to: 0
  6105                           ;iir.c: 26: char n;
  6106                           ;iir.c: 28: for(n=2;n>0;n--)
  6107  001900  0E02               	movlw	2
  6108  001902  6FAA               	movwf	iir@n& (0+255),b
  6109  001904                     l7637:
  6110                           
  6111                           ; BSR set to: 0
  6112                           ;iir.c: 29: {
  6113                           ;iir.c: 30: x[n]=x[n-1];
  6114  001904  51AA               	movf	iir@n& (0+255),w,b
  6115  001906  0D03               	mullw	3
  6116  001908  0EBC               	movlw	low (_x+65533)
  6117  00190A  24F3               	addwf	prodl,w,c
  6118  00190C  6ED9               	movwf	fsr2l,c
  6119  00190E  6ADA               	clrf	fsr2h,c
  6120  001910  0E01               	movlw	high (_x+65533)
  6121  001912  22DA               	addwfc	fsr2h,f,c
  6122  001914  0100               	movlb	0	; () banked
  6123  001916  51AA               	movf	iir@n& (0+255),w,b
  6124  001918  0D03               	mullw	3
  6125  00191A  0EBF               	movlw	low _x
  6126  00191C  24F3               	addwf	prodl,w,c
  6127  00191E  6EE1               	movwf	fsr1l,c
  6128  001920  6AE2               	clrf	fsr1h,c
  6129  001922  0E01               	movlw	high _x
  6130  001924  22E2               	addwfc	fsr1h,f,c
  6131  001926  CFDE FFE6          	movff	postinc2,postinc1
  6132  00192A  CFDE FFE6          	movff	postinc2,postinc1
  6133  00192E  CFDE FFE5          	movff	postinc2,postdec1
  6134                           
  6135                           ;iir.c: 31: y[n]=y[n-1];
  6136  001932  51AA               	movf	iir@n& (0+255),w,b
  6137  001934  0D03               	mullw	3
  6138  001936  50F3               	movf	prodl,w,c
  6139  001938  0FBA               	addlw	low (_y+253)
  6140  00193A  6ED9               	movwf	fsr2l,c
  6141  00193C  6ADA               	clrf	fsr2h,c
  6142  00193E  51AA               	movf	iir@n& (0+255),w,b
  6143  001940  0D03               	mullw	3
  6144  001942  50F3               	movf	prodl,w,c
  6145  001944  0FBD               	addlw	low _y
  6146  001946  6EE1               	movwf	fsr1l,c
  6147  001948  6AE2               	clrf	fsr1h,c
  6148  00194A  CFDE FFE6          	movff	postinc2,postinc1
  6149  00194E  CFDE FFE6          	movff	postinc2,postinc1
  6150  001952  CFDE FFE5          	movff	postinc2,postdec1
  6151  001956  52E5               	movf	postdec1,f,c
  6152                           
  6153                           ; BSR set to: 0
  6154  001958  07AA               	decf	iir@n& (0+255),f,b
  6155                           
  6156                           ; BSR set to: 0
  6157  00195A  67AA               	tstfsz	iir@n& (0+255),b
  6158  00195C  D7D3               	goto	l7637
  6159                           
  6160                           ; BSR set to: 0
  6161                           ;iir.c: 32: }
  6162                           ;iir.c: 35: x[0]=NewSample;
  6163  00195E  C095  F1BF         	movff	iir@NewSample,_x
  6164  001962  C096  F1C0         	movff	iir@NewSample+1,_x+1
  6165  001966  C097  F1C1         	movff	iir@NewSample+2,_x+2
  6166                           
  6167                           ; BSR set to: 0
  6168                           ;iir.c: 36: y[0]=ACoef[0]*x[0];
  6169  00196A  C098  F068         	movff	iir@ACoef,?___ftmul
  6170  00196E  C099  F069         	movff	iir@ACoef+1,?___ftmul+1
  6171  001972  C09A  F06A         	movff	iir@ACoef+2,?___ftmul+2
  6172  001976  C1BF  F06B         	movff	_x,?___ftmul+3
  6173  00197A  C1C0  F06C         	movff	_x+1,?___ftmul+4
  6174  00197E  C1C1  F06D         	movff	_x+2,?___ftmul+5
  6175  001982  ECB9  F00D         	call	___ftmul	;wreg free
  6176  001986  C068  F0BD         	movff	?___ftmul,_y
  6177  00198A  C069  F0BE         	movff	?___ftmul+1,_y+1
  6178  00198E  C06A  F0BF         	movff	?___ftmul+2,_y+2
  6179                           
  6180                           ; BSR set to: 0
  6181                           ;iir.c: 37: for(n=1;n<=2;n++) y[0]+=ACoef[n]*x[n]-BCoef[n]*y[n];
  6182  001992  0E01               	movlw	1
  6183  001994  6FAA               	movwf	iir@n& (0+255),b
  6184  001996                     l7651:
  6185                           
  6186                           ; BSR set to: 0
  6187  001996  51AA               	movf	iir@n& (0+255),w,b
  6188  001998  0D03               	mullw	3
  6189  00199A  50F3               	movf	prodl,w,c
  6190  00199C  0FBD               	addlw	low _y
  6191  00199E  6ED9               	movwf	fsr2l,c
  6192  0019A0  6ADA               	clrf	fsr2h,c
  6193  0019A2  D84B               	call	PL31	;call to abstracted procedure
  6194  0019A4  0FA1               	addlw	low iir@BCoef
  6195  0019A6  6ED9               	movwf	fsr2l,c
  6196  0019A8  6ADA               	clrf	fsr2h,c
  6197  0019AA  CFDE F068          	movff	postinc2,?___ftmul
  6198  0019AE  CFDE F069          	movff	postinc2,?___ftmul+1
  6199  0019B2  CFDD F06A          	movff	postdec2,?___ftmul+2
  6200  0019B6  ECB9  F00D         	call	___ftmul	;wreg free
  6201  0019BA  C068  F08E         	movff	?___ftmul,?___ftsub+3
  6202  0019BE  C069  F08F         	movff	?___ftmul+1,?___ftsub+4
  6203  0019C2  C06A  F090         	movff	?___ftmul+2,?___ftsub+5
  6204  0019C6  51AA               	movf	iir@n& (0+255),w,b
  6205  0019C8  0D03               	mullw	3
  6206  0019CA  0EBF               	movlw	low _x
  6207  0019CC  24F3               	addwf	prodl,w,c
  6208  0019CE  6ED9               	movwf	fsr2l,c
  6209  0019D0  6ADA               	clrf	fsr2h,c
  6210  0019D2  0E01               	movlw	high _x
  6211  0019D4  22DA               	addwfc	fsr2h,f,c
  6212  0019D6  0100               	movlb	0	; () banked
  6213  0019D8  D830               	call	PL31	;call to abstracted procedure
  6214  0019DA  0F98               	addlw	low iir@ACoef
  6215  0019DC  6ED9               	movwf	fsr2l,c
  6216  0019DE  6ADA               	clrf	fsr2h,c
  6217  0019E0  CFDE F068          	movff	postinc2,?___ftmul
  6218  0019E4  CFDE F069          	movff	postinc2,?___ftmul+1
  6219  0019E8  CFDD F06A          	movff	postdec2,?___ftmul+2
  6220  0019EC  ECB9  F00D         	call	___ftmul	;wreg free
  6221  0019F0  C068  F08B         	movff	?___ftmul,?___ftsub
  6222  0019F4  C069  F08C         	movff	?___ftmul+1,?___ftsub+1
  6223  0019F8  C06A  F08D         	movff	?___ftmul+2,?___ftsub+2
  6224  0019FC  EC6E  F013         	call	___ftsub	;wreg free
  6225  001A00  C08B  F091         	movff	?___ftsub,?___asftadd
  6226  001A04  C08C  F092         	movff	?___ftsub+1,?___asftadd+1
  6227  001A08  C08D  F093         	movff	?___ftsub+2,?___asftadd+2
  6228  001A0C  0EBD               	movlw	_y& (0+255)
  6229  001A0E  EC16  F013         	call	___asftadd
  6230                           
  6231                           ; BSR set to: 0
  6232  001A12  2BAA               	incf	iir@n& (0+255),f,b
  6233                           
  6234                           ; BSR set to: 0
  6235  001A14  0E02               	movlw	2
  6236  001A16  65AA               	cpfsgt	iir@n& (0+255),b
  6237  001A18  D7BE               	goto	l7651
  6238                           
  6239                           ; BSR set to: 0
  6240                           ;iir.c: 38: y[0]/=BCoef[0];
  6241  001A1A  C0A1  F07D         	movff	iir@BCoef,?___asftdiv
  6242  001A1E  C0A2  F07E         	movff	iir@BCoef+1,?___asftdiv+1
  6243  001A22  C0A3  F07F         	movff	iir@BCoef+2,?___asftdiv+2
  6244  001A26  0EBD               	movlw	_y& (0+255)
  6245  001A28  EC34  F013         	call	___asftdiv
  6246                           
  6247                           ; BSR set to: 0
  6248                           ;iir.c: 41: return y[0];
  6249  001A2C  C0BD  F095         	movff	_y,?_iir
  6250  001A30  C0BE  F096         	movff	_y+1,?_iir+1
  6251  001A34  C0BF  F097         	movff	_y+2,?_iir+2
  6252                           
  6253                           ; BSR set to: 0
  6254  001A38  0012               	return	
  6255  001A3A                     __end_of_iir:
  6256                           	opt stack 0
  6257  001A3A                     PL31:
  6258  001A3A  CFDE F06B          	movff	postinc2,?___ftmul+3
  6259  001A3E  CFDE F06C          	movff	postinc2,?___ftmul+4
  6260  001A42  CFDD F06D          	movff	postdec2,?___ftmul+5
  6261  001A46  51AA               	movf	iir@n& (0+255),w,b
  6262  001A48  0D03               	mullw	3
  6263  001A4A  50F3               	movf	prodl,w,c
  6264  001A4C  0012               	return	
  6265                           tblptru	equ	0xFF8
  6266                           tblptrh	equ	0xFF7
  6267                           tblptrl	equ	0xFF6
  6268                           tablat	equ	0xFF5
  6269                           prodl	equ	0xFF3
  6270                           intcon	equ	0xFF2
  6271                           intcon2	equ	0xFF1
  6272                           postinc0	equ	0xFEE
  6273                           wreg	equ	0xFE8
  6274                           indf1	equ	0xFE7
  6275                           postinc1	equ	0xFE6
  6276                           postdec1	equ	0xFE5
  6277                           fsr1h	equ	0xFE2
  6278                           fsr1l	equ	0xFE1
  6279                           indf2	equ	0xFDF
  6280                           postinc2	equ	0xFDE
  6281                           postdec2	equ	0xFDD
  6282                           plusw2	equ	0xFDB
  6283                           fsr2h	equ	0xFDA
  6284                           fsr2l	equ	0xFD9
  6285                           status	equ	0xFD8
  6286                           
  6287 ;; *************** function _adcDriver *****************
  6288 ;; Defined at:
  6289 ;;		line 9 in file "C:\fgr\16gb\0000 interior\deVolt\sw\adc.c"
  6290 ;; Parameters:    Size  Location     Type
  6291 ;;		None
  6292 ;; Auto vars:     Size  Location     Type
  6293 ;;  ch2Cnv          1    8[BANK0 ] unsigned char 
  6294 ;; Return value:  Size  Location     Type
  6295 ;;		None               void
  6296 ;; Registers used:
  6297 ;;		wreg, status,2, status,0
  6298 ;; Tracked objects:
  6299 ;;		On entry : 0/1
  6300 ;;		On exit  : F/0
  6301 ;;		Unchanged: FFFFFFF0/0
  6302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6303 ;;      Params:         0       0       0       0       0       0       0       0       0
  6304 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6305 ;;      Temps:          0       8       0       0       0       0       0       0       0
  6306 ;;      Totals:         0       9       0       0       0       0       0       0       0
  6307 ;;Total ram usage:        9 bytes
  6308 ;; Hardware stack levels used:    1
  6309 ;; Hardware stack levels required when called:    6
  6310 ;; This function calls:
  6311 ;;		Nothing
  6312 ;; This function is called by:
  6313 ;;		_main
  6314 ;; This function uses a non-reentrant model
  6315 ;;
  6316                           
  6317                           	psect	text10
  6318  002034                     __ptext10:
  6319                           	opt stack 0
  6320  002034                     _adcDriver:
  6321                           	opt stack 24
  6322                           
  6323                           ;adc.c: 10: char ch2Cnv;
  6324                           ;adc.c: 12: if(adcStruct.flgs2convert && !adcStruct.inProcessFlg)
  6325                           
  6326                           ; BSR set to: 0
  6327  002034  0100               	movlb	0	; () banked
  6328  002036  51B0               	movf	(_adcStruct+3)& (0+255),w,b
  6329  002038  11AF               	iorwf	(_adcStruct+2)& (0+255),w,b
  6330  00203A  A4D8               	btfss	status,2,c
  6331                           
  6332                           ; BSR set to: 0
  6333  00203C  B3AD               	btfsc	_adcStruct& (0+255),1,b
  6334  00203E  0012               	return	
  6335  002040                     l694:
  6336                           
  6337                           ; BSR set to: 0
  6338                           ;adc.c: 15: {
  6339                           ;adc.c: 16: ch2Cnv=adcStruct.nx2convert;
  6340  002040  C0B1  F068         	movff	_adcStruct+4,adcDriver@ch2Cnv
  6341                           
  6342                           ; BSR set to: 0
  6343                           ;adc.c: 17: if(adcStruct.nx2convert<=12) adcStruct.nx2convert++;
  6344  002044  0E0D               	movlw	13
  6345  002046  61B1               	cpfslt	(_adcStruct+4)& (0+255),b
  6346  002048  D002               	goto	l695
  6347                           
  6348                           ; BSR set to: 0
  6349  00204A  2BB1               	incf	(_adcStruct+4)& (0+255),f,b
  6350  00204C  D001               	goto	l7617
  6351  00204E                     l695:
  6352                           
  6353                           ; BSR set to: 0
  6354                           ;adc.c: 18: else adcStruct.nx2convert=0;
  6355  00204E  6BB1               	clrf	(_adcStruct+4)& (0+255),b
  6356  002050                     l7617:
  6357                           
  6358                           ; BSR set to: 0
  6359                           ;adc.c: 19: }
  6360                           ;adc.c: 20: while(!((1UL<<(ch2Cnv)) & (adcStruct.flgs2convert)));
  6361  002050  0E01               	movlw	1
  6362  002052  6F60               	movwf	??_adcDriver& (0+255),b
  6363  002054  6B61               	clrf	(??_adcDriver+1)& (0+255),b
  6364  002056  6B62               	clrf	(??_adcDriver+2)& (0+255),b
  6365  002058  6B63               	clrf	(??_adcDriver+3)& (0+255),b
  6366  00205A  5168               	movf	adcDriver@ch2Cnv& (0+255),w,b
  6367  00205C  2AE8               	incf	wreg,f,c
  6368  00205E  D005               	goto	u10570
  6369  002060                     u10575:
  6370  002060  90D8               	bcf	status,0,c
  6371  002062  3760               	rlcf	??_adcDriver& (0+255),f,b
  6372  002064  3761               	rlcf	(??_adcDriver+1)& (0+255),f,b
  6373  002066  3762               	rlcf	(??_adcDriver+2)& (0+255),f,b
  6374  002068  3763               	rlcf	(??_adcDriver+3)& (0+255),f,b
  6375  00206A                     u10570:
  6376  00206A  2EE8               	decfsz	wreg,f,c
  6377  00206C  D7F9               	goto	u10575
  6378  00206E  51AF               	movf	(_adcStruct+2)& (0+255),w,b
  6379  002070  1560               	andwf	??_adcDriver& (0+255),w,b
  6380  002072  6F64               	movwf	(??_adcDriver+4)& (0+255),b
  6381  002074  51B0               	movf	(_adcStruct+3)& (0+255),w,b
  6382  002076  1561               	andwf	(??_adcDriver+1)& (0+255),w,b
  6383  002078  6F65               	movwf	(??_adcDriver+5)& (0+255),b
  6384  00207A  6B66               	clrf	(??_adcDriver+6)& (0+255),b
  6385  00207C  6B67               	clrf	(??_adcDriver+7)& (0+255),b
  6386  00207E  5167               	movf	(??_adcDriver+7)& (0+255),w,b
  6387  002080  1164               	iorwf	(??_adcDriver+4)& (0+255),w,b
  6388  002082  1165               	iorwf	(??_adcDriver+5)& (0+255),w,b
  6389  002084  1166               	iorwf	(??_adcDriver+6)& (0+255),w,b
  6390  002086  E0DC               	bz	l694
  6391                           
  6392                           ; BSR set to: 0
  6393                           ;adc.c: 22: ADCON0bits.CHS=ch2Cnv;
  6394  002088  C068  F060         	movff	adcDriver@ch2Cnv,??_adcDriver
  6395  00208C  4760               	rlncf	??_adcDriver& (0+255),f,b
  6396  00208E  4760               	rlncf	??_adcDriver& (0+255),f,b
  6397  002090  50C2               	movf	4034,w,c	;volatile
  6398  002092  1960               	xorwf	??_adcDriver& (0+255),w,b
  6399  002094  0BC3               	andlw	-61
  6400  002096  1960               	xorwf	??_adcDriver& (0+255),w,b
  6401  002098  6EC2               	movwf	4034,c	;volatile
  6402                           
  6403                           ;adc.c: 25: ((adcStruct.flgs2convert) &= ~(1UL << (ch2Cnv)));
  6404  00209A  C068  F060         	movff	adcDriver@ch2Cnv,??_adcDriver
  6405  00209E  0E01               	movlw	1
  6406  0020A0  6F61               	movwf	(??_adcDriver+1)& (0+255),b
  6407  0020A2  6B62               	clrf	(??_adcDriver+2)& (0+255),b
  6408  0020A4  2B60               	incf	??_adcDriver& (0+255),f,b
  6409  0020A6  D003               	goto	u10594
  6410  0020A8                     u10595:
  6411  0020A8  90D8               	bcf	status,0,c
  6412  0020AA  3761               	rlcf	(??_adcDriver+1)& (0+255),f,b
  6413  0020AC  3762               	rlcf	(??_adcDriver+2)& (0+255),f,b
  6414  0020AE                     u10594:
  6415  0020AE  2F60               	decfsz	??_adcDriver& (0+255),f,b
  6416  0020B0  D7FB               	goto	u10595
  6417  0020B2  1D61               	comf	(??_adcDriver+1)& (0+255),w,b
  6418  0020B4  6F63               	movwf	(??_adcDriver+3)& (0+255),b
  6419  0020B6  1D62               	comf	(??_adcDriver+2)& (0+255),w,b
  6420  0020B8  6F64               	movwf	(??_adcDriver+4)& (0+255),b
  6421  0020BA  5163               	movf	(??_adcDriver+3)& (0+255),w,b
  6422  0020BC  17AF               	andwf	(_adcStruct+2)& (0+255),f,b
  6423  0020BE  5164               	movf	(??_adcDriver+4)& (0+255),w,b
  6424  0020C0  17B0               	andwf	(_adcStruct+3)& (0+255),f,b
  6425                           
  6426                           ; BSR set to: 0
  6427                           ;adc.c: 26: adcStruct.inProcessFlg=1;
  6428  0020C2  83AD               	bsf	_adcStruct& (0+255),1,b
  6429                           
  6430                           ; BSR set to: 0
  6431                           ;adc.c: 27: adcStruct.completeFlg=0;
  6432  0020C4  91AD               	bcf	_adcStruct& (0+255),0,b
  6433                           
  6434                           ; BSR set to: 0
  6435                           ;adc.c: 28: ADCON0bits.GODONE=1;
  6436  0020C6  82C2               	bsf	4034,1,c	;volatile
  6437                           
  6438                           ; BSR set to: 0
  6439  0020C8  0012               	return	
  6440  0020CA                     __end_of_adcDriver:
  6441                           	opt stack 0
  6442                           tblptru	equ	0xFF8
  6443                           tblptrh	equ	0xFF7
  6444                           tblptrl	equ	0xFF6
  6445                           tablat	equ	0xFF5
  6446                           prodl	equ	0xFF3
  6447                           intcon	equ	0xFF2
  6448                           intcon2	equ	0xFF1
  6449                           postinc0	equ	0xFEE
  6450                           wreg	equ	0xFE8
  6451                           indf1	equ	0xFE7
  6452                           postinc1	equ	0xFE6
  6453                           postdec1	equ	0xFE5
  6454                           fsr1h	equ	0xFE2
  6455                           fsr1l	equ	0xFE1
  6456                           indf2	equ	0xFDF
  6457                           postinc2	equ	0xFDE
  6458                           postdec2	equ	0xFDD
  6459                           plusw2	equ	0xFDB
  6460                           fsr2h	equ	0xFDA
  6461                           fsr2l	equ	0xFD9
  6462                           status	equ	0xFD8
  6463                           
  6464 ;; *************** function _actionsTimeoutShowSetting *****************
  6465 ;; Defined at:
  6466 ;;		line 302 in file "C:\fgr\16gb\0000 interior\deVolt\sw\main.c"
  6467 ;; Parameters:    Size  Location     Type
  6468 ;;		None
  6469 ;; Auto vars:     Size  Location     Type
  6470 ;;		None
  6471 ;; Return value:  Size  Location     Type
  6472 ;;		None               void
  6473 ;; Registers used:
  6474 ;;		wreg, status,2, status,0
  6475 ;; Tracked objects:
  6476 ;;		On entry : F/1
  6477 ;;		On exit  : E/0
  6478 ;;		Unchanged: FFFFFFF0/0
  6479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6480 ;;      Params:         0       0       0       0       0       0       0       0       0
  6481 ;;      Locals:         0       2       0       0       0       0       0       0       0
  6482 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6483 ;;      Totals:         0       2       0       0       0       0       0       0       0
  6484 ;;Total ram usage:        2 bytes
  6485 ;; Hardware stack levels used:    1
  6486 ;; Hardware stack levels required when called:    6
  6487 ;; This function calls:
  6488 ;;		Nothing
  6489 ;; This function is called by:
  6490 ;;		_main
  6491 ;; This function uses a non-reentrant model
  6492 ;;
  6493                           
  6494                           	psect	text11
  6495  00215C                     __ptext11:
  6496                           	opt stack 0
  6497  00215C                     _actionsTimeoutShowSetting:
  6498                           	opt stack 24
  6499                           
  6500                           ; BSR set to: 1
  6501                           ;main.c: 303: if((timerMem[TMR_SHOW_SETTING].flag?!(timerMem[TMR_SHOW_SETTING].flag=0):0
      +                          ))
  6502                           
  6503                           ; BSR set to: 0
  6504  00215C  B3A2               	btfsc	(_timerMem+23)& (0+255),1,b
  6505  00215E  D003               	goto	l6485
  6506                           
  6507                           ; BSR set to: 1
  6508  002160  0100               	movlb	0	; () banked
  6509  002162  6B60               	clrf	_actionsTimeoutShowSetting$438& (0+255),b
  6510  002164  D00B               	goto	L55
  6511  002166                     l6485:
  6512                           
  6513                           ; BSR set to: 1
  6514  002166  51A2               	movf	(_timerMem+23)& (0+255),w,b
  6515  002168  0BFD               	andlw	-3
  6516  00216A  6FA2               	movwf	(_timerMem+23)& (0+255),b
  6517  00216C  0101               	movlb	1	; () banked
  6518  00216E  31A2               	rrcf	(_timerMem+23)& (0+255),w,b
  6519  002170  0B01               	andlw	1
  6520  002172  0E00               	movlw	0
  6521  002174  B4D8               	btfsc	status,2,c
  6522  002176  0E01               	movlw	1
  6523  002178  0100               	movlb	0	; () banked
  6524  00217A  6F60               	movwf	_actionsTimeoutShowSetting$438& (0+255),b
  6525  00217C                     L55:
  6526  00217C  6B61               	clrf	(_actionsTimeoutShowSetting$438+1)& (0+255),b
  6527                           
  6528                           ; BSR set to: 0
  6529  00217E  5161               	movf	(_actionsTimeoutShowSetting$438+1)& (0+255),w,b
  6530  002180  1160               	iorwf	_actionsTimeoutShowSetting$438& (0+255),w,b
  6531  002182  B4D8               	btfsc	status,2,c
  6532  002184  0012               	return	
  6533  002186  D00E               	goto	l6617
  6534  002188                     l6489:
  6535                           
  6536                           ; BSR set to: 0
  6537                           ;main.c: 308: state++;
  6538  002188  2A3A               	incf	_state,f,c
  6539                           
  6540                           ; BSR set to: 0
  6541                           ;main.c: 309: { timerMem[TMR_SHOW_SETTING].flag=0; timerMem[TMR_SHOW_SETTING].prescaler=
      +                          timerDelayConstant[TMR_SHOW_SETTING]; timerMem[TMR_SHOW_SETTING].pause=0; };
  6542  00218A  0101               	movlb	1	; () banked
  6543  00218C  93A2               	bcf	(_timerMem+23)& (0+255),1,b
  6544                           
  6545                           ; BSR set to: 1
  6546  00218E  C10F  F19F         	movff	_timerDelayConstant+15,_timerMem+20
  6547  002192  C110  F1A0         	movff	_timerDelayConstant+16,_timerMem+21
  6548  002196  C111  F1A1         	movff	_timerDelayConstant+17,_timerMem+22
  6549                           
  6550                           ; BSR set to: 1
  6551  00219A  95A2               	bcf	(_timerMem+23)& (0+255),2,b
  6552                           
  6553                           ;main.c: 310: break;
  6554  00219C  0012               	return	
  6555  00219E                     l6513:
  6556                           
  6557                           ; BSR set to: 0
  6558                           ;main.c: 320: state=E_IDLE;
  6559  00219E  0E01               	movlw	1
  6560  0021A0  6E3A               	movwf	_state,c
  6561                           
  6562                           ;main.c: 321: break;
  6563  0021A2  0C01               	retlw	1
  6564  0021A4                     l6617:
  6565                           
  6566                           ; BSR set to: 0
  6567  0021A4  503A               	movf	_state,w,c
  6568                           
  6569                           ; Switch size 1, requested type "space"
  6570                           ; Number of cases is 17, Range of values is 9 to 25
  6571                           ; switch strategies available:
  6572                           ; Name         Instructions Cycles
  6573                           ; simple_byte           52    27 (average)
  6574                           ;	Chosen strategy is simple_byte
  6575  0021A6  0A09               	xorlw	9	; case 9
  6576  0021A8  E0EF               	bz	l6489
  6577  0021AA  0A03               	xorlw	3	; case 10
  6578  0021AC  E0ED               	bz	l6489
  6579  0021AE  0A01               	xorlw	1	; case 11
  6580  0021B0  E0EB               	bz	l6489
  6581  0021B2  0A07               	xorlw	7	; case 12
  6582  0021B4  E0F4               	bz	l6513
  6583  0021B6  0A02               	xorlw	2	; case 14
  6584  0021B8  E0E7               	bz	l6489
  6585  0021BA  0A01               	xorlw	1	; case 15
  6586  0021BC  E0E5               	bz	l6489
  6587  0021BE  0A1F               	xorlw	31	; case 16
  6588  0021C0  E0E3               	bz	l6489
  6589  0021C2  0A01               	xorlw	1	; case 17
  6590  0021C4  E0E1               	bz	l6489
  6591  0021C6  0A03               	xorlw	3	; case 18
  6592  0021C8  E0DF               	bz	l6489
  6593  0021CA  0A01               	xorlw	1	; case 19
  6594  0021CC  E0DD               	bz	l6489
  6595  0021CE  0A07               	xorlw	7	; case 20
  6596  0021D0  E0DB               	bz	l6489
  6597  0021D2  0A01               	xorlw	1	; case 21
  6598  0021D4  E0D9               	bz	l6489
  6599  0021D6  0A03               	xorlw	3	; case 22
  6600  0021D8  E0D7               	bz	l6489
  6601  0021DA  0A00               	xorlw	0	; case 22
  6602  0021DC  E0D5               	bz	l6489
  6603  0021DE  0A01               	xorlw	1	; case 23
  6604  0021E0  E0D3               	bz	l6489
  6605  0021E2  0A0F               	xorlw	15	; case 24
  6606  0021E4  E0D1               	bz	l6489
  6607  0021E6  0A01               	xorlw	1	; case 25
  6608  0021E8  D7DA               	goto	l6513
  6609  0021EA                     __end_of_actionsTimeoutShowSetting:
  6610                           	opt stack 0
  6611                           tblptru	equ	0xFF8
  6612                           tblptrh	equ	0xFF7
  6613                           tblptrl	equ	0xFF6
  6614                           tablat	equ	0xFF5
  6615                           prodl	equ	0xFF3
  6616                           intcon	equ	0xFF2
  6617                           intcon2	equ	0xFF1
  6618                           postinc0	equ	0xFEE
  6619                           wreg	equ	0xFE8
  6620                           indf1	equ	0xFE7
  6621                           postinc1	equ	0xFE6
  6622                           postdec1	equ	0xFE5
  6623                           fsr1h	equ	0xFE2
  6624                           fsr1l	equ	0xFE1
  6625                           indf2	equ	0xFDF
  6626                           postinc2	equ	0xFDE
  6627                           postdec2	equ	0xFDD
  6628                           plusw2	equ	0xFDB
  6629                           fsr2h	equ	0xFDA
  6630                           fsr2l	equ	0xFD9
  6631                           status	equ	0xFD8
  6632                           
  6633 ;; *************** function _pulsPinInit *****************
  6634 ;; Defined at:
  6635 ;;		line 60 in file "C:\fgr\16gb\libSwPic\oldV2\lib_sw_pic_20171007\pulsadorPin_1ms.c"
  6636 ;; Parameters:    Size  Location     Type
  6637 ;;		None
  6638 ;; Auto vars:     Size  Location     Type
  6639 ;;  i               1    6[BANK0 ] unsigned char 
  6640 ;; Return value:  Size  Location     Type
  6641 ;;		None               void
  6642 ;; Registers used:
  6643 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6644 ;; Tracked objects:
  6645 ;;		On entry : 0/0
  6646 ;;		On exit  : F/0
  6647 ;;		Unchanged: FFFFFFF0/0
  6648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6649 ;;      Params:         0       0       0       0       0       0       0       0       0
  6650 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6651 ;;      Temps:          0       6       0       0       0       0       0       0       0
  6652 ;;      Totals:         0       7       0       0       0       0       0       0       0
  6653 ;;Total ram usage:        7 bytes
  6654 ;; Hardware stack levels used:    1
  6655 ;; Hardware stack levels required when called:    6
  6656 ;; This function calls:
  6657 ;;		Nothing
  6658 ;; This function is called by:
  6659 ;;		_main
  6660 ;; This function uses a non-reentrant model
  6661 ;;
  6662                           
  6663                           	psect	text12
  6664  0021EA                     __ptext12:
  6665                           	opt stack 0
  6666  0021EA                     _pulsPinInit:
  6667                           	opt stack 24
  6668                           
  6669                           ;pulsadorPin_1ms.c: 61: char i;
  6670                           ;pulsadorPin_1ms.c: 63: for(i=0;i<PULS_PIN_CANT;i++)
  6671  0021EA  0100               	movlb	0	; () banked
  6672  0021EC  6B66               	clrf	pulsPinInit@i& (0+255),b
  6673  0021EE                     l7487:
  6674                           
  6675                           ; BSR set to: 0
  6676                           ;pulsadorPin_1ms.c: 64: {
  6677                           ;pulsadorPin_1ms.c: 65: pulsPin[i].state=!(((1UL<<(pulsPin[i].bitNum)) & (*(pulsPin[i].p
      +                          2port)))==0);
  6678  0021EE  5166               	movf	pulsPinInit@i& (0+255),w,b
  6679  0021F0  0D04               	mullw	4
  6680  0021F2  50F3               	movf	prodl,w,c
  6681  0021F4  0F3D               	addlw	low _pulsPin
  6682  0021F6  6ED9               	movwf	fsr2l,c
  6683  0021F8  6ADA               	clrf	fsr2h,c
  6684  0021FA  CFDE F060          	movff	postinc2,??_pulsPinInit
  6685  0021FE  CFDD F061          	movff	postdec2,??_pulsPinInit+1
  6686  002202  C060  FFD9         	movff	??_pulsPinInit,fsr2l
  6687  002206  C061  FFDA         	movff	??_pulsPinInit+1,fsr2h
  6688  00220A  50DF               	movf	indf2,w,c
  6689  00220C  6F62               	movwf	(??_pulsPinInit+2)& (0+255),b
  6690  00220E  D82C               	call	PL24	;call to abstracted procedure
  6691  002210  50DF               	movf	indf2,w,c
  6692  002212  0B07               	andlw	7
  6693  002214  6F63               	movwf	(??_pulsPinInit+3)& (0+255),b
  6694  002216  0E01               	movlw	1
  6695  002218  6F64               	movwf	(??_pulsPinInit+4)& (0+255),b
  6696  00221A  2B63               	incf	(??_pulsPinInit+3)& (0+255),f,b
  6697  00221C  D002               	goto	u10474
  6698  00221E                     u10475:
  6699  00221E  90D8               	bcf	status,0,c
  6700  002220  3764               	rlcf	(??_pulsPinInit+4)& (0+255),f,b
  6701  002222                     u10474:
  6702  002222  2F63               	decfsz	(??_pulsPinInit+3)& (0+255),f,b
  6703  002224  D7FC               	goto	u10475
  6704  002226  5164               	movf	(??_pulsPinInit+4)& (0+255),w,b
  6705  002228  1562               	andwf	(??_pulsPinInit+2)& (0+255),w,b
  6706  00222A  0E01               	movlw	1
  6707  00222C  B4D8               	btfsc	status,2,c
  6708  00222E  0E00               	movlw	0
  6709  002230  6F65               	movwf	(??_pulsPinInit+5)& (0+255),b
  6710  002232  D81A               	call	PL24	;call to abstracted procedure
  6711  002234  4765               	rlncf	(??_pulsPinInit+5)& (0+255),f,b
  6712  002236  4765               	rlncf	(??_pulsPinInit+5)& (0+255),f,b
  6713  002238  4765               	rlncf	(??_pulsPinInit+5)& (0+255),f,b
  6714  00223A  50DF               	movf	indf2,w,c
  6715  00223C  1965               	xorwf	(??_pulsPinInit+5)& (0+255),w,b
  6716  00223E  0BF7               	andlw	-9
  6717  002240  1965               	xorwf	(??_pulsPinInit+5)& (0+255),w,b
  6718  002242  6EDF               	movwf	indf2,c
  6719                           
  6720                           ;pulsadorPin_1ms.c: 66: pulsPin[i].prevState=pulsPin[i].state;
  6721  002244  D811               	call	PL24	;call to abstracted procedure
  6722  002246  30DF               	rrcf	indf2,w,c
  6723  002248  32E8               	rrcf	wreg,f,c
  6724  00224A  32E8               	rrcf	wreg,f,c
  6725  00224C  0B01               	andlw	1
  6726  00224E  6F60               	movwf	??_pulsPinInit& (0+255),b
  6727  002250  D80B               	call	PL24	;call to abstracted procedure
  6728  002252  3B60               	swapf	??_pulsPinInit& (0+255),f,b
  6729  002254  50DF               	movf	indf2,w,c
  6730  002256  1960               	xorwf	??_pulsPinInit& (0+255),w,b
  6731  002258  0BEF               	andlw	-17
  6732  00225A  1960               	xorwf	??_pulsPinInit& (0+255),w,b
  6733  00225C  6EDF               	movwf	indf2,c
  6734                           
  6735                           ; BSR set to: 0
  6736  00225E  2B66               	incf	pulsPinInit@i& (0+255),f,b
  6737                           
  6738                           ; BSR set to: 0
  6739  002260  0E03               	movlw	3
  6740  002262  6566               	cpfsgt	pulsPinInit@i& (0+255),b
  6741  002264  D7C4               	goto	l7487
  6742  002266  0C03               	retlw	3
  6743  002268                     __end_of_pulsPinInit:
  6744                           	opt stack 0
  6745  002268                     PL24:
  6746  002268  5166               	movf	pulsPinInit@i& (0+255),w,b
  6747  00226A  0D04               	mullw	4
  6748  00226C  50F3               	movf	prodl,w,c
  6749  00226E  0F3F               	addlw	low (_pulsPin+2)
  6750  002270  6ED9               	movwf	fsr2l,c
  6751  002272  6ADA               	clrf	fsr2h,c
  6752  002274  0012               	return	
  6753                           tblptru	equ	0xFF8
  6754                           tblptrh	equ	0xFF7
  6755                           tblptrl	equ	0xFF6
  6756                           tablat	equ	0xFF5
  6757                           prodl	equ	0xFF3
  6758                           intcon	equ	0xFF2
  6759                           intcon2	equ	0xFF1
  6760                           postinc0	equ	0xFEE
  6761                           wreg	equ	0xFE8
  6762                           indf1	equ	0xFE7
  6763                           postinc1	equ	0xFE6
  6764                           postdec1	equ	0xFE5
  6765                           fsr1h	equ	0xFE2
  6766                           fsr1l	equ	0xFE1
  6767                           indf2	equ	0xFDF
  6768                           postinc2	equ	0xFDE
  6769                           postdec2	equ	0xFDD
  6770                           plusw2	equ	0xFDB
  6771                           fsr2h	equ	0xFDA
  6772                           fsr2l	equ	0xFD9
  6773                           status	equ	0xFD8
  6774                           
  6775 ;; *************** function _systemInit *****************
  6776 ;; Defined at:
  6777 ;;		line 11 in file "C:\fgr\16gb\0000 interior\deVolt\sw\system.c"
  6778 ;; Parameters:    Size  Location     Type
  6779 ;;		None
  6780 ;; Auto vars:     Size  Location     Type
  6781 ;;		None
  6782 ;; Return value:  Size  Location     Type
  6783 ;;		None               void
  6784 ;; Registers used:
  6785 ;;		wreg, status,2, cstack
  6786 ;; Tracked objects:
  6787 ;;		On entry : F/0
  6788 ;;		On exit  : F/0
  6789 ;;		Unchanged: FFFFFFF0/0
  6790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6791 ;;      Params:         0       0       0       0       0       0       0       0       0
  6792 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6793 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6794 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6795 ;;Total ram usage:        0 bytes
  6796 ;; Hardware stack levels used:    1
  6797 ;; Hardware stack levels required when called:    7
  6798 ;; This function calls:
  6799 ;;		_adcSetup
  6800 ;; This function is called by:
  6801 ;;		_main
  6802 ;; This function uses a non-reentrant model
  6803 ;;
  6804                           
  6805                           	psect	text13
  6806  00237C                     __ptext13:
  6807                           	opt stack 0
  6808  00237C                     _systemInit:
  6809                           	opt stack 23
  6810                           
  6811                           ; BSR set to: 0
  6812                           ;system.c: 12: OSCCONbits.SCS=0x00;
  6813                           
  6814                           ; BSR set to: 0
  6815  00237C  0EFC               	movlw	-4
  6816  00237E  16D3               	andwf	4051,f,c	;volatile
  6817                           
  6818                           ; BSR set to: 0
  6819                           ;system.c: 13: UCFGbits.UTRDIS=1;
  6820  002380  866F               	bsf	3951,3,c	;volatile
  6821                           
  6822                           ; BSR set to: 0
  6823                           ;system.c: 14: RCONbits.IPEN=1;
  6824  002382  8ED0               	bsf	4048,7,c	;volatile
  6825                           
  6826                           ; BSR set to: 0
  6827                           ;system.c: 15: INTCON2bits.RBPU=0;
  6828  002384  9EF1               	bcf	intcon2,7,c	;volatile
  6829                           
  6830                           ; BSR set to: 0
  6831                           ;system.c: 17: IPR2bits.TMR3IP=0;
  6832  002386  92A2               	bcf	4002,1,c	;volatile
  6833                           
  6834                           ; BSR set to: 0
  6835                           ;system.c: 18: IPR1bits.ADIP=0;
  6836  002388  9C9F               	bcf	3999,6,c	;volatile
  6837                           
  6838                           ; BSR set to: 0
  6839                           ;system.c: 21: adcSetup();
  6840  00238A  ECB0  F013         	call	_adcSetup	;wreg free
  6841                           
  6842                           ; BSR set to: 0
  6843                           ;system.c: 23: { T0CONbits.T08BIT=1; T0CONbits.T0CS=0; T0CONbits.PSA=0; T0CONbits.T0PS=0
      +                          x07; TMR0=241; T0CONbits.TMR0ON=1; };
  6844  00238E  8CD5               	bsf	4053,6,c	;volatile
  6845                           
  6846                           ; BSR set to: 0
  6847  002390  9AD5               	bcf	4053,5,c	;volatile
  6848                           
  6849                           ; BSR set to: 0
  6850  002392  96D5               	bcf	4053,3,c	;volatile
  6851                           
  6852                           ; BSR set to: 0
  6853  002394  0E07               	movlw	7
  6854  002396  12D5               	iorwf	4053,f,c	;volatile
  6855                           
  6856                           ; BSR set to: 0
  6857  002398  6AD7               	clrf	4055,c	;volatile
  6858  00239A  0EF1               	movlw	241
  6859  00239C  6ED6               	movwf	4054,c	;volatile
  6860                           
  6861                           ; BSR set to: 0
  6862  00239E  8ED5               	bsf	4053,7,c	;volatile
  6863                           
  6864                           ; BSR set to: 0
  6865                           ;system.c: 24: { T3CONbits.TMR3CS=0; T3CONbits.T3CKPS=0x03; T3CONbits.T3SYNC=1; TMR3=640
      +                          36UL; T3CONbits.TMR3ON=1; T3CONbits.RD16=1; };
  6866  0023A0  92B1               	bcf	4017,1,c	;volatile
  6867                           
  6868                           ; BSR set to: 0
  6869  0023A2  0E30               	movlw	48
  6870  0023A4  12B1               	iorwf	4017,f,c	;volatile
  6871                           
  6872                           ; BSR set to: 0
  6873  0023A6  84B1               	bsf	4017,2,c	;volatile
  6874                           
  6875                           ; BSR set to: 0
  6876  0023A8  0EFA               	movlw	250
  6877  0023AA  6EB3               	movwf	4019,c	;volatile
  6878  0023AC  0E24               	movlw	36
  6879  0023AE  6EB2               	movwf	4018,c	;volatile
  6880                           
  6881                           ; BSR set to: 0
  6882  0023B0  80B1               	bsf	4017,0,c	;volatile
  6883                           
  6884                           ; BSR set to: 0
  6885  0023B2  8EB1               	bsf	4017,7,c	;volatile
  6886                           
  6887                           ; BSR set to: 0
  6888                           ;system.c: 26: { TRISA0=0; TRISA1=0; TRISA5=0; TRISA3=0; TRISA4=0; TRISA2=0; TRISB7=0; T
      +                          RISB1=0; TRISB2=0; TRISB4=0; TRISB6=0; TRISB5=0; TRISB3=0; TRISC6=0; };
  6889  0023B4  9092               	bcf	3986,0,c	;volatile
  6890                           
  6891                           ; BSR set to: 0
  6892  0023B6  9292               	bcf	3986,1,c	;volatile
  6893                           
  6894                           ; BSR set to: 0
  6895  0023B8  9A92               	bcf	3986,5,c	;volatile
  6896                           
  6897                           ; BSR set to: 0
  6898  0023BA  9692               	bcf	3986,3,c	;volatile
  6899                           
  6900                           ; BSR set to: 0
  6901  0023BC  9892               	bcf	3986,4,c	;volatile
  6902                           
  6903                           ; BSR set to: 0
  6904  0023BE  9492               	bcf	3986,2,c	;volatile
  6905                           
  6906                           ; BSR set to: 0
  6907  0023C0  9E93               	bcf	3987,7,c	;volatile
  6908                           
  6909                           ; BSR set to: 0
  6910  0023C2  9293               	bcf	3987,1,c	;volatile
  6911                           
  6912                           ; BSR set to: 0
  6913  0023C4  9493               	bcf	3987,2,c	;volatile
  6914                           
  6915                           ; BSR set to: 0
  6916  0023C6  9893               	bcf	3987,4,c	;volatile
  6917                           
  6918                           ; BSR set to: 0
  6919  0023C8  9C93               	bcf	3987,6,c	;volatile
  6920                           
  6921                           ; BSR set to: 0
  6922  0023CA  9A93               	bcf	3987,5,c	;volatile
  6923                           
  6924                           ; BSR set to: 0
  6925  0023CC  9693               	bcf	3987,3,c	;volatile
  6926                           
  6927                           ; BSR set to: 0
  6928  0023CE  9C94               	bcf	3988,6,c	;volatile
  6929                           
  6930                           ; BSR set to: 0
  6931                           ;system.c: 27: { PORTAbits.RA0=0; PORTAbits.RA1=0; PORTAbits.RA5=0; PORTAbits.RA3=0; POR
      +                          TAbits.RA4=0; PORTAbits.RA2=0; PORTBbits.RB7=0; PORTBbits.RB1=0; PORTBbits.RB2=0; PORTBb
      +                          its.RB4=0; PORTBbits.RB6=0; PORTBbits.RB5=0; PORTBbits.RB3=0; PORTCbits.RC6=0; };
  6932  0023D0  9080               	bcf	3968,0,c	;volatile
  6933                           
  6934                           ; BSR set to: 0
  6935  0023D2  9280               	bcf	3968,1,c	;volatile
  6936                           
  6937                           ; BSR set to: 0
  6938  0023D4  9A80               	bcf	3968,5,c	;volatile
  6939                           
  6940                           ; BSR set to: 0
  6941  0023D6  9680               	bcf	3968,3,c	;volatile
  6942                           
  6943                           ; BSR set to: 0
  6944  0023D8  9880               	bcf	3968,4,c	;volatile
  6945                           
  6946                           ; BSR set to: 0
  6947                           
  6948                           ; BSR set to: 0
  6949                           
  6950                           ; BSR set to: 0
  6951                           
  6952                           ; BSR set to: 0
  6953                           
  6954                           ; BSR set to: 0
  6955                           
  6956                           ; BSR set to: 0
  6957  0023DA  ECB7  F00A         	call	PL22	;call to abstracted procedure
  6958                           
  6959                           ; BSR set to: 0
  6960  0023DE  9A81               	bcf	3969,5,c	;volatile
  6961                           
  6962                           ; BSR set to: 0
  6963  0023E0  9681               	bcf	3969,3,c	;volatile
  6964                           
  6965                           ; BSR set to: 0
  6966  0023E2  9C82               	bcf	3970,6,c	;volatile
  6967                           
  6968                           ; BSR set to: 0
  6969                           ;system.c: 29: INTCONbits.TMR0IE=1;
  6970  0023E4  8AF2               	bsf	intcon,5,c	;volatile
  6971                           
  6972                           ; BSR set to: 0
  6973                           ;system.c: 30: PIE2bits.TMR3IE=1;
  6974  0023E6  82A0               	bsf	4000,1,c	;volatile
  6975                           
  6976                           ; BSR set to: 0
  6977                           ;system.c: 32: INTCONbits.PEIE=1;
  6978  0023E8  8CF2               	bsf	intcon,6,c	;volatile
  6979                           
  6980                           ; BSR set to: 0
  6981                           ;system.c: 33: INTCONbits.GIE=1;
  6982  0023EA  8EF2               	bsf	intcon,7,c	;volatile
  6983                           
  6984                           ; BSR set to: 0
  6985                           ;system.c: 34: INTCONbits.GIEH=1;
  6986  0023EC  8EF2               	bsf	intcon,7,c	;volatile
  6987                           
  6988                           ; BSR set to: 0
  6989                           ;system.c: 35: INTCONbits.GIEL=1;
  6990  0023EE  8CF2               	bsf	intcon,6,c	;volatile
  6991                           
  6992                           ; BSR set to: 0
  6993  0023F0  0C24               	retlw	36
  6994  0023F2                     __end_of_systemInit:
  6995                           	opt stack 0
  6996                           tblptru	equ	0xFF8
  6997                           tblptrh	equ	0xFF7
  6998                           tblptrl	equ	0xFF6
  6999                           tablat	equ	0xFF5
  7000                           prodl	equ	0xFF3
  7001                           intcon	equ	0xFF2
  7002                           intcon2	equ	0xFF1
  7003                           postinc0	equ	0xFEE
  7004                           wreg	equ	0xFE8
  7005                           indf1	equ	0xFE7
  7006                           postinc1	equ	0xFE6
  7007                           postdec1	equ	0xFE5
  7008                           fsr1h	equ	0xFE2
  7009                           fsr1l	equ	0xFE1
  7010                           indf2	equ	0xFDF
  7011                           postinc2	equ	0xFDE
  7012                           postdec2	equ	0xFDD
  7013                           plusw2	equ	0xFDB
  7014                           fsr2h	equ	0xFDA
  7015                           fsr2l	equ	0xFD9
  7016                           status	equ	0xFD8
  7017                           
  7018 ;; *************** function _timerDriver *****************
  7019 ;; Defined at:
  7020 ;;		line 10 in file "C:\fgr\16gb\libSwPic\oldV2\lib_sw_pic_20171007\timer.c"
  7021 ;; Parameters:    Size  Location     Type
  7022 ;;  i               1    wreg     unsigned char 
  7023 ;; Auto vars:     Size  Location     Type
  7024 ;;  i               1    3[BANK0 ] unsigned char 
  7025 ;; Return value:  Size  Location     Type
  7026 ;;		None               void
  7027 ;; Registers used:
  7028 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7029 ;; Tracked objects:
  7030 ;;		On entry : E/1
  7031 ;;		On exit  : E/0
  7032 ;;		Unchanged: FFFFFFF0/0
  7033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7034 ;;      Params:         0       0       0       0       0       0       0       0       0
  7035 ;;      Locals:         0       1       0       0       0       0       0       0       0
  7036 ;;      Temps:          0       3       0       0       0       0       0       0       0
  7037 ;;      Totals:         0       4       0       0       0       0       0       0       0
  7038 ;;Total ram usage:        4 bytes
  7039 ;; Hardware stack levels used:    1
  7040 ;; Hardware stack levels required when called:    6
  7041 ;; This function calls:
  7042 ;;		Nothing
  7043 ;; This function is called by:
  7044 ;;		_main
  7045 ;; This function uses a non-reentrant model
  7046 ;;
  7047                           
  7048                           	psect	text14
  7049  001E20                     __ptext14:
  7050                           	opt stack 0
  7051  001E20                     _timerDriver:
  7052                           	opt stack 24
  7053                           
  7054                           ; BSR set to: 0
  7055                           ;timerDriver@i stored from wreg
  7056  001E20  CFE8 F063          	movff	wreg,timerDriver@i
  7057                           
  7058                           ;timer.c: 12: if(!timerMem[i].pause && timerMem[i].prescaler>0)
  7059  001E24  0100               	movlb	0	; () banked
  7060  001E26  D850               	call	PL12	;call to abstracted procedure
  7061  001E28  50DF               	movf	indf2,w,c
  7062  001E2A  6F61               	movwf	(??_timerDriver+1)& (0+255),b
  7063  001E2C  B561               	btfsc	(??_timerDriver+1)& (0+255),2,b
  7064  001E2E  0012               	return	
  7065                           
  7066                           ; BSR set to: 0
  7067  001E30  5163               	movf	timerDriver@i& (0+255),w,b
  7068  001E32  ECFC  F00E         	call	PL13	;call to abstracted procedure
  7069  001E36  CFDE F060          	movff	postinc2,??_timerDriver
  7070  001E3A  CFDE F061          	movff	postinc2,??_timerDriver+1
  7071  001E3E  CFDE F062          	movff	postinc2,??_timerDriver+2
  7072  001E42  5162               	movf	(??_timerDriver+2)& (0+255),w,b
  7073  001E44  0A80               	xorlw	128
  7074  001E46  0F80               	addlw	128
  7075  001E48  E105               	bnz	u10515
  7076  001E4A  0E00               	movlw	0
  7077  001E4C  5D61               	subwf	(??_timerDriver+1)& (0+255),w,b
  7078  001E4E  E102               	bnz	u10515
  7079  001E50  0E01               	movlw	1
  7080  001E52  5D60               	subwf	??_timerDriver& (0+255),w,b
  7081  001E54                     u10515:
  7082  001E54  A0D8               	btfss	status,0,c
  7083  001E56  0012               	return	
  7084                           
  7085                           ; BSR set to: 0
  7086                           ;timer.c: 13: {
  7087                           ;timer.c: 14: timerMem[i].prescaler--;
  7088  001E58  5163               	movf	timerDriver@i& (0+255),w,b
  7089  001E5A  ECFC  F00E         	call	PL13	;call to abstracted procedure
  7090  001E5E  0EFF               	movlw	255
  7091  001E60  06DE               	decf	postinc2,f,c
  7092  001E62  22DE               	addwfc	postinc2,f,c
  7093  001E64  22DD               	addwfc	postdec2,f,c
  7094                           
  7095                           ;timer.c: 15: if(timerMem[i].prescaler==0)
  7096  001E66  0100               	movlb	0	; () banked
  7097  001E68  5163               	movf	timerDriver@i& (0+255),w,b
  7098  001E6A  0D04               	mullw	4
  7099  001E6C  0101               	movlb	1	; () banked
  7100  001E6E  0E8B               	movlw	low _timerMem
  7101  001E70  24F3               	addwf	prodl,w,c
  7102  001E72  6ED9               	movwf	fsr2l,c
  7103  001E74  6ADA               	clrf	fsr2h,c
  7104  001E76  0E01               	movlw	high _timerMem
  7105  001E78  22DA               	addwfc	fsr2h,f,c
  7106  001E7A  50DE               	movf	postinc2,w,c
  7107  001E7C  10DE               	iorwf	postinc2,w,c
  7108  001E7E  10DD               	iorwf	postdec2,w,c
  7109  001E80  A4D8               	btfss	status,2,c
  7110  001E82  0012               	return	
  7111                           
  7112                           ; BSR set to: 1
  7113                           ;timer.c: 16: {
  7114                           ;timer.c: 17: timerMem[i].flag=1;
  7115  001E84  0100               	movlb	0	; () banked
  7116  001E86  D820               	call	PL12	;call to abstracted procedure
  7117  001E88  0E02               	movlw	2
  7118  001E8A  12DF               	iorwf	223,f,c
  7119                           
  7120                           ;timer.c: 18: if(timerMem[i].loop) timerMem[i].prescaler=timerDelayConstant[i];
  7121  001E8C  D81D               	call	PL12	;call to abstracted procedure
  7122  001E8E  50DF               	movf	indf2,w,c
  7123  001E90  6F61               	movwf	(??_timerDriver+1)& (0+255),b
  7124  001E92  A161               	btfss	(??_timerDriver+1)& (0+255),0,b
  7125  001E94  0012               	return	
  7126                           
  7127                           ; BSR set to: 0
  7128  001E96  5163               	movf	timerDriver@i& (0+255),w,b
  7129  001E98  0D03               	mullw	3
  7130  001E9A  0E00               	movlw	low _timerDelayConstant
  7131  001E9C  24F3               	addwf	prodl,w,c
  7132  001E9E  6ED9               	movwf	fsr2l,c
  7133  001EA0  6ADA               	clrf	fsr2h,c
  7134  001EA2  0E01               	movlw	high _timerDelayConstant
  7135  001EA4  22DA               	addwfc	fsr2h,f,c
  7136  001EA6  5163               	movf	timerDriver@i& (0+255),w,b
  7137  001EA8  0D04               	mullw	4
  7138  001EAA  0101               	movlb	1	; () banked
  7139  001EAC  0E8B               	movlw	low _timerMem
  7140  001EAE  24F3               	addwf	prodl,w,c
  7141  001EB0  6EE1               	movwf	fsr1l,c
  7142  001EB2  6AE2               	clrf	fsr1h,c
  7143  001EB4  0E01               	movlw	high _timerMem
  7144  001EB6  22E2               	addwfc	fsr1h,f,c
  7145  001EB8  CFDE FFE6          	movff	postinc2,postinc1
  7146  001EBC  CFDE FFE6          	movff	postinc2,postinc1
  7147  001EC0  CFDE FFE5          	movff	postinc2,postdec1
  7148  001EC4  52E5               	movf	postdec1,f,c
  7149  001EC6  0012               	return	
  7150  001EC8                     __end_of_timerDriver:
  7151                           	opt stack 0
  7152  001EC8                     PL12:
  7153  001EC8  5163               	movf	timerDriver@i& (0+255),w,b
  7154  001ECA  0D04               	mullw	4
  7155  001ECC  CFF3 F060          	movff	prodl,??_timerDriver
  7156  001ED0  0E03               	movlw	3
  7157  001ED2  2760               	addwf	??_timerDriver& (0+255),f,b
  7158  001ED4  0E8B               	movlw	low _timerMem
  7159  001ED6  2560               	addwf	??_timerDriver& (0+255),w,b
  7160  001ED8  6ED9               	movwf	fsr2l,c
  7161  001EDA  6ADA               	clrf	fsr2h,c
  7162  001EDC  0E01               	movlw	high _timerMem
  7163  001EDE  22DA               	addwfc	fsr2h,f,c
  7164  001EE0  0012               	return	
  7165                           tblptru	equ	0xFF8
  7166                           tblptrh	equ	0xFF7
  7167                           tblptrl	equ	0xFF6
  7168                           tablat	equ	0xFF5
  7169                           prodl	equ	0xFF3
  7170                           intcon	equ	0xFF2
  7171                           intcon2	equ	0xFF1
  7172                           postinc0	equ	0xFEE
  7173                           wreg	equ	0xFE8
  7174                           indf1	equ	0xFE7
  7175                           postinc1	equ	0xFE6
  7176                           postdec1	equ	0xFE5
  7177                           fsr1h	equ	0xFE2
  7178                           fsr1l	equ	0xFE1
  7179                           indf2	equ	0xFDF
  7180                           postinc2	equ	0xFDE
  7181                           postdec2	equ	0xFDD
  7182                           plusw2	equ	0xFDB
  7183                           fsr2h	equ	0xFDA
  7184                           fsr2l	equ	0xFD9
  7185                           status	equ	0xFD8
  7186                           
  7187 ;; *************** function _adcSetup *****************
  7188 ;; Defined at:
  7189 ;;		line 48 in file "C:\fgr\16gb\0000 interior\deVolt\sw\adc.c"
  7190 ;; Parameters:    Size  Location     Type
  7191 ;;		None
  7192 ;; Auto vars:     Size  Location     Type
  7193 ;;		None
  7194 ;; Return value:  Size  Location     Type
  7195 ;;		None               void
  7196 ;; Registers used:
  7197 ;;		wreg, status,2
  7198 ;; Tracked objects:
  7199 ;;		On entry : F/0
  7200 ;;		On exit  : F/0
  7201 ;;		Unchanged: FFFFFFF0/0
  7202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7203 ;;      Params:         0       0       0       0       0       0       0       0       0
  7204 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7205 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7206 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7207 ;;Total ram usage:        0 bytes
  7208 ;; Hardware stack levels used:    1
  7209 ;; Hardware stack levels required when called:    6
  7210 ;; This function calls:
  7211 ;;		Nothing
  7212 ;; This function is called by:
  7213 ;;		_systemInit
  7214 ;; This function uses a non-reentrant model
  7215 ;;
  7216                           
  7217                           	psect	text15
  7218  002760                     __ptext15:
  7219                           	opt stack 0
  7220  002760                     _adcSetup:
  7221                           	opt stack 23
  7222                           
  7223                           ; BSR set to: 0
  7224                           ;adc.c: 49: ADCON1bits.PCFG=0x0F;
  7225  002760  0E0F               	movlw	15
  7226  002762  12C1               	iorwf	4033,f,c	;volatile
  7227                           
  7228                           ;adc.c: 50: ADCON2bits.ADCS=0x06;
  7229  002764  50C0               	movf	4032,w,c	;volatile
  7230  002766  0BF8               	andlw	-8
  7231  002768  0906               	iorlw	6
  7232  00276A  6EC0               	movwf	4032,c	;volatile
  7233                           
  7234                           ;adc.c: 51: ADCON2bits.ACQT=0x00;
  7235  00276C  0EC7               	movlw	-57
  7236  00276E  16C0               	andwf	4032,f,c	;volatile
  7237                           
  7238                           ; BSR set to: 0
  7239                           ;adc.c: 52: ADFM=1;
  7240  002770  8EC0               	bsf	4032,7,c	;volatile
  7241                           
  7242                           ; BSR set to: 0
  7243                           ;adc.c: 53: ADCON0bits.ADON=1;
  7244  002772  80C2               	bsf	4034,0,c	;volatile
  7245                           
  7246                           ; BSR set to: 0
  7247                           ;adc.c: 54: PIR1bits.ADIF=0;
  7248  002774  9C9E               	bcf	3998,6,c	;volatile
  7249                           
  7250                           ; BSR set to: 0
  7251                           ;adc.c: 55: PIE1bits.ADIE=1;
  7252  002776  8C9D               	bsf	3997,6,c	;volatile
  7253                           
  7254                           ; BSR set to: 0
  7255  002778  0CC7               	retlw	199
  7256  00277A                     __end_of_adcSetup:
  7257                           	opt stack 0
  7258                           tblptru	equ	0xFF8
  7259                           tblptrh	equ	0xFF7
  7260                           tblptrl	equ	0xFF6
  7261                           tablat	equ	0xFF5
  7262                           prodl	equ	0xFF3
  7263                           intcon	equ	0xFF2
  7264                           intcon2	equ	0xFF1
  7265                           postinc0	equ	0xFEE
  7266                           wreg	equ	0xFE8
  7267                           indf1	equ	0xFE7
  7268                           postinc1	equ	0xFE6
  7269                           postdec1	equ	0xFE5
  7270                           fsr1h	equ	0xFE2
  7271                           fsr1l	equ	0xFE1
  7272                           indf2	equ	0xFDF
  7273                           postinc2	equ	0xFDE
  7274                           postdec2	equ	0xFDD
  7275                           plusw2	equ	0xFDB
  7276                           fsr2h	equ	0xFDA
  7277                           fsr2l	equ	0xFD9
  7278                           status	equ	0xFD8
  7279                           
  7280 ;; *************** function ___awtoft *****************
  7281 ;; Defined at:
  7282 ;;		line 33 in file "C:\Program Files (x86)\HI-TECH Software\PICC-18\9.80\sources\awtoft.c"
  7283 ;; Parameters:    Size  Location     Type
  7284 ;;  c               2    8[BANK0 ] int 
  7285 ;; Auto vars:     Size  Location     Type
  7286 ;;  sign            1   11[BANK0 ] unsigned char 
  7287 ;; Return value:  Size  Location     Type
  7288 ;;                  3    8[BANK0 ] float 
  7289 ;; Registers used:
  7290 ;;		wreg, status,2, status,0, cstack
  7291 ;; Tracked objects:
  7292 ;;		On entry : 0/0
  7293 ;;		On exit  : F/0
  7294 ;;		Unchanged: FFFFFFF0/0
  7295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7296 ;;      Params:         0       3       0       0       0       0       0       0       0
  7297 ;;      Locals:         0       1       0       0       0       0       0       0       0
  7298 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7299 ;;      Totals:         0       4       0       0       0       0       0       0       0
  7300 ;;Total ram usage:        4 bytes
  7301 ;; Hardware stack levels used:    1
  7302 ;; Hardware stack levels required when called:    7
  7303 ;; This function calls:
  7304 ;;		___ftpack
  7305 ;; This function is called by:
  7306 ;;		_incVar
  7307 ;;		_decVar
  7308 ;;		_main
  7309 ;; This function uses a non-reentrant model
  7310 ;;
  7311                           
  7312                           	psect	text16
  7313  0026A4                     __ptext16:
  7314                           	opt stack 0
  7315  0026A4                     ___awtoft:
  7316                           	opt stack 22
  7317                           
  7318                           ; BSR set to: 0
  7319  0026A4  0100               	movlb	0	; () banked
  7320  0026A6  6B6B               	clrf	___awtoft@sign& (0+255),b
  7321  0026A8  AF69               	btfss	(___awtoft@c+1)& (0+255),7,b
  7322  0026AA  D006               	goto	l7725
  7323                           
  7324                           ; BSR set to: 0
  7325  0026AC  6D68               	negf	___awtoft@c& (0+255),b
  7326  0026AE  1F69               	comf	(___awtoft@c+1)& (0+255),f,b
  7327  0026B0  B0D8               	btfsc	status,0,c
  7328  0026B2  2B69               	incf	(___awtoft@c+1)& (0+255),f,b
  7329                           
  7330                           ; BSR set to: 0
  7331  0026B4  0E01               	movlw	1
  7332  0026B6  6F6B               	movwf	___awtoft@sign& (0+255),b
  7333  0026B8                     l7725:
  7334                           
  7335                           ; BSR set to: 0
  7336  0026B8  C068  F060         	movff	___awtoft@c,?___ftpack
  7337  0026BC  C069  F061         	movff	___awtoft@c+1,?___ftpack+1
  7338  0026C0  6B62               	clrf	(?___ftpack+2)& (0+255),b
  7339  0026C2  0E8E               	movlw	142
  7340  0026C4  6F63               	movwf	(?___ftpack+3)& (0+255),b
  7341  0026C6  C06B  F064         	movff	___awtoft@sign,?___ftpack+4
  7342  0026CA  EC65  F010         	call	___ftpack	;wreg free
  7343  0026CE  C060  F068         	movff	?___ftpack,?___awtoft
  7344  0026D2  C061  F069         	movff	?___ftpack+1,?___awtoft+1
  7345  0026D6  C062  F06A         	movff	?___ftpack+2,?___awtoft+2
  7346                           
  7347                           ; BSR set to: 0
  7348  0026DA  0012               	return	
  7349  0026DC                     __end_of___awtoft:
  7350                           	opt stack 0
  7351                           tblptru	equ	0xFF8
  7352                           tblptrh	equ	0xFF7
  7353                           tblptrl	equ	0xFF6
  7354                           tablat	equ	0xFF5
  7355                           prodl	equ	0xFF3
  7356                           intcon	equ	0xFF2
  7357                           intcon2	equ	0xFF1
  7358                           postinc0	equ	0xFEE
  7359                           wreg	equ	0xFE8
  7360                           indf1	equ	0xFE7
  7361                           postinc1	equ	0xFE6
  7362                           postdec1	equ	0xFE5
  7363                           fsr1h	equ	0xFE2
  7364                           fsr1l	equ	0xFE1
  7365                           indf2	equ	0xFDF
  7366                           postinc2	equ	0xFDE
  7367                           postdec2	equ	0xFDD
  7368                           plusw2	equ	0xFDB
  7369                           fsr2h	equ	0xFDA
  7370                           fsr2l	equ	0xFD9
  7371                           status	equ	0xFD8
  7372                           
  7373 ;; *************** function ___ftsub *****************
  7374 ;; Defined at:
  7375 ;;		line 22 in file "C:\Program Files (x86)\HI-TECH Software\PICC-18\9.80\sources\ftsub.c"
  7376 ;; Parameters:    Size  Location     Type
  7377 ;;  f1              3   43[BANK0 ] float 
  7378 ;;  f2              3   46[BANK0 ] float 
  7379 ;; Auto vars:     Size  Location     Type
  7380 ;;		None
  7381 ;; Return value:  Size  Location     Type
  7382 ;;                  3   43[BANK0 ] float 
  7383 ;; Registers used:
  7384 ;;		wreg, status,2, status,0, cstack
  7385 ;; Tracked objects:
  7386 ;;		On entry : F/0
  7387 ;;		On exit  : F/0
  7388 ;;		Unchanged: FFFFFFF0/0
  7389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7390 ;;      Params:         0       6       0       0       0       0       0       0       0
  7391 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7392 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7393 ;;      Totals:         0       6       0       0       0       0       0       0       0
  7394 ;;Total ram usage:        6 bytes
  7395 ;; Hardware stack levels used:    1
  7396 ;; Hardware stack levels required when called:    8
  7397 ;; This function calls:
  7398 ;;		___ftadd
  7399 ;; This function is called by:
  7400 ;;		_iir
  7401 ;; This function uses a non-reentrant model
  7402 ;;
  7403                           
  7404                           	psect	text17
  7405  0026DC                     __ptext17:
  7406                           	opt stack 0
  7407  0026DC                     ___ftsub:
  7408                           	opt stack 21
  7409                           
  7410                           ; BSR set to: 0
  7411                           
  7412                           ; BSR set to: 0
  7413  0026DC  0E80               	movlw	128
  7414  0026DE  1B90               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  7415                           
  7416                           ; BSR set to: 0
  7417  0026E0  C08B  F07D         	movff	___ftsub@f1,?___ftadd
  7418  0026E4  C08C  F07E         	movff	___ftsub@f1+1,?___ftadd+1
  7419  0026E8  C08D  F07F         	movff	___ftsub@f1+2,?___ftadd+2
  7420  0026EC  C08E  F080         	movff	___ftsub@f2,?___ftadd+3
  7421  0026F0  C08F  F081         	movff	___ftsub@f2+1,?___ftadd+4
  7422  0026F4  C090  F082         	movff	___ftsub@f2+2,?___ftadd+5
  7423  0026F8  ECB4  F00B         	call	___ftadd	;wreg free
  7424  0026FC  C07D  F08B         	movff	?___ftadd,?___ftsub
  7425  002700  C07E  F08C         	movff	?___ftadd+1,?___ftsub+1
  7426  002704  C07F  F08D         	movff	?___ftadd+2,?___ftsub+2
  7427                           
  7428                           ; BSR set to: 0
  7429  002708  0012               	return	
  7430  00270A                     __end_of___ftsub:
  7431                           	opt stack 0
  7432                           tblptru	equ	0xFF8
  7433                           tblptrh	equ	0xFF7
  7434                           tblptrl	equ	0xFF6
  7435                           tablat	equ	0xFF5
  7436                           prodl	equ	0xFF3
  7437                           intcon	equ	0xFF2
  7438                           intcon2	equ	0xFF1
  7439                           postinc0	equ	0xFEE
  7440                           wreg	equ	0xFE8
  7441                           indf1	equ	0xFE7
  7442                           postinc1	equ	0xFE6
  7443                           postdec1	equ	0xFE5
  7444                           fsr1h	equ	0xFE2
  7445                           fsr1l	equ	0xFE1
  7446                           indf2	equ	0xFDF
  7447                           postinc2	equ	0xFDE
  7448                           postdec2	equ	0xFDD
  7449                           plusw2	equ	0xFDB
  7450                           fsr2h	equ	0xFDA
  7451                           fsr2l	equ	0xFD9
  7452                           status	equ	0xFD8
  7453                           
  7454 ;; *************** function ___fttol *****************
  7455 ;; Defined at:
  7456 ;;		line 45 in file "C:\Program Files (x86)\HI-TECH Software\PICC-18\9.80\sources\fttol.c"
  7457 ;; Parameters:    Size  Location     Type
  7458 ;;  f1              3    0[BANK0 ] float 
  7459 ;; Auto vars:     Size  Location     Type
  7460 ;;  lval            4   10[BANK0 ] unsigned long 
  7461 ;;  exp1            1   14[BANK0 ] unsigned char 
  7462 ;;  sign1           1    9[BANK0 ] unsigned char 
  7463 ;; Return value:  Size  Location     Type
  7464 ;;                  4    0[BANK0 ] long 
  7465 ;; Registers used:
  7466 ;;		wreg, status,2, status,0
  7467 ;; Tracked objects:
  7468 ;;		On entry : F/0
  7469 ;;		On exit  : F/0
  7470 ;;		Unchanged: FFFFFFF0/0
  7471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7472 ;;      Params:         0       4       0       0       0       0       0       0       0
  7473 ;;      Locals:         0       6       0       0       0       0       0       0       0
  7474 ;;      Temps:          0       5       0       0       0       0       0       0       0
  7475 ;;      Totals:         0      15       0       0       0       0       0       0       0
  7476 ;;Total ram usage:       15 bytes
  7477 ;; Hardware stack levels used:    1
  7478 ;; Hardware stack levels required when called:    6
  7479 ;; This function calls:
  7480 ;;		Nothing
  7481 ;; This function is called by:
  7482 ;;		_main
  7483 ;; This function uses a non-reentrant model
  7484 ;;
  7485                           
  7486                           	psect	text18
  7487  001EE2                     __ptext18:
  7488                           	opt stack 0
  7489  001EE2                     ___fttol:
  7490                           	opt stack 24
  7491                           
  7492                           ; BSR set to: 0
  7493                           
  7494                           ; BSR set to: 0
  7495  001EE2  0E0F               	movlw	15
  7496  001EE4  D844               	call	PL18	;call to abstracted procedure
  7497  001EE6  6F6E               	movwf	___fttol@exp1& (0+255),b
  7498  001EE8  0100               	movlb	0	; () banked
  7499  001EEA  676E               	tstfsz	___fttol@exp1& (0+255),b
  7500  001EEC  D005               	goto	l7883
  7501  001EEE                     l7881:
  7502                           
  7503                           ; BSR set to: 0
  7504  001EEE  6B60               	clrf	?___fttol& (0+255),b
  7505  001EF0  6B61               	clrf	(?___fttol+1)& (0+255),b
  7506  001EF2  6B62               	clrf	(?___fttol+2)& (0+255),b
  7507  001EF4  6B63               	clrf	(?___fttol+3)& (0+255),b
  7508  001EF6  0012               	return	
  7509  001EF8                     l7883:
  7510                           
  7511                           ; BSR set to: 0
  7512  001EF8  0E17               	movlw	23
  7513  001EFA  D839               	call	PL18	;call to abstracted procedure
  7514  001EFC  6F69               	movwf	___fttol@sign1& (0+255),b
  7515                           
  7516                           ; BSR set to: 0
  7517  001EFE  8F61               	bsf	(___fttol@f1+1)& (0+255),7,b
  7518                           
  7519                           ; BSR set to: 0
  7520  001F00  6B62               	clrf	(___fttol@f1+2)& (0+255),b
  7521                           
  7522                           ; BSR set to: 0
  7523  001F02  5160               	movf	___fttol@f1& (0+255),w,b
  7524  001F04  6F6A               	movwf	___fttol@lval& (0+255),b
  7525  001F06  5161               	movf	(___fttol@f1+1)& (0+255),w,b
  7526  001F08  6F6B               	movwf	(___fttol@lval+1)& (0+255),b
  7527  001F0A  5162               	movf	(___fttol@f1+2)& (0+255),w,b
  7528  001F0C  6F6C               	movwf	(___fttol@lval+2)& (0+255),b
  7529  001F0E  6B6D               	clrf	(___fttol@lval+3)& (0+255),b
  7530                           
  7531                           ; BSR set to: 0
  7532  001F10  0E8E               	movlw	142
  7533  001F12  5F6E               	subwf	___fttol@exp1& (0+255),f,b
  7534                           
  7535                           ; BSR set to: 0
  7536  001F14  AF6E               	btfss	___fttol@exp1& (0+255),7,b
  7537  001F16  D00C               	goto	l7903
  7538                           
  7539                           ; BSR set to: 0
  7540  001F18  516E               	movf	___fttol@exp1& (0+255),w,b
  7541  001F1A  0A80               	xorlw	128
  7542  001F1C  0F8F               	addlw	143
  7543  001F1E  E3E7               	bnc	l7881
  7544  001F20                     l7899:
  7545                           
  7546                           ; BSR set to: 0
  7547  001F20  90D8               	bcf	status,0,c
  7548  001F22  336D               	rrcf	(___fttol@lval+3)& (0+255),f,b
  7549  001F24  336C               	rrcf	(___fttol@lval+2)& (0+255),f,b
  7550  001F26  336B               	rrcf	(___fttol@lval+1)& (0+255),f,b
  7551  001F28  336A               	rrcf	___fttol@lval& (0+255),f,b
  7552                           
  7553                           ; BSR set to: 0
  7554  001F2A  3F6E               	incfsz	___fttol@exp1& (0+255),f,b
  7555  001F2C  D7F9               	goto	l7899
  7556  001F2E  D00C               	goto	l7911
  7557  001F30                     l7903:
  7558                           
  7559                           ; BSR set to: 0
  7560  001F30  0E17               	movlw	23
  7561  001F32  656E               	cpfsgt	___fttol@exp1& (0+255),b
  7562  001F34  D007               	goto	l7909
  7563  001F36  D7DB               	goto	l7881
  7564  001F38                     l7907:
  7565                           
  7566                           ; BSR set to: 0
  7567  001F38  90D8               	bcf	status,0,c
  7568  001F3A  376A               	rlcf	___fttol@lval& (0+255),f,b
  7569  001F3C  376B               	rlcf	(___fttol@lval+1)& (0+255),f,b
  7570  001F3E  376C               	rlcf	(___fttol@lval+2)& (0+255),f,b
  7571  001F40  376D               	rlcf	(___fttol@lval+3)& (0+255),f,b
  7572  001F42  076E               	decf	___fttol@exp1& (0+255),f,b
  7573  001F44                     l7909:
  7574                           
  7575                           ; BSR set to: 0
  7576  001F44  676E               	tstfsz	___fttol@exp1& (0+255),b
  7577  001F46  D7F8               	goto	l7907
  7578  001F48                     l7911:
  7579                           
  7580                           ; BSR set to: 0
  7581  001F48  5169               	movf	___fttol@sign1& (0+255),w,b
  7582  001F4A  E008               	bz	l7915
  7583                           
  7584                           ; BSR set to: 0
  7585  001F4C  1F6D               	comf	(___fttol@lval+3)& (0+255),f,b
  7586  001F4E  1F6C               	comf	(___fttol@lval+2)& (0+255),f,b
  7587  001F50  1F6B               	comf	(___fttol@lval+1)& (0+255),f,b
  7588  001F52  6D6A               	negf	___fttol@lval& (0+255),b
  7589  001F54  0E00               	movlw	0
  7590  001F56  236B               	addwfc	(___fttol@lval+1)& (0+255),f,b
  7591  001F58  236C               	addwfc	(___fttol@lval+2)& (0+255),f,b
  7592  001F5A  236D               	addwfc	(___fttol@lval+3)& (0+255),f,b
  7593  001F5C                     l7915:
  7594                           
  7595                           ; BSR set to: 0
  7596  001F5C  C06A  F060         	movff	___fttol@lval,?___fttol
  7597  001F60  C06B  F061         	movff	___fttol@lval+1,?___fttol+1
  7598  001F64  C06C  F062         	movff	___fttol@lval+2,?___fttol+2
  7599  001F68  C06D  F063         	movff	___fttol@lval+3,?___fttol+3
  7600                           
  7601                           ; BSR set to: 0
  7602  001F6C  0012               	return	
  7603  001F6E                     __end_of___fttol:
  7604                           	opt stack 0
  7605  001F6E                     PL18:
  7606  001F6E  6F64               	movwf	??___fttol& (0+255),b
  7607  001F70  C060  F065         	movff	___fttol@f1,??___fttol+1
  7608  001F74  C061  F066         	movff	___fttol@f1+1,??___fttol+2
  7609  001F78  C062  F067         	movff	___fttol@f1+2,??___fttol+3
  7610  001F7C  2964               	incf	??___fttol& (0+255),w,b
  7611  001F7E  6F68               	movwf	(??___fttol+4)& (0+255),b
  7612  001F80  D004               	goto	u11050
  7613  001F82                     u11055:
  7614  001F82  90D8               	bcf	status,0,c
  7615  001F84  3367               	rrcf	(??___fttol+3)& (0+255),f,b
  7616  001F86  3366               	rrcf	(??___fttol+2)& (0+255),f,b
  7617  001F88  3365               	rrcf	(??___fttol+1)& (0+255),f,b
  7618  001F8A                     u11050:
  7619  001F8A  2F68               	decfsz	(??___fttol+4)& (0+255),f,b
  7620  001F8C  D7FA               	goto	u11055
  7621  001F8E  5165               	movf	(??___fttol+1)& (0+255),w,b
  7622  001F90  0012               	return	
  7623                           tblptru	equ	0xFF8
  7624                           tblptrh	equ	0xFF7
  7625                           tblptrl	equ	0xFF6
  7626                           tablat	equ	0xFF5
  7627                           prodl	equ	0xFF3
  7628                           intcon	equ	0xFF2
  7629                           intcon2	equ	0xFF1
  7630                           postinc0	equ	0xFEE
  7631                           wreg	equ	0xFE8
  7632                           indf1	equ	0xFE7
  7633                           postinc1	equ	0xFE6
  7634                           postdec1	equ	0xFE5
  7635                           fsr1h	equ	0xFE2
  7636                           fsr1l	equ	0xFE1
  7637                           indf2	equ	0xFDF
  7638                           postinc2	equ	0xFDE
  7639                           postdec2	equ	0xFDD
  7640                           plusw2	equ	0xFDB
  7641                           fsr2h	equ	0xFDA
  7642                           fsr2l	equ	0xFD9
  7643                           status	equ	0xFD8
  7644                           
  7645 ;; *************** function ___lwdiv *****************
  7646 ;; Defined at:
  7647 ;;		line 10 in file "C:\Program Files (x86)\HI-TECH Software\PICC-18\9.80\sources\lwdiv.c"
  7648 ;; Parameters:    Size  Location     Type
  7649 ;;  dividend        2    0[BANK0 ] unsigned int 
  7650 ;;  divisor         2    2[BANK0 ] unsigned int 
  7651 ;; Auto vars:     Size  Location     Type
  7652 ;;  quotient        2    5[BANK0 ] unsigned int 
  7653 ;;  counter         1    4[BANK0 ] unsigned char 
  7654 ;; Return value:  Size  Location     Type
  7655 ;;                  2    0[BANK0 ] unsigned int 
  7656 ;; Registers used:
  7657 ;;		wreg, status,2, status,0
  7658 ;; Tracked objects:
  7659 ;;		On entry : F/0
  7660 ;;		On exit  : F/0
  7661 ;;		Unchanged: FFFFFFF0/0
  7662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7663 ;;      Params:         0       4       0       0       0       0       0       0       0
  7664 ;;      Locals:         0       3       0       0       0       0       0       0       0
  7665 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7666 ;;      Totals:         0       7       0       0       0       0       0       0       0
  7667 ;;Total ram usage:        7 bytes
  7668 ;; Hardware stack levels used:    1
  7669 ;; Hardware stack levels required when called:    6
  7670 ;; This function calls:
  7671 ;;		Nothing
  7672 ;; This function is called by:
  7673 ;;		_uintToStr
  7674 ;; This function uses a non-reentrant model
  7675 ;;
  7676                           
  7677                           	psect	text19
  7678  0024DC                     __ptext19:
  7679                           	opt stack 0
  7680  0024DC                     ___lwdiv:
  7681                           	opt stack 23
  7682                           
  7683                           ; BSR set to: 0
  7684                           
  7685                           ; BSR set to: 0
  7686  0024DC  6B65               	clrf	___lwdiv@quotient& (0+255),b
  7687  0024DE  6B66               	clrf	(___lwdiv@quotient+1)& (0+255),b
  7688                           
  7689                           ; BSR set to: 0
  7690  0024E0  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  7691  0024E2  1162               	iorwf	___lwdiv@divisor& (0+255),w,b
  7692  0024E4  E01B               	bz	l1351
  7693                           
  7694                           ; BSR set to: 0
  7695  0024E6  0E01               	movlw	1
  7696  0024E8  6F64               	movwf	___lwdiv@counter& (0+255),b
  7697  0024EA  D004               	goto	l7927
  7698  0024EC                     l7925:
  7699                           
  7700                           ; BSR set to: 0
  7701  0024EC  90D8               	bcf	status,0,c
  7702  0024EE  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
  7703  0024F0  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  7704  0024F2  2B64               	incf	___lwdiv@counter& (0+255),f,b
  7705  0024F4                     l7927:
  7706                           
  7707                           ; BSR set to: 0
  7708  0024F4  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  7709  0024F6  D7FA               	goto	l7925
  7710  0024F8                     l7929:
  7711                           
  7712                           ; BSR set to: 0
  7713  0024F8  90D8               	bcf	status,0,c
  7714  0024FA  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
  7715  0024FC  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  7716                           
  7717                           ; BSR set to: 0
  7718  0024FE  5162               	movf	___lwdiv@divisor& (0+255),w,b
  7719  002500  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
  7720  002502  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  7721  002504  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  7722  002506  E305               	bnc	l7937
  7723                           
  7724                           ; BSR set to: 0
  7725  002508  5162               	movf	___lwdiv@divisor& (0+255),w,b
  7726  00250A  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
  7727  00250C  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  7728  00250E  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  7729                           
  7730                           ; BSR set to: 0
  7731  002510  8165               	bsf	___lwdiv@quotient& (0+255),0,b
  7732  002512                     l7937:
  7733                           
  7734                           ; BSR set to: 0
  7735  002512  90D8               	bcf	status,0,c
  7736  002514  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  7737  002516  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
  7738                           
  7739                           ; BSR set to: 0
  7740  002518  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
  7741  00251A  D7EE               	goto	l7929
  7742  00251C                     l1351:
  7743                           
  7744                           ; BSR set to: 0
  7745  00251C  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
  7746  002520  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
  7747                           
  7748                           ; BSR set to: 0
  7749  002524  0012               	return	
  7750  002526                     __end_of___lwdiv:
  7751                           	opt stack 0
  7752                           tblptru	equ	0xFF8
  7753                           tblptrh	equ	0xFF7
  7754                           tblptrl	equ	0xFF6
  7755                           tablat	equ	0xFF5
  7756                           prodl	equ	0xFF3
  7757                           intcon	equ	0xFF2
  7758                           intcon2	equ	0xFF1
  7759                           postinc0	equ	0xFEE
  7760                           wreg	equ	0xFE8
  7761                           indf1	equ	0xFE7
  7762                           postinc1	equ	0xFE6
  7763                           postdec1	equ	0xFE5
  7764                           fsr1h	equ	0xFE2
  7765                           fsr1l	equ	0xFE1
  7766                           indf2	equ	0xFDF
  7767                           postinc2	equ	0xFDE
  7768                           postdec2	equ	0xFDD
  7769                           plusw2	equ	0xFDB
  7770                           fsr2h	equ	0xFDA
  7771                           fsr2l	equ	0xFD9
  7772                           status	equ	0xFD8
  7773                           
  7774 ;; *************** function ___lwmod *****************
  7775 ;; Defined at:
  7776 ;;		line 10 in file "C:\Program Files (x86)\HI-TECH Software\PICC-18\9.80\sources\lwmod.c"
  7777 ;; Parameters:    Size  Location     Type
  7778 ;;  dividend        2    0[BANK0 ] unsigned int 
  7779 ;;  divisor         2    2[BANK0 ] unsigned int 
  7780 ;; Auto vars:     Size  Location     Type
  7781 ;;  counter         1    4[BANK0 ] unsigned char 
  7782 ;; Return value:  Size  Location     Type
  7783 ;;                  2    0[BANK0 ] unsigned int 
  7784 ;; Registers used:
  7785 ;;		wreg, status,2, status,0
  7786 ;; Tracked objects:
  7787 ;;		On entry : F/0
  7788 ;;		On exit  : F/0
  7789 ;;		Unchanged: FFFFFFF0/0
  7790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7791 ;;      Params:         0       4       0       0       0       0       0       0       0
  7792 ;;      Locals:         0       1       0       0       0       0       0       0       0
  7793 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7794 ;;      Totals:         0       5       0       0       0       0       0       0       0
  7795 ;;Total ram usage:        5 bytes
  7796 ;; Hardware stack levels used:    1
  7797 ;; Hardware stack levels required when called:    6
  7798 ;; This function calls:
  7799 ;;		Nothing
  7800 ;; This function is called by:
  7801 ;;		_uintToStr
  7802 ;; This function uses a non-reentrant model
  7803 ;;
  7804                           
  7805                           	psect	text20
  7806  0025B2                     __ptext20:
  7807                           	opt stack 0
  7808  0025B2                     ___lwmod:
  7809                           	opt stack 23
  7810                           
  7811                           ; BSR set to: 0
  7812                           
  7813                           ; BSR set to: 0
  7814  0025B2  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
  7815  0025B4  1162               	iorwf	___lwmod@divisor& (0+255),w,b
  7816  0025B6  E017               	bz	l1361
  7817                           
  7818                           ; BSR set to: 0
  7819  0025B8  0E01               	movlw	1
  7820  0025BA  6F64               	movwf	___lwmod@counter& (0+255),b
  7821  0025BC  D004               	goto	l7947
  7822  0025BE                     l7945:
  7823                           
  7824                           ; BSR set to: 0
  7825  0025BE  90D8               	bcf	status,0,c
  7826  0025C0  3762               	rlcf	___lwmod@divisor& (0+255),f,b
  7827  0025C2  3763               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  7828  0025C4  2B64               	incf	___lwmod@counter& (0+255),f,b
  7829  0025C6                     l7947:
  7830                           
  7831                           ; BSR set to: 0
  7832  0025C6  AF63               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  7833  0025C8  D7FA               	goto	l7945
  7834  0025CA                     l7949:
  7835                           
  7836                           ; BSR set to: 0
  7837  0025CA  5162               	movf	___lwmod@divisor& (0+255),w,b
  7838  0025CC  5D60               	subwf	___lwmod@dividend& (0+255),w,b
  7839  0025CE  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
  7840  0025D0  5961               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  7841  0025D2  E304               	bnc	l7953
  7842                           
  7843                           ; BSR set to: 0
  7844  0025D4  5162               	movf	___lwmod@divisor& (0+255),w,b
  7845  0025D6  5F60               	subwf	___lwmod@dividend& (0+255),f,b
  7846  0025D8  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
  7847  0025DA  5B61               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  7848  0025DC                     l7953:
  7849                           
  7850                           ; BSR set to: 0
  7851  0025DC  90D8               	bcf	status,0,c
  7852  0025DE  3363               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  7853  0025E0  3362               	rrcf	___lwmod@divisor& (0+255),f,b
  7854                           
  7855                           ; BSR set to: 0
  7856  0025E2  2F64               	decfsz	___lwmod@counter& (0+255),f,b
  7857  0025E4  D7F2               	goto	l7949
  7858  0025E6                     l1361:
  7859                           
  7860                           ; BSR set to: 0
  7861  0025E6  C060  F060         	movff	___lwmod@dividend,?___lwmod
  7862  0025EA  C061  F061         	movff	___lwmod@dividend+1,?___lwmod+1
  7863                           
  7864                           ; BSR set to: 0
  7865  0025EE  0012               	return	
  7866  0025F0                     __end_of___lwmod:
  7867                           	opt stack 0
  7868                           tblptru	equ	0xFF8
  7869                           tblptrh	equ	0xFF7
  7870                           tblptrl	equ	0xFF6
  7871                           tablat	equ	0xFF5
  7872                           prodl	equ	0xFF3
  7873                           intcon	equ	0xFF2
  7874                           intcon2	equ	0xFF1
  7875                           postinc0	equ	0xFEE
  7876                           wreg	equ	0xFE8
  7877                           indf1	equ	0xFE7
  7878                           postinc1	equ	0xFE6
  7879                           postdec1	equ	0xFE5
  7880                           fsr1h	equ	0xFE2
  7881                           fsr1l	equ	0xFE1
  7882                           indf2	equ	0xFDF
  7883                           postinc2	equ	0xFDE
  7884                           postdec2	equ	0xFDD
  7885                           plusw2	equ	0xFDB
  7886                           fsr2h	equ	0xFDA
  7887                           fsr2l	equ	0xFD9
  7888                           status	equ	0xFD8
  7889                           
  7890 ;; *************** function ___asftmul *****************
  7891 ;; Defined at:
  7892 ;;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\PICC-18\9.80\sources\asftmul.c"
  7893 ;; Parameters:    Size  Location     Type
  7894 ;;  f1p             1    wreg     PTR float 
  7895 ;;		 -> medicionFloat(3), 
  7896 ;;  f2              3   25[BANK0 ] float 
  7897 ;; Auto vars:     Size  Location     Type
  7898 ;;  f1p             1   28[BANK0 ] PTR float 
  7899 ;;		 -> medicionFloat(3), 
  7900 ;; Return value:  Size  Location     Type
  7901 ;;                  3   25[BANK0 ] float 
  7902 ;; Registers used:
  7903 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7904 ;; Tracked objects:
  7905 ;;		On entry : F/0
  7906 ;;		On exit  : F/0
  7907 ;;		Unchanged: FFFFFFF0/0
  7908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7909 ;;      Params:         0       3       0       0       0       0       0       0       0
  7910 ;;      Locals:         0       1       0       0       0       0       0       0       0
  7911 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7912 ;;      Totals:         0       4       0       0       0       0       0       0       0
  7913 ;;Total ram usage:        4 bytes
  7914 ;; Hardware stack levels used:    1
  7915 ;; Hardware stack levels required when called:    8
  7916 ;; This function calls:
  7917 ;;		___ftmul
  7918 ;; This function is called by:
  7919 ;;		_main
  7920 ;; This function uses a non-reentrant model
  7921 ;;
  7922                           
  7923                           	psect	text21
  7924  0025F0                     __ptext21:
  7925                           	opt stack 0
  7926  0025F0                     ___asftmul:
  7927                           	opt stack 22
  7928                           
  7929                           ; BSR set to: 0
  7930                           ;___asftmul@f1p stored from wreg
  7931  0025F0  CFE8 F07C          	movff	wreg,___asftmul@f1p
  7932                           
  7933                           ; BSR set to: 0
  7934                           ;	Return value of ___asftmul is never used
  7935  0025F4  517C               	movf	___asftmul@f1p& (0+255),w,b
  7936  0025F6  6ED9               	movwf	fsr2l,c
  7937  0025F8  6ADA               	clrf	fsr2h,c
  7938  0025FA  CFDE F068          	movff	postinc2,?___ftmul
  7939  0025FE  CFDE F069          	movff	postinc2,?___ftmul+1
  7940  002602  CFDD F06A          	movff	postdec2,?___ftmul+2
  7941  002606  C079  F06B         	movff	___asftmul@f2,?___ftmul+3
  7942  00260A  C07A  F06C         	movff	___asftmul@f2+1,?___ftmul+4
  7943  00260E  C07B  F06D         	movff	___asftmul@f2+2,?___ftmul+5
  7944  002612  ECB9  F00D         	call	___ftmul	;wreg free
  7945  002616  517C               	movf	___asftmul@f1p& (0+255),w,b
  7946  002618  6ED9               	movwf	fsr2l,c
  7947  00261A  6ADA               	clrf	fsr2h,c
  7948  00261C  C068  FFDE         	movff	?___ftmul,postinc2
  7949  002620  C069  FFDE         	movff	?___ftmul+1,postinc2
  7950  002624  C06A  FFDD         	movff	?___ftmul+2,postdec2
  7951  002628  52DD               	movf	postdec2,f,c
  7952                           
  7953                           ; BSR set to: 0
  7954  00262A  0012               	return	
  7955  00262C                     __end_of___asftmul:
  7956                           	opt stack 0
  7957                           tblptru	equ	0xFF8
  7958                           tblptrh	equ	0xFF7
  7959                           tblptrl	equ	0xFF6
  7960                           tablat	equ	0xFF5
  7961                           prodl	equ	0xFF3
  7962                           intcon	equ	0xFF2
  7963                           intcon2	equ	0xFF1
  7964                           postinc0	equ	0xFEE
  7965                           wreg	equ	0xFE8
  7966                           indf1	equ	0xFE7
  7967                           postinc1	equ	0xFE6
  7968                           postdec1	equ	0xFE5
  7969                           fsr1h	equ	0xFE2
  7970                           fsr1l	equ	0xFE1
  7971                           indf2	equ	0xFDF
  7972                           postinc2	equ	0xFDE
  7973                           postdec2	equ	0xFDD
  7974                           plusw2	equ	0xFDB
  7975                           fsr2h	equ	0xFDA
  7976                           fsr2l	equ	0xFD9
  7977                           status	equ	0xFD8
  7978                           
  7979 ;; *************** function ___asftadd *****************
  7980 ;; Defined at:
  7981 ;;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\PICC-18\9.80\sources\asftadd.c"
  7982 ;; Parameters:    Size  Location     Type
  7983 ;;  f1p             1    wreg     PTR float 
  7984 ;;		 -> y(9), 
  7985 ;;  f2              3   49[BANK0 ] float 
  7986 ;; Auto vars:     Size  Location     Type
  7987 ;;  f1p             1   52[BANK0 ] PTR float 
  7988 ;;		 -> y(9), 
  7989 ;; Return value:  Size  Location     Type
  7990 ;;                  3   49[BANK0 ] float 
  7991 ;; Registers used:
  7992 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7993 ;; Tracked objects:
  7994 ;;		On entry : F/0
  7995 ;;		On exit  : F/0
  7996 ;;		Unchanged: FFFFFFF0/0
  7997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7998 ;;      Params:         0       3       0       0       0       0       0       0       0
  7999 ;;      Locals:         0       1       0       0       0       0       0       0       0
  8000 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8001 ;;      Totals:         0       4       0       0       0       0       0       0       0
  8002 ;;Total ram usage:        4 bytes
  8003 ;; Hardware stack levels used:    1
  8004 ;; Hardware stack levels required when called:    8
  8005 ;; This function calls:
  8006 ;;		___ftadd
  8007 ;; This function is called by:
  8008 ;;		_iir
  8009 ;; This function uses a non-reentrant model
  8010 ;;
  8011                           
  8012                           	psect	text22
  8013  00262C                     __ptext22:
  8014                           	opt stack 0
  8015  00262C                     ___asftadd:
  8016                           	opt stack 21
  8017                           
  8018                           ; BSR set to: 0
  8019                           ;___asftadd@f1p stored from wreg
  8020  00262C  CFE8 F094          	movff	wreg,___asftadd@f1p
  8021                           
  8022                           ; BSR set to: 0
  8023                           ;	Return value of ___asftadd is never used
  8024  002630  5194               	movf	___asftadd@f1p& (0+255),w,b
  8025  002632  6ED9               	movwf	fsr2l,c
  8026  002634  6ADA               	clrf	fsr2h,c
  8027  002636  CFDE F07D          	movff	postinc2,?___ftadd
  8028  00263A  CFDE F07E          	movff	postinc2,?___ftadd+1
  8029  00263E  CFDD F07F          	movff	postdec2,?___ftadd+2
  8030  002642  C091  F080         	movff	___asftadd@f2,?___ftadd+3
  8031  002646  C092  F081         	movff	___asftadd@f2+1,?___ftadd+4
  8032  00264A  C093  F082         	movff	___asftadd@f2+2,?___ftadd+5
  8033  00264E  ECB4  F00B         	call	___ftadd	;wreg free
  8034  002652  5194               	movf	___asftadd@f1p& (0+255),w,b
  8035  002654  6ED9               	movwf	fsr2l,c
  8036  002656  6ADA               	clrf	fsr2h,c
  8037  002658  C07D  FFDE         	movff	?___ftadd,postinc2
  8038  00265C  C07E  FFDE         	movff	?___ftadd+1,postinc2
  8039  002660  C07F  FFDD         	movff	?___ftadd+2,postdec2
  8040  002664  52DD               	movf	postdec2,f,c
  8041                           
  8042                           ; BSR set to: 0
  8043  002666  0012               	return	
  8044  002668                     __end_of___asftadd:
  8045                           	opt stack 0
  8046                           tblptru	equ	0xFF8
  8047                           tblptrh	equ	0xFF7
  8048                           tblptrl	equ	0xFF6
  8049                           tablat	equ	0xFF5
  8050                           prodl	equ	0xFF3
  8051                           intcon	equ	0xFF2
  8052                           intcon2	equ	0xFF1
  8053                           postinc0	equ	0xFEE
  8054                           wreg	equ	0xFE8
  8055                           indf1	equ	0xFE7
  8056                           postinc1	equ	0xFE6
  8057                           postdec1	equ	0xFE5
  8058                           fsr1h	equ	0xFE2
  8059                           fsr1l	equ	0xFE1
  8060                           indf2	equ	0xFDF
  8061                           postinc2	equ	0xFDE
  8062                           postdec2	equ	0xFDD
  8063                           plusw2	equ	0xFDB
  8064                           fsr2h	equ	0xFDA
  8065                           fsr2l	equ	0xFD9
  8066                           status	equ	0xFD8
  8067                           
  8068 ;; *************** function ___ftadd *****************
  8069 ;; Defined at:
  8070 ;;		line 87 in file "C:\Program Files (x86)\HI-TECH Software\PICC-18\9.80\sources\ftadd.c"
  8071 ;; Parameters:    Size  Location     Type
  8072 ;;  f1              3   29[BANK0 ] float 
  8073 ;;  f2              3   32[BANK0 ] float 
  8074 ;; Auto vars:     Size  Location     Type
  8075 ;;  exp1            1   42[BANK0 ] unsigned char 
  8076 ;;  exp2            1   41[BANK0 ] unsigned char 
  8077 ;;  sign            1   40[BANK0 ] unsigned char 
  8078 ;; Return value:  Size  Location     Type
  8079 ;;                  3   29[BANK0 ] float 
  8080 ;; Registers used:
  8081 ;;		wreg, status,2, status,0, cstack
  8082 ;; Tracked objects:
  8083 ;;		On entry : F/0
  8084 ;;		On exit  : F/0
  8085 ;;		Unchanged: FFFFFFF0/0
  8086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8087 ;;      Params:         0       6       0       0       0       0       0       0       0
  8088 ;;      Locals:         0       3       0       0       0       0       0       0       0
  8089 ;;      Temps:          0       5       0       0       0       0       0       0       0
  8090 ;;      Totals:         0      14       0       0       0       0       0       0       0
  8091 ;;Total ram usage:       14 bytes
  8092 ;; Hardware stack levels used:    1
  8093 ;; Hardware stack levels required when called:    7
  8094 ;; This function calls:
  8095 ;;		___ftpack
  8096 ;; This function is called by:
  8097 ;;		_incVar
  8098 ;;		_decVar
  8099 ;;		_main
  8100 ;;		___ftsub
  8101 ;;		___asftadd
  8102 ;; This function uses a non-reentrant model
  8103 ;;
  8104                           
  8105                           	psect	text23
  8106  001768                     __ptext23:
  8107                           	opt stack 0
  8108  001768                     ___ftadd:
  8109                           	opt stack 22
  8110                           
  8111                           ; BSR set to: 0
  8112                           
  8113                           ; BSR set to: 0
  8114  001768  0E0F               	movlw	15
  8115  00176A  6F83               	movwf	??___ftadd& (0+255),b
  8116  00176C  C07D  F084         	movff	___ftadd@f1,??___ftadd+1
  8117  001770  C07E  F085         	movff	___ftadd@f1+1,??___ftadd+2
  8118  001774  C07F  F086         	movff	___ftadd@f1+2,??___ftadd+3
  8119  001778  2983               	incf	??___ftadd& (0+255),w,b
  8120  00177A  6F87               	movwf	(??___ftadd+4)& (0+255),b
  8121  00177C  D001               	goto	u10730
  8122  00177E                     u10735:
  8123  00177E  D8A9               	call	PL43	;call to abstracted procedure
  8124  001780                     u10730:
  8125  001780  2F87               	decfsz	(??___ftadd+4)& (0+255),f,b
  8126  001782  D7FD               	goto	u10735
  8127  001784  5184               	movf	(??___ftadd+1)& (0+255),w,b
  8128  001786  6F8A               	movwf	___ftadd@exp1& (0+255),b
  8129  001788  0E0F               	movlw	15
  8130  00178A  6F83               	movwf	??___ftadd& (0+255),b
  8131  00178C  C080  F084         	movff	___ftadd@f2,??___ftadd+1
  8132  001790  C081  F085         	movff	___ftadd@f2+1,??___ftadd+2
  8133  001794  C082  F086         	movff	___ftadd@f2+2,??___ftadd+3
  8134  001798  2983               	incf	??___ftadd& (0+255),w,b
  8135  00179A  6F87               	movwf	(??___ftadd+4)& (0+255),b
  8136  00179C  D001               	goto	u10740
  8137  00179E                     u10745:
  8138  00179E  D899               	call	PL43	;call to abstracted procedure
  8139  0017A0                     u10740:
  8140  0017A0  2F87               	decfsz	(??___ftadd+4)& (0+255),f,b
  8141  0017A2  D7FD               	goto	u10745
  8142  0017A4  5184               	movf	(??___ftadd+1)& (0+255),w,b
  8143  0017A6  6F89               	movwf	___ftadd@exp2& (0+255),b
  8144                           
  8145                           ; BSR set to: 0
  8146  0017A8  518A               	movf	___ftadd@exp1& (0+255),w,b
  8147  0017AA  E009               	bz	l1176
  8148                           
  8149                           ; BSR set to: 0
  8150  0017AC  5189               	movf	___ftadd@exp2& (0+255),w,b
  8151  0017AE  618A               	cpfslt	___ftadd@exp1& (0+255),b
  8152  0017B0  D00D               	goto	l7737
  8153                           
  8154                           ; BSR set to: 0
  8155  0017B2  518A               	movf	___ftadd@exp1& (0+255),w,b
  8156  0017B4  5D89               	subwf	___ftadd@exp2& (0+255),w,b
  8157  0017B6  6F83               	movwf	??___ftadd& (0+255),b
  8158  0017B8  0E19               	movlw	25
  8159  0017BA  5D83               	subwf	??___ftadd& (0+255),w,b
  8160  0017BC  E307               	bnc	l7737
  8161  0017BE                     l1176:
  8162                           
  8163                           ; BSR set to: 0
  8164  0017BE  C080  F07D         	movff	___ftadd@f2,?___ftadd
  8165  0017C2  C081  F07E         	movff	___ftadd@f2+1,?___ftadd+1
  8166  0017C6  C082  F07F         	movff	___ftadd@f2+2,?___ftadd+2
  8167  0017CA  0012               	return	
  8168  0017CC                     l7737:
  8169                           
  8170                           ; BSR set to: 0
  8171  0017CC  5189               	movf	___ftadd@exp2& (0+255),w,b
  8172  0017CE  E009               	bz	l1180
  8173                           
  8174                           ; BSR set to: 0
  8175  0017D0  518A               	movf	___ftadd@exp1& (0+255),w,b
  8176  0017D2  6189               	cpfslt	___ftadd@exp2& (0+255),b
  8177  0017D4  D00D               	goto	l7743
  8178                           
  8179                           ; BSR set to: 0
  8180  0017D6  5189               	movf	___ftadd@exp2& (0+255),w,b
  8181  0017D8  5D8A               	subwf	___ftadd@exp1& (0+255),w,b
  8182  0017DA  6F83               	movwf	??___ftadd& (0+255),b
  8183  0017DC  0E19               	movlw	25
  8184  0017DE  5D83               	subwf	??___ftadd& (0+255),w,b
  8185  0017E0  E307               	bnc	l7743
  8186  0017E2                     l1180:
  8187                           
  8188                           ; BSR set to: 0
  8189  0017E2  C07D  F07D         	movff	___ftadd@f1,?___ftadd
  8190  0017E6  C07E  F07E         	movff	___ftadd@f1+1,?___ftadd+1
  8191  0017EA  C07F  F07F         	movff	___ftadd@f1+2,?___ftadd+2
  8192  0017EE  0012               	return	
  8193  0017F0                     l7743:
  8194                           
  8195                           ; BSR set to: 0
  8196  0017F0  0E06               	movlw	6
  8197  0017F2  6F88               	movwf	___ftadd@sign& (0+255),b
  8198                           
  8199                           ; BSR set to: 0
  8200  0017F4  BF7F               	btfsc	(___ftadd@f1+2)& (0+255),7,b
  8201                           
  8202                           ; BSR set to: 0
  8203  0017F6  8F88               	bsf	___ftadd@sign& (0+255),7,b
  8204                           
  8205                           ; BSR set to: 0
  8206  0017F8  BF82               	btfsc	(___ftadd@f2+2)& (0+255),7,b
  8207                           
  8208                           ; BSR set to: 0
  8209  0017FA  8D88               	bsf	___ftadd@sign& (0+255),6,b
  8210                           
  8211                           ; BSR set to: 0
  8212  0017FC  8F7E               	bsf	(___ftadd@f1+1)& (0+255),7,b
  8213                           
  8214                           ; BSR set to: 0
  8215  0017FE  6B7F               	clrf	(___ftadd@f1+2)& (0+255),b
  8216  001800  8F81               	bsf	(___ftadd@f2+1)& (0+255),7,b
  8217                           
  8218                           ; BSR set to: 0
  8219  001802  6B82               	clrf	(___ftadd@f2+2)& (0+255),b
  8220                           
  8221                           ; BSR set to: 0
  8222  001804  5189               	movf	___ftadd@exp2& (0+255),w,b
  8223  001806  618A               	cpfslt	___ftadd@exp1& (0+255),b
  8224  001808  D017               	goto	l7769
  8225  00180A                     l7759:
  8226                           
  8227                           ; BSR set to: 0
  8228  00180A  90D8               	bcf	status,0,c
  8229  00180C  3780               	rlcf	___ftadd@f2& (0+255),f,b
  8230  00180E  3781               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  8231  001810  3782               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  8232  001812  0789               	decf	___ftadd@exp2& (0+255),f,b
  8233                           
  8234                           ; BSR set to: 0
  8235  001814  5189               	movf	___ftadd@exp2& (0+255),w,b
  8236  001816  198A               	xorwf	___ftadd@exp1& (0+255),w,b
  8237  001818  E00B               	bz	l7767
  8238                           
  8239                           ; BSR set to: 0
  8240  00181A  0788               	decf	___ftadd@sign& (0+255),f,b
  8241  00181C  0100               	movlb	0	; () banked
  8242  00181E  5188               	movf	___ftadd@sign& (0+255),w,b
  8243  001820  0B07               	andlw	7
  8244  001822  E006               	bz	l7767
  8245  001824  D7F2               	goto	l7759
  8246  001826                     l7765:
  8247                           
  8248                           ; BSR set to: 0
  8249  001826  90D8               	bcf	status,0,c
  8250  001828  337F               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  8251  00182A  337E               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  8252  00182C  337D               	rrcf	___ftadd@f1& (0+255),f,b
  8253  00182E  2B8A               	incf	___ftadd@exp1& (0+255),f,b
  8254  001830                     l7767:
  8255                           
  8256                           ; BSR set to: 0
  8257  001830  5189               	movf	___ftadd@exp2& (0+255),w,b
  8258  001832  638A               	cpfseq	___ftadd@exp1& (0+255),b
  8259  001834  D7F8               	goto	l7765
  8260  001836  D019               	goto	l1191
  8261  001838                     l7769:
  8262                           
  8263                           ; BSR set to: 0
  8264  001838  518A               	movf	___ftadd@exp1& (0+255),w,b
  8265  00183A  6189               	cpfslt	___ftadd@exp2& (0+255),b
  8266  00183C  D016               	goto	l1191
  8267  00183E                     l7771:
  8268                           
  8269                           ; BSR set to: 0
  8270  00183E  90D8               	bcf	status,0,c
  8271  001840  377D               	rlcf	___ftadd@f1& (0+255),f,b
  8272  001842  377E               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  8273  001844  377F               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  8274  001846  078A               	decf	___ftadd@exp1& (0+255),f,b
  8275                           
  8276                           ; BSR set to: 0
  8277  001848  5189               	movf	___ftadd@exp2& (0+255),w,b
  8278  00184A  198A               	xorwf	___ftadd@exp1& (0+255),w,b
  8279  00184C  E00B               	bz	l7779
  8280                           
  8281                           ; BSR set to: 0
  8282  00184E  0788               	decf	___ftadd@sign& (0+255),f,b
  8283  001850  0100               	movlb	0	; () banked
  8284  001852  5188               	movf	___ftadd@sign& (0+255),w,b
  8285  001854  0B07               	andlw	7
  8286  001856  E006               	bz	l7779
  8287  001858  D7F2               	goto	l7771
  8288  00185A                     l7777:
  8289                           
  8290                           ; BSR set to: 0
  8291  00185A  90D8               	bcf	status,0,c
  8292  00185C  3382               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  8293  00185E  3381               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  8294  001860  3380               	rrcf	___ftadd@f2& (0+255),f,b
  8295  001862  2B89               	incf	___ftadd@exp2& (0+255),f,b
  8296  001864                     l7779:
  8297                           
  8298                           ; BSR set to: 0
  8299  001864  5189               	movf	___ftadd@exp2& (0+255),w,b
  8300  001866  638A               	cpfseq	___ftadd@exp1& (0+255),b
  8301  001868  D7F8               	goto	l7777
  8302  00186A                     l1191:
  8303                           
  8304                           ; BSR set to: 0
  8305  00186A  AF88               	btfss	___ftadd@sign& (0+255),7,b
  8306  00186C  D007               	goto	l1200
  8307                           
  8308                           ; BSR set to: 0
  8309  00186E  1F7D               	comf	___ftadd@f1& (0+255),f,b
  8310  001870  1F7E               	comf	(___ftadd@f1+1)& (0+255),f,b
  8311  001872  1F7F               	comf	(___ftadd@f1+2)& (0+255),f,b
  8312  001874  2B7D               	incf	___ftadd@f1& (0+255),f,b
  8313  001876  0E00               	movlw	0
  8314  001878  237E               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  8315  00187A  237F               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  8316  00187C                     l1200:
  8317                           
  8318                           ; BSR set to: 0
  8319  00187C  AD88               	btfss	___ftadd@sign& (0+255),6,b
  8320  00187E  D002               	goto	l1201
  8321                           
  8322                           ; BSR set to: 0
  8323  001880  1F80               	comf	___ftadd@f2& (0+255),f,b
  8324  001882  D820               	call	PL36	;call to abstracted procedure
  8325  001884                     l1201:
  8326                           
  8327                           ; BSR set to: 0
  8328  001884  6B88               	clrf	___ftadd@sign& (0+255),b
  8329  001886  517D               	movf	___ftadd@f1& (0+255),w,b
  8330  001888  2780               	addwf	___ftadd@f2& (0+255),f,b
  8331  00188A  517E               	movf	(___ftadd@f1+1)& (0+255),w,b
  8332  00188C  2381               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  8333  00188E  517F               	movf	(___ftadd@f1+2)& (0+255),w,b
  8334  001890  2382               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  8335  001892  AF82               	btfss	(___ftadd@f2+2)& (0+255),7,b
  8336  001894  D004               	goto	l7789
  8337                           
  8338                           ; BSR set to: 0
  8339  001896  1F80               	comf	___ftadd@f2& (0+255),f,b
  8340  001898  D815               	call	PL36	;call to abstracted procedure
  8341                           
  8342                           ; BSR set to: 0
  8343  00189A  0E01               	movlw	1
  8344  00189C  6F88               	movwf	___ftadd@sign& (0+255),b
  8345  00189E                     l7789:
  8346                           
  8347                           ; BSR set to: 0
  8348  00189E  C080  F060         	movff	___ftadd@f2,?___ftpack
  8349  0018A2  C081  F061         	movff	___ftadd@f2+1,?___ftpack+1
  8350  0018A6  C082  F062         	movff	___ftadd@f2+2,?___ftpack+2
  8351  0018AA  C08A  F063         	movff	___ftadd@exp1,?___ftpack+3
  8352  0018AE  C088  F064         	movff	___ftadd@sign,?___ftpack+4
  8353  0018B2  EC65  F010         	call	___ftpack	;wreg free
  8354  0018B6  C060  F07D         	movff	?___ftpack,?___ftadd
  8355  0018BA  C061  F07E         	movff	?___ftpack+1,?___ftadd+1
  8356  0018BE  C062  F07F         	movff	?___ftpack+2,?___ftadd+2
  8357                           
  8358                           ; BSR set to: 0
  8359  0018C2  0012               	return	
  8360  0018C4                     __end_of___ftadd:
  8361                           	opt stack 0
  8362  0018C4                     PL36:
  8363  0018C4  1F81               	comf	(___ftadd@f2+1)& (0+255),f,b
  8364  0018C6  1F82               	comf	(___ftadd@f2+2)& (0+255),f,b
  8365  0018C8  2B80               	incf	___ftadd@f2& (0+255),f,b
  8366  0018CA  0E00               	movlw	0
  8367  0018CC  2381               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  8368  0018CE  2382               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  8369  0018D0  0C00               	retlw	0
  8370  0018D2                     PL43:
  8371  0018D2  90D8               	bcf	status,0,c
  8372  0018D4  3386               	rrcf	(??___ftadd+3)& (0+255),f,b
  8373  0018D6  3385               	rrcf	(??___ftadd+2)& (0+255),f,b
  8374  0018D8  3384               	rrcf	(??___ftadd+1)& (0+255),f,b
  8375  0018DA  0012               	return	
  8376                           tblptru	equ	0xFF8
  8377                           tblptrh	equ	0xFF7
  8378                           tblptrl	equ	0xFF6
  8379                           tablat	equ	0xFF5
  8380                           prodl	equ	0xFF3
  8381                           intcon	equ	0xFF2
  8382                           intcon2	equ	0xFF1
  8383                           postinc0	equ	0xFEE
  8384                           wreg	equ	0xFE8
  8385                           indf1	equ	0xFE7
  8386                           postinc1	equ	0xFE6
  8387                           postdec1	equ	0xFE5
  8388                           fsr1h	equ	0xFE2
  8389                           fsr1l	equ	0xFE1
  8390                           indf2	equ	0xFDF
  8391                           postinc2	equ	0xFDE
  8392                           postdec2	equ	0xFDD
  8393                           plusw2	equ	0xFDB
  8394                           fsr2h	equ	0xFDA
  8395                           fsr2l	equ	0xFD9
  8396                           status	equ	0xFD8
  8397                           
  8398 ;; *************** function ___asftdiv *****************
  8399 ;; Defined at:
  8400 ;;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\PICC-18\9.80\sources\asftdiv.c"
  8401 ;; Parameters:    Size  Location     Type
  8402 ;;  f1p             1    wreg     PTR float 
  8403 ;;		 -> y(9), 
  8404 ;;  f2              3   29[BANK0 ] float 
  8405 ;; Auto vars:     Size  Location     Type
  8406 ;;  f1p             1   32[BANK0 ] PTR float 
  8407 ;;		 -> y(9), 
  8408 ;; Return value:  Size  Location     Type
  8409 ;;                  3   29[BANK0 ] float 
  8410 ;; Registers used:
  8411 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8412 ;; Tracked objects:
  8413 ;;		On entry : F/0
  8414 ;;		On exit  : F/0
  8415 ;;		Unchanged: FFFFFFF0/0
  8416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8417 ;;      Params:         0       3       0       0       0       0       0       0       0
  8418 ;;      Locals:         0       1       0       0       0       0       0       0       0
  8419 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8420 ;;      Totals:         0       4       0       0       0       0       0       0       0
  8421 ;;Total ram usage:        4 bytes
  8422 ;; Hardware stack levels used:    1
  8423 ;; Hardware stack levels required when called:    8
  8424 ;; This function calls:
  8425 ;;		___ftdiv
  8426 ;; This function is called by:
  8427 ;;		_iir
  8428 ;; This function uses a non-reentrant model
  8429 ;;
  8430                           
  8431                           	psect	text24
  8432  002668                     __ptext24:
  8433                           	opt stack 0
  8434  002668                     ___asftdiv:
  8435                           	opt stack 21
  8436                           
  8437                           ; BSR set to: 0
  8438                           ;___asftdiv@f1p stored from wreg
  8439  002668  CFE8 F080          	movff	wreg,___asftdiv@f1p
  8440                           
  8441                           ; BSR set to: 0
  8442                           ;	Return value of ___asftdiv is never used
  8443  00266C  5180               	movf	___asftdiv@f1p& (0+255),w,b
  8444  00266E  6ED9               	movwf	fsr2l,c
  8445  002670  6ADA               	clrf	fsr2h,c
  8446  002672  CFDE F06C          	movff	postinc2,?___ftdiv
  8447  002676  CFDE F06D          	movff	postinc2,?___ftdiv+1
  8448  00267A  CFDD F06E          	movff	postdec2,?___ftdiv+2
  8449  00267E  C07D  F06F         	movff	___asftdiv@f2,?___ftdiv+3
  8450  002682  C07E  F070         	movff	___asftdiv@f2+1,?___ftdiv+4
  8451  002686  C07F  F071         	movff	___asftdiv@f2+2,?___ftdiv+5
  8452  00268A  EC36  F00E         	call	___ftdiv	;wreg free
  8453  00268E  5180               	movf	___asftdiv@f1p& (0+255),w,b
  8454  002690  6ED9               	movwf	fsr2l,c
  8455  002692  6ADA               	clrf	fsr2h,c
  8456  002694  C06C  FFDE         	movff	?___ftdiv,postinc2
  8457  002698  C06D  FFDE         	movff	?___ftdiv+1,postinc2
  8458  00269C  C06E  FFDD         	movff	?___ftdiv+2,postdec2
  8459  0026A0  52DD               	movf	postdec2,f,c
  8460                           
  8461                           ; BSR set to: 0
  8462  0026A2  0012               	return	
  8463  0026A4                     __end_of___asftdiv:
  8464                           	opt stack 0
  8465                           tblptru	equ	0xFF8
  8466                           tblptrh	equ	0xFF7
  8467                           tblptrl	equ	0xFF6
  8468                           tablat	equ	0xFF5
  8469                           prodl	equ	0xFF3
  8470                           intcon	equ	0xFF2
  8471                           intcon2	equ	0xFF1
  8472                           postinc0	equ	0xFEE
  8473                           wreg	equ	0xFE8
  8474                           indf1	equ	0xFE7
  8475                           postinc1	equ	0xFE6
  8476                           postdec1	equ	0xFE5
  8477                           fsr1h	equ	0xFE2
  8478                           fsr1l	equ	0xFE1
  8479                           indf2	equ	0xFDF
  8480                           postinc2	equ	0xFDE
  8481                           postdec2	equ	0xFDD
  8482                           plusw2	equ	0xFDB
  8483                           fsr2h	equ	0xFDA
  8484                           fsr2l	equ	0xFD9
  8485                           status	equ	0xFD8
  8486                           
  8487 ;; *************** function ___ftpack *****************
  8488 ;; Defined at:
  8489 ;;		line 63 in file "C:\Program Files (x86)\HI-TECH Software\PICC-18\9.80\sources\float.c"
  8490 ;; Parameters:    Size  Location     Type
  8491 ;;  arg             3    0[BANK0 ] unsigned um
  8492 ;;  exp             1    3[BANK0 ] unsigned char 
  8493 ;;  sign            1    4[BANK0 ] unsigned char 
  8494 ;; Auto vars:     Size  Location     Type
  8495 ;;		None
  8496 ;; Return value:  Size  Location     Type
  8497 ;;                  3    0[BANK0 ] float 
  8498 ;; Registers used:
  8499 ;;		wreg, status,2, status,0
  8500 ;; Tracked objects:
  8501 ;;		On entry : F/0
  8502 ;;		On exit  : F/0
  8503 ;;		Unchanged: FFFFFFF0/0
  8504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8505 ;;      Params:         0       5       0       0       0       0       0       0       0
  8506 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8507 ;;      Temps:          0       3       0       0       0       0       0       0       0
  8508 ;;      Totals:         0       8       0       0       0       0       0       0       0
  8509 ;;Total ram usage:        8 bytes
  8510 ;; Hardware stack levels used:    1
  8511 ;; Hardware stack levels required when called:    6
  8512 ;; This function calls:
  8513 ;;		Nothing
  8514 ;; This function is called by:
  8515 ;;		___awtoft
  8516 ;;		___ftadd
  8517 ;;		___ftdiv
  8518 ;;		___ftmul
  8519 ;; This function uses a non-reentrant model
  8520 ;;
  8521                           
  8522                           	psect	text25
  8523  0020CA                     __ptext25:
  8524                           	opt stack 0
  8525  0020CA                     ___ftpack:
  8526                           	opt stack 22
  8527                           
  8528                           ; BSR set to: 0
  8529                           
  8530                           ; BSR set to: 0
  8531  0020CA  5163               	movf	___ftpack@exp& (0+255),w,b
  8532  0020CC  E004               	bz	l1138
  8533                           
  8534                           ; BSR set to: 0
  8535  0020CE  5160               	movf	___ftpack@arg& (0+255),w,b
  8536  0020D0  1161               	iorwf	(___ftpack@arg+1)& (0+255),w,b
  8537  0020D2  1162               	iorwf	(___ftpack@arg+2)& (0+255),w,b
  8538  0020D4  E106               	bnz	l7693
  8539  0020D6                     l1138:
  8540                           
  8541                           ; BSR set to: 0
  8542  0020D6  6B60               	clrf	?___ftpack& (0+255),b
  8543  0020D8  6B61               	clrf	(?___ftpack+1)& (0+255),b
  8544  0020DA  6B62               	clrf	(?___ftpack+2)& (0+255),b
  8545  0020DC  0012               	return	
  8546  0020DE                     l7691:
  8547                           
  8548                           ; BSR set to: 0
  8549  0020DE  2B63               	incf	___ftpack@exp& (0+255),f,b
  8550  0020E0  D838               	call	PL41	;call to abstracted procedure
  8551  0020E2                     l7693:
  8552                           
  8553                           ; BSR set to: 0
  8554  0020E2  6B65               	clrf	??___ftpack& (0+255),b
  8555  0020E4  6B66               	clrf	(??___ftpack+1)& (0+255),b
  8556  0020E6  0EFE               	movlw	254
  8557  0020E8  1562               	andwf	(___ftpack@arg+2)& (0+255),w,b
  8558  0020EA  6F67               	movwf	(??___ftpack+2)& (0+255),b
  8559  0020EC  5165               	movf	??___ftpack& (0+255),w,b
  8560  0020EE  1166               	iorwf	(??___ftpack+1)& (0+255),w,b
  8561  0020F0  1167               	iorwf	(??___ftpack+2)& (0+255),w,b
  8562  0020F2  E007               	bz	l7699
  8563  0020F4  D7F4               	goto	l7691
  8564  0020F6                     l7695:
  8565                           
  8566                           ; BSR set to: 0
  8567  0020F6  2B63               	incf	___ftpack@exp& (0+255),f,b
  8568                           
  8569                           ; BSR set to: 0
  8570  0020F8  2B60               	incf	___ftpack@arg& (0+255),f,b
  8571  0020FA  0E00               	movlw	0
  8572  0020FC  2361               	addwfc	(___ftpack@arg+1)& (0+255),f,b
  8573  0020FE  2362               	addwfc	(___ftpack@arg+2)& (0+255),f,b
  8574  002100  D828               	call	PL41	;call to abstracted procedure
  8575  002102                     l7699:
  8576                           
  8577                           ; BSR set to: 0
  8578  002102  6B65               	clrf	??___ftpack& (0+255),b
  8579  002104  6B66               	clrf	(??___ftpack+1)& (0+255),b
  8580  002106  5162               	movf	(___ftpack@arg+2)& (0+255),w,b
  8581  002108  6F67               	movwf	(??___ftpack+2)& (0+255),b
  8582  00210A  5165               	movf	??___ftpack& (0+255),w,b
  8583  00210C  1166               	iorwf	(??___ftpack+1)& (0+255),w,b
  8584  00210E  1167               	iorwf	(??___ftpack+2)& (0+255),w,b
  8585  002110  E006               	bz	l7703
  8586  002112  D7F1               	goto	l7695
  8587  002114                     l7701:
  8588                           
  8589                           ; BSR set to: 0
  8590  002114  0763               	decf	___ftpack@exp& (0+255),f,b
  8591  002116  90D8               	bcf	status,0,c
  8592  002118  3760               	rlcf	___ftpack@arg& (0+255),f,b
  8593  00211A  3761               	rlcf	(___ftpack@arg+1)& (0+255),f,b
  8594  00211C  3762               	rlcf	(___ftpack@arg+2)& (0+255),f,b
  8595  00211E                     l7703:
  8596                           
  8597                           ; BSR set to: 0
  8598  00211E  AF61               	btfss	(___ftpack@arg+1)& (0+255),7,b
  8599  002120  D7F9               	goto	l7701
  8600                           
  8601                           ; BSR set to: 0
  8602  002122  A163               	btfss	___ftpack@exp& (0+255),0,b
  8603                           
  8604                           ; BSR set to: 0
  8605  002124  9F61               	bcf	(___ftpack@arg+1)& (0+255),7,b
  8606                           
  8607                           ; BSR set to: 0
  8608  002126  90D8               	bcf	status,0,c
  8609  002128  3363               	rrcf	___ftpack@exp& (0+255),f,b
  8610                           
  8611                           ; BSR set to: 0
  8612  00212A  5163               	movf	___ftpack@exp& (0+255),w,b
  8613  00212C  6F67               	movwf	(??___ftpack+2)& (0+255),b
  8614  00212E  6B66               	clrf	(??___ftpack+1)& (0+255),b
  8615  002130  6B65               	clrf	??___ftpack& (0+255),b
  8616  002132  5165               	movf	??___ftpack& (0+255),w,b
  8617  002134  1360               	iorwf	___ftpack@arg& (0+255),f,b
  8618  002136  5166               	movf	(??___ftpack+1)& (0+255),w,b
  8619  002138  1361               	iorwf	(___ftpack@arg+1)& (0+255),f,b
  8620  00213A  5167               	movf	(??___ftpack+2)& (0+255),w,b
  8621  00213C  1362               	iorwf	(___ftpack@arg+2)& (0+255),f,b
  8622                           
  8623                           ; BSR set to: 0
  8624  00213E  5164               	movf	___ftpack@sign& (0+255),w,b
  8625  002140  A4D8               	btfss	status,2,c
  8626                           
  8627                           ; BSR set to: 0
  8628  002142  8F62               	bsf	(___ftpack@arg+2)& (0+255),7,b
  8629                           
  8630                           ; BSR set to: 0
  8631  002144  C060  F060         	movff	___ftpack@arg,?___ftpack
  8632  002148  C061  F061         	movff	___ftpack@arg+1,?___ftpack+1
  8633  00214C  C062  F062         	movff	___ftpack@arg+2,?___ftpack+2
  8634                           
  8635                           ; BSR set to: 0
  8636  002150  0012               	return	
  8637  002152                     __end_of___ftpack:
  8638                           	opt stack 0
  8639  002152                     PL41:
  8640  002152  90D8               	bcf	status,0,c
  8641  002154  3362               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  8642  002156  3361               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  8643  002158  3360               	rrcf	___ftpack@arg& (0+255),f,b
  8644  00215A  0012               	return	
  8645                           tblptru	equ	0xFF8
  8646                           tblptrh	equ	0xFF7
  8647                           tblptrl	equ	0xFF6
  8648                           tablat	equ	0xFF5
  8649                           prodl	equ	0xFF3
  8650                           intcon	equ	0xFF2
  8651                           intcon2	equ	0xFF1
  8652                           postinc0	equ	0xFEE
  8653                           wreg	equ	0xFE8
  8654                           indf1	equ	0xFE7
  8655                           postinc1	equ	0xFE6
  8656                           postdec1	equ	0xFE5
  8657                           fsr1h	equ	0xFE2
  8658                           fsr1l	equ	0xFE1
  8659                           indf2	equ	0xFDF
  8660                           postinc2	equ	0xFDE
  8661                           postdec2	equ	0xFDD
  8662                           plusw2	equ	0xFDB
  8663                           fsr2h	equ	0xFDA
  8664                           fsr2l	equ	0xFD9
  8665                           status	equ	0xFD8
  8666                           
  8667 ;; *************** function ___ftdiv *****************
  8668 ;; Defined at:
  8669 ;;		line 50 in file "C:\Program Files (x86)\HI-TECH Software\PICC-18\9.80\sources\ftdiv.c"
  8670 ;; Parameters:    Size  Location     Type
  8671 ;;  f1              3   12[BANK0 ] float 
  8672 ;;  f2              3   15[BANK0 ] float 
  8673 ;; Auto vars:     Size  Location     Type
  8674 ;;  f3              3   24[BANK0 ] float 
  8675 ;;  sign            1   28[BANK0 ] unsigned char 
  8676 ;;  exp             1   27[BANK0 ] unsigned char 
  8677 ;;  cntr            1   23[BANK0 ] unsigned char 
  8678 ;; Return value:  Size  Location     Type
  8679 ;;                  3   12[BANK0 ] float 
  8680 ;; Registers used:
  8681 ;;		wreg, status,2, status,0, cstack
  8682 ;; Tracked objects:
  8683 ;;		On entry : F/0
  8684 ;;		On exit  : F/0
  8685 ;;		Unchanged: FFFFFFF0/0
  8686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8687 ;;      Params:         0       6       0       0       0       0       0       0       0
  8688 ;;      Locals:         0       6       0       0       0       0       0       0       0
  8689 ;;      Temps:          0       5       0       0       0       0       0       0       0
  8690 ;;      Totals:         0      17       0       0       0       0       0       0       0
  8691 ;;Total ram usage:       17 bytes
  8692 ;; Hardware stack levels used:    1
  8693 ;; Hardware stack levels required when called:    7
  8694 ;; This function calls:
  8695 ;;		___ftpack
  8696 ;; This function is called by:
  8697 ;;		_incVar
  8698 ;;		_decVar
  8699 ;;		_main
  8700 ;;		___asftdiv
  8701 ;; This function uses a non-reentrant model
  8702 ;;
  8703                           
  8704                           	psect	text26
  8705  001C6C                     __ptext26:
  8706                           	opt stack 0
  8707  001C6C                     ___ftdiv:
  8708                           	opt stack 22
  8709                           
  8710                           ; BSR set to: 0
  8711                           
  8712                           ; BSR set to: 0
  8713  001C6C  0E0F               	movlw	15
  8714  001C6E  6F72               	movwf	??___ftdiv& (0+255),b
  8715  001C70  C06C  F073         	movff	___ftdiv@f1,??___ftdiv+1
  8716  001C74  C06D  F074         	movff	___ftdiv@f1+1,??___ftdiv+2
  8717  001C78  C06E  F075         	movff	___ftdiv@f1+2,??___ftdiv+3
  8718  001C7C  2972               	incf	??___ftdiv& (0+255),w,b
  8719  001C7E  6F76               	movwf	(??___ftdiv+4)& (0+255),b
  8720  001C80  D001               	goto	u10940
  8721  001C82                     u10945:
  8722  001C82  D860               	call	PL44	;call to abstracted procedure
  8723  001C84                     u10940:
  8724  001C84  2F76               	decfsz	(??___ftdiv+4)& (0+255),f,b
  8725  001C86  D7FD               	goto	u10945
  8726  001C88  5173               	movf	(??___ftdiv+1)& (0+255),w,b
  8727  001C8A  6F7B               	movwf	___ftdiv@exp& (0+255),b
  8728  001C8C  0100               	movlb	0	; () banked
  8729  001C8E  677B               	tstfsz	___ftdiv@exp& (0+255),b
  8730  001C90  D004               	goto	l7797
  8731                           
  8732                           ; BSR set to: 0
  8733  001C92  6B6C               	clrf	?___ftdiv& (0+255),b
  8734  001C94  6B6D               	clrf	(?___ftdiv+1)& (0+255),b
  8735  001C96  6B6E               	clrf	(?___ftdiv+2)& (0+255),b
  8736  001C98  0012               	return	
  8737  001C9A                     l7797:
  8738                           
  8739                           ; BSR set to: 0
  8740  001C9A  0E0F               	movlw	15
  8741  001C9C  6F72               	movwf	??___ftdiv& (0+255),b
  8742  001C9E  C06F  F073         	movff	___ftdiv@f2,??___ftdiv+1
  8743  001CA2  C070  F074         	movff	___ftdiv@f2+1,??___ftdiv+2
  8744  001CA6  C071  F075         	movff	___ftdiv@f2+2,??___ftdiv+3
  8745  001CAA  2972               	incf	??___ftdiv& (0+255),w,b
  8746  001CAC  6F76               	movwf	(??___ftdiv+4)& (0+255),b
  8747  001CAE  D001               	goto	u10960
  8748  001CB0                     u10965:
  8749  001CB0  D849               	call	PL44	;call to abstracted procedure
  8750  001CB2                     u10960:
  8751  001CB2  2F76               	decfsz	(??___ftdiv+4)& (0+255),f,b
  8752  001CB4  D7FD               	goto	u10965
  8753  001CB6  5173               	movf	(??___ftdiv+1)& (0+255),w,b
  8754  001CB8  6F7C               	movwf	___ftdiv@sign& (0+255),b
  8755  001CBA  0100               	movlb	0	; () banked
  8756  001CBC  677C               	tstfsz	___ftdiv@sign& (0+255),b
  8757  001CBE  D004               	goto	l1209
  8758                           
  8759                           ; BSR set to: 0
  8760  001CC0  6B6C               	clrf	?___ftdiv& (0+255),b
  8761  001CC2  6B6D               	clrf	(?___ftdiv+1)& (0+255),b
  8762  001CC4  6B6E               	clrf	(?___ftdiv+2)& (0+255),b
  8763  001CC6  0012               	return	
  8764  001CC8                     l1209:
  8765                           
  8766                           ; BSR set to: 0
  8767  001CC8  6B78               	clrf	___ftdiv@f3& (0+255),b
  8768  001CCA  6B79               	clrf	(___ftdiv@f3+1)& (0+255),b
  8769  001CCC  6B7A               	clrf	(___ftdiv@f3+2)& (0+255),b
  8770                           
  8771                           ; BSR set to: 0
  8772  001CCE  517C               	movf	___ftdiv@sign& (0+255),w,b
  8773  001CD0  0F89               	addlw	137
  8774  001CD2  5F7B               	subwf	___ftdiv@exp& (0+255),f,b
  8775                           
  8776                           ; BSR set to: 0
  8777  001CD4  C06E  F07C         	movff	___ftdiv@f1+2,___ftdiv@sign
  8778  001CD8  0100               	movlb	0	; () banked
  8779  001CDA  5171               	movf	(___ftdiv@f2+2)& (0+255),w,b
  8780  001CDC  1B7C               	xorwf	___ftdiv@sign& (0+255),f,b
  8781  001CDE  0E80               	movlw	128
  8782  001CE0  177C               	andwf	___ftdiv@sign& (0+255),f,b
  8783                           
  8784                           ; BSR set to: 0
  8785  001CE2  8F6D               	bsf	(___ftdiv@f1+1)& (0+255),7,b
  8786                           
  8787                           ; BSR set to: 0
  8788  001CE4  6B6E               	clrf	(___ftdiv@f1+2)& (0+255),b
  8789                           
  8790                           ; BSR set to: 0
  8791  001CE6  8F70               	bsf	(___ftdiv@f2+1)& (0+255),7,b
  8792                           
  8793                           ; BSR set to: 0
  8794  001CE8  6B71               	clrf	(___ftdiv@f2+2)& (0+255),b
  8795                           
  8796                           ; BSR set to: 0
  8797  001CEA  0E18               	movlw	24
  8798  001CEC  6F77               	movwf	___ftdiv@cntr& (0+255),b
  8799  001CEE                     l7815:
  8800                           
  8801                           ; BSR set to: 0
  8802  001CEE  90D8               	bcf	status,0,c
  8803  001CF0  3778               	rlcf	___ftdiv@f3& (0+255),f,b
  8804  001CF2  3779               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
  8805  001CF4  377A               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
  8806                           
  8807                           ; BSR set to: 0
  8808  001CF6  516F               	movf	___ftdiv@f2& (0+255),w,b
  8809  001CF8  5D6C               	subwf	___ftdiv@f1& (0+255),w,b
  8810  001CFA  5170               	movf	(___ftdiv@f2+1)& (0+255),w,b
  8811  001CFC  596D               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
  8812  001CFE  5171               	movf	(___ftdiv@f2+2)& (0+255),w,b
  8813  001D00  596E               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
  8814  001D02  E307               	bnc	l1211
  8815                           
  8816                           ; BSR set to: 0
  8817  001D04  516F               	movf	___ftdiv@f2& (0+255),w,b
  8818  001D06  5F6C               	subwf	___ftdiv@f1& (0+255),f,b
  8819  001D08  5170               	movf	(___ftdiv@f2+1)& (0+255),w,b
  8820  001D0A  5B6D               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
  8821  001D0C  5171               	movf	(___ftdiv@f2+2)& (0+255),w,b
  8822  001D0E  5B6E               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
  8823                           
  8824                           ; BSR set to: 0
  8825  001D10  8178               	bsf	___ftdiv@f3& (0+255),0,b
  8826  001D12                     l1211:
  8827                           
  8828                           ; BSR set to: 0
  8829  001D12  90D8               	bcf	status,0,c
  8830  001D14  376C               	rlcf	___ftdiv@f1& (0+255),f,b
  8831  001D16  376D               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
  8832  001D18  376E               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
  8833                           
  8834                           ; BSR set to: 0
  8835  001D1A  2F77               	decfsz	___ftdiv@cntr& (0+255),f,b
  8836  001D1C  D7E8               	goto	l7815
  8837                           
  8838                           ; BSR set to: 0
  8839  001D1E  C078  F060         	movff	___ftdiv@f3,?___ftpack
  8840  001D22  C079  F061         	movff	___ftdiv@f3+1,?___ftpack+1
  8841  001D26  C07A  F062         	movff	___ftdiv@f3+2,?___ftpack+2
  8842  001D2A  C07B  F063         	movff	___ftdiv@exp,?___ftpack+3
  8843  001D2E  C07C  F064         	movff	___ftdiv@sign,?___ftpack+4
  8844  001D32  EC65  F010         	call	___ftpack	;wreg free
  8845  001D36  C060  F06C         	movff	?___ftpack,?___ftdiv
  8846  001D3A  C061  F06D         	movff	?___ftpack+1,?___ftdiv+1
  8847  001D3E  C062  F06E         	movff	?___ftpack+2,?___ftdiv+2
  8848                           
  8849                           ; BSR set to: 0
  8850  001D42  0012               	return	
  8851  001D44                     __end_of___ftdiv:
  8852                           	opt stack 0
  8853  001D44                     PL44:
  8854  001D44  90D8               	bcf	status,0,c
  8855  001D46  3375               	rrcf	(??___ftdiv+3)& (0+255),f,b
  8856  001D48  3374               	rrcf	(??___ftdiv+2)& (0+255),f,b
  8857  001D4A  3373               	rrcf	(??___ftdiv+1)& (0+255),f,b
  8858  001D4C  0012               	return	
  8859                           tblptru	equ	0xFF8
  8860                           tblptrh	equ	0xFF7
  8861                           tblptrl	equ	0xFF6
  8862                           tablat	equ	0xFF5
  8863                           prodl	equ	0xFF3
  8864                           intcon	equ	0xFF2
  8865                           intcon2	equ	0xFF1
  8866                           postinc0	equ	0xFEE
  8867                           wreg	equ	0xFE8
  8868                           indf1	equ	0xFE7
  8869                           postinc1	equ	0xFE6
  8870                           postdec1	equ	0xFE5
  8871                           fsr1h	equ	0xFE2
  8872                           fsr1l	equ	0xFE1
  8873                           indf2	equ	0xFDF
  8874                           postinc2	equ	0xFDE
  8875                           postdec2	equ	0xFDD
  8876                           plusw2	equ	0xFDB
  8877                           fsr2h	equ	0xFDA
  8878                           fsr2l	equ	0xFD9
  8879                           status	equ	0xFD8
  8880                           
  8881 ;; *************** function ___ftmul *****************
  8882 ;; Defined at:
  8883 ;;		line 52 in file "C:\Program Files (x86)\HI-TECH Software\PICC-18\9.80\sources\ftmul.c"
  8884 ;; Parameters:    Size  Location     Type
  8885 ;;  f1              3    8[BANK0 ] float 
  8886 ;;  f2              3   11[BANK0 ] float 
  8887 ;; Auto vars:     Size  Location     Type
  8888 ;;  f3_as_produc    3   20[BANK0 ] unsigned um
  8889 ;;  sign            1   24[BANK0 ] unsigned char 
  8890 ;;  cntr            1   23[BANK0 ] unsigned char 
  8891 ;;  exp             1   19[BANK0 ] unsigned char 
  8892 ;; Return value:  Size  Location     Type
  8893 ;;                  3    8[BANK0 ] float 
  8894 ;; Registers used:
  8895 ;;		wreg, status,2, status,0, cstack
  8896 ;; Tracked objects:
  8897 ;;		On entry : F/0
  8898 ;;		On exit  : F/0
  8899 ;;		Unchanged: FFFFFFF0/0
  8900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8901 ;;      Params:         0       6       0       0       0       0       0       0       0
  8902 ;;      Locals:         0       6       0       0       0       0       0       0       0
  8903 ;;      Temps:          0       5       0       0       0       0       0       0       0
  8904 ;;      Totals:         0      17       0       0       0       0       0       0       0
  8905 ;;Total ram usage:       17 bytes
  8906 ;; Hardware stack levels used:    1
  8907 ;; Hardware stack levels required when called:    7
  8908 ;; This function calls:
  8909 ;;		___ftpack
  8910 ;; This function is called by:
  8911 ;;		_iir
  8912 ;;		___asftmul
  8913 ;; This function uses a non-reentrant model
  8914 ;;
  8915                           
  8916                           	psect	text27
  8917  001B72                     __ptext27:
  8918                           	opt stack 0
  8919  001B72                     ___ftmul:
  8920                           	opt stack 22
  8921                           
  8922                           ; BSR set to: 0
  8923                           
  8924                           ; BSR set to: 0
  8925  001B72  0E0F               	movlw	15
  8926  001B74  6F6E               	movwf	??___ftmul& (0+255),b
  8927  001B76  C068  F06F         	movff	___ftmul@f1,??___ftmul+1
  8928  001B7A  C069  F070         	movff	___ftmul@f1+1,??___ftmul+2
  8929  001B7E  C06A  F071         	movff	___ftmul@f1+2,??___ftmul+3
  8930  001B82  296E               	incf	??___ftmul& (0+255),w,b
  8931  001B84  6F72               	movwf	(??___ftmul+4)& (0+255),b
  8932  001B86  D001               	goto	u10990
  8933  001B88                     u10995:
  8934  001B88  D86C               	call	PL42	;call to abstracted procedure
  8935  001B8A                     u10990:
  8936  001B8A  2F72               	decfsz	(??___ftmul+4)& (0+255),f,b
  8937  001B8C  D7FD               	goto	u10995
  8938  001B8E  516F               	movf	(??___ftmul+1)& (0+255),w,b
  8939  001B90  6F73               	movwf	___ftmul@exp& (0+255),b
  8940  001B92  0100               	movlb	0	; () banked
  8941  001B94  6773               	tstfsz	___ftmul@exp& (0+255),b
  8942  001B96  D004               	goto	l7833
  8943                           
  8944                           ; BSR set to: 0
  8945  001B98  6B68               	clrf	?___ftmul& (0+255),b
  8946  001B9A  6B69               	clrf	(?___ftmul+1)& (0+255),b
  8947  001B9C  6B6A               	clrf	(?___ftmul+2)& (0+255),b
  8948  001B9E  0012               	return	
  8949  001BA0                     l7833:
  8950                           
  8951                           ; BSR set to: 0
  8952  001BA0  0E0F               	movlw	15
  8953  001BA2  6F6E               	movwf	??___ftmul& (0+255),b
  8954  001BA4  C06B  F06F         	movff	___ftmul@f2,??___ftmul+1
  8955  001BA8  C06C  F070         	movff	___ftmul@f2+1,??___ftmul+2
  8956  001BAC  C06D  F071         	movff	___ftmul@f2+2,??___ftmul+3
  8957  001BB0  296E               	incf	??___ftmul& (0+255),w,b
  8958  001BB2  6F72               	movwf	(??___ftmul+4)& (0+255),b
  8959  001BB4  D001               	goto	u11010
  8960  001BB6                     u11015:
  8961  001BB6  D855               	call	PL42	;call to abstracted procedure
  8962  001BB8                     u11010:
  8963  001BB8  2F72               	decfsz	(??___ftmul+4)& (0+255),f,b
  8964  001BBA  D7FD               	goto	u11015
  8965  001BBC  516F               	movf	(??___ftmul+1)& (0+255),w,b
  8966  001BBE  6F78               	movwf	___ftmul@sign& (0+255),b
  8967  001BC0  0100               	movlb	0	; () banked
  8968  001BC2  6778               	tstfsz	___ftmul@sign& (0+255),b
  8969  001BC4  D004               	goto	l7837
  8970                           
  8971                           ; BSR set to: 0
  8972  001BC6  6B68               	clrf	?___ftmul& (0+255),b
  8973  001BC8  6B69               	clrf	(?___ftmul+1)& (0+255),b
  8974  001BCA  6B6A               	clrf	(?___ftmul+2)& (0+255),b
  8975  001BCC  0012               	return	
  8976  001BCE                     l7837:
  8977                           
  8978                           ; BSR set to: 0
  8979  001BCE  5178               	movf	___ftmul@sign& (0+255),w,b
  8980  001BD0  0F7B               	addlw	123
  8981  001BD2  2773               	addwf	___ftmul@exp& (0+255),f,b
  8982                           
  8983                           ; BSR set to: 0
  8984  001BD4  C06A  F078         	movff	___ftmul@f1+2,___ftmul@sign
  8985  001BD8  0100               	movlb	0	; () banked
  8986  001BDA  516D               	movf	(___ftmul@f2+2)& (0+255),w,b
  8987  001BDC  1B78               	xorwf	___ftmul@sign& (0+255),f,b
  8988  001BDE  0E80               	movlw	128
  8989  001BE0  1778               	andwf	___ftmul@sign& (0+255),f,b
  8990                           
  8991                           ; BSR set to: 0
  8992  001BE2  8F69               	bsf	(___ftmul@f1+1)& (0+255),7,b
  8993                           
  8994                           ; BSR set to: 0
  8995  001BE4  8F6C               	bsf	(___ftmul@f2+1)& (0+255),7,b
  8996                           
  8997                           ; BSR set to: 0
  8998  001BE6  0E00               	movlw	0
  8999  001BE8  176D               	andwf	(___ftmul@f2+2)& (0+255),f,b
  9000                           
  9001                           ; BSR set to: 0
  9002  001BEA  6B74               	clrf	___ftmul@f3_as_product& (0+255),b
  9003  001BEC  6B75               	clrf	(___ftmul@f3_as_product+1)& (0+255),b
  9004  001BEE  6B76               	clrf	(___ftmul@f3_as_product+2)& (0+255),b
  9005                           
  9006                           ; BSR set to: 0
  9007  001BF0  0E07               	movlw	7
  9008  001BF2  6F77               	movwf	___ftmul@cntr& (0+255),b
  9009  001BF4                     l7851:
  9010                           
  9011                           ; BSR set to: 0
  9012  001BF4  A168               	btfss	___ftmul@f1& (0+255),0,b
  9013  001BF6  D002               	goto	l7855
  9014                           
  9015                           ; BSR set to: 0
  9016  001BF8  516B               	movf	___ftmul@f2& (0+255),w,b
  9017  001BFA  D82D               	call	PL40	;call to abstracted procedure
  9018  001BFC                     l7855:
  9019                           
  9020                           ; BSR set to: 0
  9021  001BFC  90D8               	bcf	status,0,c
  9022  001BFE  336A               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  9023  001C00  3369               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  9024  001C02  3368               	rrcf	___ftmul@f1& (0+255),f,b
  9025  001C04  90D8               	bcf	status,0,c
  9026  001C06  376B               	rlcf	___ftmul@f2& (0+255),f,b
  9027  001C08  376C               	rlcf	(___ftmul@f2+1)& (0+255),f,b
  9028  001C0A  376D               	rlcf	(___ftmul@f2+2)& (0+255),f,b
  9029                           
  9030                           ; BSR set to: 0
  9031  001C0C  2F77               	decfsz	___ftmul@cntr& (0+255),f,b
  9032  001C0E  D7F2               	goto	l7851
  9033                           
  9034                           ; BSR set to: 0
  9035  001C10  0E09               	movlw	9
  9036  001C12  6F77               	movwf	___ftmul@cntr& (0+255),b
  9037  001C14                     l7861:
  9038                           
  9039                           ; BSR set to: 0
  9040  001C14  A168               	btfss	___ftmul@f1& (0+255),0,b
  9041  001C16  D002               	goto	l7865
  9042                           
  9043                           ; BSR set to: 0
  9044  001C18  516B               	movf	___ftmul@f2& (0+255),w,b
  9045  001C1A  D81D               	call	PL40	;call to abstracted procedure
  9046  001C1C                     l7865:
  9047                           
  9048                           ; BSR set to: 0
  9049  001C1C  90D8               	bcf	status,0,c
  9050  001C1E  336A               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  9051  001C20  3369               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  9052  001C22  3368               	rrcf	___ftmul@f1& (0+255),f,b
  9053  001C24  90D8               	bcf	status,0,c
  9054  001C26  3376               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  9055  001C28  3375               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  9056  001C2A  3374               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  9057                           
  9058                           ; BSR set to: 0
  9059  001C2C  2F77               	decfsz	___ftmul@cntr& (0+255),f,b
  9060  001C2E  D7F2               	goto	l7861
  9061                           
  9062                           ; BSR set to: 0
  9063  001C30  C074  F060         	movff	___ftmul@f3_as_product,?___ftpack
  9064  001C34  C075  F061         	movff	___ftmul@f3_as_product+1,?___ftpack+1
  9065  001C38  C076  F062         	movff	___ftmul@f3_as_product+2,?___ftpack+2
  9066  001C3C  C073  F063         	movff	___ftmul@exp,?___ftpack+3
  9067  001C40  C078  F064         	movff	___ftmul@sign,?___ftpack+4
  9068  001C44  EC65  F010         	call	___ftpack	;wreg free
  9069  001C48  C060  F068         	movff	?___ftpack,?___ftmul
  9070  001C4C  C061  F069         	movff	?___ftpack+1,?___ftmul+1
  9071  001C50  C062  F06A         	movff	?___ftpack+2,?___ftmul+2
  9072                           
  9073                           ; BSR set to: 0
  9074  001C54  0012               	return	
  9075  001C56                     __end_of___ftmul:
  9076                           	opt stack 0
  9077  001C56                     PL40:
  9078  001C56  2774               	addwf	___ftmul@f3_as_product& (0+255),f,b
  9079  001C58  516C               	movf	(___ftmul@f2+1)& (0+255),w,b
  9080  001C5A  2375               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  9081  001C5C  516D               	movf	(___ftmul@f2+2)& (0+255),w,b
  9082  001C5E  2376               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  9083  001C60  0012               	return	
  9084  001C62                     PL42:
  9085  001C62  90D8               	bcf	status,0,c
  9086  001C64  3371               	rrcf	(??___ftmul+3)& (0+255),f,b
  9087  001C66  3370               	rrcf	(??___ftmul+2)& (0+255),f,b
  9088  001C68  336F               	rrcf	(??___ftmul+1)& (0+255),f,b
  9089  001C6A  0012               	return	
  9090                           tblptru	equ	0xFF8
  9091                           tblptrh	equ	0xFF7
  9092                           tblptrl	equ	0xFF6
  9093                           tablat	equ	0xFF5
  9094                           prodl	equ	0xFF3
  9095                           intcon	equ	0xFF2
  9096                           intcon2	equ	0xFF1
  9097                           postinc0	equ	0xFEE
  9098                           wreg	equ	0xFE8
  9099                           indf1	equ	0xFE7
  9100                           postinc1	equ	0xFE6
  9101                           postdec1	equ	0xFE5
  9102                           fsr1h	equ	0xFE2
  9103                           fsr1l	equ	0xFE1
  9104                           indf2	equ	0xFDF
  9105                           postinc2	equ	0xFDE
  9106                           postdec2	equ	0xFDD
  9107                           plusw2	equ	0xFDB
  9108                           fsr2h	equ	0xFDA
  9109                           fsr2l	equ	0xFD9
  9110                           status	equ	0xFD8
  9111                           
  9112 ;; *************** function _isr2 *****************
  9113 ;; Defined at:
  9114 ;;		line 26 in file "C:\fgr\16gb\0000 interior\deVolt\sw\interrupts.c"
  9115 ;; Parameters:    Size  Location     Type
  9116 ;;		None
  9117 ;; Auto vars:     Size  Location     Type
  9118 ;;		None
  9119 ;; Return value:  Size  Location     Type
  9120 ;;		None               void
  9121 ;; Registers used:
  9122 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9123 ;; Tracked objects:
  9124 ;;		On entry : 0/0
  9125 ;;		On exit  : 0/0
  9126 ;;		Unchanged: FFFFFFF0/0
  9127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9128 ;;      Params:         0       0       0       0       0       0       0       0       0
  9129 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9130 ;;      Temps:          9       0       0       0       0       0       0       0       0
  9131 ;;      Totals:         9       0       0       0       0       0       0       0       0
  9132 ;;Total ram usage:        9 bytes
  9133 ;; Hardware stack levels used:    1
  9134 ;; Hardware stack levels required when called:    5
  9135 ;; This function calls:
  9136 ;;		_isr_timer3
  9137 ;;		_isr_adc
  9138 ;; This function is called by:
  9139 ;;		Interrupt level 1
  9140 ;; This function uses a non-reentrant model
  9141 ;;
  9142                           
  9143                           	psect	intcodelo
  9144  000018                     __pintcodelo:
  9145                           	opt stack 0
  9146  000018                     _isr2:
  9147                           	opt stack 21
  9148                           
  9149                           ; BSR set to: 0
  9150  000018  CFD8 F00A          	movff	status,??_isr2
  9151  00001C  CFE8 F00B          	movff	wreg,??_isr2+1
  9152  000020  CFE0 F00C          	movff	bsr,??_isr2+2
  9153  000024  CFE1 F00D          	movff	fsr1l,??_isr2+3
  9154  000028  CFE2 F00E          	movff	fsr1h,??_isr2+4
  9155  00002C  CFD9 F00F          	movff	fsr2l,??_isr2+5
  9156  000030  CFDA F010          	movff	fsr2h,??_isr2+6
  9157  000034  CFF3 F011          	movff	prodl,??_isr2+7
  9158  000038  CFF4 F012          	movff	prodh,??_isr2+8
  9159  00003C                     
  9160                           ;interrupts.c: 27: if(PIE2bits.TMR3IE && PIR2bits.TMR3IF) isr_timer3();
  9161  00003C  A2A0               	btfss	4000,1,c	;volatile
  9162  00003E  D001               	goto	i1u769_21
  9163  000040  D001               	goto	i1u769_20
  9164  000042                     i1u769_21:
  9165  000042  D007               	goto	i1l650
  9166  000044                     i1u769_20:
  9167  000044  A2A1               	btfss	4001,1,c	;volatile
  9168  000046  D001               	goto	i1u770_21
  9169  000048  D001               	goto	i1u770_20
  9170  00004A                     i1u770_21:
  9171  00004A  D003               	goto	i1l650
  9172  00004C                     i1u770_20:
  9173  00004C  EC93  F012         	call	_isr_timer3	;wreg free
  9174  000050  D00A               	goto	i1l653
  9175  000052                     i1l650:
  9176                           
  9177                           ;interrupts.c: 28: else if(PIE1bits.ADIE && PIR1bits.ADIF) isr_adc();
  9178  000052  AC9D               	btfss	3997,6,c	;volatile
  9179  000054  D001               	goto	i1u771_21
  9180  000056  D001               	goto	i1u771_20
  9181  000058                     i1u771_21:
  9182  000058  D006               	goto	i1l653
  9183  00005A                     i1u771_20:
  9184  00005A  AC9E               	btfss	3998,6,c	;volatile
  9185  00005C  D001               	goto	i1u772_21
  9186  00005E  D001               	goto	i1u772_20
  9187  000060                     i1u772_21:
  9188  000060  D002               	goto	i1l653
  9189  000062                     i1u772_20:
  9190  000062  ECCF  F013         	call	_isr_adc	;wreg free
  9191  000066                     i1l653:
  9192  000066  C012  FFF4         	movff	??_isr2+8,prodh
  9193  00006A  C011  FFF3         	movff	??_isr2+7,prodl
  9194  00006E  C010  FFDA         	movff	??_isr2+6,fsr2h
  9195  000072  C00F  FFD9         	movff	??_isr2+5,fsr2l
  9196  000076  C00E  FFE2         	movff	??_isr2+4,fsr1h
  9197  00007A  C00D  FFE1         	movff	??_isr2+3,fsr1l
  9198  00007E  C00C  FFE0         	movff	??_isr2+2,bsr
  9199  000082  C00B  FFE8         	movff	??_isr2+1,wreg
  9200  000086  C00A  FFD8         	movff	??_isr2,status
  9201  00008A  0010               	retfie	
  9202  00008C                     __end_of_isr2:
  9203                           	opt stack 0
  9204                           tblptru	equ	0xFF8
  9205                           tblptrh	equ	0xFF7
  9206                           tblptrl	equ	0xFF6
  9207                           tablat	equ	0xFF5
  9208                           prodh	equ	0xFF4
  9209                           prodl	equ	0xFF3
  9210                           intcon	equ	0xFF2
  9211                           intcon2	equ	0xFF1
  9212                           postinc0	equ	0xFEE
  9213                           wreg	equ	0xFE8
  9214                           indf1	equ	0xFE7
  9215                           postinc1	equ	0xFE6
  9216                           postdec1	equ	0xFE5
  9217                           fsr1h	equ	0xFE2
  9218                           fsr1l	equ	0xFE1
  9219                           bsr	equ	0xFE0
  9220                           indf2	equ	0xFDF
  9221                           postinc2	equ	0xFDE
  9222                           postdec2	equ	0xFDD
  9223                           plusw2	equ	0xFDB
  9224                           fsr2h	equ	0xFDA
  9225                           fsr2l	equ	0xFD9
  9226                           status	equ	0xFD8
  9227                           
  9228 ;; *************** function _isr_adc *****************
  9229 ;; Defined at:
  9230 ;;		line 40 in file "C:\fgr\16gb\0000 interior\deVolt\sw\adc.c"
  9231 ;; Parameters:    Size  Location     Type
  9232 ;;		None
  9233 ;; Auto vars:     Size  Location     Type
  9234 ;;		None
  9235 ;; Return value:  Size  Location     Type
  9236 ;;		None               void
  9237 ;; Registers used:
  9238 ;;		wreg, status,2, status,0
  9239 ;; Tracked objects:
  9240 ;;		On entry : 0/0
  9241 ;;		On exit  : F/0
  9242 ;;		Unchanged: FFFFFFF0/0
  9243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9244 ;;      Params:         0       0       0       0       0       0       0       0       0
  9245 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9246 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9247 ;;      Totals:         0       0       0       0       0       0       0       0       0
  9248 ;;Total ram usage:        0 bytes
  9249 ;; Hardware stack levels used:    1
  9250 ;; Hardware stack levels required when called:    3
  9251 ;; This function calls:
  9252 ;;		Nothing
  9253 ;; This function is called by:
  9254 ;;		_isr2
  9255 ;; This function uses a non-reentrant model
  9256 ;;
  9257                           
  9258                           	psect	text29
  9259  00279E                     __ptext29:
  9260                           	opt stack 0
  9261  00279E                     _isr_adc:
  9262                           	opt stack 22
  9263                           
  9264                           ;adc.c: 41: adcStruct.chComp=ADCON0bits.CHS;
  9265  00279E  30C2               	rrcf	4034,w,c	;volatile
  9266  0027A0  32E8               	rrcf	wreg,f,c
  9267  0027A2  0B0F               	andlw	15
  9268  0027A4  0100               	movlb	0	; () banked
  9269  0027A6  6FAE               	movwf	(_adcStruct+1)& (0+255),b
  9270                           
  9271                           ; BSR set to: 0
  9272                           ;adc.c: 42: adcStruct.completeFlg=1;
  9273  0027A8  81AD               	bsf	_adcStruct& (0+255),0,b
  9274                           
  9275                           ; BSR set to: 0
  9276                           ;adc.c: 44: PIR1bits.ADIF=0;
  9277  0027AA  9C9E               	bcf	3998,6,c	;volatile
  9278                           
  9279                           ; BSR set to: 0
  9280  0027AC  0012               	return	
  9281  0027AE                     __end_of_isr_adc:
  9282                           	opt stack 0
  9283                           tblptru	equ	0xFF8
  9284                           tblptrh	equ	0xFF7
  9285                           tblptrl	equ	0xFF6
  9286                           tablat	equ	0xFF5
  9287                           prodh	equ	0xFF4
  9288                           prodl	equ	0xFF3
  9289                           intcon	equ	0xFF2
  9290                           intcon2	equ	0xFF1
  9291                           postinc0	equ	0xFEE
  9292                           wreg	equ	0xFE8
  9293                           indf1	equ	0xFE7
  9294                           postinc1	equ	0xFE6
  9295                           postdec1	equ	0xFE5
  9296                           fsr1h	equ	0xFE2
  9297                           fsr1l	equ	0xFE1
  9298                           bsr	equ	0xFE0
  9299                           indf2	equ	0xFDF
  9300                           postinc2	equ	0xFDE
  9301                           postdec2	equ	0xFDD
  9302                           plusw2	equ	0xFDB
  9303                           fsr2h	equ	0xFDA
  9304                           fsr2l	equ	0xFD9
  9305                           status	equ	0xFD8
  9306                           
  9307 ;; *************** function _isr_timer3 *****************
  9308 ;; Defined at:
  9309 ;;		line 72 in file "C:\fgr\16gb\0000 interior\deVolt\sw\interrupts.c"
  9310 ;; Parameters:    Size  Location     Type
  9311 ;;		None
  9312 ;; Auto vars:     Size  Location     Type
  9313 ;;		None
  9314 ;; Return value:  Size  Location     Type
  9315 ;;		None               void
  9316 ;; Registers used:
  9317 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9318 ;; Tracked objects:
  9319 ;;		On entry : 0/0
  9320 ;;		On exit  : E/0
  9321 ;;		Unchanged: FFFFFFF0/0
  9322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9323 ;;      Params:         0       0       0       0       0       0       0       0       0
  9324 ;;      Locals:         2       0       0       0       0       0       0       0       0
  9325 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9326 ;;      Totals:         2       0       0       0       0       0       0       0       0
  9327 ;;Total ram usage:        2 bytes
  9328 ;; Hardware stack levels used:    1
  9329 ;; Hardware stack levels required when called:    4
  9330 ;; This function calls:
  9331 ;;		i1_timerDriver
  9332 ;;		_pulsPinDriver
  9333 ;; This function is called by:
  9334 ;;		_isr2
  9335 ;; This function uses a non-reentrant model
  9336 ;;
  9337                           
  9338                           	psect	text30
  9339  002526                     __ptext30:
  9340                           	opt stack 0
  9341  002526                     _isr_timer3:
  9342                           	opt stack 21
  9343                           
  9344                           ;interrupts.c: 73: TMR3=64036UL;
  9345                           
  9346                           ; BSR set to: 0
  9347  002526  0EFA               	movlw	250
  9348  002528  6EB3               	movwf	4019,c	;volatile
  9349  00252A  0E24               	movlw	36
  9350  00252C  6EB2               	movwf	4018,c	;volatile
  9351                           
  9352                           ;interrupts.c: 75: timerDriver(TMR_ADCSAMPLE);
  9353  00252E  0E0C               	movlw	12
  9354  002530  ECA7  F00E         	call	i1_timerDriver
  9355                           
  9356                           ; BSR set to: 1
  9357                           ;interrupts.c: 76: timerDriver(TMR_250MS);
  9358  002534  0E04               	movlw	4
  9359  002536  ECA7  F00E         	call	i1_timerDriver
  9360                           
  9361                           ; BSR set to: 1
  9362                           ;interrupts.c: 78: timerDriver(TMR_BEEP);
  9363  00253A  0E02               	movlw	2
  9364  00253C  ECA7  F00E         	call	i1_timerDriver
  9365                           
  9366                           ; BSR set to: 1
  9367                           ;interrupts.c: 79: if((timerMem[TMR_BEEP].flag?!(timerMem[TMR_BEEP].flag=0):0)) PORTCbit
      +                          s.RC6=0;
  9368  002540  B396               	btfsc	(_timerMem+11)& (0+255),1,b
  9369  002542  D002               	goto	i1l6127
  9370                           
  9371                           ; BSR set to: 1
  9372  002544  6A08               	clrf	_isr_timer3$1607,c
  9373  002546  D00A               	goto	L56
  9374  002548                     i1l6127:
  9375                           
  9376                           ; BSR set to: 1
  9377  002548  5196               	movf	(_timerMem+11)& (0+255),w,b
  9378  00254A  0BFD               	andlw	-3
  9379  00254C  6F96               	movwf	(_timerMem+11)& (0+255),b
  9380  00254E  0101               	movlb	1	; () banked
  9381  002550  3196               	rrcf	(_timerMem+11)& (0+255),w,b
  9382  002552  0B01               	andlw	1
  9383  002554  0E00               	movlw	0
  9384  002556  B4D8               	btfsc	status,2,c
  9385  002558  0E01               	movlw	1
  9386  00255A  6E08               	movwf	_isr_timer3$1607,c
  9387  00255C                     L56:
  9388  00255C  6A09               	clrf	_isr_timer3$1607+1,c
  9389                           
  9390                           ; BSR set to: 1
  9391  00255E  5009               	movf	_isr_timer3$1607+1,w,c
  9392  002560  1008               	iorwf	_isr_timer3$1607,w,c
  9393  002562  A4D8               	btfss	status,2,c
  9394                           
  9395                           ; BSR set to: 1
  9396  002564  9C82               	bcf	3970,6,c	;volatile
  9397                           
  9398                           ; BSR set to: 1
  9399                           ;interrupts.c: 81: pulsPinDriver();
  9400  002566  ECF7  F00A         	call	_pulsPinDriver	;wreg free
  9401                           
  9402                           ;interrupts.c: 83: PIR2bits.TMR3IF=0;
  9403  00256A  92A1               	bcf	4001,1,c	;volatile
  9404  00256C  0012               	return	
  9405  00256E                     __end_of_isr_timer3:
  9406                           	opt stack 0
  9407                           tblptru	equ	0xFF8
  9408                           tblptrh	equ	0xFF7
  9409                           tblptrl	equ	0xFF6
  9410                           tablat	equ	0xFF5
  9411                           prodh	equ	0xFF4
  9412                           prodl	equ	0xFF3
  9413                           intcon	equ	0xFF2
  9414                           intcon2	equ	0xFF1
  9415                           postinc0	equ	0xFEE
  9416                           wreg	equ	0xFE8
  9417                           indf1	equ	0xFE7
  9418                           postinc1	equ	0xFE6
  9419                           postdec1	equ	0xFE5
  9420                           fsr1h	equ	0xFE2
  9421                           fsr1l	equ	0xFE1
  9422                           bsr	equ	0xFE0
  9423                           indf2	equ	0xFDF
  9424                           postinc2	equ	0xFDE
  9425                           postdec2	equ	0xFDD
  9426                           plusw2	equ	0xFDB
  9427                           fsr2h	equ	0xFDA
  9428                           fsr2l	equ	0xFD9
  9429                           status	equ	0xFD8
  9430                           
  9431 ;; *************** function _pulsPinDriver *****************
  9432 ;; Defined at:
  9433 ;;		line 14 in file "C:\fgr\16gb\libSwPic\oldV2\lib_sw_pic_20171007\pulsadorPin_1ms.c"
  9434 ;; Parameters:    Size  Location     Type
  9435 ;;		None
  9436 ;; Auto vars:     Size  Location     Type
  9437 ;;  i               1    6[COMRAM] unsigned char 
  9438 ;;  j               1    0        unsigned char 
  9439 ;; Return value:  Size  Location     Type
  9440 ;;		None               void
  9441 ;; Registers used:
  9442 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9443 ;; Tracked objects:
  9444 ;;		On entry : F/1
  9445 ;;		On exit  : E/0
  9446 ;;		Unchanged: FFFFFFF0/0
  9447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9448 ;;      Params:         0       0       0       0       0       0       0       0       0
  9449 ;;      Locals:         1       0       0       0       0       0       0       0       0
  9450 ;;      Temps:          6       0       0       0       0       0       0       0       0
  9451 ;;      Totals:         7       0       0       0       0       0       0       0       0
  9452 ;;Total ram usage:        7 bytes
  9453 ;; Hardware stack levels used:    1
  9454 ;; Hardware stack levels required when called:    3
  9455 ;; This function calls:
  9456 ;;		Nothing
  9457 ;; This function is called by:
  9458 ;;		_isr_timer3
  9459 ;; This function uses a non-reentrant model
  9460 ;;
  9461                           
  9462                           	psect	text31
  9463  0015EE                     __ptext31:
  9464                           	opt stack 0
  9465  0015EE                     _pulsPinDriver:
  9466                           	opt stack 21
  9467                           
  9468                           ; BSR set to: 1
  9469                           ;pulsadorPin_1ms.c: 15: char i,j;
  9470                           ;pulsadorPin_1ms.c: 17: for(i=0;i<PULS_PIN_CANT;i++)
  9471  0015EE  6A07               	clrf	pulsPinDriver@i,c
  9472  0015F0                     i1l5767:
  9473                           
  9474                           ;pulsadorPin_1ms.c: 18: {
  9475                           ;pulsadorPin_1ms.c: 19: pulsPin[i].state=!(((1UL<<(pulsPin[i].bitNum)) & (*(pulsPin[i].p
      +                          2port)))==0);
  9476  0015F0  5007               	movf	pulsPinDriver@i,w,c
  9477  0015F2  0D04               	mullw	4
  9478  0015F4  50F3               	movf	prodl,w,c
  9479  0015F6  0F3D               	addlw	low _pulsPin
  9480  0015F8  6ED9               	movwf	fsr2l,c
  9481  0015FA  6ADA               	clrf	fsr2h,c
  9482  0015FC  CFDE F001          	movff	postinc2,??_pulsPinDriver
  9483  001600  CFDD F002          	movff	postdec2,??_pulsPinDriver+1
  9484  001604  C001  FFD9         	movff	??_pulsPinDriver,fsr2l
  9485  001608  C002  FFDA         	movff	??_pulsPinDriver+1,fsr2h
  9486  00160C  50DF               	movf	indf2,w,c
  9487  00160E  6E03               	movwf	(??_pulsPinDriver+2)& (0+255),c
  9488  001610  D883               	call	PL7	;call to abstracted procedure
  9489  001612  50DF               	movf	indf2,w,c
  9490  001614  0B07               	andlw	7
  9491  001616  6E04               	movwf	(??_pulsPinDriver+3)& (0+255),c
  9492  001618  0E01               	movlw	1
  9493  00161A  6E05               	movwf	(??_pulsPinDriver+4)& (0+255),c
  9494  00161C  2A04               	incf	??_pulsPinDriver+3,f,c
  9495  00161E  D002               	goto	i1u694_24
  9496  001620                     i1u694_25:
  9497  001620  90D8               	bcf	status,0,c
  9498  001622  3605               	rlcf	??_pulsPinDriver+4,f,c
  9499  001624                     i1u694_24:
  9500  001624  2E04               	decfsz	??_pulsPinDriver+3,f,c
  9501  001626  D7FC               	goto	i1u694_25
  9502  001628  5005               	movf	??_pulsPinDriver+4,w,c
  9503  00162A  1403               	andwf	??_pulsPinDriver+2,w,c
  9504  00162C  0E01               	movlw	1
  9505  00162E  B4D8               	btfsc	status,2,c
  9506  001630  0E00               	movlw	0
  9507  001632  6E06               	movwf	(??_pulsPinDriver+5)& (0+255),c
  9508  001634  D871               	call	PL7	;call to abstracted procedure
  9509  001636  4606               	rlncf	??_pulsPinDriver+5,f,c
  9510  001638  4606               	rlncf	??_pulsPinDriver+5,f,c
  9511  00163A  4606               	rlncf	??_pulsPinDriver+5,f,c
  9512  00163C  50DF               	movf	indf2,w,c
  9513  00163E  1806               	xorwf	??_pulsPinDriver+5,w,c
  9514  001640  0BF7               	andlw	-9
  9515  001642  1806               	xorwf	??_pulsPinDriver+5,w,c
  9516  001644  6EDF               	movwf	indf2,c
  9517                           
  9518                           ;pulsadorPin_1ms.c: 20: if(pulsPin[i].state!=pulsPin[i].prevState)
  9519  001646  D868               	call	PL7	;call to abstracted procedure
  9520  001648  38DF               	swapf	indf2,w,c
  9521  00164A  0B01               	andlw	1
  9522  00164C  6E01               	movwf	??_pulsPinDriver& (0+255),c
  9523  00164E  D864               	call	PL7	;call to abstracted procedure
  9524  001650  30DF               	rrcf	indf2,w,c
  9525  001652  32E8               	rrcf	wreg,f,c
  9526  001654  32E8               	rrcf	wreg,f,c
  9527  001656  0B01               	andlw	1
  9528  001658  1801               	xorwf	??_pulsPinDriver,w,c
  9529  00165A  E054               	bz	i1l5815
  9530                           
  9531                           ;pulsadorPin_1ms.c: 21: {
  9532                           ;pulsadorPin_1ms.c: 22: if(pulsPin[i].fp && pulsPin[i].state==1 && pulsPin[i].prevState=
      +                          =0)
  9533  00165C  D85D               	call	PL7	;call to abstracted procedure
  9534  00165E  50DF               	movf	indf2,w,c
  9535  001660  6E01               	movwf	??_pulsPinDriver& (0+255),c
  9536  001662  AA01               	btfss	??_pulsPinDriver,5,c
  9537  001664  D01E               	goto	i1l5791
  9538  001666  5007               	movf	pulsPinDriver@i,w,c
  9539  001668  D85E               	call	PL8	;call to abstracted procedure
  9540  00166A  A601               	btfss	??_pulsPinDriver,3,c
  9541  00166C  D01A               	goto	i1l5791
  9542  00166E  5007               	movf	pulsPinDriver@i,w,c
  9543  001670  D85A               	call	PL8	;call to abstracted procedure
  9544  001672  B801               	btfsc	??_pulsPinDriver,4,c
  9545  001674  D016               	goto	i1l5791
  9546                           
  9547                           ;pulsadorPin_1ms.c: 23: {
  9548                           ;pulsadorPin_1ms.c: 24: if(pulsPin[i].timer)
  9549  001676  5007               	movf	pulsPinDriver@i,w,c
  9550  001678  0D04               	mullw	4
  9551  00167A  50F3               	movf	prodl,w,c
  9552  00167C  0F40               	addlw	low (_pulsPin+3)
  9553  00167E  6ED9               	movwf	fsr2l,c
  9554  001680  6ADA               	clrf	fsr2h,c
  9555  001682  50DF               	movf	indf2,w,c
  9556  001684  E00B               	bz	i1l5783
  9557                           
  9558                           ;pulsadorPin_1ms.c: 25: if(pulsPin[i].unbounceRst)
  9559  001686  D848               	call	PL7	;call to abstracted procedure
  9560  001688  50DF               	movf	indf2,w,c
  9561  00168A  6E01               	movwf	??_pulsPinDriver& (0+255),c
  9562  00168C  AE01               	btfss	??_pulsPinDriver,7,c
  9563  00168E  D003               	goto	i1l5781
  9564                           
  9565                           ;pulsadorPin_1ms.c: 26: pulsPin[i].timer=100;
  9566  001690  5007               	movf	pulsPinDriver@i,w,c
  9567  001692  D858               	call	PL20	;call to abstracted procedure
  9568  001694  D006               	goto	i1l5791
  9569  001696                     i1l5781:
  9570                           
  9571                           ;pulsadorPin_1ms.c: 27: else
  9572                           ;pulsadorPin_1ms.c: 28: pulsPin[i].timer--;
  9573  001696  D84F               	call	PL15	;call to abstracted procedure
  9574  001698  06DF               	decf	indf2,f,c
  9575  00169A  D003               	goto	i1l5791
  9576  00169C                     i1l5783:
  9577                           
  9578                           ;pulsadorPin_1ms.c: 29: else
  9579                           ;pulsadorPin_1ms.c: 30: {
  9580                           ;pulsadorPin_1ms.c: 31: pulsPin[i].timer=100;
  9581  00169C  D84C               	call	PL15	;call to abstracted procedure
  9582                           
  9583                           ;pulsadorPin_1ms.c: 32: pulsPinBuffer.pulsId=i;
  9584                           
  9585                           ; BSR set to: 0
  9586                           ;pulsadorPin_1ms.c: 33: pulsPinBuffer.flag=1;
  9587  00169E  D85A               	call	PL30	;call to abstracted procedure
  9588                           
  9589                           ; BSR set to: 0
  9590                           ;pulsadorPin_1ms.c: 34: pulsPinBuffer.fp=1;
  9591  0016A0  8DBC               	bsf	_pulsPinBuffer& (0+255),6,b
  9592  0016A2                     i1l5791:
  9593                           
  9594                           ;pulsadorPin_1ms.c: 35: }
  9595                           ;pulsadorPin_1ms.c: 36: }
  9596                           ;pulsadorPin_1ms.c: 37: if(pulsPin[i].fn && pulsPin[i].state==0 && pulsPin[i].prevState=
      +                          =1)
  9597  0016A2  D83A               	call	PL7	;call to abstracted procedure
  9598  0016A4  50DF               	movf	indf2,w,c
  9599  0016A6  6E01               	movwf	??_pulsPinDriver& (0+255),c
  9600  0016A8  AC01               	btfss	??_pulsPinDriver,6,c
  9601  0016AA  D01E               	goto	i1l5813
  9602  0016AC  5007               	movf	pulsPinDriver@i,w,c
  9603  0016AE  D83B               	call	PL8	;call to abstracted procedure
  9604  0016B0  B601               	btfsc	??_pulsPinDriver,3,c
  9605  0016B2  D01A               	goto	i1l5813
  9606  0016B4  5007               	movf	pulsPinDriver@i,w,c
  9607  0016B6  D837               	call	PL8	;call to abstracted procedure
  9608  0016B8  A801               	btfss	??_pulsPinDriver,4,c
  9609  0016BA  D016               	goto	i1l5813
  9610                           
  9611                           ;pulsadorPin_1ms.c: 38: {
  9612                           ;pulsadorPin_1ms.c: 39: if(pulsPin[i].timer)
  9613  0016BC  5007               	movf	pulsPinDriver@i,w,c
  9614  0016BE  0D04               	mullw	4
  9615  0016C0  50F3               	movf	prodl,w,c
  9616  0016C2  0F40               	addlw	low (_pulsPin+3)
  9617  0016C4  6ED9               	movwf	fsr2l,c
  9618  0016C6  6ADA               	clrf	fsr2h,c
  9619  0016C8  50DF               	movf	indf2,w,c
  9620  0016CA  E00B               	bz	i1l5805
  9621                           
  9622                           ;pulsadorPin_1ms.c: 40: if(pulsPin[i].unbounceRst)
  9623  0016CC  D825               	call	PL7	;call to abstracted procedure
  9624  0016CE  50DF               	movf	indf2,w,c
  9625  0016D0  6E01               	movwf	??_pulsPinDriver& (0+255),c
  9626  0016D2  AE01               	btfss	??_pulsPinDriver,7,c
  9627  0016D4  D003               	goto	i1l5803
  9628                           
  9629                           ;pulsadorPin_1ms.c: 41: pulsPin[i].timer=100;
  9630  0016D6  5007               	movf	pulsPinDriver@i,w,c
  9631  0016D8  D835               	call	PL20	;call to abstracted procedure
  9632  0016DA  D006               	goto	i1l5813
  9633  0016DC                     i1l5803:
  9634                           
  9635                           ;pulsadorPin_1ms.c: 42: else
  9636                           ;pulsadorPin_1ms.c: 43: pulsPin[i].timer--;
  9637  0016DC  D82C               	call	PL15	;call to abstracted procedure
  9638  0016DE  06DF               	decf	indf2,f,c
  9639  0016E0  D003               	goto	i1l5813
  9640  0016E2                     i1l5805:
  9641                           
  9642                           ;pulsadorPin_1ms.c: 44: else
  9643                           ;pulsadorPin_1ms.c: 45: {
  9644                           ;pulsadorPin_1ms.c: 46: pulsPin[i].timer=100;
  9645  0016E2  D829               	call	PL15	;call to abstracted procedure
  9646                           
  9647                           ;pulsadorPin_1ms.c: 47: pulsPinBuffer.pulsId=i;
  9648                           
  9649                           ; BSR set to: 0
  9650                           ;pulsadorPin_1ms.c: 48: pulsPinBuffer.flag=1;
  9651  0016E4  D837               	call	PL30	;call to abstracted procedure
  9652                           
  9653                           ; BSR set to: 0
  9654                           ;pulsadorPin_1ms.c: 49: pulsPinBuffer.fp=0;
  9655  0016E6  9DBC               	bcf	_pulsPinBuffer& (0+255),6,b
  9656  0016E8                     i1l5813:
  9657                           
  9658                           ;pulsadorPin_1ms.c: 50: }
  9659                           ;pulsadorPin_1ms.c: 51: }
  9660                           ;pulsadorPin_1ms.c: 52: pulsPin[i].prevState=pulsPin[i].state;
  9661  0016E8  D817               	call	PL7	;call to abstracted procedure
  9662  0016EA  30DF               	rrcf	indf2,w,c
  9663  0016EC  32E8               	rrcf	wreg,f,c
  9664  0016EE  32E8               	rrcf	wreg,f,c
  9665  0016F0  0B01               	andlw	1
  9666  0016F2  6E01               	movwf	??_pulsPinDriver& (0+255),c
  9667  0016F4  D811               	call	PL7	;call to abstracted procedure
  9668  0016F6  3A01               	swapf	??_pulsPinDriver,f,c
  9669  0016F8  50DF               	movf	indf2,w,c
  9670  0016FA  1801               	xorwf	??_pulsPinDriver,w,c
  9671  0016FC  0BEF               	andlw	-17
  9672  0016FE  1801               	xorwf	??_pulsPinDriver,w,c
  9673  001700  6EDF               	movwf	indf2,c
  9674                           
  9675                           ;pulsadorPin_1ms.c: 53: }
  9676  001702  D005               	goto	i1l5819
  9677  001704                     i1l5815:
  9678                           
  9679                           ;pulsadorPin_1ms.c: 54: else if(pulsPin[i].timer) pulsPin[i].timer--;
  9680  001704  D818               	call	PL15	;call to abstracted procedure
  9681  001706  50DF               	movf	indf2,w,c
  9682  001708  E002               	bz	i1l5819
  9683  00170A  D815               	call	PL15	;call to abstracted procedure
  9684  00170C  06DF               	decf	indf2,f,c
  9685  00170E                     i1l5819:
  9686  00170E  2A07               	incf	pulsPinDriver@i,f,c
  9687  001710  0E03               	movlw	3
  9688  001712  6407               	cpfsgt	pulsPinDriver@i,c
  9689  001714  D76D               	goto	i1l5767
  9690  001716  0C03               	retlw	3
  9691  001718                     __end_of_pulsPinDriver:
  9692                           	opt stack 0
  9693  001718                     PL7:
  9694  001718  5007               	movf	pulsPinDriver@i,w,c
  9695  00171A  0D04               	mullw	4
  9696  00171C  50F3               	movf	prodl,w,c
  9697  00171E  0F3F               	addlw	low (_pulsPin+2)
  9698  001720  6ED9               	movwf	fsr2l,c
  9699  001722  6ADA               	clrf	fsr2h,c
  9700  001724  0012               	return	
  9701  001726                     PL8:
  9702  001726  0D04               	mullw	4
  9703  001728  50F3               	movf	prodl,w,c
  9704  00172A  0F3F               	addlw	low (_pulsPin+2)
  9705  00172C  6ED9               	movwf	fsr2l,c
  9706  00172E  6ADA               	clrf	fsr2h,c
  9707  001730  50DF               	movf	indf2,w,c
  9708  001732  6E01               	movwf	??_pulsPinDriver& (0+255),c
  9709  001734  0012               	return	
  9710  001736                     PL15:
  9711  001736  5007               	movf	pulsPinDriver@i,w,c
  9712  001738  0D04               	mullw	4
  9713  00173A  50F3               	movf	prodl,w,c
  9714  00173C  0F40               	addlw	low (_pulsPin+3)
  9715  00173E  6ED9               	movwf	fsr2l,c
  9716  001740  6ADA               	clrf	fsr2h,c
  9717  001742  0012               	return	
  9718  001744                     PL20:
  9719  001744  0D04               	mullw	4
  9720  001746  50F3               	movf	prodl,w,c
  9721  001748  0F40               	addlw	low (_pulsPin+3)
  9722  00174A  6ED9               	movwf	fsr2l,c
  9723  00174C  6ADA               	clrf	fsr2h,c
  9724  00174E  0E64               	movlw	100
  9725  001750  6EDF               	movwf	indf2,c
  9726  001752  0C64               	retlw	100
  9727  001754                     PL30:
  9728  001754  0E64               	movlw	100
  9729  001756  6EDF               	movwf	indf2,c
  9730  001758  0100               	movlb	0	; () banked
  9731  00175A  51BC               	movf	_pulsPinBuffer& (0+255),w,b
  9732  00175C  1807               	xorwf	pulsPinDriver@i,w,c
  9733  00175E  0BE0               	andlw	-32
  9734  001760  1807               	xorwf	pulsPinDriver@i,w,c
  9735  001762  6FBC               	movwf	_pulsPinBuffer& (0+255),b
  9736  001764  8BBC               	bsf	_pulsPinBuffer& (0+255),5,b
  9737  001766  0012               	return	
  9738                           tblptru	equ	0xFF8
  9739                           tblptrh	equ	0xFF7
  9740                           tblptrl	equ	0xFF6
  9741                           tablat	equ	0xFF5
  9742                           prodh	equ	0xFF4
  9743                           prodl	equ	0xFF3
  9744                           intcon	equ	0xFF2
  9745                           intcon2	equ	0xFF1
  9746                           postinc0	equ	0xFEE
  9747                           wreg	equ	0xFE8
  9748                           indf1	equ	0xFE7
  9749                           postinc1	equ	0xFE6
  9750                           postdec1	equ	0xFE5
  9751                           fsr1h	equ	0xFE2
  9752                           fsr1l	equ	0xFE1
  9753                           bsr	equ	0xFE0
  9754                           indf2	equ	0xFDF
  9755                           postinc2	equ	0xFDE
  9756                           postdec2	equ	0xFDD
  9757                           plusw2	equ	0xFDB
  9758                           fsr2h	equ	0xFDA
  9759                           fsr2l	equ	0xFD9
  9760                           status	equ	0xFD8
  9761                           
  9762 ;; *************** function i1_timerDriver *****************
  9763 ;; Defined at:
  9764 ;;		line 10 in file "C:\fgr\16gb\libSwPic\oldV2\lib_sw_pic_20171007\timer.c"
  9765 ;; Parameters:    Size  Location     Type
  9766 ;;  timerDriver     1    wreg     unsigned char 
  9767 ;; Auto vars:     Size  Location     Type
  9768 ;;  timerDriver     1    3[COMRAM] unsigned char 
  9769 ;; Return value:  Size  Location     Type
  9770 ;;		None               void
  9771 ;; Registers used:
  9772 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9773 ;; Tracked objects:
  9774 ;;		On entry : 0/0
  9775 ;;		On exit  : F/1
  9776 ;;		Unchanged: FFFFFFF0/0
  9777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9778 ;;      Params:         0       0       0       0       0       0       0       0       0
  9779 ;;      Locals:         1       0       0       0       0       0       0       0       0
  9780 ;;      Temps:          3       0       0       0       0       0       0       0       0
  9781 ;;      Totals:         4       0       0       0       0       0       0       0       0
  9782 ;;Total ram usage:        4 bytes
  9783 ;; Hardware stack levels used:    1
  9784 ;; Hardware stack levels required when called:    3
  9785 ;; This function calls:
  9786 ;;		Nothing
  9787 ;; This function is called by:
  9788 ;;		_isr_timer3
  9789 ;; This function uses a non-reentrant model
  9790 ;;
  9791                           
  9792                           	psect	text32
  9793  001D4E                     __ptext32:
  9794                           	opt stack 0
  9795  001D4E                     i1_timerDriver:
  9796                           	opt stack 21
  9797                           
  9798                           ;i1timerDriver@i stored from wreg
  9799  001D4E  CFE8 F004          	movff	wreg,i1timerDriver@i
  9800                           
  9801                           ;timer.c: 12: if(!timerMem[i].pause && timerMem[i].prescaler>0)
  9802  001D52  5004               	movf	i1timerDriver@i,w,c
  9803  001D54  0D04               	mullw	4
  9804  001D56  CFF3 F001          	movff	prodl,??i1_timerDriver
  9805  001D5A  0E03               	movlw	3
  9806  001D5C  2601               	addwf	??i1_timerDriver,f,c
  9807  001D5E  0101               	movlb	1	; () banked
  9808  001D60  0E8B               	movlw	low _timerMem
  9809  001D62  2401               	addwf	??i1_timerDriver,w,c
  9810  001D64  6ED9               	movwf	fsr2l,c
  9811  001D66  6ADA               	clrf	fsr2h,c
  9812  001D68  0E01               	movlw	high _timerMem
  9813  001D6A  22DA               	addwfc	fsr2h,f,c
  9814  001D6C  50DF               	movf	indf2,w,c
  9815  001D6E  6E02               	movwf	(??i1_timerDriver+1)& (0+255),c
  9816  001D70  B402               	btfsc	??i1_timerDriver+1,2,c
  9817  001D72  0012               	return	
  9818                           
  9819                           ; BSR set to: 1
  9820  001D74  5004               	movf	i1timerDriver@i,w,c
  9821  001D76  D840               	call	PL13	;call to abstracted procedure
  9822  001D78  CFDE F001          	movff	postinc2,??i1_timerDriver
  9823  001D7C  CFDE F002          	movff	postinc2,??i1_timerDriver+1
  9824  001D80  CFDE F003          	movff	postinc2,??i1_timerDriver+2
  9825  001D84  5003               	movf	??i1_timerDriver+2,w,c
  9826  001D86  0A80               	xorlw	128
  9827  001D88  0F80               	addlw	128
  9828  001D8A  E105               	bnz	i1u764_25
  9829  001D8C  0E00               	movlw	0
  9830  001D8E  5C02               	subwf	??i1_timerDriver+1,w,c
  9831  001D90  E102               	bnz	i1u764_25
  9832  001D92  0E01               	movlw	1
  9833  001D94  5C01               	subwf	??i1_timerDriver,w,c
  9834  001D96                     i1u764_25:
  9835  001D96  A0D8               	btfss	status,0,c
  9836  001D98  0012               	return	
  9837                           
  9838                           ; BSR set to: 1
  9839                           ;timer.c: 13: {
  9840                           ;timer.c: 14: timerMem[i].prescaler--;
  9841  001D9A  5004               	movf	i1timerDriver@i,w,c
  9842  001D9C  D82D               	call	PL13	;call to abstracted procedure
  9843  001D9E  0EFF               	movlw	255
  9844  001DA0  06DE               	decf	postinc2,f,c
  9845  001DA2  22DE               	addwfc	postinc2,f,c
  9846  001DA4  22DD               	addwfc	postdec2,f,c
  9847                           
  9848                           ;timer.c: 15: if(timerMem[i].prescaler==0)
  9849  001DA6  5004               	movf	i1timerDriver@i,w,c
  9850  001DA8  D827               	call	PL13	;call to abstracted procedure
  9851  001DAA  50DE               	movf	postinc2,w,c
  9852  001DAC  10DE               	iorwf	postinc2,w,c
  9853  001DAE  10DD               	iorwf	postdec2,w,c
  9854  001DB0  A4D8               	btfss	status,2,c
  9855  001DB2  0012               	return	
  9856                           
  9857                           ; BSR set to: 1
  9858                           ;timer.c: 16: {
  9859                           ;timer.c: 17: timerMem[i].flag=1;
  9860  001DB4  5004               	movf	i1timerDriver@i,w,c
  9861  001DB6  D828               	call	PL25	;call to abstracted procedure
  9862  001DB8  0E02               	movlw	2
  9863  001DBA  12DF               	iorwf	223,f,c
  9864                           
  9865                           ;timer.c: 18: if(timerMem[i].loop) timerMem[i].prescaler=timerDelayConstant[i];
  9866  001DBC  5004               	movf	i1timerDriver@i,w,c
  9867  001DBE  D824               	call	PL25	;call to abstracted procedure
  9868  001DC0  50DF               	movf	indf2,w,c
  9869  001DC2  6E02               	movwf	(??i1_timerDriver+1)& (0+255),c
  9870  001DC4  A002               	btfss	??i1_timerDriver+1,0,c
  9871  001DC6  0012               	return	
  9872                           
  9873                           ; BSR set to: 1
  9874  001DC8  5004               	movf	i1timerDriver@i,w,c
  9875  001DCA  0D03               	mullw	3
  9876  001DCC  0E00               	movlw	low _timerDelayConstant
  9877  001DCE  24F3               	addwf	prodl,w,c
  9878  001DD0  6ED9               	movwf	fsr2l,c
  9879  001DD2  6ADA               	clrf	fsr2h,c
  9880  001DD4  0E01               	movlw	high _timerDelayConstant
  9881  001DD6  22DA               	addwfc	fsr2h,f,c
  9882  001DD8  5004               	movf	i1timerDriver@i,w,c
  9883  001DDA  0D04               	mullw	4
  9884  001DDC  0E8B               	movlw	low _timerMem
  9885  001DDE  24F3               	addwf	prodl,w,c
  9886  001DE0  6EE1               	movwf	fsr1l,c
  9887  001DE2  6AE2               	clrf	fsr1h,c
  9888  001DE4  0E01               	movlw	high _timerMem
  9889  001DE6  22E2               	addwfc	fsr1h,f,c
  9890  001DE8  CFDE FFE6          	movff	postinc2,postinc1
  9891  001DEC  CFDE FFE6          	movff	postinc2,postinc1
  9892  001DF0  CFDE FFE5          	movff	postinc2,postdec1
  9893  001DF4  52E5               	movf	postdec1,f,c
  9894                           
  9895                           ; BSR set to: 1
  9896  001DF6  0012               	return	
  9897  001DF8                     __end_ofi1_timerDriver:
  9898                           	opt stack 0
  9899  001DF8                     PL13:
  9900  001DF8  0D04               	mullw	4
  9901  001DFA  0E8B               	movlw	low _timerMem
  9902  001DFC  24F3               	addwf	prodl,w,c
  9903  001DFE  6ED9               	movwf	fsr2l,c
  9904  001E00  6ADA               	clrf	fsr2h,c
  9905  001E02  0E01               	movlw	high _timerMem
  9906  001E04  22DA               	addwfc	fsr2h,f,c
  9907  001E06  0012               	return	
  9908  001E08                     PL25:
  9909  001E08  0D04               	mullw	4
  9910  001E0A  CFF3 F001          	movff	prodl,??i1_timerDriver
  9911  001E0E  0E03               	movlw	3
  9912  001E10  2601               	addwf	??i1_timerDriver,f,c
  9913  001E12  0E8B               	movlw	low _timerMem
  9914  001E14  2401               	addwf	??i1_timerDriver,w,c
  9915  001E16  6ED9               	movwf	fsr2l,c
  9916  001E18  6ADA               	clrf	fsr2h,c
  9917  001E1A  0E01               	movlw	high _timerMem
  9918  001E1C  22DA               	addwfc	fsr2h,f,c
  9919  001E1E  0012               	return	
  9920                           tblptru	equ	0xFF8
  9921                           tblptrh	equ	0xFF7
  9922                           tblptrl	equ	0xFF6
  9923                           tablat	equ	0xFF5
  9924                           prodh	equ	0xFF4
  9925                           prodl	equ	0xFF3
  9926                           intcon	equ	0xFF2
  9927                           intcon2	equ	0xFF1
  9928                           postinc0	equ	0xFEE
  9929                           wreg	equ	0xFE8
  9930                           indf1	equ	0xFE7
  9931                           postinc1	equ	0xFE6
  9932                           postdec1	equ	0xFE5
  9933                           fsr1h	equ	0xFE2
  9934                           fsr1l	equ	0xFE1
  9935                           bsr	equ	0xFE0
  9936                           indf2	equ	0xFDF
  9937                           postinc2	equ	0xFDE
  9938                           postdec2	equ	0xFDD
  9939                           plusw2	equ	0xFDB
  9940                           fsr2h	equ	0xFDA
  9941                           fsr2l	equ	0xFD9
  9942                           status	equ	0xFD8
  9943                           
  9944 ;; *************** function _isr *****************
  9945 ;; Defined at:
  9946 ;;		line 21 in file "C:\fgr\16gb\0000 interior\deVolt\sw\interrupts.c"
  9947 ;; Parameters:    Size  Location     Type
  9948 ;;		None
  9949 ;; Auto vars:     Size  Location     Type
  9950 ;;		None
  9951 ;; Return value:  Size  Location     Type
  9952 ;;		None               void
  9953 ;; Registers used:
  9954 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, tosl, structret, tblptrl, tblptrh, tblptr
      +u, prodl, prodh, bsr, cstack
  9955 ;; Tracked objects:
  9956 ;;		On entry : 0/0
  9957 ;;		On exit  : 0/0
  9958 ;;		Unchanged: FFFFFFF0/0
  9959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9960 ;;      Params:         0       0       0       0       0       0       0       0       0
  9961 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9962 ;;      Temps:         14       0       0       0       0       0       0       0       0
  9963 ;;      Totals:        14       0       0       0       0       0       0       0       0
  9964 ;;Total ram usage:       14 bytes
  9965 ;; Hardware stack levels used:    1
  9966 ;; Hardware stack levels required when called:    2
  9967 ;; This function calls:
  9968 ;;		_isr_timer0
  9969 ;; This function is called by:
  9970 ;;		Interrupt level 2
  9971 ;; This function uses a non-reentrant model
  9972 ;;
  9973                           
  9974                           	psect	intcode
  9975  000008                     __pintcode:
  9976                           	opt stack 0
  9977  000008                     _isr:
  9978                           	opt stack 21
  9979                           
  9980                           ; BSR set to: 1
  9981  000008  CFFA F01A          	movff	pclath,??_isr
  9982  00000C  CFFB F01B          	movff	pclatu,??_isr+1
  9983  000010  CFE9 F01C          	movff	fsr0l,??_isr+2
  9984  000014  ED80  F011         	call	int_func,f	;refresh shadow registers
  9985                           pclatu	equ	0xFFB
  9986                           pclath	equ	0xFFA
  9987                           tblptru	equ	0xFF8
  9988                           tblptrh	equ	0xFF7
  9989                           tblptrl	equ	0xFF6
  9990                           tablat	equ	0xFF5
  9991                           prodh	equ	0xFF4
  9992                           prodl	equ	0xFF3
  9993                           intcon	equ	0xFF2
  9994                           intcon2	equ	0xFF1
  9995                           postinc0	equ	0xFEE
  9996                           fsr0l	equ	0xFE9
  9997                           wreg	equ	0xFE8
  9998                           indf1	equ	0xFE7
  9999                           postinc1	equ	0xFE6
 10000                           postdec1	equ	0xFE5
 10001                           fsr1h	equ	0xFE2
 10002                           fsr1l	equ	0xFE1
 10003                           bsr	equ	0xFE0
 10004                           indf2	equ	0xFDF
 10005                           postinc2	equ	0xFDE
 10006                           postdec2	equ	0xFDD
 10007                           plusw2	equ	0xFDB
 10008                           fsr2h	equ	0xFDA
 10009                           fsr2l	equ	0xFD9
 10010                           status	equ	0xFD8
 10011                           
 10012                           	psect	intcode_body
 10013  002300                     __pintcode_body:
 10014                           	opt stack 21
 10015  002300                     int_func:
 10016                           	opt stack 21
 10017  002300  0006               	pop		; remove dummy address from shadow register refresh
 10018  002302  CFEA F01D          	movff	fsr0h,??_isr+3
 10019  002306  CFE1 F01E          	movff	fsr1l,??_isr+4
 10020  00230A  CFE2 F01F          	movff	fsr1h,??_isr+5
 10021  00230E  CFD9 F020          	movff	fsr2l,??_isr+6
 10022  002312  CFDA F021          	movff	fsr2h,??_isr+7
 10023  002316  CFF3 F022          	movff	prodl,??_isr+8
 10024  00231A  CFF4 F023          	movff	prodh,??_isr+9
 10025  00231E  CFF6 F024          	movff	tblptrl,??_isr+10
 10026  002322  CFF7 F025          	movff	tblptrh,??_isr+11
 10027  002326  CFF8 F026          	movff	tblptru,??_isr+12
 10028  00232A  CFF5 F027          	movff	tablat,??_isr+13
 10029  00232E                     
 10030                           ;interrupts.c: 22: if(INTCONbits.TMR0IE && INTCONbits.TMR0IF) isr_timer0();
 10031  00232E  AAF2               	btfss	intcon,5,c	;volatile
 10032  002330  D001               	goto	i2u681_41
 10033  002332  D001               	goto	i2u681_40
 10034  002334                     i2u681_41:
 10035  002334  D006               	goto	i2l647
 10036  002336                     i2u681_40:
 10037  002336  A4F2               	btfss	intcon,2,c	;volatile
 10038  002338  D001               	goto	i2u682_41
 10039  00233A  D001               	goto	i2u682_40
 10040  00233C                     i2u682_41:
 10041  00233C  D002               	goto	i2l647
 10042  00233E                     i2u682_40:
 10043  00233E  ECC9  F00F         	call	_isr_timer0	;wreg free
 10044  002342                     i2l647:
 10045  002342  C027  FFF5         	movff	??_isr+13,tablat
 10046  002346  C026  FFF8         	movff	??_isr+12,tblptru
 10047  00234A  C025  FFF7         	movff	??_isr+11,tblptrh
 10048  00234E  C024  FFF6         	movff	??_isr+10,tblptrl
 10049  002352  C023  FFF4         	movff	??_isr+9,prodh
 10050  002356  C022  FFF3         	movff	??_isr+8,prodl
 10051  00235A  C021  FFDA         	movff	??_isr+7,fsr2h
 10052  00235E  C020  FFD9         	movff	??_isr+6,fsr2l
 10053  002362  C01F  FFE2         	movff	??_isr+5,fsr1h
 10054  002366  C01E  FFE1         	movff	??_isr+4,fsr1l
 10055  00236A  C01D  FFEA         	movff	??_isr+3,fsr0h
 10056  00236E  C01C  FFE9         	movff	??_isr+2,fsr0l
 10057  002372  C01B  FFFB         	movff	??_isr+1,pclatu
 10058  002376  C01A  FFFA         	movff	??_isr,pclath
 10059  00237A  0011               	retfie		f
 10060  00237C                     __end_of_isr:
 10061                           	opt stack 0
 10062                           pclatu	equ	0xFFB
 10063                           pclath	equ	0xFFA
 10064                           tblptru	equ	0xFF8
 10065                           tblptrh	equ	0xFF7
 10066                           tblptrl	equ	0xFF6
 10067                           tablat	equ	0xFF5
 10068                           prodh	equ	0xFF4
 10069                           prodl	equ	0xFF3
 10070                           intcon	equ	0xFF2
 10071                           intcon2	equ	0xFF1
 10072                           postinc0	equ	0xFEE
 10073                           fsr0h	equ	0xFEA
 10074                           fsr0l	equ	0xFE9
 10075                           wreg	equ	0xFE8
 10076                           indf1	equ	0xFE7
 10077                           postinc1	equ	0xFE6
 10078                           postdec1	equ	0xFE5
 10079                           fsr1h	equ	0xFE2
 10080                           fsr1l	equ	0xFE1
 10081                           bsr	equ	0xFE0
 10082                           indf2	equ	0xFDF
 10083                           postinc2	equ	0xFDE
 10084                           postdec2	equ	0xFDD
 10085                           plusw2	equ	0xFDB
 10086                           fsr2h	equ	0xFDA
 10087                           fsr2l	equ	0xFD9
 10088                           status	equ	0xFD8
 10089                           
 10090 ;; *************** function _isr_timer0 *****************
 10091 ;; Defined at:
 10092 ;;		line 33 in file "C:\fgr\16gb\0000 interior\deVolt\sw\interrupts.c"
 10093 ;; Parameters:    Size  Location     Type
 10094 ;;		None
 10095 ;; Auto vars:     Size  Location     Type
 10096 ;;		None
 10097 ;; Return value:  Size  Location     Type
 10098 ;;		None               void
 10099 ;; Registers used:
 10100 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10101 ;; Tracked objects:
 10102 ;;		On entry : 0/0
 10103 ;;		On exit  : E/0
 10104 ;;		Unchanged: FFFFFFF0/0
 10105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10106 ;;      Params:         0       0       0       0       0       0       0       0       0
 10107 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10108 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10109 ;;      Totals:         0       0       0       0       0       0       0       0       0
 10110 ;;Total ram usage:        0 bytes
 10111 ;; Hardware stack levels used:    1
 10112 ;; Hardware stack levels required when called:    1
 10113 ;; This function calls:
 10114 ;;		_fseek
 10115 ;;		_fgetc
 10116 ;;		_char2pins
 10117 ;; This function is called by:
 10118 ;;		_isr
 10119 ;; This function uses a non-reentrant model
 10120 ;;
 10121                           
 10122                           	psect	text34
 10123  001F92                     __ptext34:
 10124                           	opt stack 0
 10125  001F92                     _isr_timer0:
 10126                           	opt stack 21
 10127                           
 10128                           ;interrupts.c: 34: if(tOnFlag)
 10129  001F92  503B               	movf	_tOnFlag,w,c
 10130  001F94  E03C               	bz	i2l5689
 10131                           
 10132                           ;interrupts.c: 35: {
 10133                           ;interrupts.c: 36: TMR0=brilloTon[brilloMem];
 10134  001F96  0E3E               	movlw	low _brilloTon
 10135  001F98  2439               	addwf	_brilloMem,w,c
 10136  001F9A  6ED9               	movwf	fsr2l,c
 10137  001F9C  6ADA               	clrf	fsr2h,c
 10138  001F9E  0E01               	movlw	high _brilloTon
 10139  001FA0  22DA               	addwfc	fsr2h,f,c
 10140  001FA2  50DF               	movf	indf2,w,c
 10141  001FA4  6ED6               	movwf	4054,c	;volatile
 10142  001FA6  6AD7               	clrf	4055,c	;volatile
 10143                           
 10144                           ; BSR set to: 1
 10145                           ;interrupts.c: 37: tOnFlag=0;
 10146  001FA8  6A3B               	clrf	_tOnFlag,c
 10147                           
 10148                           ; BSR set to: 1
 10149                           ;interrupts.c: 39: if(segments.nextUp>3)
 10150  001FAA  0E03               	movlw	3
 10151  001FAC  0100               	movlb	0	; () banked
 10152  001FAE  65B9               	cpfsgt	_segments& (0+255),b
 10153  001FB0  D00F               	goto	i2l5679
 10154                           
 10155                           ; BSR set to: 0
 10156                           ;interrupts.c: 40: {
 10157                           ;interrupts.c: 41: fseek(&muxFile,0,SEEK_SET);
 10158  001FB2  0101               	movlb	1	; () banked
 10159  001FB4  0E01               	movlw	high _muxFile
 10160  001FB6  6E14               	movwf	?_fseek+1,c
 10161  001FB8  0E43               	movlw	low _muxFile
 10162  001FBA  6E13               	movwf	?_fseek,c
 10163  001FBC  6A16               	clrf	?_fseek+3,c
 10164  001FBE  6A15               	clrf	?_fseek+2,c
 10165  001FC0  6A18               	clrf	?_fseek+5,c
 10166  001FC2  0E02               	movlw	2
 10167  001FC4  6E17               	movwf	?_fseek+4,c
 10168  001FC6  EC27  F00D         	call	_fseek	;wreg free
 10169                           
 10170                           ; BSR set to: 1
 10171                           ;interrupts.c: 42: segments.nextUp=0;
 10172  001FCA  0100               	movlb	0	; () banked
 10173  001FCC  6BB9               	clrf	_segments& (0+255),b
 10174                           
 10175                           ;interrupts.c: 43: }
 10176  001FCE  D001               	goto	i2l5681
 10177  001FD0                     i2l5679:
 10178                           
 10179                           ; BSR set to: 0
 10180                           ;interrupts.c: 44: else segments.nextUp++;
 10181  001FD0  2BB9               	incf	_segments& (0+255),f,b
 10182  001FD2                     i2l5681:
 10183                           
 10184                           ; BSR set to: 0
 10185                           ;interrupts.c: 46: PORTBbits.RB3=0;
 10186  001FD2  9681               	bcf	3969,3,c	;volatile
 10187                           
 10188                           ; BSR set to: 0
 10189                           ;interrupts.c: 47: char2pins(fgetc(&muxFile));
 10190  001FD4  0101               	movlb	1	; () banked
 10191  001FD6  0E01               	movlw	high _muxFile
 10192  001FD8  6E14               	movwf	?_fgetc+1,c
 10193  001FDA  0E43               	movlw	low _muxFile
 10194  001FDC  6E13               	movwf	?_fgetc,c
 10195  001FDE  ECB7  F012         	call	_fgetc	;wreg free
 10196  001FE2  ECE2  F009         	call	_char2pins
 10197                           
 10198                           ;interrupts.c: 49: switch(segments.nextUp)
 10199  001FE6  D009               	goto	i2l5687
 10200  001FE8                     i2l660:
 10201                           
 10202                           ; BSR set to: 0
 10203  001FE8  8A80               	bsf	3968,5,c	;volatile
 10204  001FEA  D022               	goto	i2l5703
 10205  001FEC                     i2l662:
 10206                           
 10207                           ; BSR set to: 0
 10208  001FEC  8681               	bsf	3969,3,c	;volatile
 10209  001FEE  8280               	bsf	3968,1,c	;volatile
 10210  001FF0  D01F               	goto	i2l5703
 10211  001FF2                     i2l663:
 10212                           
 10213                           ; BSR set to: 0
 10214  001FF2  8080               	bsf	3968,0,c	;volatile
 10215  001FF4  D01D               	goto	i2l5703
 10216  001FF6                     i2l664:
 10217                           
 10218                           ; BSR set to: 0
 10219  001FF6  8880               	bsf	3968,4,c	;volatile
 10220  001FF8  D01B               	goto	i2l5703
 10221  001FFA                     i2l5687:
 10222                           
 10223                           ; BSR set to: 1
 10224  001FFA  0100               	movlb	0	; () banked
 10225  001FFC  51B9               	movf	_segments& (0+255),w,b
 10226                           
 10227                           ; Switch size 1, requested type "space"
 10228                           ; Number of cases is 4, Range of values is 0 to 3
 10229                           ; switch strategies available:
 10230                           ; Name         Instructions Cycles
 10231                           ; simple_byte           13     7 (average)
 10232                           ;	Chosen strategy is simple_byte
 10233  001FFE  E0F4               	bz	i2l660
 10234  002000  0A01               	xorlw	1	; case 1
 10235  002002  E0F4               	bz	i2l662
 10236  002004  0A03               	xorlw	3	; case 2
 10237  002006  E0F5               	bz	i2l663
 10238  002008  0A01               	xorlw	1	; case 3
 10239  00200A  E0F5               	bz	i2l664
 10240  00200C  D011               	goto	i2l5703
 10241  00200E                     i2l5689:
 10242                           
 10243                           ;interrupts.c: 57: else
 10244                           ;interrupts.c: 58: {
 10245                           ;interrupts.c: 59: TMR0=brilloToff[brilloMem];
 10246  00200E  0101               	movlb	1	; () banked
 10247  002010  0E39               	movlw	low _brilloToff
 10248  002012  2439               	addwf	_brilloMem,w,c
 10249  002014  6ED9               	movwf	fsr2l,c
 10250  002016  6ADA               	clrf	fsr2h,c
 10251  002018  0E01               	movlw	high _brilloToff
 10252  00201A  22DA               	addwfc	fsr2h,f,c
 10253  00201C  50DF               	movf	indf2,w,c
 10254  00201E  6ED6               	movwf	4054,c	;volatile
 10255  002020  6AD7               	clrf	4055,c	;volatile
 10256                           
 10257                           ; BSR set to: 1
 10258                           ;interrupts.c: 60: tOnFlag=1;
 10259  002022  0E01               	movlw	1
 10260  002024  6E3B               	movwf	_tOnFlag,c
 10261                           
 10262                           ; BSR set to: 1
 10263                           ;interrupts.c: 62: PORTAbits.RA0=0;
 10264  002026  9080               	bcf	3968,0,c	;volatile
 10265                           
 10266                           ; BSR set to: 1
 10267                           ;interrupts.c: 63: PORTAbits.RA1=0;
 10268  002028  9280               	bcf	3968,1,c	;volatile
 10269                           
 10270                           ; BSR set to: 1
 10271                           ;interrupts.c: 64: PORTAbits.RA5=0;
 10272  00202A  9A80               	bcf	3968,5,c	;volatile
 10273                           
 10274                           ; BSR set to: 1
 10275                           ;interrupts.c: 65: PORTAbits.RA4=0;
 10276  00202C  9880               	bcf	3968,4,c	;volatile
 10277                           
 10278                           ; BSR set to: 1
 10279                           ;interrupts.c: 66: PORTBbits.RB3=0;
 10280  00202E  9681               	bcf	3969,3,c	;volatile
 10281  002030                     i2l5703:
 10282                           
 10283                           ;interrupts.c: 67: }
 10284                           ;interrupts.c: 68: INTCONbits.TMR0IF=0;
 10285  002030  94F2               	bcf	intcon,2,c	;volatile
 10286  002032  0012               	return	
 10287  002034                     __end_of_isr_timer0:
 10288                           	opt stack 0
 10289                           pclatu	equ	0xFFB
 10290                           pclath	equ	0xFFA
 10291                           tblptru	equ	0xFF8
 10292                           tblptrh	equ	0xFF7
 10293                           tblptrl	equ	0xFF6
 10294                           tablat	equ	0xFF5
 10295                           prodh	equ	0xFF4
 10296                           prodl	equ	0xFF3
 10297                           intcon	equ	0xFF2
 10298                           intcon2	equ	0xFF1
 10299                           postinc0	equ	0xFEE
 10300                           fsr0h	equ	0xFEA
 10301                           fsr0l	equ	0xFE9
 10302                           wreg	equ	0xFE8
 10303                           indf1	equ	0xFE7
 10304                           postinc1	equ	0xFE6
 10305                           postdec1	equ	0xFE5
 10306                           fsr1h	equ	0xFE2
 10307                           fsr1l	equ	0xFE1
 10308                           bsr	equ	0xFE0
 10309                           indf2	equ	0xFDF
 10310                           postinc2	equ	0xFDE
 10311                           postdec2	equ	0xFDD
 10312                           plusw2	equ	0xFDB
 10313                           fsr2h	equ	0xFDA
 10314                           fsr2l	equ	0xFD9
 10315                           status	equ	0xFD8
 10316                           
 10317 ;; *************** function _fseek *****************
 10318 ;; Defined at:
 10319 ;;		line 117 in file "C:\fgr\16gb\0000 interior\deVolt\sw\stdio.c"
 10320 ;; Parameters:    Size  Location     Type
 10321 ;;  fp              2   18[COMRAM] PTR struct .
 10322 ;;		 -> muxFile(7), 
 10323 ;;  offset          2   20[COMRAM] int 
 10324 ;;  mode            2   22[COMRAM] int 
 10325 ;; Auto vars:     Size  Location     Type
 10326 ;;		None
 10327 ;; Return value:  Size  Location     Type
 10328 ;;		None               void
 10329 ;; Registers used:
 10330 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 10331 ;; Tracked objects:
 10332 ;;		On entry : F/1
 10333 ;;		On exit  : F/1
 10334 ;;		Unchanged: FFFFFFF0/0
 10335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10336 ;;      Params:         6       0       0       0       0       0       0       0       0
 10337 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10338 ;;      Temps:          1       0       0       0       0       0       0       0       0
 10339 ;;      Totals:         7       0       0       0       0       0       0       0       0
 10340 ;;Total ram usage:        7 bytes
 10341 ;; Hardware stack levels used:    1
 10342 ;; This function calls:
 10343 ;;		Nothing
 10344 ;; This function is called by:
 10345 ;;		_isr_timer0
 10346 ;; This function uses a non-reentrant model
 10347 ;;
 10348                           
 10349                           	psect	text35
 10350  001A4E                     __ptext35:
 10351                           	opt stack 0
 10352  001A4E                     _fseek:
 10353                           	opt stack 21
 10354                           
 10355                           ; BSR set to: 1
 10356                           ;stdio.c: 118: fp->flg&=~(1<<3);
 10357  001A4E  C013  FFD9         	movff	fseek@fp,fsr2l
 10358  001A52  C014  FFDA         	movff	fseek@fp+1,fsr2h
 10359  001A56  0EF7               	movlw	247
 10360  001A58  16DF               	andwf	indf2,f,c
 10361                           
 10362                           ; BSR set to: 1
 10363                           ;stdio.c: 119: if(mode==SEEK_SET)
 10364  001A5A  5017               	movf	fseek@mode,w,c
 10365  001A5C  0A02               	xorlw	2
 10366  001A5E  1018               	iorwf	fseek@mode+1,w,c
 10367  001A60  E129               	bnz	i2l5723
 10368                           
 10369                           ; BSR set to: 1
 10370                           ;stdio.c: 120: {
 10371                           ;stdio.c: 121: if(fp->flg&(1<<0))
 10372  001A62  D865               	call	PL16	;call to abstracted procedure
 10373  001A64  A019               	btfss	??_fseek,0,c
 10374  001A66  D011               	goto	i2l5719
 10375                           
 10376                           ; BSR set to: 1
 10377                           ;stdio.c: 122: {
 10378                           ;stdio.c: 123: (fp->nxr)=fp->bas;
 10379  001A68  EE20 F003          	lfsr	2,3
 10380  001A6C  5013               	movf	fseek@fp,w,c
 10381  001A6E  26D9               	addwf	fsr2l,f,c
 10382  001A70  5014               	movf	fseek@fp+1,w,c
 10383  001A72  22DA               	addwfc	fsr2h,f,c
 10384  001A74  EE10 F001          	lfsr	1,1
 10385                           
 10386                           ;stdio.c: 124: (fp->nr)=fp->bufsiz;
 10387  001A78  D861               	call	PL21	;call to abstracted procedure
 10388  001A7A  EE10 F004          	lfsr	1,4
 10389  001A7E  5013               	movf	fseek@fp,w,c
 10390  001A80  26E1               	addwf	fsr1l,f,c
 10391  001A82  5014               	movf	fseek@fp+1,w,c
 10392  001A84  22E2               	addwfc	fsr1h,f,c
 10393  001A86  CFDF FFE7          	movff	indf2,indf1
 10394  001A8A                     i2l5719:
 10395                           
 10396                           ; BSR set to: 1
 10397                           ;stdio.c: 125: }
 10398                           ;stdio.c: 126: if(fp->flg&(1<<1))
 10399  001A8A  D851               	call	PL16	;call to abstracted procedure
 10400  001A8C  A219               	btfss	??_fseek,1,c
 10401  001A8E  0012               	return	
 10402                           
 10403                           ; BSR set to: 1
 10404                           ;stdio.c: 127: {
 10405                           ;stdio.c: 128: (fp->nxw)=fp->bas;
 10406  001A90  EE20 F003          	lfsr	2,3
 10407  001A94  5013               	movf	fseek@fp,w,c
 10408  001A96  26D9               	addwf	fsr2l,f,c
 10409  001A98  5014               	movf	fseek@fp+1,w,c
 10410  001A9A  22DA               	addwfc	fsr2h,f,c
 10411  001A9C  EE10 F002          	lfsr	1,2
 10412                           
 10413                           ;stdio.c: 129: (fp->nw)=fp->bufsiz;
 10414  001AA0  D84D               	call	PL21	;call to abstracted procedure
 10415  001AA2  EE10 F005          	lfsr	1,5
 10416  001AA6  5013               	movf	fseek@fp,w,c
 10417  001AA8  26E1               	addwf	fsr1l,f,c
 10418  001AAA  5014               	movf	fseek@fp+1,w,c
 10419  001AAC  22E2               	addwfc	fsr1h,f,c
 10420  001AAE  CFDF FFE7          	movff	indf2,indf1
 10421  001AB2  0012               	return	
 10422  001AB4                     i2l5723:
 10423                           
 10424                           ; BSR set to: 1
 10425                           ;stdio.c: 132: else if(mode==SEEK_END)
 10426  001AB4  5018               	movf	fseek@mode+1,w,c
 10427  001AB6  1017               	iorwf	fseek@mode,w,c
 10428  001AB8  E10F               	bnz	i2l5737
 10429                           
 10430                           ; BSR set to: 1
 10431                           ;stdio.c: 133: {
 10432                           ;stdio.c: 134: if(fp->flg&(1<<0))
 10433  001ABA  D839               	call	PL16	;call to abstracted procedure
 10434  001ABC  A019               	btfss	??_fseek,0,c
 10435  001ABE  D004               	goto	i2l5731
 10436                           
 10437                           ; BSR set to: 1
 10438                           ;stdio.c: 135: {
 10439                           ;stdio.c: 136: (fp->nxr)=fp->bas+fp->bufsiz;
 10440  001AC0  EE20 F001          	lfsr	2,1
 10441  001AC4  5013               	movf	fseek@fp,w,c
 10442                           
 10443                           ; BSR set to: 1
 10444                           ;stdio.c: 137: (fp->nw)=0;
 10445  001AC6  D816               	call	PL10	;call to abstracted procedure
 10446  001AC8                     i2l5731:
 10447                           
 10448                           ; BSR set to: 1
 10449                           ;stdio.c: 138: }
 10450                           ;stdio.c: 139: if(fp->flg&(1<<1))
 10451  001AC8  D832               	call	PL16	;call to abstracted procedure
 10452  001ACA  A219               	btfss	??_fseek,1,c
 10453  001ACC  0012               	return	
 10454                           
 10455                           ; BSR set to: 1
 10456                           ;stdio.c: 140: {
 10457                           ;stdio.c: 141: (fp->nxw)=fp->bas+fp->bufsiz;
 10458  001ACE  EE20 F002          	lfsr	2,2
 10459  001AD2  5013               	movf	fseek@fp,w,c
 10460                           
 10461                           ; BSR set to: 1
 10462                           ;stdio.c: 142: (fp->nw)=0;
 10463  001AD4  D80F               	call	PL10	;call to abstracted procedure
 10464  001AD6  0C00               	retlw	0
 10465  001AD8                     i2l5737:
 10466                           
 10467                           ; BSR set to: 1
 10468                           ;stdio.c: 145: else
 10469                           ;stdio.c: 146: {
 10470                           ;stdio.c: 147: if(fp->flg&(1<<0))
 10471  001AD8  D82A               	call	PL16	;call to abstracted procedure
 10472  001ADA  A019               	btfss	??_fseek,0,c
 10473  001ADC  D004               	goto	i2l753
 10474                           
 10475                           ; BSR set to: 1
 10476                           ;stdio.c: 148: {
 10477                           ;stdio.c: 149: (fp->nxr)+=offset;
 10478  001ADE  EE20 F001          	lfsr	2,1
 10479  001AE2  5013               	movf	fseek@fp,w,c
 10480                           
 10481                           ;stdio.c: 150: (fp->nw)-=offset;
 10482  001AE4  D838               	call	PL23	;call to abstracted procedure
 10483  001AE6                     i2l753:
 10484                           
 10485                           ; BSR set to: 1
 10486                           ;stdio.c: 151: }
 10487                           ;stdio.c: 152: if(fp->flg&(1<<1))
 10488  001AE6  D823               	call	PL16	;call to abstracted procedure
 10489  001AE8  A219               	btfss	??_fseek,1,c
 10490  001AEA  0012               	return	
 10491                           
 10492                           ; BSR set to: 1
 10493                           ;stdio.c: 153: {
 10494                           ;stdio.c: 154: (fp->nxw)+=offset;
 10495  001AEC  EE20 F002          	lfsr	2,2
 10496  001AF0  5013               	movf	fseek@fp,w,c
 10497                           
 10498                           ;stdio.c: 155: (fp->nw)-=offset;
 10499  001AF2  D031               	goto	PL23	;call to abstracted procedure
 10500  001AF4                     __end_of_fseek:
 10501                           	opt stack 0
 10502  001AF4                     PL10:
 10503  001AF4  26D9               	addwf	fsr2l,f,c
 10504  001AF6  5014               	movf	fseek@fp+1,w,c
 10505  001AF8  22DA               	addwfc	fsr2h,f,c
 10506  001AFA  EE10 F006          	lfsr	1,6
 10507  001AFE  5013               	movf	fseek@fp,w,c
 10508  001B00  26E1               	addwf	fsr1l,f,c
 10509  001B02  5014               	movf	fseek@fp+1,w,c
 10510  001B04  22E2               	addwfc	fsr1h,f,c
 10511  001B06  50E7               	movf	indf1,w,c
 10512  001B08  6E19               	movwf	??_fseek& (0+255),c
 10513  001B0A  EE10 F003          	lfsr	1,3
 10514  001B0E  5013               	movf	fseek@fp,w,c
 10515  001B10  26E1               	addwf	fsr1l,f,c
 10516  001B12  5014               	movf	fseek@fp+1,w,c
 10517  001B14  22E2               	addwfc	fsr1h,f,c
 10518  001B16  50E7               	movf	indf1,w,c
 10519  001B18  2419               	addwf	??_fseek,w,c
 10520  001B1A  6EDF               	movwf	indf2,c
 10521  001B1C  EE20 F005          	lfsr	2,5
 10522  001B20  5013               	movf	fseek@fp,w,c
 10523  001B22  26D9               	addwf	fsr2l,f,c
 10524  001B24  5014               	movf	fseek@fp+1,w,c
 10525  001B26  22DA               	addwfc	fsr2h,f,c
 10526  001B28  0E00               	movlw	0
 10527  001B2A  6EDF               	movwf	indf2,c
 10528  001B2C  0C00               	retlw	0
 10529  001B2E                     PL16:
 10530  001B2E  C013  FFD9         	movff	fseek@fp,fsr2l
 10531  001B32  C014  FFDA         	movff	fseek@fp+1,fsr2h
 10532  001B36  50DF               	movf	indf2,w,c
 10533  001B38  6E19               	movwf	??_fseek& (0+255),c
 10534  001B3A  0012               	return	
 10535  001B3C                     PL21:
 10536  001B3C  5013               	movf	fseek@fp,w,c
 10537  001B3E  26E1               	addwf	fsr1l,f,c
 10538  001B40  5014               	movf	fseek@fp+1,w,c
 10539  001B42  22E2               	addwfc	fsr1h,f,c
 10540  001B44  CFDF FFE7          	movff	indf2,indf1
 10541  001B48  EE20 F006          	lfsr	2,6
 10542  001B4C  5013               	movf	fseek@fp,w,c
 10543  001B4E  26D9               	addwf	fsr2l,f,c
 10544  001B50  5014               	movf	fseek@fp+1,w,c
 10545  001B52  22DA               	addwfc	fsr2h,f,c
 10546  001B54  0012               	return	
 10547  001B56                     PL23:
 10548  001B56  26D9               	addwf	fsr2l,f,c
 10549  001B58  5014               	movf	fseek@fp+1,w,c
 10550  001B5A  22DA               	addwfc	fsr2h,f,c
 10551  001B5C  5015               	movf	fseek@offset,w,c
 10552  001B5E  26DF               	addwf	indf2,f,c
 10553  001B60  EE20 F005          	lfsr	2,5
 10554  001B64  5013               	movf	fseek@fp,w,c
 10555  001B66  26D9               	addwf	fsr2l,f,c
 10556  001B68  5014               	movf	fseek@fp+1,w,c
 10557  001B6A  22DA               	addwfc	fsr2h,f,c
 10558  001B6C  5015               	movf	fseek@offset,w,c
 10559  001B6E  5EDF               	subwf	indf2,f,c
 10560  001B70  0012               	return	
 10561                           pclatu	equ	0xFFB
 10562                           pclath	equ	0xFFA
 10563                           tblptru	equ	0xFF8
 10564                           tblptrh	equ	0xFF7
 10565                           tblptrl	equ	0xFF6
 10566                           tablat	equ	0xFF5
 10567                           prodh	equ	0xFF4
 10568                           prodl	equ	0xFF3
 10569                           intcon	equ	0xFF2
 10570                           intcon2	equ	0xFF1
 10571                           postinc0	equ	0xFEE
 10572                           fsr0h	equ	0xFEA
 10573                           fsr0l	equ	0xFE9
 10574                           wreg	equ	0xFE8
 10575                           indf1	equ	0xFE7
 10576                           postinc1	equ	0xFE6
 10577                           postdec1	equ	0xFE5
 10578                           fsr1h	equ	0xFE2
 10579                           fsr1l	equ	0xFE1
 10580                           bsr	equ	0xFE0
 10581                           indf2	equ	0xFDF
 10582                           postinc2	equ	0xFDE
 10583                           postdec2	equ	0xFDD
 10584                           plusw2	equ	0xFDB
 10585                           fsr2h	equ	0xFDA
 10586                           fsr2l	equ	0xFD9
 10587                           status	equ	0xFD8
 10588                           
 10589 ;; *************** function _fgetc *****************
 10590 ;; Defined at:
 10591 ;;		line 74 in file "C:\fgr\16gb\0000 interior\deVolt\sw\stdio.c"
 10592 ;; Parameters:    Size  Location     Type
 10593 ;;  stream          2   18[COMRAM] PTR struct .
 10594 ;;		 -> muxFile(7), 
 10595 ;; Auto vars:     Size  Location     Type
 10596 ;;		None
 10597 ;; Return value:  Size  Location     Type
 10598 ;;                  1    wreg      unsigned char 
 10599 ;; Registers used:
 10600 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10601 ;; Tracked objects:
 10602 ;;		On entry : F/1
 10603 ;;		On exit  : F/1
 10604 ;;		Unchanged: FFFFFFF0/0
 10605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10606 ;;      Params:         2       0       0       0       0       0       0       0       0
 10607 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10608 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10609 ;;      Totals:         2       0       0       0       0       0       0       0       0
 10610 ;;Total ram usage:        2 bytes
 10611 ;; Hardware stack levels used:    1
 10612 ;; This function calls:
 10613 ;;		Nothing
 10614 ;; This function is called by:
 10615 ;;		_isr_timer0
 10616 ;; This function uses a non-reentrant model
 10617 ;;
 10618                           
 10619                           	psect	text36
 10620  00256E                     __ptext36:
 10621                           	opt stack 0
 10622  00256E                     _fgetc:
 10623                           	opt stack 21
 10624                           
 10625                           ; BSR set to: 1
 10626                           ;stdio.c: 75: if(stream->nr==0)
 10627                           
 10628                           ; BSR set to: 1
 10629  00256E  EE20 F004          	lfsr	2,4
 10630  002572  5013               	movf	fgetc@stream,w,c
 10631  002574  26D9               	addwf	fsr2l,f,c
 10632  002576  5014               	movf	fgetc@stream+1,w,c
 10633  002578  22DA               	addwfc	fsr2h,f,c
 10634  00257A  50DF               	movf	indf2,w,c
 10635  00257C  E107               	bnz	i2l5753
 10636                           
 10637                           ; BSR set to: 1
 10638                           ;stdio.c: 76: {
 10639                           ;stdio.c: 77: stream->flg|=(1<<3);
 10640  00257E  C013  FFD9         	movff	fgetc@stream,fsr2l
 10641  002582  C014  FFDA         	movff	fgetc@stream+1,fsr2h
 10642  002586  0E00               	movlw	0
 10643  002588  86DB               	bsf	plusw2,3,c
 10644                           
 10645                           ; BSR set to: 1
 10646                           ;stdio.c: 78: return (-1);
 10647  00258A  0CFF               	retlw	255
 10648  00258C                     i2l5753:
 10649                           
 10650                           ; BSR set to: 1
 10651                           ;stdio.c: 80: else
 10652                           ;stdio.c: 81: {
 10653                           ;stdio.c: 82: --(stream->nr);
 10654  00258C  EE20 F004          	lfsr	2,4
 10655  002590  5013               	movf	fgetc@stream,w,c
 10656  002592  26D9               	addwf	fsr2l,f,c
 10657  002594  5014               	movf	fgetc@stream+1,w,c
 10658  002596  22DA               	addwfc	fsr2h,f,c
 10659  002598  06DF               	decf	indf2,f,c
 10660                           
 10661                           ;stdio.c: 83: return *((stream->nxr)++);
 10662  00259A  EE20 F001          	lfsr	2,1
 10663  00259E  5013               	movf	fgetc@stream,w,c
 10664  0025A0  26D9               	addwf	fsr2l,f,c
 10665  0025A2  5014               	movf	fgetc@stream+1,w,c
 10666  0025A4  22DA               	addwfc	fsr2h,f,c
 10667  0025A6  50DF               	movf	indf2,w,c
 10668  0025A8  2ADF               	incf	indf2,f,c
 10669  0025AA  6ED9               	movwf	fsr2l,c
 10670  0025AC  6ADA               	clrf	fsr2h,c
 10671  0025AE  50DF               	movf	indf2,w,c
 10672                           
 10673                           ; BSR set to: 1
 10674  0025B0  0012               	return	
 10675  0025B2                     __end_of_fgetc:
 10676                           	opt stack 0
 10677                           pclatu	equ	0xFFB
 10678                           pclath	equ	0xFFA
 10679                           tblptru	equ	0xFF8
 10680                           tblptrh	equ	0xFF7
 10681                           tblptrl	equ	0xFF6
 10682                           tablat	equ	0xFF5
 10683                           prodh	equ	0xFF4
 10684                           prodl	equ	0xFF3
 10685                           intcon	equ	0xFF2
 10686                           intcon2	equ	0xFF1
 10687                           postinc0	equ	0xFEE
 10688                           fsr0h	equ	0xFEA
 10689                           fsr0l	equ	0xFE9
 10690                           wreg	equ	0xFE8
 10691                           indf1	equ	0xFE7
 10692                           postinc1	equ	0xFE6
 10693                           postdec1	equ	0xFE5
 10694                           fsr1h	equ	0xFE2
 10695                           fsr1l	equ	0xFE1
 10696                           bsr	equ	0xFE0
 10697                           indf2	equ	0xFDF
 10698                           postinc2	equ	0xFDE
 10699                           postdec2	equ	0xFDD
 10700                           plusw2	equ	0xFDB
 10701                           fsr2h	equ	0xFDA
 10702                           fsr2l	equ	0xFD9
 10703                           status	equ	0xFD8
 10704                           
 10705 ;; *************** function _char2pins *****************
 10706 ;; Defined at:
 10707 ;;		line 23 in file "C:\fgr\16gb\0000 interior\deVolt\sw\segments.c"
 10708 ;; Parameters:    Size  Location     Type
 10709 ;;  c               1    wreg     unsigned char 
 10710 ;; Auto vars:     Size  Location     Type
 10711 ;;  c               1   18[COMRAM] unsigned char 
 10712 ;; Return value:  Size  Location     Type
 10713 ;;		None               void
 10714 ;; Registers used:
 10715 ;;		wreg, status,2, status,0
 10716 ;; Tracked objects:
 10717 ;;		On entry : F/1
 10718 ;;		On exit  : F/1
 10719 ;;		Unchanged: FFFFFFF0/0
 10720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10721 ;;      Params:         0       0       0       0       0       0       0       0       0
 10722 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10723 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10724 ;;      Totals:         1       0       0       0       0       0       0       0       0
 10725 ;;Total ram usage:        1 bytes
 10726 ;; Hardware stack levels used:    1
 10727 ;; This function calls:
 10728 ;;		Nothing
 10729 ;; This function is called by:
 10730 ;;		_isr_timer0
 10731 ;; This function uses a non-reentrant model
 10732 ;;
 10733                           
 10734                           	psect	text37
 10735  0013C4                     __ptext37:
 10736                           	opt stack 0
 10737  0013C4                     _char2pins:
 10738                           	opt stack 21
 10739                           
 10740                           ; BSR set to: 1
 10741                           ;char2pins@c stored from wreg
 10742  0013C4  CFE8 F013          	movff	wreg,char2pins@c
 10743                           
 10744                           ; BSR set to: 1
 10745                           ;segments.c: 24: switch(c)
 10746  0013C8  D083               	goto	i2l5759
 10747  0013CA                     i2l815:
 10748                           
 10749                           ; BSR set to: 1
 10750                           ;segments.c: 27: PORTAbits.RA2=1;
 10751  0013CA  8480               	bsf	3968,2,c	;volatile
 10752                           
 10753                           ;segments.c: 28: PORTBbits.RB7=1;
 10754  0013CC  8E81               	bsf	3969,7,c	;volatile
 10755                           
 10756                           ;segments.c: 29: PORTBbits.RB1=1;
 10757  0013CE  8281               	bsf	3969,1,c	;volatile
 10758                           
 10759                           ;segments.c: 30: PORTBbits.RB2=1;
 10760  0013D0  8481               	bsf	3969,2,c	;volatile
 10761                           
 10762                           ;segments.c: 31: PORTBbits.RB4=1;
 10763  0013D2  8881               	bsf	3969,4,c	;volatile
 10764                           
 10765                           ;segments.c: 32: PORTBbits.RB6=1;
 10766  0013D4  8C81               	bsf	3969,6,c	;volatile
 10767                           
 10768                           ;segments.c: 33: PORTBbits.RB5=0;
 10769  0013D6  9A81               	bcf	3969,5,c	;volatile
 10770                           
 10771                           ;segments.c: 34: break;
 10772  0013D8  0012               	return	
 10773  0013DA                     i2l817:
 10774                           
 10775                           ; BSR set to: 1
 10776                           ;segments.c: 36: PORTAbits.RA2=0;
 10777  0013DA  9480               	bcf	3968,2,c	;volatile
 10778                           
 10779                           ;segments.c: 37: PORTBbits.RB7=1;
 10780  0013DC  8E81               	bsf	3969,7,c	;volatile
 10781                           
 10782                           ;segments.c: 38: PORTBbits.RB1=1;
 10783                           
 10784                           ;segments.c: 39: PORTBbits.RB2=0;
 10785                           
 10786                           ;segments.c: 40: PORTBbits.RB4=0;
 10787                           
 10788                           ;segments.c: 41: PORTBbits.RB6=0;
 10789                           
 10790                           ;segments.c: 42: PORTBbits.RB5=0;
 10791                           
 10792                           ;segments.c: 43: break;
 10793  0013DE  D101               	goto	PL39	;call to abstracted procedure
 10794  0013E0                     i2l818:
 10795                           
 10796                           ; BSR set to: 1
 10797                           ;segments.c: 45: PORTAbits.RA2=1;
 10798  0013E0  8480               	bsf	3968,2,c	;volatile
 10799                           
 10800                           ;segments.c: 46: PORTBbits.RB7=1;
 10801  0013E2  8E81               	bsf	3969,7,c	;volatile
 10802                           
 10803                           ;segments.c: 47: PORTBbits.RB1=0;
 10804                           
 10805                           ;segments.c: 48: PORTBbits.RB2=1;
 10806                           
 10807                           ;segments.c: 49: PORTBbits.RB4=1;
 10808                           
 10809                           ;segments.c: 50: PORTBbits.RB6=0;
 10810                           
 10811                           ;segments.c: 51: PORTBbits.RB5=1;
 10812                           
 10813                           ;segments.c: 52: break;
 10814  0013E4  D0F2               	goto	PL37	;call to abstracted procedure
 10815  0013E6                     i2l819:
 10816                           
 10817                           ; BSR set to: 1
 10818                           ;segments.c: 54: PORTAbits.RA2=1;
 10819  0013E6  8480               	bsf	3968,2,c	;volatile
 10820                           
 10821                           ;segments.c: 55: PORTBbits.RB7=1;
 10822  0013E8  8E81               	bsf	3969,7,c	;volatile
 10823                           
 10824                           ;segments.c: 56: PORTBbits.RB1=1;
 10825  0013EA  8281               	bsf	3969,1,c	;volatile
 10826                           
 10827                           ;segments.c: 57: PORTBbits.RB2=1;
 10828  0013EC  8481               	bsf	3969,2,c	;volatile
 10829                           
 10830                           ;segments.c: 58: PORTBbits.RB4=0;
 10831  0013EE  9881               	bcf	3969,4,c	;volatile
 10832                           
 10833                           ;segments.c: 59: PORTBbits.RB6=0;
 10834  0013F0  9C81               	bcf	3969,6,c	;volatile
 10835                           
 10836                           ;segments.c: 60: PORTBbits.RB5=1;
 10837  0013F2  8A81               	bsf	3969,5,c	;volatile
 10838                           
 10839                           ;segments.c: 61: break;
 10840  0013F4  0012               	return	
 10841  0013F6                     i2l820:
 10842                           
 10843                           ; BSR set to: 1
 10844                           ;segments.c: 63: PORTAbits.RA2=0;
 10845  0013F6  9480               	bcf	3968,2,c	;volatile
 10846                           
 10847                           ;segments.c: 64: PORTBbits.RB7=1;
 10848  0013F8  8E81               	bsf	3969,7,c	;volatile
 10849                           
 10850                           ;segments.c: 65: PORTBbits.RB1=1;
 10851  0013FA  8281               	bsf	3969,1,c	;volatile
 10852                           
 10853                           ;segments.c: 66: PORTBbits.RB2=0;
 10854  0013FC  9481               	bcf	3969,2,c	;volatile
 10855                           
 10856                           ;segments.c: 67: PORTBbits.RB4=0;
 10857  0013FE  9881               	bcf	3969,4,c	;volatile
 10858                           
 10859                           ;segments.c: 68: PORTBbits.RB6=1;
 10860  001400  8C81               	bsf	3969,6,c	;volatile
 10861                           
 10862                           ;segments.c: 69: PORTBbits.RB5=1;
 10863  001402  8A81               	bsf	3969,5,c	;volatile
 10864                           
 10865                           ;segments.c: 70: break;
 10866  001404  0012               	return	
 10867  001406                     i2l821:
 10868                           
 10869                           ; BSR set to: 1
 10870                           ;segments.c: 72: PORTAbits.RA2=1;
 10871  001406  8480               	bsf	3968,2,c	;volatile
 10872                           
 10873                           ;segments.c: 73: PORTBbits.RB7=0;
 10874  001408  9E81               	bcf	3969,7,c	;volatile
 10875                           
 10876                           ;segments.c: 74: PORTBbits.RB1=1;
 10877                           
 10878                           ;segments.c: 75: PORTBbits.RB2=1;
 10879                           
 10880                           ;segments.c: 76: PORTBbits.RB4=0;
 10881                           
 10882                           ;segments.c: 77: PORTBbits.RB6=1;
 10883                           
 10884                           ;segments.c: 78: PORTBbits.RB5=1;
 10885                           
 10886                           ;segments.c: 79: break;
 10887  00140A  D0B8               	goto	PL26	;call to abstracted procedure
 10888  00140C                     i2l822:
 10889                           
 10890                           ; BSR set to: 1
 10891                           ;segments.c: 81: PORTAbits.RA2=1;
 10892  00140C  8480               	bsf	3968,2,c	;volatile
 10893  00140E  D01F               	goto	L57
 10894  001410                     i2l823:
 10895                           
 10896                           ; BSR set to: 1
 10897                           ;segments.c: 90: PORTAbits.RA2=1;
 10898  001410  8480               	bsf	3968,2,c	;volatile
 10899                           
 10900                           ;segments.c: 91: PORTBbits.RB7=1;
 10901  001412  8E81               	bsf	3969,7,c	;volatile
 10902                           
 10903                           ;segments.c: 92: PORTBbits.RB1=1;
 10904  001414  8281               	bsf	3969,1,c	;volatile
 10905                           
 10906                           ;segments.c: 93: PORTBbits.RB2=0;
 10907  001416  9481               	bcf	3969,2,c	;volatile
 10908                           
 10909                           ;segments.c: 94: PORTBbits.RB4=0;
 10910  001418  9881               	bcf	3969,4,c	;volatile
 10911                           
 10912                           ;segments.c: 95: PORTBbits.RB6=1;
 10913  00141A  8C81               	bsf	3969,6,c	;volatile
 10914                           
 10915                           ;segments.c: 96: PORTBbits.RB5=0;
 10916  00141C  9A81               	bcf	3969,5,c	;volatile
 10917                           
 10918                           ;segments.c: 97: break;
 10919  00141E  0012               	return	
 10920  001420                     i2l824:
 10921                           
 10922                           ; BSR set to: 1
 10923                           ;segments.c: 99: PORTAbits.RA2=1;
 10924  001420  8480               	bsf	3968,2,c	;volatile
 10925                           
 10926                           ;segments.c: 100: PORTBbits.RB7=1;
 10927  001422  8E81               	bsf	3969,7,c	;volatile
 10928                           
 10929                           ;segments.c: 101: PORTBbits.RB1=1;
 10930                           
 10931                           ;segments.c: 102: PORTBbits.RB2=1;
 10932                           
 10933                           ;segments.c: 103: PORTBbits.RB4=1;
 10934                           
 10935                           ;segments.c: 104: PORTBbits.RB6=1;
 10936                           
 10937                           ;segments.c: 105: PORTBbits.RB5=1;
 10938                           
 10939                           ;segments.c: 106: break;
 10940  001424  D0B1               	goto	PL27	;call to abstracted procedure
 10941  001426                     i2l825:
 10942                           
 10943                           ; BSR set to: 1
 10944                           ;segments.c: 108: PORTAbits.RA2=1;
 10945  001426  8480               	bsf	3968,2,c	;volatile
 10946  001428  D04A               	goto	L58
 10947  00142A                     i2l826:
 10948                           
 10949                           ; BSR set to: 1
 10950                           ;segments.c: 117: PORTAbits.RA2=0;
 10951  00142A  9480               	bcf	3968,2,c	;volatile
 10952                           
 10953                           ;segments.c: 118: PORTBbits.RB7=0;
 10954  00142C  9E81               	bcf	3969,7,c	;volatile
 10955                           
 10956                           ;segments.c: 119: PORTBbits.RB1=0;
 10957  00142E  9281               	bcf	3969,1,c	;volatile
 10958                           
 10959                           ;segments.c: 120: PORTBbits.RB2=1;
 10960  001430  8481               	bsf	3969,2,c	;volatile
 10961                           
 10962                           ;segments.c: 121: PORTBbits.RB4=0;
 10963  001432  9881               	bcf	3969,4,c	;volatile
 10964                           
 10965                           ;segments.c: 122: PORTBbits.RB6=0;
 10966  001434  9C81               	bcf	3969,6,c	;volatile
 10967                           
 10968                           ;segments.c: 123: PORTBbits.RB5=0;
 10969  001436  9A81               	bcf	3969,5,c	;volatile
 10970                           
 10971                           ;segments.c: 124: break;
 10972  001438  0012               	return	
 10973  00143A                     i2l827:
 10974                           
 10975                           ; BSR set to: 1
 10976                           ;segments.c: 126: PORTAbits.RA2=0;
 10977                           
 10978                           ;segments.c: 127: PORTBbits.RB7=0;
 10979                           
 10980                           ;segments.c: 128: PORTBbits.RB1=0;
 10981                           
 10982                           ;segments.c: 129: PORTBbits.RB2=0;
 10983                           
 10984                           ;segments.c: 130: PORTBbits.RB4=0;
 10985                           
 10986                           ;segments.c: 131: PORTBbits.RB6=0;
 10987  00143A  D899               	call	PL22	;call to abstracted procedure
 10988                           
 10989                           ;segments.c: 132: PORTBbits.RB5=0;
 10990  00143C  9A81               	bcf	3969,5,c	;volatile
 10991                           
 10992                           ;segments.c: 133: PORTBbits.RB3=1;
 10993  00143E  8681               	bsf	3969,3,c	;volatile
 10994                           
 10995                           ;segments.c: 134: break;
 10996  001440  0012               	return	
 10997  001442                     i2l828:
 10998                           
 10999                           ; BSR set to: 1
 11000                           ;segments.c: 136: PORTAbits.RA2=0;
 11001  001442  9480               	bcf	3968,2,c	;volatile
 11002                           
 11003                           ;segments.c: 137: PORTBbits.RB7=0;
 11004  001444  9E81               	bcf	3969,7,c	;volatile
 11005                           
 11006                           ;segments.c: 138: PORTBbits.RB1=1;
 11007                           
 11008                           ;segments.c: 139: PORTBbits.RB2=0;
 11009                           
 11010                           ;segments.c: 140: PORTBbits.RB4=0;
 11011                           
 11012                           ;segments.c: 141: PORTBbits.RB6=0;
 11013                           
 11014                           ;segments.c: 142: PORTBbits.RB5=0;
 11015                           
 11016                           ;segments.c: 143: break;
 11017  001446  D0CD               	goto	PL39	;call to abstracted procedure
 11018  001448                     i2l829:
 11019                           
 11020                           ; BSR set to: 1
 11021  001448  8480               	bsf	3968,2,c	;volatile
 11022                           
 11023                           ;segments.c: 147: PORTBbits.RB4=1;PORTBbits.RB6=1;PORTBbits.RB5=1;
 11024                           
 11025                           ;segments.c: 148: break;
 11026  00144A  D0A4               	goto	PL32	;call to abstracted procedure
 11027  00144C                     i2l830:
 11028                           
 11029                           ; BSR set to: 1
 11030  00144C  9480               	bcf	3968,2,c	;volatile
 11031  00144E                     L57:
 11032  00144E  9E81               	bcf	3969,7,c	;volatile
 11033                           
 11034                           ;segments.c: 150: PORTBbits.RB4=1;PORTBbits.RB6=1;PORTBbits.RB5=1;
 11035                           
 11036                           ;segments.c: 151: break;
 11037  001450  D09B               	goto	PL27	;call to abstracted procedure
 11038  001452                     i2l831:
 11039                           
 11040                           ; BSR set to: 1
 11041  001452  8480               	bsf	3968,2,c	;volatile
 11042                           
 11043                           ;segments.c: 153: PORTBbits.RB4=1;PORTBbits.RB6=1;PORTBbits.RB5=0;
 11044                           
 11045                           ;segments.c: 154: break;
 11046  001454  D0A6               	goto	PL33	;call to abstracted procedure
 11047  001456                     i2l832:
 11048                           
 11049                           ; BSR set to: 1
 11050  001456  9480               	bcf	3968,2,c	;volatile
 11051  001458  9E81               	bcf	3969,7,c	;volatile
 11052                           
 11053                           ;segments.c: 156: PORTBbits.RB4=1;PORTBbits.RB6=0;PORTBbits.RB5=1;
 11054                           
 11055                           ;segments.c: 157: break;
 11056  00145A  D0B7               	goto	PL37	;call to abstracted procedure
 11057  00145C                     i2l833:
 11058                           
 11059                           ; BSR set to: 1
 11060  00145C  9480               	bcf	3968,2,c	;volatile
 11061  00145E  8E81               	bsf	3969,7,c	;volatile
 11062  001460  8281               	bsf	3969,1,c	;volatile
 11063  001462  8481               	bsf	3969,2,c	;volatile
 11064                           
 11065                           ;segments.c: 159: PORTBbits.RB4=1;PORTBbits.RB6=0;PORTBbits.RB5=1;break;
 11066  001464  8881               	bsf	3969,4,c	;volatile
 11067  001466  9C81               	bcf	3969,6,c	;volatile
 11068  001468  8A81               	bsf	3969,5,c	;volatile
 11069  00146A  0012               	return	
 11070  00146C                     i2l834:
 11071                           
 11072                           ; BSR set to: 1
 11073  00146C  8480               	bsf	3968,2,c	;volatile
 11074  00146E  D021               	goto	L59
 11075  001470                     i2l835:
 11076                           
 11077                           ; BSR set to: 1
 11078  001470  8480               	bsf	3968,2,c	;volatile
 11079  001472  8E81               	bsf	3969,7,c	;volatile
 11080                           
 11081                           ;segments.c: 164: PORTBbits.RB4=1;PORTBbits.RB6=1;PORTBbits.RB5=1;
 11082                           
 11083                           ;segments.c: 165: break;
 11084  001474  D0A4               	goto	PL35	;call to abstracted procedure
 11085  001476                     i2l836:
 11086                           
 11087                           ; BSR set to: 1
 11088  001476  8480               	bsf	3968,2,c	;volatile
 11089  001478  9E81               	bcf	3969,7,c	;volatile
 11090                           
 11091                           ;segments.c: 167: PORTBbits.RB4=1;PORTBbits.RB6=1;PORTBbits.RB5=1;
 11092                           
 11093                           ;segments.c: 168: break;
 11094  00147A  D0AD               	goto	PL38	;call to abstracted procedure
 11095  00147C                     i2l837:
 11096                           
 11097                           ; BSR set to: 1
 11098  00147C  9480               	bcf	3968,2,c	;volatile
 11099                           
 11100                           ;segments.c: 170: PORTBbits.RB4=1;PORTBbits.RB6=1;PORTBbits.RB5=1;
 11101                           
 11102                           ;segments.c: 171: break;
 11103  00147E  D08A               	goto	PL32	;call to abstracted procedure
 11104  001480                     i2l839:
 11105                           
 11106                           ; BSR set to: 1
 11107  001480  9480               	bcf	3968,2,c	;volatile
 11108                           
 11109                           ;segments.c: 176: PORTBbits.RB4=1;PORTBbits.RB6=1;PORTBbits.RB5=0;
 11110                           
 11111                           ;segments.c: 177: break;
 11112  001482  D08F               	goto	PL33	;call to abstracted procedure
 11113  001484                     i2l840:
 11114                           
 11115                           ; BSR set to: 1
 11116  001484  9480               	bcf	3968,2,c	;volatile
 11117  001486  9E81               	bcf	3969,7,c	;volatile
 11118  001488  8281               	bsf	3969,1,c	;volatile
 11119  00148A  9481               	bcf	3969,2,c	;volatile
 11120                           
 11121                           ;segments.c: 179: PORTBbits.RB4=1;PORTBbits.RB6=0;PORTBbits.RB5=1;
 11122  00148C  8881               	bsf	3969,4,c	;volatile
 11123  00148E  9C81               	bcf	3969,6,c	;volatile
 11124  001490  8A81               	bsf	3969,5,c	;volatile
 11125                           
 11126                           ;segments.c: 180: break;
 11127  001492  0012               	return	
 11128  001494                     i2l841:
 11129                           
 11130                           ; BSR set to: 1
 11131                           
 11132                           ;segments.c: 182: PORTBbits.RB4=1;PORTBbits.RB6=0;PORTBbits.RB5=1;
 11133  001494  D88D               	call	PL34	;call to abstracted procedure
 11134  001496  8A81               	bsf	3969,5,c	;volatile
 11135                           
 11136                           ;segments.c: 183: break;
 11137  001498  0012               	return	
 11138  00149A                     i2l842:
 11139                           
 11140                           ; BSR set to: 1
 11141  00149A  8480               	bsf	3968,2,c	;volatile
 11142  00149C  8E81               	bsf	3969,7,c	;volatile
 11143                           
 11144                           ;segments.c: 185: PORTBbits.RB4=1;PORTBbits.RB6=1;PORTBbits.RB5=1;
 11145                           
 11146                           ;segments.c: 186: break;
 11147  00149E  D09B               	goto	PL38	;call to abstracted procedure
 11148  0014A0                     i2l843:
 11149                           
 11150                           ; BSR set to: 1
 11151  0014A0  9480               	bcf	3968,2,c	;volatile
 11152  0014A2  9E81               	bcf	3969,7,c	;volatile
 11153  0014A4  9281               	bcf	3969,1,c	;volatile
 11154  0014A6  9481               	bcf	3969,2,c	;volatile
 11155                           
 11156                           ;segments.c: 188: PORTBbits.RB4=1;PORTBbits.RB6=0;PORTBbits.RB5=1;
 11157  0014A8  8881               	bsf	3969,4,c	;volatile
 11158  0014AA  9C81               	bcf	3969,6,c	;volatile
 11159  0014AC  8A81               	bsf	3969,5,c	;volatile
 11160                           
 11161                           ;segments.c: 189: break;
 11162  0014AE  0012               	return	
 11163  0014B0                     i2l845:
 11164                           
 11165                           ; BSR set to: 1
 11166  0014B0  9480               	bcf	3968,2,c	;volatile
 11167  0014B2                     L59:
 11168  0014B2  9E81               	bcf	3969,7,c	;volatile
 11169                           
 11170                           ;segments.c: 194: PORTBbits.RB4=1;PORTBbits.RB6=1;PORTBbits.RB5=1;
 11171                           
 11172                           ;segments.c: 195: break;
 11173  0014B4  D084               	goto	PL35	;call to abstracted procedure
 11174  0014B6                     i2l846:
 11175                           
 11176                           ; BSR set to: 1
 11177                           
 11178                           ;segments.c: 197: PORTBbits.RB4=1;PORTBbits.RB6=0;PORTBbits.RB5=0;
 11179  0014B6  D87C               	call	PL34	;call to abstracted procedure
 11180  0014B8  9A81               	bcf	3969,5,c	;volatile
 11181                           
 11182                           ;segments.c: 198: break;
 11183  0014BA  0012               	return	
 11184  0014BC                     i2l847:
 11185                           
 11186                           ; BSR set to: 1
 11187  0014BC  9480               	bcf	3968,2,c	;volatile
 11188  0014BE                     L58:
 11189  0014BE  8E81               	bsf	3969,7,c	;volatile
 11190                           
 11191                           ;segments.c: 200: PORTBbits.RB4=0;PORTBbits.RB6=1;PORTBbits.RB5=1;
 11192                           
 11193                           ;segments.c: 201: break;
 11194  0014C0  D05D               	goto	PL26	;call to abstracted procedure
 11195  0014C2                     i2l848:
 11196                           
 11197                           ; BSR set to: 1
 11198                           
 11199                           ;segments.c: 203: PORTBbits.RB4=0;PORTBbits.RB6=0;PORTBbits.RB5=1;
 11200  0014C2  D855               	call	PL22	;call to abstracted procedure
 11201  0014C4  8A81               	bsf	3969,5,c	;volatile
 11202                           
 11203                           ;segments.c: 204: break;
 11204  0014C6  0012               	return	
 11205  0014C8                     i2l850:
 11206                           
 11207                           ; BSR set to: 1
 11208                           ;segments.c: 209: PORTAbits.RA2=0;
 11209                           
 11210                           ;segments.c: 210: PORTBbits.RB7=0;
 11211                           
 11212                           ;segments.c: 211: PORTBbits.RB1=0;
 11213                           
 11214                           ;segments.c: 212: PORTBbits.RB2=0;
 11215                           
 11216                           ;segments.c: 213: PORTBbits.RB4=0;
 11217                           
 11218                           ;segments.c: 214: PORTBbits.RB6=0;
 11219  0014C8  D852               	call	PL22	;call to abstracted procedure
 11220                           
 11221                           ;segments.c: 215: PORTBbits.RB5=0;
 11222  0014CA  9A81               	bcf	3969,5,c	;volatile
 11223                           
 11224                           ;segments.c: 216: PORTBbits.RB3=0;
 11225  0014CC  9681               	bcf	3969,3,c	;volatile
 11226                           
 11227                           ;segments.c: 217: }
 11228  0014CE  0012               	return	
 11229  0014D0                     i2l5759:
 11230                           
 11231                           ; BSR set to: 1
 11232  0014D0  5013               	movf	char2pins@c,w,c
 11233                           
 11234                           ; Switch size 1, requested type "space"
 11235                           ; Number of cases is 34, Range of values is 32 to 121
 11236                           ; switch strategies available:
 11237                           ; Name         Instructions Cycles
 11238                           ; simple_byte          103    52 (average)
 11239                           ;	Chosen strategy is simple_byte
 11240  0014D2  0A20               	xorlw	32	; case 32
 11241  0014D4  E0F9               	bz	i2l850
 11242  0014D6  0A01               	xorlw	1	; case 33
 11243  0014D8  E0B4               	bz	i2l828
 11244  0014DA  0A0C               	xorlw	12	; case 45
 11245  0014DC  E0F2               	bz	i2l848
 11246  0014DE  0A1D               	xorlw	29	; case 48
 11247  0014E0  E101 D773          	bz	i2l815
 11248  0014E4  0A01               	xorlw	1	; case 49
 11249  0014E6  E101 D778          	bz	i2l817
 11250  0014EA  0A03               	xorlw	3	; case 50
 11251  0014EC  E101 D778          	bz	i2l818
 11252  0014F0  0A01               	xorlw	1	; case 51
 11253  0014F2  E101 D778          	bz	i2l819
 11254  0014F6  0A07               	xorlw	7	; case 52
 11255  0014F8  E101 D77D          	bz	i2l820
 11256  0014FC  0A01               	xorlw	1	; case 53
 11257  0014FE  E083               	bz	i2l821
 11258  001500  0A03               	xorlw	3	; case 54
 11259  001502  E084               	bz	i2l822
 11260  001504  0A01               	xorlw	1	; case 55
 11261  001506  E084               	bz	i2l823
 11262  001508  0A0F               	xorlw	15	; case 56
 11263  00150A  E08A               	bz	i2l824
 11264  00150C  0A01               	xorlw	1	; case 57
 11265  00150E  E08B               	bz	i2l825
 11266  001510  0A78               	xorlw	120	; case 65
 11267  001512  E09A               	bz	i2l829
 11268  001514  0A02               	xorlw	2	; case 67
 11269  001516  E09D               	bz	i2l831
 11270  001518  0A06               	xorlw	6	; case 69
 11271  00151A  E0A8               	bz	i2l834
 11272  00151C  0A03               	xorlw	3	; case 70
 11273  00151E  E0AB               	bz	i2l836
 11274  001520  0A0E               	xorlw	14	; case 72
 11275  001522  E0AC               	bz	i2l837
 11276  001524  0A04               	xorlw	4	; case 76
 11277  001526  E0AC               	bz	i2l839
 11278  001528  0A1C               	xorlw	28	; case 80
 11279  00152A  E0B7               	bz	i2l842
 11280  00152C  0A03               	xorlw	3	; case 83
 11281  00152E  E101 D76A          	bz	i2l821
 11282  001532  0A31               	xorlw	49	; case 98
 11283  001534  E08B               	bz	i2l830
 11284  001536  0A01               	xorlw	1	; case 99
 11285  001538  E08E               	bz	i2l832
 11286  00153A  0A07               	xorlw	7	; case 100
 11287  00153C  E08F               	bz	i2l833
 11288  00153E  0A01               	xorlw	1	; case 101
 11289  001540  E097               	bz	i2l835
 11290  001542  0A0C               	xorlw	12	; case 105
 11291  001544  E101 D77D          	bz	i2l828
 11292  001548  0A07               	xorlw	7	; case 110
 11293  00154A  E09C               	bz	i2l840
 11294  00154C  0A01               	xorlw	1	; case 111
 11295  00154E  E0A2               	bz	i2l841
 11296  001550  0A1D               	xorlw	29	; case 114
 11297  001552  E0A6               	bz	i2l843
 11298  001554  0A06               	xorlw	6	; case 116
 11299  001556  E0AC               	bz	i2l845
 11300  001558  0A01               	xorlw	1	; case 117
 11301  00155A  E0AD               	bz	i2l846
 11302  00155C  0A03               	xorlw	3	; case 118
 11303  00155E  E101 D76C          	bz	i2l827
 11304  001562  0A0E               	xorlw	14	; case 120
 11305  001564  E101 D761          	bz	i2l826
 11306  001568  0A01               	xorlw	1	; case 121
 11307  00156A  E0A8               	bz	i2l847
 11308  00156C  D7AD               	goto	i2l850
 11309  00156E                     __end_of_char2pins:
 11310                           	opt stack 0
 11311  00156E                     PL22:
 11312  00156E  9480               	bcf	3968,2,c	;volatile
 11313  001570  9E81               	bcf	3969,7,c	;volatile
 11314  001572  9281               	bcf	3969,1,c	;volatile
 11315  001574  9481               	bcf	3969,2,c	;volatile
 11316  001576  9881               	bcf	3969,4,c	;volatile
 11317  001578  9C81               	bcf	3969,6,c	;volatile
 11318  00157A  0012               	return	
 11319  00157C                     PL26:
 11320  00157C  8281               	bsf	3969,1,c	;volatile
 11321  00157E  8481               	bsf	3969,2,c	;volatile
 11322  001580  9881               	bcf	3969,4,c	;volatile
 11323  001582  8C81               	bsf	3969,6,c	;volatile
 11324  001584  8A81               	bsf	3969,5,c	;volatile
 11325  001586  0012               	return	
 11326  001588                     PL27:
 11327  001588  8281               	bsf	3969,1,c	;volatile
 11328  00158A  8481               	bsf	3969,2,c	;volatile
 11329  00158C  8881               	bsf	3969,4,c	;volatile
 11330  00158E  8C81               	bsf	3969,6,c	;volatile
 11331  001590  8A81               	bsf	3969,5,c	;volatile
 11332  001592  0012               	return	
 11333  001594                     PL32:
 11334  001594  8E81               	bsf	3969,7,c	;volatile
 11335  001596  8281               	bsf	3969,1,c	;volatile
 11336  001598  9481               	bcf	3969,2,c	;volatile
 11337  00159A  8881               	bsf	3969,4,c	;volatile
 11338  00159C  8C81               	bsf	3969,6,c	;volatile
 11339  00159E  8A81               	bsf	3969,5,c	;volatile
 11340  0015A0  0012               	return	
 11341  0015A2                     PL33:
 11342  0015A2  9E81               	bcf	3969,7,c	;volatile
 11343  0015A4  9281               	bcf	3969,1,c	;volatile
 11344  0015A6  8481               	bsf	3969,2,c	;volatile
 11345  0015A8  8881               	bsf	3969,4,c	;volatile
 11346  0015AA  8C81               	bsf	3969,6,c	;volatile
 11347  0015AC  9A81               	bcf	3969,5,c	;volatile
 11348  0015AE  0012               	return	
 11349  0015B0                     PL34:
 11350  0015B0  9480               	bcf	3968,2,c	;volatile
 11351  0015B2  9E81               	bcf	3969,7,c	;volatile
 11352  0015B4  8281               	bsf	3969,1,c	;volatile
 11353  0015B6  8481               	bsf	3969,2,c	;volatile
 11354  0015B8  8881               	bsf	3969,4,c	;volatile
 11355  0015BA  9C81               	bcf	3969,6,c	;volatile
 11356  0015BC  0012               	return	
 11357  0015BE                     PL35:
 11358  0015BE  9281               	bcf	3969,1,c	;volatile
 11359  0015C0  8481               	bsf	3969,2,c	;volatile
 11360  0015C2  8881               	bsf	3969,4,c	;volatile
 11361  0015C4  8C81               	bsf	3969,6,c	;volatile
 11362  0015C6  8A81               	bsf	3969,5,c	;volatile
 11363  0015C8  0012               	return	
 11364  0015CA                     PL37:
 11365  0015CA  9281               	bcf	3969,1,c	;volatile
 11366  0015CC  8481               	bsf	3969,2,c	;volatile
 11367  0015CE  8881               	bsf	3969,4,c	;volatile
 11368  0015D0  9C81               	bcf	3969,6,c	;volatile
 11369  0015D2  8A81               	bsf	3969,5,c	;volatile
 11370  0015D4  0012               	return	
 11371  0015D6                     PL38:
 11372  0015D6  9281               	bcf	3969,1,c	;volatile
 11373  0015D8  9481               	bcf	3969,2,c	;volatile
 11374  0015DA  8881               	bsf	3969,4,c	;volatile
 11375  0015DC  8C81               	bsf	3969,6,c	;volatile
 11376  0015DE  8A81               	bsf	3969,5,c	;volatile
 11377  0015E0  0012               	return	
 11378  0015E2                     PL39:
 11379  0015E2  8281               	bsf	3969,1,c	;volatile
 11380  0015E4  9481               	bcf	3969,2,c	;volatile
 11381  0015E6  9881               	bcf	3969,4,c	;volatile
 11382  0015E8  9C81               	bcf	3969,6,c	;volatile
 11383  0015EA  9A81               	bcf	3969,5,c	;volatile
 11384  0015EC  0012               	return	
 11385                           pclatu	equ	0xFFB
 11386                           pclath	equ	0xFFA
 11387                           tblptru	equ	0xFF8
 11388                           tblptrh	equ	0xFF7
 11389                           tblptrl	equ	0xFF6
 11390                           tablat	equ	0xFF5
 11391                           prodh	equ	0xFF4
 11392                           prodl	equ	0xFF3
 11393                           intcon	equ	0xFF2
 11394                           intcon2	equ	0xFF1
 11395                           postinc0	equ	0xFEE
 11396                           fsr0h	equ	0xFEA
 11397                           fsr0l	equ	0xFE9
 11398                           wreg	equ	0xFE8
 11399                           indf1	equ	0xFE7
 11400                           postinc1	equ	0xFE6
 11401                           postdec1	equ	0xFE5
 11402                           fsr1h	equ	0xFE2
 11403                           fsr1l	equ	0xFE1
 11404                           bsr	equ	0xFE0
 11405                           indf2	equ	0xFDF
 11406                           postinc2	equ	0xFDE
 11407                           postdec2	equ	0xFDD
 11408                           plusw2	equ	0xFDB
 11409                           fsr2h	equ	0xFDA
 11410                           fsr2l	equ	0xFD9
 11411                           status	equ	0xFD8
 11412                           pclatu	equ	0xFFB
 11413                           pclath	equ	0xFFA
 11414                           tblptru	equ	0xFF8
 11415                           tblptrh	equ	0xFF7
 11416                           tblptrl	equ	0xFF6
 11417                           tablat	equ	0xFF5
 11418                           prodh	equ	0xFF4
 11419                           prodl	equ	0xFF3
 11420                           intcon	equ	0xFF2
 11421                           intcon2	equ	0xFF1
 11422                           postinc0	equ	0xFEE
 11423                           fsr0h	equ	0xFEA
 11424                           fsr0l	equ	0xFE9
 11425                           wreg	equ	0xFE8
 11426                           indf1	equ	0xFE7
 11427                           postinc1	equ	0xFE6
 11428                           postdec1	equ	0xFE5
 11429                           fsr1h	equ	0xFE2
 11430                           fsr1l	equ	0xFE1
 11431                           bsr	equ	0xFE0
 11432                           indf2	equ	0xFDF
 11433                           postinc2	equ	0xFDE
 11434                           postdec2	equ	0xFDD
 11435                           plusw2	equ	0xFDB
 11436                           fsr2h	equ	0xFDA
 11437                           fsr2l	equ	0xFD9
 11438                           status	equ	0xFD8
 11439                           
 11440                           	psect	text38
 11441  000000                     __ptext38:
 11442                           	opt stack 0
 11443                           pclatu	equ	0xFFB
 11444                           pclath	equ	0xFFA
 11445                           tblptru	equ	0xFF8
 11446                           tblptrh	equ	0xFF7
 11447                           tblptrl	equ	0xFF6
 11448                           tablat	equ	0xFF5
 11449                           prodh	equ	0xFF4
 11450                           prodl	equ	0xFF3
 11451                           intcon	equ	0xFF2
 11452                           intcon2	equ	0xFF1
 11453                           postinc0	equ	0xFEE
 11454                           fsr0h	equ	0xFEA
 11455                           fsr0l	equ	0xFE9
 11456                           wreg	equ	0xFE8
 11457                           indf1	equ	0xFE7
 11458                           postinc1	equ	0xFE6
 11459                           postdec1	equ	0xFE5
 11460                           fsr1h	equ	0xFE2
 11461                           fsr1l	equ	0xFE1
 11462                           bsr	equ	0xFE0
 11463                           indf2	equ	0xFDF
 11464                           postinc2	equ	0xFDE
 11465                           postdec2	equ	0xFDD
 11466                           plusw2	equ	0xFDB
 11467                           fsr2h	equ	0xFDA
 11468                           fsr2l	equ	0xFD9
 11469                           status	equ	0xFD8
 11470                           
 11471                           	psect	rparam
 11472  0000                     pclatu	equ	0xFFB
 11473                           pclath	equ	0xFFA
 11474                           tblptru	equ	0xFF8
 11475                           tblptrh	equ	0xFF7
 11476                           tblptrl	equ	0xFF6
 11477                           tablat	equ	0xFF5
 11478                           prodh	equ	0xFF4
 11479                           prodl	equ	0xFF3
 11480                           intcon	equ	0xFF2
 11481                           intcon2	equ	0xFF1
 11482                           postinc0	equ	0xFEE
 11483                           fsr0h	equ	0xFEA
 11484                           fsr0l	equ	0xFE9
 11485                           wreg	equ	0xFE8
 11486                           indf1	equ	0xFE7
 11487                           postinc1	equ	0xFE6
 11488                           postdec1	equ	0xFE5
 11489                           fsr1h	equ	0xFE2
 11490                           fsr1l	equ	0xFE1
 11491                           bsr	equ	0xFE0
 11492                           indf2	equ	0xFDF
 11493                           postinc2	equ	0xFDE
 11494                           postdec2	equ	0xFDD
 11495                           plusw2	equ	0xFDB
 11496                           fsr2h	equ	0xFDA
 11497                           fsr2l	equ	0xFD9
 11498                           status	equ	0xFD8
 11499                           pclatu	equ	0xFFB
 11500                           pclath	equ	0xFFA
 11501                           tblptru	equ	0xFF8
 11502                           tblptrh	equ	0xFF7
 11503                           tblptrl	equ	0xFF6
 11504                           tablat	equ	0xFF5
 11505                           prodh	equ	0xFF4
 11506                           prodl	equ	0xFF3
 11507                           intcon	equ	0xFF2
 11508                           intcon2	equ	0xFF1
 11509                           postinc0	equ	0xFEE
 11510                           fsr0h	equ	0xFEA
 11511                           fsr0l	equ	0xFE9
 11512                           wreg	equ	0xFE8
 11513                           indf1	equ	0xFE7
 11514                           postinc1	equ	0xFE6
 11515                           postdec1	equ	0xFE5
 11516                           fsr1h	equ	0xFE2
 11517                           fsr1l	equ	0xFE1
 11518                           bsr	equ	0xFE0
 11519                           indf2	equ	0xFDF
 11520                           postinc2	equ	0xFDE
 11521                           postdec2	equ	0xFDD
 11522                           plusw2	equ	0xFDB
 11523                           fsr2h	equ	0xFDA
 11524                           fsr2l	equ	0xFD9
 11525                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        96
    BSS         109
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     39      76
    BANK0           160     77     110
    BANK1           256     65     200
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ?___ftpack	float  size(1) Largest target is 0

    ?___lwdiv	unsigned int  size(1) Largest target is 0

    ?___lwmod	unsigned int  size(1) Largest target is 0

    ?___asftdiv	float  size(1) Largest target is 0

    ?___asftadd	float  size(1) Largest target is 0

    ?___ftsub	float  size(1) Largest target is 0

    ?___ftmul	float  size(1) Largest target is 0

    ?_getConv	int  size(1) Largest target is 0

    ?___fttol	long  size(1) Largest target is 0

    ?___asftmul	float  size(1) Largest target is 0

    ?_iir	float  size(1) Largest target is 0

    ?___ftadd	float  size(1) Largest target is 0

    ?___ftdiv	float  size(1) Largest target is 0

    ?___awtoft	float  size(1) Largest target is 0

    __asftmul@f1p	PTR float  size(1) Largest target is 3
		 -> medicionFloat(BANK0[3]), 

    __asftdiv@f1p	PTR float  size(1) Largest target is 9
		 -> y(BANK0[9]), 

    __asftadd@f1p	PTR float  size(1) Largest target is 9
		 -> y(BANK0[9]), 

    S2040$p2port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTC(DATA[1]), 

    pulsPin.p2port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTC(DATA[1]), 

    uintToStr@str	PTR unsigned char  size(1) Largest target is 5
		 -> muxBuffer(BANK0[5]), 

    sp__intToStr	PTR unsigned char  size(1) Largest target is 12
		 -> fprintf@str(COMRAM[12]), 

    fseek@fp.bas	PTR unsigned char  size(1) Largest target is 5
		 -> muxBuffer(BANK0[5]), 

    fseek@fp.nxw	PTR unsigned char  size(1) Largest target is 5
		 -> muxBuffer(BANK0[5]), 

    fseek@fp.nxr	PTR unsigned char  size(1) Largest target is 5
		 -> muxBuffer(BANK0[5]), 

    fseek@fp	PTR struct . size(2) Largest target is 13
		 -> muxFile(BANK1[7]), 

    unget@stream.bas	PTR unsigned char  size(1) Largest target is 5
		 -> muxBuffer(BANK0[5]), 

    unget@stream.nxw	PTR unsigned char  size(1) Largest target is 5
		 -> muxBuffer(BANK0[5]), 

    unget@stream.nxr	PTR unsigned char  size(1) Largest target is 5
		 -> muxBuffer(BANK0[5]), 

    fgetc@stream.bas	PTR unsigned char  size(1) Largest target is 5
		 -> muxBuffer(BANK0[5]), 

    fgetc@stream.nxw	PTR unsigned char  size(1) Largest target is 5
		 -> muxBuffer(BANK0[5]), 

    fgetc@stream.nxr	PTR unsigned char  size(1) Largest target is 5
		 -> muxBuffer(BANK0[5]), 

    fgetc@stream	PTR struct . size(2) Largest target is 13
		 -> muxFile(BANK1[7]), 

    fputc@stream.bas	PTR unsigned char  size(1) Largest target is 5
		 -> muxBuffer(BANK0[5]), 

    fputc@stream.nxw	PTR unsigned char  size(1) Largest target is 5
		 -> muxBuffer(BANK0[5]), 

    fputc@stream.nxr	PTR unsigned char  size(1) Largest target is 5
		 -> muxBuffer(BANK0[5]), 

    S1392$bas	PTR unsigned char  size(1) Largest target is 5
		 -> muxBuffer(BANK0[5]), 

    muxFile.bas	PTR unsigned char  size(1) Largest target is 5
		 -> muxBuffer(BANK0[5]), 

    S1392$nxw	PTR unsigned char  size(1) Largest target is 5
		 -> muxBuffer(BANK0[5]), 

    muxFile.nxw	PTR unsigned char  size(1) Largest target is 5
		 -> muxBuffer(BANK0[5]), 

    S1392$nxr	PTR unsigned char  size(1) Largest target is 5
		 -> muxBuffer(BANK0[5]), 

    muxFile.nxr	PTR unsigned char  size(1) Largest target is 5
		 -> muxBuffer(BANK0[5]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _isr in COMRAM

    _isr_timer0->_fseek
    _isr2->_isr_timer3
    _isr_timer3->_pulsPinDriver

Critical Paths under _main in BANK0

    _main->_iir
    _incVar->___ftadd
    _decVar->___ftadd
    _uintToStr->___lwdiv
    _iir->___asftadd
    ___awtoft->___ftpack
    ___ftsub->___ftadd
    ___asftmul->___ftmul
    ___asftadd->___ftsub
    ___ftadd->___ftdiv
    ___asftdiv->___ftdiv
    ___ftdiv->___awtoft
    ___ftmul->___ftpack

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                67    67      0   17428
                                             75 BANK0      2     2      0
                                              0 BANK1     65    65      0
                        _pulsPinInit
                         _systemInit
                       _ee_read_byte
                           ___awtoft
                            ___ftdiv
                            ___ftadd
                        _timerDriver
          _actionsTimeoutShowSetting
                          _enterMenu
              _endTestDisplayActions
                          _adcDriver
                            _getConv
                                _iir
                          ___asftmul
                            ___fttol
                          _uintToStr
                             _incVar
                             _decVar
 ---------------------------------------------------------------------------------
 (1) _enterMenu                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ee_read_byte                                         1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _incVar                                               2     2      0    2776
                                             43 BANK0      2     2      0
                      _ee_write_byte
                           ___awtoft
                            ___ftdiv
                            ___ftadd
 ---------------------------------------------------------------------------------
 (1) _endTestDisplayActions                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _decVar                                               2     2      0    2776
                                             43 BANK0      2     2      0
                      _ee_write_byte
                           ___awtoft
                            ___ftdiv
                            ___ftadd
 ---------------------------------------------------------------------------------
 (2) _ee_write_byte                                        2     1      1      62
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (1) _uintToStr                                            5     1      4     674
                                              7 BANK0      5     1      4
                            ___lwmod
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (1) _getConv                                              2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _iir                                                 22    19      3    5408
                                             53 BANK0     22    19      3
                            ___ftmul
                            ___ftsub
                          ___asftadd
                          ___asftdiv
                           ___awtoft (ARG)
                            _getConv (ARG)
 ---------------------------------------------------------------------------------
 (1) _adcDriver                                            9     9      0      96
                                              0 BANK0      9     9      0
 ---------------------------------------------------------------------------------
 (1) _actionsTimeoutShowSetting                            2     2      0      37
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _pulsPinInit                                          7     7      0     223
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (1) _systemInit                                           0     0      0       0
                           _adcSetup
 ---------------------------------------------------------------------------------
 (1) _timerDriver                                          4     4      0     248
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) _adcSetup                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             4     1      3     445
                                              8 BANK0      4     1      3
                           ___ftpack
                            _getConv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    1602
                                             43 BANK0      6     0      6
                            ___ftadd
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (1) ___fttol                                             15    11      4     371
                                              0 BANK0     15    11      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     241
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     232
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (1) ___asftmul                                            4     1      3     893
                                             25 BANK0      4     1      3
                            ___ftmul
 ---------------------------------------------------------------------------------
 (2) ___asftadd                                            4     1      3    1630
                                             49 BANK0      4     1      3
                            ___ftadd
                            ___ftsub (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftadd                                             14     8      6    1537
                                             29 BANK0     14     8      6
                           ___ftpack
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            _getConv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___asftdiv                                            4     1      3     825
                                             29 BANK0      4     1      3
                            ___ftdiv
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5     312
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             17    11      6     732
                                             12 BANK0     17    11      6
                           ___ftpack
                           ___awtoft (ARG)
                            _getConv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             17    11      6     800
                                              8 BANK0     17    11      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5     312
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr2                                                 9     9      0    1248
                                              9 COMRAM     9     9      0
                         _isr_timer3
                            _isr_adc
 ---------------------------------------------------------------------------------
 (6) _isr_adc                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _isr_timer3                                           2     2      0    1248
                                              7 COMRAM     2     2      0
                      i1_timerDriver
                      _pulsPinDriver
 ---------------------------------------------------------------------------------
 (7) _pulsPinDriver                                        8     8      0     640
                                              0 COMRAM     7     7      0
 ---------------------------------------------------------------------------------
 (7) i1_timerDriver                                        4     4      0     584
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (8) _isr                                                 14    14      0     836
                                             25 COMRAM    14    14      0
                         _isr_timer0
 ---------------------------------------------------------------------------------
 (9) _isr_timer0                                           0     0      0     836
                              _fseek
                              _fgetc
                          _char2pins
 ---------------------------------------------------------------------------------
 (10) _fseek                                               7     1      6     726
                                             18 COMRAM     7     1      6
 ---------------------------------------------------------------------------------
 (10) _fgetc                                               2     0      2      88
                                             18 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (10) _char2pins                                           1     1      0      22
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _pulsPinInit
   _systemInit
     _adcSetup
   _ee_read_byte
   ___awtoft
     ___ftpack
     _getConv (ARG)
   ___ftdiv
     ___ftpack
     ___awtoft (ARG)
       ___ftpack
       _getConv (ARG)
     _getConv (ARG)
   ___ftadd
     ___ftpack
     ___awtoft (ARG)
       ___ftpack
       _getConv (ARG)
     ___ftdiv (ARG)
       ___ftpack
       ___awtoft (ARG)
         ___ftpack
         _getConv (ARG)
       _getConv (ARG)
     _getConv (ARG)
   _timerDriver
   _actionsTimeoutShowSetting
   _enterMenu
   _endTestDisplayActions
   _adcDriver
   _getConv
   _iir
     ___ftmul
       ___ftpack
     ___ftsub
       ___ftadd
         ___ftpack
         ___awtoft (ARG)
           ___ftpack
           _getConv (ARG)
         ___ftdiv (ARG)
           ___ftpack
           ___awtoft (ARG)
             ___ftpack
             _getConv (ARG)
           _getConv (ARG)
         _getConv (ARG)
       ___ftmul (ARG)
         ___ftpack
     ___asftadd
       ___ftadd
         ___ftpack
         ___awtoft (ARG)
           ___ftpack
           _getConv (ARG)
         ___ftdiv (ARG)
           ___ftpack
           ___awtoft (ARG)
             ___ftpack
             _getConv (ARG)
           _getConv (ARG)
         _getConv (ARG)
       ___ftsub (ARG)
         ___ftadd
           ___ftpack
           ___awtoft (ARG)
             ___ftpack
             _getConv (ARG)
           ___ftdiv (ARG)
             ___ftpack
             ___awtoft (ARG)
               ___ftpack
               _getConv (ARG)
             _getConv (ARG)
           _getConv (ARG)
         ___ftmul (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___ftpack
     ___asftdiv
       ___ftdiv
         ___ftpack
         ___awtoft (ARG)
           ___ftpack
           _getConv (ARG)
         _getConv (ARG)
     ___awtoft (ARG)
       ___ftpack
       _getConv (ARG)
     _getConv (ARG)
   ___asftmul
     ___ftmul
       ___ftpack
   ___fttol
   _uintToStr
     ___lwmod
     ___lwdiv
   _incVar
     _ee_write_byte
     ___awtoft
       ___ftpack
       _getConv (ARG)
     ___ftdiv
       ___ftpack
       ___awtoft (ARG)
         ___ftpack
         _getConv (ARG)
       _getConv (ARG)
     ___ftadd
       ___ftpack
       ___awtoft (ARG)
         ___ftpack
         _getConv (ARG)
       ___ftdiv (ARG)
         ___ftpack
         ___awtoft (ARG)
           ___ftpack
           _getConv (ARG)
         _getConv (ARG)
       _getConv (ARG)
   _decVar
     _ee_write_byte
     ___awtoft
       ___ftpack
       _getConv (ARG)
     ___ftdiv
       ___ftpack
       ___awtoft (ARG)
         ___ftpack
         _getConv (ARG)
       _getConv (ARG)
     ___ftadd
       ___ftpack
       ___awtoft (ARG)
         ___ftpack
         _getConv (ARG)
       ___ftdiv (ARG)
         ___ftpack
         ___awtoft (ARG)
           ___ftpack
           _getConv (ARG)
         _getConv (ARG)
       _getConv (ARG)

 _isr2 (ROOT)
   _isr_timer3
     i1_timerDriver
     _pulsPinDriver
   _isr_adc

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     41      C8       7       78.1%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     4D      6E       5       68.8%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     27      4C       1       80.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0      16       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     182      20        0.0%
DATA                 0      0     198       3        0.0%
CODE                 0      0       0       0        0.0%


HI-TECH Software PICC-18 Macro Assembler V9.80 build 11162 
Symbol Table                                                                                   Tue Apr 29 13:17:40 2025

                      ___asftadd@f2 0091           _actionsTimeoutShowSetting 215C  
                                 _x 01BF                                   _y 00BD  
                __end_of_systemInit 23F2                       ___asftadd@f1p 0094  
                       __CFG_CP0$ON 000000                        ___asftdiv@f2 007D  
                       __CFG_CP1$ON 000000                         __CFG_CP2$ON 000000  
                       __CFG_CP3$ON 000000                                  l41 272C  
                                l42 272A                         __CFG_CPB$ON 000000  
                       __CFG_CPD$ON 000000                         __CFG_BOR$ON 000000  
                                bsr 000FE0                         __CFG_BORV$1 000000  
                      ___asftmul@f2 0079                       ___asftdiv@f1p 0080  
                      ___ftadd@exp1 008A                        ___ftadd@exp2 0089  
                      ___ftadd@sign 0088                                 l110 1084  
                               l112 10BA                                 l201 03B8  
                               l114 10F0                                 l106 1018  
                               l131 12BE                                 l108 104E  
                               l133 12F2                                 l135 1326  
                               l400 0A46                                 l137 135A  
                               l129 128A                                 l501 0CA0  
                               l405 0A60                                 l333 085E  
                               l502 0CBC                                 l414 0A9E  
                               l342 08BC                                 l328 0844  
                               l433 0B10                                 l514 0CF8  
                               l442 0B4E                                 l419 0AB8  
                               l363 0942                                 l347 08D6  
                               l524 0D82                                 l508 0D6E  
                               l428 0AF6                                 l188 0332  
                               l517 0D5E                                 l461 0BC0  
                               l470 0BFE                                 l374 09A8  
                               l358 0928                                 l527 0DF0  
                               l447 0B68                                 l456 0BA6  
                               l475 0C18                                 l379 09C2  
                               l488 0C46                                 l489 0C62  
                               l694 2040                                 l695 204E  
             __end_ofi1_timerDriver 1DF8                                 _iir 18DC  
                               _isr 0008                        __CFG_IDLOC0$ 000000  
                      __CFG_IDLOC1$ 000000                        __CFG_IDLOC2$ 000000  
                      __CFG_IDLOC3$ 000000                        __CFG_IDLOC4$ 000000  
                      __CFG_IDLOC5$ 000000                        __CFG_IDLOC6$ 000000  
                      __CFG_IDLOC7$ 000000                                 wreg 000FE8  
                     ___asftmul@f1p 007C                __end_of_ee_read_byte 278C  
                      __CFG_LVP$OFF 000000                        ___ftdiv@cntr 0077  
                      ___ftdiv@sign 007C                        __CFG_WDT$OFF 000000  
                              l1200 187C                                l1201 1884  
                              l1211 1D12                                l1209 1CC8  
                              l1138 20D6                                l1180 17E2  
                              l1191 186A                                l1351 251C  
                              l1176 17BE                                l1361 25E6  
                              l7011 07C8                                l7005 0782  
                              l7111 0972                                l7031 0822  
                              l7023 0800                                l7015 07DC  
                              l7007 07B0                      i1timerDriver@i 0004  
                              ?_iir 0095                                l6305 0FE2  
                              l7121 0996                                l7211 0AD4  
                              l7115 0986                                l7107 095A  
                              l7043 084C                                l7027 080E  
                              l7019 07F0                                l6261 2436  
                              l6253 241A                                l6245 23FE  
                              l7037 0832                                l6407 1256  
                              l7223 0AFE                                l7151 09FE  
                              l7143 09E8                                l7127 09B0  
                              l7063 08AA                                l7055 0890  
                              l6513 219E                                l6273 0EDE  
                              l6257 242A                                l6249 240A  
                              l7313 0C4C                                l7241 0B3C  
                              l7217 0AE4                                l7057 089A  
                              l6355 1126                                l7411 0CE8  
                              l7235 0B2C                                l7163 0A24  
                              l7155 0A0A                                l7147 09F4  
                              l7139 09DE                                l7083 08F2  
                              l7307 0C34                                l6285 0F54  
                              l7325 0C78                                l7093 0916  
                              l7069 08C4                                l6375 115C  
                              l7271 0BAE                                l7247 0B56  
                              l7175 0A4E                                l7159 0A18  
                              l7087 0906                                l6617 21A4  
                              l6457 138E                                l6297 0FCA  
                              l7417 0CFE                                l7409 0CE4  
                              l7265 0B94                                l7193 0A8C  
                              l7169 0A34                                l6721 0288  
                              l6713 0226                                _ADFM 007E07  
                              l6387 11CE                                l7451 0D88  
                              l7339 0C7E                                l7283 0BDC  
                              l7259 0B84                                l7187 0A7C  
                              l7099 0930                                l6731 02B6  
                              ?_isr 0001                                l7701 2114  
                              l6485 2166                                l7365 0CA6  
                              l7357 0C8A                                l6821 0412  
                              l6813 03FE                                l6805 03C6  
                              l6725 02A8                                l6717 027E  
                              l6709 021E                                l7703 211E  
                              l6399 1240                                l7391 0CD8  
                              l7359 0C8E                                l7295 0C06  
                              l7199 0AA6                                l6911 0620  
                              l6489 2188                                l7617 2050  
                              l7377 0CD2                                l7289 0BEC  
                              l6921 064C                                l6905 0606  
                              l6833 044C                                l6817 0408  
                              l6825 0438                                l7651 1996  
                              l6755 0316                                l6763 0324  
                              l7725 26B8                                l7637 1904  
                              l6933 0678                                l6861 0554  
                              l6853 0526                                l6837 046C  
                              l6757 031A                                l7815 1CEE  
                              l7743 17F0                                l7911 1F48  
                              l7903 1F30                                l7487 21EE  
                              l6943 0698                                l6927 0660  
                              l6871 0580                                l6863 0558  
                              l6855 053C                                l6791 039C  
                              l6767 033C                                l6759 031E  
                              l7833 1BA0                                l7737 17CC  
                              l6961 06CE                                l6881 05AC  
                              l6873 0584                                l6857 0540  
                              l6793 03A0                                l7851 1BF4  
                              l7691 20DE                                l7771 183E  
                              l7915 1F5C                                l7907 1F38  
                              l7667 244C                                l7675 2488  
                              l6971 06FA                                l6947 06A2  
                              l6883 05B0                                l6867 056C  
                              l6795 03A4                                l7861 1C14  
                              l7837 1BCE                                l7693 20E2  
                              l7765 1826                                l7925 24EC  
                              l7909 1F44                                l6957 06C4  
                              l6877 0598                                l7855 1BFC  
                              l7695 20F6                                l7767 1830  
                              l7759 180A                                l7927 24F4  
                              l6983 0728                                l6967 06E4  
                              l6799 03AA                                l7865 1C1C  
                              l7777 185A                                l7769 1838  
                              l7953 25DC                                l7945 25BE  
                              l7937 2512                                l7929 24F8  
                              l7881 1EEE                                l6993 0754  
                              l6889 05CA                                l7699 2102  
                              l7779 1864                                l7947 25C6  
                              l7883 1EF8                                l6899 05F2  
                              l7797 1C9A                                l7789 189E  
                              l7949 25CA                                l6989 073E  
                              l7899 1F20                      ?_pulsPinDriver 0001  
                              _TMR0 000FD6                                _TMR3 000FB2  
                      __CFG_PWRT$ON 000000                        __CFG_WRT0$ON 000000  
                      __CFG_WRT1$ON 000000                        __CFG_WRT2$ON 000000  
                      __CFG_WRT3$ON 000000                        __CFG_WRTB$ON 000000  
                      __CFG_WRTC$ON 000000                                _isr2 0018  
                              _main 0090                        ___ftpack@arg 0060  
                      ___ftpack@exp 0063                                fsr0h 000FEA  
                              fsr1h 000FE2                                fsr0l 000FE9  
                              fsr2h 000FDA                                indf1 000FE7  
                              iir@n 00AA                                fsr1l 000FE1  
                              indf2 000FDF                                fsr2l 000FD9  
                              pclat 000FFA                                prodh 000FF4  
                              prodl 000FF3                                start 008C  
                      ___ftmul@cntr 0077                        ___ftmul@sign 0078  
                      ___fttol@exp1 006E                               ??_iir 0098  
                      ___fttol@lval 006A                               ??_isr 001A  
                     __CFG_PLLDIV$5 000000                               ?_isr2 0001  
                             ?_main 0001                               _ADRES 000FC3  
                             _EEADR 000FA9                     __end_of___ftadd 18C4  
                   __end_of___ftdiv 1D44                               u11010 1BB8  
                             u11015 1BB6                               u11050 1F8A  
                   __end_of___ftmul 1C56                               u11055 1F82  
                             u10601 18E6                               u10515 1E54  
                             u10611 18F8                               u10730 1780  
                             u10474 2222                               u10570 206A  
                   __end_of___ftsub 270A                               u10475 221E  
                             u10740 17A0                     __end_of___fttol 1F6E  
                             u10735 177E                               u10575 2060  
                             u10745 179E                               u10594 20AE  
                             u10595 20A8                               u10940 1C84  
                             u10960 1CB2                               u10945 1C82  
                             u10965 1CB0                               u10990 1B8A  
                             u10995 1B88                      __CFG_DEBUG$OFF 000000  
                   __end_of___lwdiv 2526                         fseek@offset 0015  
                   __end_of___lwmod 25F0                               i1l650 0052  
                             i1l653 0066                               i2l820 13F6  
                             i2l660 1FE8                               i2l821 1406  
                             i2l830 144C                               i2l822 140C  
                             i2l662 1FEC                               i2l831 1452  
                             i2l823 1410                               i2l815 13CA  
                             i2l663 1FF2                               i2l647 2342  
                             i2l840 1484                               i2l832 1456  
                             i2l824 1420                               i2l664 1FF6  
                             i2l841 1494                               i2l833 145C  
                             i2l825 1426                               i2l817 13DA  
                             i2l753 1AE6                               i2l850 14C8  
                             i2l842 149A                               i2l834 146C  
                             i2l826 142A                               i2l818 13E0  
                             i2l843 14A0                               i2l835 1470  
                             i2l827 143A                               i2l819 13E6  
                             i2l836 1476                               i2l828 1442  
                             i2l845 14B0                               i2l837 147C  
                             i2l829 1448                               i2l846 14B6  
                             i2l847 14BC                               i2l839 1480  
                             i2l848 14C2                               _PORTC 000F82  
                   __end_of_getConv 27BC                      __CFG_EBTR0$OFF 000000  
                    __CFG_EBTR1$OFF 000000                      __CFG_EBTR2$OFF 000000  
                    __CFG_EBTR3$OFF 000000                      __CFG_EBTRB$OFF 000000  
                     ___awtoft@sign 006B                               _fgetc 256E  
                   _isr_timer3$1607 0008                               _fseek 1A4E  
                   adcDriver@ch2Cnv 0068                       ___ftpack@sign 0064  
                   __end_of_isr_adc 27AE                               _state 003A  
                     _medicionFloat 00C6                        uintToStr@num 0067  
                      uintToStr@str 0069                               tablat 000FF5  
                             plusw2 000FDB                        pulsPinInit@i 0066  
                             status 000FD8                      __CFG_MCLRE$OFF 000000  
                      __end_of_isr2 008C                        __end_of_main 23F2  
                            ??_isr2 000A                              ??_main 00AB  
                     ___fttol@sign1 0069                       __activetblptr 000000  
                _timerDelayConstant 0100                              ?_fgetc 0013  
                   ??_pulsPinDriver 0001                              ?_fseek 0013  
                            _EEDATA 000FA8                              _EECON2 000FA7  
                  __end_of_adcSetup 277A                    __end_of___awtoft 26DC  
                  __end_of___ftpack 2152                              i1l6141 005A  
                            i1l6127 2548                              i1l6143 0062  
                            i1l6135 003C                              i1l6137 0044  
                            i1l6139 004C                              i1l5803 16DC  
                            i1l5805 16E2                              i1l5813 16E8  
                            i1l5815 1704                              i1l5819 170E  
                            i1l5781 1696                              i1l5783 169C  
                            i1l5791 16A2                              i1l5767 15F0  
                            i2l5703 2030                              i2l5731 1AC8  
                            i2l5723 1AB4                              i2l5661 232E  
                            i2l5719 1A8A                              i2l5663 2336  
                            i2l5753 258C                              i2l5737 1AD8  
                            i2l5681 1FD2                              i2l5665 233E  
                            i2l5759 14D0                              i2l5687 1FFA  
                            i2l5679 1FD0                              i2l5689 200E  
                            _TRISA0 007C90                              _TRISA1 007C91  
                            _TRISA2 007C92                              _TRISB1 007C99  
                            _TRISA3 007C93                              _TRISB2 007C9A  
                            _TRISA4 007C94                              _TRISB3 007C9B  
                            _TRISA5 007C95                              _TRISB4 007C9C  
                            _TRISB5 007C9D                              _TRISB6 007C9E  
                            _TRISB7 007C9F                              _TRISC6 007CA6  
                            _eLoMem 0028               __end_of_ee_write_byte 2736  
                            _eUpMem 002A                              _decVar 1146  
                         ??___ftadd 0083                           ??___ftdiv 0072  
                         ??___ftmul 006E                           ??___ftsub 0091  
                         ??___fttol 0064                           ??___lwdiv 0064  
                            _vLoMem 0030                           ??___lwmod 0064  
                            _xLoMem 0034                              _incVar 0EC6  
                            _escala 00B2                              _vUpMem 0032  
                            _xUpMem 0036                              clear_0 227C  
                            clear_1 2288                              clear_2 2294  
                            _setInc 003C                           ??_getConv 0062  
             __size_of_ee_read_byte 0012               ___ftmul@f3_as_product 0074  
                      ?_timerDriver 0001                        __pdataCOMRAM 003C  
__size_of_actionsTimeoutShowSetting 008E                           ??_isr_adc 0001  
                            tblptrh 000FF7                              tblptrl 000FF6  
                            tblptru 000FF8             ??_endTestDisplayActions 0060  
                __size_of_adcDriver 0096                  __size_of___asftadd 003C  
                __size_of___asftdiv 003C                  __size_of___asftmul 003C  
                        __accesstop 0060                     __CFG_PBADEN$OFF 000000  
                        ___ftadd@f1 007D                          ___ftadd@f2 0080  
                        ___ftdiv@f1 006C                          ___ftdiv@f2 006F  
                        ___ftdiv@f3 0078                        ?_pulsPinInit 0001  
                        ___awtoft@c 0068                          ___ftmul@f1 0068  
                        ___ftmul@f2 006B                  __size_of_char2pins 01AA  
                        ___ftsub@f1 008B                          ___ftsub@f2 008E  
                        ___fttol@f1 0060                      __pcstackCOMRAM 0001  
                      _ee_read_byte 277A                        __pidataBANK0 27BC  
                      __pidataBANK1 2492                       __end_of_fgetc 25B2  
                     __end_of_fseek 1AF4                          _advModeMem 0038  
 __end_of_actionsTimeoutShowSetting 21EA                             ??_fgetc 0015  
                           ??_fseek 0019                          __pbssBANK0 00AD  
                        __pbssBANK1 018B                  __size_of_enterMenu 0052  
                           ?_decVar 0001                             ?_incVar 0001  
                 __end_of_adcDriver 20CA                   __end_of___asftadd 2668  
                 __end_of___asftdiv 26A4                   __end_of___asftmul 262C  
                         ?_adcSetup 0001                           ?___awtoft 0068  
                         ?___ftpack 0060                  __size_of_uintToStr 004E  
                        _brilloToff 0139                   __end_of_char2pins 156E  
                        char2pins@c 0013                             __Hparam 0000  
            __size_ofi1_timerDriver 00AA                             __Lparam 0000  
                           ___ftadd 1768                             ___ftdiv 1C6C  
                   __size_of_decVar 025E                             ___ftmul 1B72  
                           ___ftsub 26DC                             ___fttol 1EE2  
                           ___lwdiv 24DC                             ___lwmod 25B2  
                   __size_of_incVar 0276                     __CFG_STVREN$OFF 000000  
                           __pcinit 2276                   __end_of_enterMenu 2444  
                        ??_adcSetup 0060                          ??___awtoft 006B  
                        ??___ftpack 0065                             __ramtop 0800  
                           _getConv 27AE                             _tOnFlag 003B  
                           __ptext0 0090                             __ptext1 23F2  
                           __ptext2 277A                             __ptext3 0EC6  
                           __ptext4 2736                             __ptext5 1146  
                           __ptext6 270A                             __ptext7 2444  
                           __ptext8 27AE                             __ptext9 18DC  
                           _display 00B5                           _T0CONbits 000FD5  
                      __size_of_iir 015E                        __size_of_isr 2374  
                         _T3CONbits 000FB1                             _isr_adc 279E  
                           _muxFile 0143                __size_of_timerDriver 00A8  
                           _pulsPin 003D                          _isr_timer0 1F92  
                        _isr_timer3 2526                      __pintcode_body 2300  
                           fseek@fp 0013                end_of_initialization 22FA  
                           int_func 2300                 ee_read_byte@address 0060  
                 __end_of_uintToStr 2492                      pulsPinDriver@i 0007  
              __size_of_pulsPinInit 007E                             postdec1 000FE5  
                           postdec2 000FDD                             postinc0 000FEE  
                           postinc1 000FE6                             postinc2 000FDE  
                         _PORTAbits 000F80                           _PORTBbits 000F81  
                         _PORTCbits 000F82                       i1_timerDriver 1D4E  
             __end_of_pulsPinDriver 1718      __size_of_endTestDisplayActions 002A  
     __end_of_endTestDisplayActions 2760                         ___ftdiv@exp 007B  
                       ___ftmul@exp 0073                      __end_of_decVar 13A4  
                     __pidataCOMRAM 278C                      __end_of_incVar 113C  
                    ?i1_timerDriver 0001                 start_initialization 2276  
                        _systemInit 237C                         __end_of_iir 1A3A  
                       __end_of_isr 237C              __size_of_ee_write_byte 002C  
                       ?_isr_timer0 0001                         ?_isr_timer3 0001  
                      _ignoreNextFp 00BB                            ??_decVar 008B  
                          ??_incVar 008B                         __pdataBANK0 00C9  
                       __pdataBANK1 0100                    __CFG_LPT1OSC$OFF 000000  
                 __size_of_adcSetup 001A                   __size_of___awtoft 0038  
                 __size_of___ftpack 0088                           _adcDriver 2034  
                         ___asftadd 262C                ee_write_byte@address 0061  
                         ___asftdiv 2668                           ___asftmul 25F0  
                       __pbssCOMRAM 0028                       __pcstackBANK0 0060  
                     __pcstackBANK1 014A                           _adcStruct 00AD  
        ?_actionsTimeoutShowSetting 0001                           _char2pins 13C4  
                ee_write_byte@_data 0060                           _main$2642 014A  
                  ___lwdiv@dividend 0060                           _escDecMem 002C  
                         __pintcode 0008                           _escEntMem 002E  
                     _ee_write_byte 270A                            ?___ftadd 007D  
                          ?___ftdiv 006C                            ?___ftmul 0068  
                          ?___ftsub 008B                            ?___fttol 0060  
                          ?___lwdiv 0060                            ?___lwmod 0060  
               __size_of_isr_timer0 00A2                 __size_of_isr_timer3 0048  
                       __pintcodelo 0018                           _brilloMem 0039  
                          ?_getConv 0060                           _brilloTon 013E  
                   ??i1_timerDriver 0001                          ?_adcDriver 0001  
                        ?___asftadd 0091                          ?___asftdiv 007D  
                        ?___asftmul 0079                           _enterMenu 23F2  
                          ?_isr_adc 0001                         ?_systemInit 0001  
                  ___lwdiv@quotient 0065                      __size_of_fgetc 0044  
                    __size_of_fseek 00A6                          ?_char2pins 0001  
                          _IPR1bits 000F9F                            _IPR2bits 000FA2  
                          _PIE1bits 000F9D                            _PIE2bits 000FA0  
                          _PIR1bits 000F9E                            i1u770_20 004C  
                          i1u770_21 004A                            i1u771_20 005A  
                          i1u771_21 0058                            _PIR2bits 000FA1  
                          i1u772_20 0062                            i1u772_21 0060  
                          i1u764_25 1D96                            i1u694_24 1624  
                          i1u694_25 1620                           _muxBuffer 00C9  
                          i1u769_20 0044                            i1u769_21 0042  
                          i2u681_40 2336                            i2u681_41 2334  
                          i2u682_40 233E                            i2u682_41 233C  
                    ?_ee_write_byte 0060                            _UCFGbits 000F6F  
                          _RCONbits 000FD0                           _uintToStr 2444  
                        _ADCON0bits 000FC2                          _ADCON1bits 000FC1  
                        _ADCON2bits 000FC0                       ??_timerDriver 0060  
                        ?_enterMenu 0001                           fseek@mode 0017  
                       _INTCON2bits 000FF1                           copy_data0 22AE  
                         copy_data1 22CE                           copy_data2 22EE  
                        uintToStr@i 006B                          _EECON1bits 000FA6  
                     ??_pulsPinInit 0060                            __Hrparam 0000  
                          __Lrparam 0000                       ?_ee_read_byte 0001  
               __size_of_systemInit 0076       _actionsTimeoutShowSetting$438 0060  
                       _measurement 00B7                    __size_of___ftadd 015C  
                  __size_of___ftdiv 00D8                    __size_of___ftmul 00E4  
                  __size_of___ftsub 002E                    __size_of___fttol 008C  
                  __size_of___lwdiv 004A                    __size_of___lwmod 003E  
                        ?_uintToStr 0067                            _adcSetup 2760  
                          ___awtoft 26A4                            ___ftpack 20CA  
                  __size_of_getConv 000E                         ??_adcDriver 0060  
                       ??___asftadd 0094                         ??___asftdiv 0080  
                       ??___asftmul 007C                            _main$441 014D  
                          _main$450 015F                            _main$442 014F  
                          _main$451 0161                            _main$443 0151  
                          _main$460 0173                            _main$452 0163  
                          _main$444 0153                            _main$461 0175  
                          _main$453 0165                            _main$445 0155  
                          _main$470 0187                            _main$462 0177  
                          _main$454 0167                            _main$446 0157  
                          _main$471 0189                            _main$463 0179  
                          _main$455 0169                            _main$447 0159  
                          _main$464 017B                            _main$456 016B  
                          _main$448 015B                            _main$465 017D  
                          _main$457 016D                            _main$449 015D  
                          _main$466 017F                            _main$458 016F  
                          _main$467 0181                            _main$459 0171  
                          _main$468 0183                            _main$469 0185  
                  __size_of_isr_adc 0010                     ___lwdiv@divisor 0062  
                   ___lwdiv@counter 0064                            __ptext10 2034  
                          __ptext11 215C                            __ptext20 25B2  
                          __ptext12 21EA                            __ptext21 25F0  
                          __ptext13 237C                            __ptext30 2526  
                          __ptext22 262C                            __ptext14 1E20  
                          __ptext31 15EE                            __ptext23 1768  
                          __ptext15 2760                            __ptext32 1D4E  
                          __ptext24 2668                            __ptext16 26A4  
                          __ptext25 20CA                            __ptext17 26DC  
                          __ptext34 1F92                            __ptext26 1C6C  
                          __ptext18 1EE2                            __ptext35 1A4E  
                          __ptext27 1B72                            __ptext19 24DC  
                          __ptext36 256E                            __ptext37 13C4  
                          __ptext29 279E                            __ptext38 0000  
                      ??_isr_timer0 001A                        ??_isr_timer3 0008  
               __end_of_timerDriver 1EC8                         ??_char2pins 0013  
                     __size_of_isr2 0074                       __size_of_main 2362  
                          iir@F4235 0127                            iir@F4237 0130  
             _endTestDisplayActions 2736                            iir@ACoef 0098  
                          iir@BCoef 00A1                     ??_ee_write_byte 0061  
                          _segments 00B9                      ??_ee_read_byte 0060  
                          _timerMem 018B                 __end_of_pulsPinInit 2268  
                __end_of_isr_timer0 2034                  __end_of_isr_timer3 256E  
            __size_of_pulsPinDriver 012A               __CFG_CPUDIV$OSC1_PLL2 000000  
                       ??_enterMenu 0060                          _INTCONbits 000FF2  
                      iir@NewSample 0095         ??_actionsTimeoutShowSetting 0060  
                   uintToStr@strLen 006A                            intlevel1 0000  
                          intlevel2 0000                    ___lwmod@dividend 0060  
                        _OSCCONbits 000FD3                         fgetc@stream 0013  
                       ??_uintToStr 006B                         _timerDriver 1E20  
                   ___lwmod@divisor 0062                     ___lwmod@counter 0064  
                      ??_systemInit 0060                        timerDriver@i 0063  
                __CFG_FOSC$HSPLL_HS 000000                       _pulsPinBuffer 00BC  
                     _pulsPinDriver 15EE              ?_endTestDisplayActions 0001  
                       _pulsPinInit 21EA  
